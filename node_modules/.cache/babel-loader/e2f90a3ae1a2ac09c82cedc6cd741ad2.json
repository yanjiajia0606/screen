{"remainingRequest":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/thread-loader/dist/cjs.js!/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js!/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/common/model/textModelSearch.js","dependencies":[{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/common/model/textModelSearch.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/babel.config.js","mtime":1668271197000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js","mtime":456789000000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICIvVXNlcnMveWFuamlhamlhL0Rlc2t0b3Avd29ya3NwYWNlL2F2dWUtZGF0YS1uZXcvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NsYXNzQ2FsbENoZWNrLmpzIjsKaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tICIvVXNlcnMveWFuamlhamlhL0Rlc2t0b3Avd29ya3NwYWNlL2F2dWUtZGF0YS1uZXcvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmV4ZWMuanMiOwovKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogKiAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLgogKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8KaW1wb3J0ICogYXMgc3RyaW5ncyBmcm9tICcuLi8uLi8uLi9iYXNlL2NvbW1vbi9zdHJpbmdzLmpzJzsKaW1wb3J0IHsgZ2V0TWFwRm9yV29yZFNlcGFyYXRvcnMgfSBmcm9tICcuLi9jb3JlL3dvcmRDaGFyYWN0ZXJDbGFzc2lmaWVyLmpzJzsKaW1wb3J0IHsgUG9zaXRpb24gfSBmcm9tICcuLi9jb3JlL3Bvc2l0aW9uLmpzJzsKaW1wb3J0IHsgUmFuZ2UgfSBmcm9tICcuLi9jb3JlL3JhbmdlLmpzJzsKaW1wb3J0IHsgRmluZE1hdGNoLCBTZWFyY2hEYXRhIH0gZnJvbSAnLi4vbW9kZWwuanMnOwp2YXIgTElNSVRfRklORF9DT1VOVCA9IDk5OTsKZXhwb3J0IHZhciBTZWFyY2hQYXJhbXMgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIFNlYXJjaFBhcmFtcyhzZWFyY2hTdHJpbmcsIGlzUmVnZXgsIG1hdGNoQ2FzZSwgd29yZFNlcGFyYXRvcnMpIHsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTZWFyY2hQYXJhbXMpOwogICAgdGhpcy5zZWFyY2hTdHJpbmcgPSBzZWFyY2hTdHJpbmc7CiAgICB0aGlzLmlzUmVnZXggPSBpc1JlZ2V4OwogICAgdGhpcy5tYXRjaENhc2UgPSBtYXRjaENhc2U7CiAgICB0aGlzLndvcmRTZXBhcmF0b3JzID0gd29yZFNlcGFyYXRvcnM7CiAgfQogIF9jcmVhdGVDbGFzcyhTZWFyY2hQYXJhbXMsIFt7CiAgICBrZXk6ICJwYXJzZVNlYXJjaFJlcXVlc3QiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlU2VhcmNoUmVxdWVzdCgpIHsKICAgICAgaWYgKHRoaXMuc2VhcmNoU3RyaW5nID09PSAnJykgewogICAgICAgIHJldHVybiBudWxsOwogICAgICB9CiAgICAgIC8vIFRyeSB0byBjcmVhdGUgYSBSZWdFeHAgb3V0IG9mIHRoZSBwYXJhbXMKICAgICAgdmFyIG11bHRpbGluZTsKICAgICAgaWYgKHRoaXMuaXNSZWdleCkgewogICAgICAgIG11bHRpbGluZSA9IGlzTXVsdGlsaW5lUmVnZXhTb3VyY2UodGhpcy5zZWFyY2hTdHJpbmcpOwogICAgICB9IGVsc2UgewogICAgICAgIG11bHRpbGluZSA9IHRoaXMuc2VhcmNoU3RyaW5nLmluZGV4T2YoJ1xuJykgPj0gMDsKICAgICAgfQogICAgICB2YXIgcmVnZXggPSBudWxsOwogICAgICB0cnkgewogICAgICAgIHJlZ2V4ID0gc3RyaW5ncy5jcmVhdGVSZWdFeHAodGhpcy5zZWFyY2hTdHJpbmcsIHRoaXMuaXNSZWdleCwgewogICAgICAgICAgbWF0Y2hDYXNlOiB0aGlzLm1hdGNoQ2FzZSwKICAgICAgICAgIHdob2xlV29yZDogZmFsc2UsCiAgICAgICAgICBtdWx0aWxpbmU6IG11bHRpbGluZSwKICAgICAgICAgIGdsb2JhbDogdHJ1ZSwKICAgICAgICAgIHVuaWNvZGU6IHRydWUKICAgICAgICB9KTsKICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgIH0KICAgICAgaWYgKCFyZWdleCkgewogICAgICAgIHJldHVybiBudWxsOwogICAgICB9CiAgICAgIHZhciBjYW5Vc2VTaW1wbGVTZWFyY2ggPSAhdGhpcy5pc1JlZ2V4ICYmICFtdWx0aWxpbmU7CiAgICAgIGlmIChjYW5Vc2VTaW1wbGVTZWFyY2ggJiYgdGhpcy5zZWFyY2hTdHJpbmcudG9Mb3dlckNhc2UoKSAhPT0gdGhpcy5zZWFyY2hTdHJpbmcudG9VcHBlckNhc2UoKSkgewogICAgICAgIC8vIGNhc2luZyBtaWdodCBtYWtlIGEgZGlmZmVyZW5jZQogICAgICAgIGNhblVzZVNpbXBsZVNlYXJjaCA9IHRoaXMubWF0Y2hDYXNlOwogICAgICB9CiAgICAgIHJldHVybiBuZXcgU2VhcmNoRGF0YShyZWdleCwgdGhpcy53b3JkU2VwYXJhdG9ycyA/IGdldE1hcEZvcldvcmRTZXBhcmF0b3JzKHRoaXMud29yZFNlcGFyYXRvcnMpIDogbnVsbCwgY2FuVXNlU2ltcGxlU2VhcmNoID8gdGhpcy5zZWFyY2hTdHJpbmcgOiBudWxsKTsKICAgIH0KICB9XSk7CiAgcmV0dXJuIFNlYXJjaFBhcmFtczsKfSgpOwpleHBvcnQgZnVuY3Rpb24gaXNNdWx0aWxpbmVSZWdleFNvdXJjZShzZWFyY2hTdHJpbmcpIHsKICBpZiAoIXNlYXJjaFN0cmluZyB8fCBzZWFyY2hTdHJpbmcubGVuZ3RoID09PSAwKSB7CiAgICByZXR1cm4gZmFsc2U7CiAgfQogIGZvciAodmFyIGkgPSAwLCBsZW4gPSBzZWFyY2hTdHJpbmcubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHsKICAgIHZhciBjaENvZGUgPSBzZWFyY2hTdHJpbmcuY2hhckNvZGVBdChpKTsKICAgIGlmIChjaENvZGUgPT09IDEwIC8qIENoYXJDb2RlLkxpbmVGZWVkICovKSB7CiAgICAgIHJldHVybiB0cnVlOwogICAgfQogICAgaWYgKGNoQ29kZSA9PT0gOTIgLyogQ2hhckNvZGUuQmFja3NsYXNoICovKSB7CiAgICAgIC8vIG1vdmUgdG8gbmV4dCBjaGFyCiAgICAgIGkrKzsKICAgICAgaWYgKGkgPj0gbGVuKSB7CiAgICAgICAgLy8gc3RyaW5nIGVuZHMgd2l0aCBhIFwKICAgICAgICBicmVhazsKICAgICAgfQogICAgICB2YXIgbmV4dENoQ29kZSA9IHNlYXJjaFN0cmluZy5jaGFyQ29kZUF0KGkpOwogICAgICBpZiAobmV4dENoQ29kZSA9PT0gMTEwIC8qIENoYXJDb2RlLm4gKi8gfHwgbmV4dENoQ29kZSA9PT0gMTE0IC8qIENoYXJDb2RlLnIgKi8gfHwgbmV4dENoQ29kZSA9PT0gODcgLyogQ2hhckNvZGUuVyAqLykgewogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CiAgICB9CiAgfQogIHJldHVybiBmYWxzZTsKfQpleHBvcnQgZnVuY3Rpb24gY3JlYXRlRmluZE1hdGNoKHJhbmdlLCByYXdNYXRjaGVzLCBjYXB0dXJlTWF0Y2hlcykgewogIGlmICghY2FwdHVyZU1hdGNoZXMpIHsKICAgIHJldHVybiBuZXcgRmluZE1hdGNoKHJhbmdlLCBudWxsKTsKICB9CiAgdmFyIG1hdGNoZXMgPSBbXTsKICBmb3IgKHZhciBpID0gMCwgbGVuID0gcmF3TWF0Y2hlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykgewogICAgbWF0Y2hlc1tpXSA9IHJhd01hdGNoZXNbaV07CiAgfQogIHJldHVybiBuZXcgRmluZE1hdGNoKHJhbmdlLCBtYXRjaGVzKTsKfQp2YXIgTGluZUZlZWRDb3VudGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBMaW5lRmVlZENvdW50ZXIodGV4dCkgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIExpbmVGZWVkQ291bnRlcik7CiAgICB2YXIgbGluZUZlZWRzT2Zmc2V0cyA9IFtdOwogICAgdmFyIGxpbmVGZWVkc09mZnNldHNMZW4gPSAwOwogICAgZm9yICh2YXIgaSA9IDAsIHRleHRMZW4gPSB0ZXh0Lmxlbmd0aDsgaSA8IHRleHRMZW47IGkrKykgewogICAgICBpZiAodGV4dC5jaGFyQ29kZUF0KGkpID09PSAxMCAvKiBDaGFyQ29kZS5MaW5lRmVlZCAqLykgewogICAgICAgIGxpbmVGZWVkc09mZnNldHNbbGluZUZlZWRzT2Zmc2V0c0xlbisrXSA9IGk7CiAgICAgIH0KICAgIH0KICAgIHRoaXMuX2xpbmVGZWVkc09mZnNldHMgPSBsaW5lRmVlZHNPZmZzZXRzOwogIH0KICBfY3JlYXRlQ2xhc3MoTGluZUZlZWRDb3VudGVyLCBbewogICAga2V5OiAiZmluZExpbmVGZWVkQ291bnRCZWZvcmVPZmZzZXQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGZpbmRMaW5lRmVlZENvdW50QmVmb3JlT2Zmc2V0KG9mZnNldCkgewogICAgICB2YXIgbGluZUZlZWRzT2Zmc2V0cyA9IHRoaXMuX2xpbmVGZWVkc09mZnNldHM7CiAgICAgIHZhciBtaW4gPSAwOwogICAgICB2YXIgbWF4ID0gbGluZUZlZWRzT2Zmc2V0cy5sZW5ndGggLSAxOwogICAgICBpZiAobWF4ID09PSAtMSkgewogICAgICAgIC8vIG5vIGxpbmUgZmVlZHMKICAgICAgICByZXR1cm4gMDsKICAgICAgfQogICAgICBpZiAob2Zmc2V0IDw9IGxpbmVGZWVkc09mZnNldHNbMF0pIHsKICAgICAgICAvLyBiZWZvcmUgZmlyc3QgbGluZSBmZWVkCiAgICAgICAgcmV0dXJuIDA7CiAgICAgIH0KICAgICAgd2hpbGUgKG1pbiA8IG1heCkgewogICAgICAgIHZhciBtaWQgPSBtaW4gKyAoKG1heCAtIG1pbikgLyAyID4+IDApOwogICAgICAgIGlmIChsaW5lRmVlZHNPZmZzZXRzW21pZF0gPj0gb2Zmc2V0KSB7CiAgICAgICAgICBtYXggPSBtaWQgLSAxOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBpZiAobGluZUZlZWRzT2Zmc2V0c1ttaWQgKyAxXSA+PSBvZmZzZXQpIHsKICAgICAgICAgICAgLy8gYmluZ28hCiAgICAgICAgICAgIG1pbiA9IG1pZDsKICAgICAgICAgICAgbWF4ID0gbWlkOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgbWluID0gbWlkICsgMTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgICAgcmV0dXJuIG1pbiArIDE7CiAgICB9CiAgfV0pOwogIHJldHVybiBMaW5lRmVlZENvdW50ZXI7Cn0oKTsKZXhwb3J0IHZhciBUZXh0TW9kZWxTZWFyY2ggPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIFRleHRNb2RlbFNlYXJjaCgpIHsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUZXh0TW9kZWxTZWFyY2gpOwogIH0KICBfY3JlYXRlQ2xhc3MoVGV4dE1vZGVsU2VhcmNoLCBudWxsLCBbewogICAga2V5OiAiZmluZE1hdGNoZXMiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGZpbmRNYXRjaGVzKG1vZGVsLCBzZWFyY2hQYXJhbXMsIHNlYXJjaFJhbmdlLCBjYXB0dXJlTWF0Y2hlcywgbGltaXRSZXN1bHRDb3VudCkgewogICAgICB2YXIgc2VhcmNoRGF0YSA9IHNlYXJjaFBhcmFtcy5wYXJzZVNlYXJjaFJlcXVlc3QoKTsKICAgICAgaWYgKCFzZWFyY2hEYXRhKSB7CiAgICAgICAgcmV0dXJuIFtdOwogICAgICB9CiAgICAgIGlmIChzZWFyY2hEYXRhLnJlZ2V4Lm11bHRpbGluZSkgewogICAgICAgIHJldHVybiB0aGlzLl9kb0ZpbmRNYXRjaGVzTXVsdGlsaW5lKG1vZGVsLCBzZWFyY2hSYW5nZSwgbmV3IFNlYXJjaGVyKHNlYXJjaERhdGEud29yZFNlcGFyYXRvcnMsIHNlYXJjaERhdGEucmVnZXgpLCBjYXB0dXJlTWF0Y2hlcywgbGltaXRSZXN1bHRDb3VudCk7CiAgICAgIH0KICAgICAgcmV0dXJuIHRoaXMuX2RvRmluZE1hdGNoZXNMaW5lQnlMaW5lKG1vZGVsLCBzZWFyY2hSYW5nZSwgc2VhcmNoRGF0YSwgY2FwdHVyZU1hdGNoZXMsIGxpbWl0UmVzdWx0Q291bnQpOwogICAgfQogICAgLyoqCiAgICAgKiBNdWx0aWxpbmUgc2VhcmNoIGFsd2F5cyBleGVjdXRlcyBvbiB0aGUgbGluZXMgY29uY2F0ZW5hdGVkIHdpdGggXG4uCiAgICAgKiBXZSBtdXN0IHRoZXJlZm9yZSBjb21wZW5zYXRlIGZvciB0aGUgY291bnQgb2YgXG4gaW4gY2FzZSB0aGUgbW9kZWwgaXMgQ1JMRgogICAgICovCiAgfSwgewogICAga2V5OiAiX2dldE11bHRpbGluZU1hdGNoUmFuZ2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9nZXRNdWx0aWxpbmVNYXRjaFJhbmdlKG1vZGVsLCBkZWx0YU9mZnNldCwgdGV4dCwgbGZDb3VudGVyLCBtYXRjaEluZGV4LCBtYXRjaDApIHsKICAgICAgdmFyIHN0YXJ0T2Zmc2V0OwogICAgICB2YXIgbGluZUZlZWRDb3VudEJlZm9yZU1hdGNoID0gMDsKICAgICAgaWYgKGxmQ291bnRlcikgewogICAgICAgIGxpbmVGZWVkQ291bnRCZWZvcmVNYXRjaCA9IGxmQ291bnRlci5maW5kTGluZUZlZWRDb3VudEJlZm9yZU9mZnNldChtYXRjaEluZGV4KTsKICAgICAgICBzdGFydE9mZnNldCA9IGRlbHRhT2Zmc2V0ICsgbWF0Y2hJbmRleCArIGxpbmVGZWVkQ291bnRCZWZvcmVNYXRjaCAvKiBhZGQgYXMgbWFueSBcciBhcyB0aGVyZSB3ZXJlIFxuICovOwogICAgICB9IGVsc2UgewogICAgICAgIHN0YXJ0T2Zmc2V0ID0gZGVsdGFPZmZzZXQgKyBtYXRjaEluZGV4OwogICAgICB9CiAgICAgIHZhciBlbmRPZmZzZXQ7CiAgICAgIGlmIChsZkNvdW50ZXIpIHsKICAgICAgICB2YXIgbGluZUZlZWRDb3VudEJlZm9yZUVuZE9mTWF0Y2ggPSBsZkNvdW50ZXIuZmluZExpbmVGZWVkQ291bnRCZWZvcmVPZmZzZXQobWF0Y2hJbmRleCArIG1hdGNoMC5sZW5ndGgpOwogICAgICAgIHZhciBsaW5lRmVlZENvdW50SW5NYXRjaCA9IGxpbmVGZWVkQ291bnRCZWZvcmVFbmRPZk1hdGNoIC0gbGluZUZlZWRDb3VudEJlZm9yZU1hdGNoOwogICAgICAgIGVuZE9mZnNldCA9IHN0YXJ0T2Zmc2V0ICsgbWF0Y2gwLmxlbmd0aCArIGxpbmVGZWVkQ291bnRJbk1hdGNoIC8qIGFkZCBhcyBtYW55IFxyIGFzIHRoZXJlIHdlcmUgXG4gKi87CiAgICAgIH0gZWxzZSB7CiAgICAgICAgZW5kT2Zmc2V0ID0gc3RhcnRPZmZzZXQgKyBtYXRjaDAubGVuZ3RoOwogICAgICB9CiAgICAgIHZhciBzdGFydFBvc2l0aW9uID0gbW9kZWwuZ2V0UG9zaXRpb25BdChzdGFydE9mZnNldCk7CiAgICAgIHZhciBlbmRQb3NpdGlvbiA9IG1vZGVsLmdldFBvc2l0aW9uQXQoZW5kT2Zmc2V0KTsKICAgICAgcmV0dXJuIG5ldyBSYW5nZShzdGFydFBvc2l0aW9uLmxpbmVOdW1iZXIsIHN0YXJ0UG9zaXRpb24uY29sdW1uLCBlbmRQb3NpdGlvbi5saW5lTnVtYmVyLCBlbmRQb3NpdGlvbi5jb2x1bW4pOwogICAgfQogIH0sIHsKICAgIGtleTogIl9kb0ZpbmRNYXRjaGVzTXVsdGlsaW5lIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBfZG9GaW5kTWF0Y2hlc011bHRpbGluZShtb2RlbCwgc2VhcmNoUmFuZ2UsIHNlYXJjaGVyLCBjYXB0dXJlTWF0Y2hlcywgbGltaXRSZXN1bHRDb3VudCkgewogICAgICB2YXIgZGVsdGFPZmZzZXQgPSBtb2RlbC5nZXRPZmZzZXRBdChzZWFyY2hSYW5nZS5nZXRTdGFydFBvc2l0aW9uKCkpOwogICAgICAvLyBXZSBhbHdheXMgZXhlY3V0ZSBtdWx0aWxpbmUgc2VhcmNoIG92ZXIgdGhlIGxpbmVzIGpvaW5lZCB3aXRoIFxuCiAgICAgIC8vIFRoaXMgbWFrZXMgaXQgdGhhdCBcbiB3aWxsIG1hdGNoIHRoZSBFT0wgZm9yIGJvdGggQ1JMRiBhbmQgTEYgbW9kZWxzCiAgICAgIC8vIFdlIGNvbXBlbnNhdGUgZm9yIG9mZnNldCBlcnJvcnMgaW4gYF9nZXRNdWx0aWxpbmVNYXRjaFJhbmdlYAogICAgICB2YXIgdGV4dCA9IG1vZGVsLmdldFZhbHVlSW5SYW5nZShzZWFyY2hSYW5nZSwgMSAvKiBFbmRPZkxpbmVQcmVmZXJlbmNlLkxGICovKTsKICAgICAgdmFyIGxmQ291bnRlciA9IG1vZGVsLmdldEVPTCgpID09PSAnXHJcbicgPyBuZXcgTGluZUZlZWRDb3VudGVyKHRleHQpIDogbnVsbDsKICAgICAgdmFyIHJlc3VsdCA9IFtdOwogICAgICB2YXIgY291bnRlciA9IDA7CiAgICAgIHZhciBtOwogICAgICBzZWFyY2hlci5yZXNldCgwKTsKICAgICAgd2hpbGUgKG0gPSBzZWFyY2hlci5uZXh0KHRleHQpKSB7CiAgICAgICAgcmVzdWx0W2NvdW50ZXIrK10gPSBjcmVhdGVGaW5kTWF0Y2godGhpcy5fZ2V0TXVsdGlsaW5lTWF0Y2hSYW5nZShtb2RlbCwgZGVsdGFPZmZzZXQsIHRleHQsIGxmQ291bnRlciwgbS5pbmRleCwgbVswXSksIG0sIGNhcHR1cmVNYXRjaGVzKTsKICAgICAgICBpZiAoY291bnRlciA+PSBsaW1pdFJlc3VsdENvdW50KSB7CiAgICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICAgIH0KICAgICAgfQogICAgICByZXR1cm4gcmVzdWx0OwogICAgfQogIH0sIHsKICAgIGtleTogIl9kb0ZpbmRNYXRjaGVzTGluZUJ5TGluZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX2RvRmluZE1hdGNoZXNMaW5lQnlMaW5lKG1vZGVsLCBzZWFyY2hSYW5nZSwgc2VhcmNoRGF0YSwgY2FwdHVyZU1hdGNoZXMsIGxpbWl0UmVzdWx0Q291bnQpIHsKICAgICAgdmFyIHJlc3VsdCA9IFtdOwogICAgICB2YXIgcmVzdWx0TGVuID0gMDsKICAgICAgLy8gRWFybHkgY2FzZSBmb3IgYSBzZWFyY2ggcmFuZ2UgdGhhdCBzdGFydHMgJiBzdG9wcyBvbiB0aGUgc2FtZSBsaW5lIG51bWJlcgogICAgICBpZiAoc2VhcmNoUmFuZ2Uuc3RhcnRMaW5lTnVtYmVyID09PSBzZWFyY2hSYW5nZS5lbmRMaW5lTnVtYmVyKSB7CiAgICAgICAgdmFyIF90ZXh0ID0gbW9kZWwuZ2V0TGluZUNvbnRlbnQoc2VhcmNoUmFuZ2Uuc3RhcnRMaW5lTnVtYmVyKS5zdWJzdHJpbmcoc2VhcmNoUmFuZ2Uuc3RhcnRDb2x1bW4gLSAxLCBzZWFyY2hSYW5nZS5lbmRDb2x1bW4gLSAxKTsKICAgICAgICByZXN1bHRMZW4gPSB0aGlzLl9maW5kTWF0Y2hlc0luTGluZShzZWFyY2hEYXRhLCBfdGV4dCwgc2VhcmNoUmFuZ2Uuc3RhcnRMaW5lTnVtYmVyLCBzZWFyY2hSYW5nZS5zdGFydENvbHVtbiAtIDEsIHJlc3VsdExlbiwgcmVzdWx0LCBjYXB0dXJlTWF0Y2hlcywgbGltaXRSZXN1bHRDb3VudCk7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfQogICAgICAvLyBDb2xsZWN0IHJlc3VsdHMgZnJvbSBmaXJzdCBsaW5lCiAgICAgIHZhciB0ZXh0ID0gbW9kZWwuZ2V0TGluZUNvbnRlbnQoc2VhcmNoUmFuZ2Uuc3RhcnRMaW5lTnVtYmVyKS5zdWJzdHJpbmcoc2VhcmNoUmFuZ2Uuc3RhcnRDb2x1bW4gLSAxKTsKICAgICAgcmVzdWx0TGVuID0gdGhpcy5fZmluZE1hdGNoZXNJbkxpbmUoc2VhcmNoRGF0YSwgdGV4dCwgc2VhcmNoUmFuZ2Uuc3RhcnRMaW5lTnVtYmVyLCBzZWFyY2hSYW5nZS5zdGFydENvbHVtbiAtIDEsIHJlc3VsdExlbiwgcmVzdWx0LCBjYXB0dXJlTWF0Y2hlcywgbGltaXRSZXN1bHRDb3VudCk7CiAgICAgIC8vIENvbGxlY3QgcmVzdWx0cyBmcm9tIG1pZGRsZSBsaW5lcwogICAgICBmb3IgKHZhciBsaW5lTnVtYmVyID0gc2VhcmNoUmFuZ2Uuc3RhcnRMaW5lTnVtYmVyICsgMTsgbGluZU51bWJlciA8IHNlYXJjaFJhbmdlLmVuZExpbmVOdW1iZXIgJiYgcmVzdWx0TGVuIDwgbGltaXRSZXN1bHRDb3VudDsgbGluZU51bWJlcisrKSB7CiAgICAgICAgcmVzdWx0TGVuID0gdGhpcy5fZmluZE1hdGNoZXNJbkxpbmUoc2VhcmNoRGF0YSwgbW9kZWwuZ2V0TGluZUNvbnRlbnQobGluZU51bWJlciksIGxpbmVOdW1iZXIsIDAsIHJlc3VsdExlbiwgcmVzdWx0LCBjYXB0dXJlTWF0Y2hlcywgbGltaXRSZXN1bHRDb3VudCk7CiAgICAgIH0KICAgICAgLy8gQ29sbGVjdCByZXN1bHRzIGZyb20gbGFzdCBsaW5lCiAgICAgIGlmIChyZXN1bHRMZW4gPCBsaW1pdFJlc3VsdENvdW50KSB7CiAgICAgICAgdmFyIF90ZXh0MiA9IG1vZGVsLmdldExpbmVDb250ZW50KHNlYXJjaFJhbmdlLmVuZExpbmVOdW1iZXIpLnN1YnN0cmluZygwLCBzZWFyY2hSYW5nZS5lbmRDb2x1bW4gLSAxKTsKICAgICAgICByZXN1bHRMZW4gPSB0aGlzLl9maW5kTWF0Y2hlc0luTGluZShzZWFyY2hEYXRhLCBfdGV4dDIsIHNlYXJjaFJhbmdlLmVuZExpbmVOdW1iZXIsIDAsIHJlc3VsdExlbiwgcmVzdWx0LCBjYXB0dXJlTWF0Y2hlcywgbGltaXRSZXN1bHRDb3VudCk7CiAgICAgIH0KICAgICAgcmV0dXJuIHJlc3VsdDsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJfZmluZE1hdGNoZXNJbkxpbmUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9maW5kTWF0Y2hlc0luTGluZShzZWFyY2hEYXRhLCB0ZXh0LCBsaW5lTnVtYmVyLCBkZWx0YU9mZnNldCwgcmVzdWx0TGVuLCByZXN1bHQsIGNhcHR1cmVNYXRjaGVzLCBsaW1pdFJlc3VsdENvdW50KSB7CiAgICAgIHZhciB3b3JkU2VwYXJhdG9ycyA9IHNlYXJjaERhdGEud29yZFNlcGFyYXRvcnM7CiAgICAgIGlmICghY2FwdHVyZU1hdGNoZXMgJiYgc2VhcmNoRGF0YS5zaW1wbGVTZWFyY2gpIHsKICAgICAgICB2YXIgc2VhcmNoU3RyaW5nID0gc2VhcmNoRGF0YS5zaW1wbGVTZWFyY2g7CiAgICAgICAgdmFyIHNlYXJjaFN0cmluZ0xlbiA9IHNlYXJjaFN0cmluZy5sZW5ndGg7CiAgICAgICAgdmFyIHRleHRMZW5ndGggPSB0ZXh0Lmxlbmd0aDsKICAgICAgICB2YXIgbGFzdE1hdGNoSW5kZXggPSAtc2VhcmNoU3RyaW5nTGVuOwogICAgICAgIHdoaWxlICgobGFzdE1hdGNoSW5kZXggPSB0ZXh0LmluZGV4T2Yoc2VhcmNoU3RyaW5nLCBsYXN0TWF0Y2hJbmRleCArIHNlYXJjaFN0cmluZ0xlbikpICE9PSAtMSkgewogICAgICAgICAgaWYgKCF3b3JkU2VwYXJhdG9ycyB8fCBpc1ZhbGlkTWF0Y2god29yZFNlcGFyYXRvcnMsIHRleHQsIHRleHRMZW5ndGgsIGxhc3RNYXRjaEluZGV4LCBzZWFyY2hTdHJpbmdMZW4pKSB7CiAgICAgICAgICAgIHJlc3VsdFtyZXN1bHRMZW4rK10gPSBuZXcgRmluZE1hdGNoKG5ldyBSYW5nZShsaW5lTnVtYmVyLCBsYXN0TWF0Y2hJbmRleCArIDEgKyBkZWx0YU9mZnNldCwgbGluZU51bWJlciwgbGFzdE1hdGNoSW5kZXggKyAxICsgc2VhcmNoU3RyaW5nTGVuICsgZGVsdGFPZmZzZXQpLCBudWxsKTsKICAgICAgICAgICAgaWYgKHJlc3VsdExlbiA+PSBsaW1pdFJlc3VsdENvdW50KSB7CiAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdExlbjsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gcmVzdWx0TGVuOwogICAgICB9CiAgICAgIHZhciBzZWFyY2hlciA9IG5ldyBTZWFyY2hlcihzZWFyY2hEYXRhLndvcmRTZXBhcmF0b3JzLCBzZWFyY2hEYXRhLnJlZ2V4KTsKICAgICAgdmFyIG07CiAgICAgIC8vIFJlc2V0IHJlZ2V4IHRvIHNlYXJjaCBmcm9tIHRoZSBiZWdpbm5pbmcKICAgICAgc2VhcmNoZXIucmVzZXQoMCk7CiAgICAgIGRvIHsKICAgICAgICBtID0gc2VhcmNoZXIubmV4dCh0ZXh0KTsKICAgICAgICBpZiAobSkgewogICAgICAgICAgcmVzdWx0W3Jlc3VsdExlbisrXSA9IGNyZWF0ZUZpbmRNYXRjaChuZXcgUmFuZ2UobGluZU51bWJlciwgbS5pbmRleCArIDEgKyBkZWx0YU9mZnNldCwgbGluZU51bWJlciwgbS5pbmRleCArIDEgKyBtWzBdLmxlbmd0aCArIGRlbHRhT2Zmc2V0KSwgbSwgY2FwdHVyZU1hdGNoZXMpOwogICAgICAgICAgaWYgKHJlc3VsdExlbiA+PSBsaW1pdFJlc3VsdENvdW50KSB7CiAgICAgICAgICAgIHJldHVybiByZXN1bHRMZW47CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9IHdoaWxlIChtKTsKICAgICAgcmV0dXJuIHJlc3VsdExlbjsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJmaW5kTmV4dE1hdGNoIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBmaW5kTmV4dE1hdGNoKG1vZGVsLCBzZWFyY2hQYXJhbXMsIHNlYXJjaFN0YXJ0LCBjYXB0dXJlTWF0Y2hlcykgewogICAgICB2YXIgc2VhcmNoRGF0YSA9IHNlYXJjaFBhcmFtcy5wYXJzZVNlYXJjaFJlcXVlc3QoKTsKICAgICAgaWYgKCFzZWFyY2hEYXRhKSB7CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgIH0KICAgICAgdmFyIHNlYXJjaGVyID0gbmV3IFNlYXJjaGVyKHNlYXJjaERhdGEud29yZFNlcGFyYXRvcnMsIHNlYXJjaERhdGEucmVnZXgpOwogICAgICBpZiAoc2VhcmNoRGF0YS5yZWdleC5tdWx0aWxpbmUpIHsKICAgICAgICByZXR1cm4gdGhpcy5fZG9GaW5kTmV4dE1hdGNoTXVsdGlsaW5lKG1vZGVsLCBzZWFyY2hTdGFydCwgc2VhcmNoZXIsIGNhcHR1cmVNYXRjaGVzKTsKICAgICAgfQogICAgICByZXR1cm4gdGhpcy5fZG9GaW5kTmV4dE1hdGNoTGluZUJ5TGluZShtb2RlbCwgc2VhcmNoU3RhcnQsIHNlYXJjaGVyLCBjYXB0dXJlTWF0Y2hlcyk7CiAgICB9CiAgfSwgewogICAga2V5OiAiX2RvRmluZE5leHRNYXRjaE11bHRpbGluZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX2RvRmluZE5leHRNYXRjaE11bHRpbGluZShtb2RlbCwgc2VhcmNoU3RhcnQsIHNlYXJjaGVyLCBjYXB0dXJlTWF0Y2hlcykgewogICAgICB2YXIgc2VhcmNoVGV4dFN0YXJ0ID0gbmV3IFBvc2l0aW9uKHNlYXJjaFN0YXJ0LmxpbmVOdW1iZXIsIDEpOwogICAgICB2YXIgZGVsdGFPZmZzZXQgPSBtb2RlbC5nZXRPZmZzZXRBdChzZWFyY2hUZXh0U3RhcnQpOwogICAgICB2YXIgbGluZUNvdW50ID0gbW9kZWwuZ2V0TGluZUNvdW50KCk7CiAgICAgIC8vIFdlIGFsd2F5cyBleGVjdXRlIG11bHRpbGluZSBzZWFyY2ggb3ZlciB0aGUgbGluZXMgam9pbmVkIHdpdGggXG4KICAgICAgLy8gVGhpcyBtYWtlcyBpdCB0aGF0IFxuIHdpbGwgbWF0Y2ggdGhlIEVPTCBmb3IgYm90aCBDUkxGIGFuZCBMRiBtb2RlbHMKICAgICAgLy8gV2UgY29tcGVuc2F0ZSBmb3Igb2Zmc2V0IGVycm9ycyBpbiBgX2dldE11bHRpbGluZU1hdGNoUmFuZ2VgCiAgICAgIHZhciB0ZXh0ID0gbW9kZWwuZ2V0VmFsdWVJblJhbmdlKG5ldyBSYW5nZShzZWFyY2hUZXh0U3RhcnQubGluZU51bWJlciwgc2VhcmNoVGV4dFN0YXJ0LmNvbHVtbiwgbGluZUNvdW50LCBtb2RlbC5nZXRMaW5lTWF4Q29sdW1uKGxpbmVDb3VudCkpLCAxIC8qIEVuZE9mTGluZVByZWZlcmVuY2UuTEYgKi8pOwogICAgICB2YXIgbGZDb3VudGVyID0gbW9kZWwuZ2V0RU9MKCkgPT09ICdcclxuJyA/IG5ldyBMaW5lRmVlZENvdW50ZXIodGV4dCkgOiBudWxsOwogICAgICBzZWFyY2hlci5yZXNldChzZWFyY2hTdGFydC5jb2x1bW4gLSAxKTsKICAgICAgdmFyIG0gPSBzZWFyY2hlci5uZXh0KHRleHQpOwogICAgICBpZiAobSkgewogICAgICAgIHJldHVybiBjcmVhdGVGaW5kTWF0Y2godGhpcy5fZ2V0TXVsdGlsaW5lTWF0Y2hSYW5nZShtb2RlbCwgZGVsdGFPZmZzZXQsIHRleHQsIGxmQ291bnRlciwgbS5pbmRleCwgbVswXSksIG0sIGNhcHR1cmVNYXRjaGVzKTsKICAgICAgfQogICAgICBpZiAoc2VhcmNoU3RhcnQubGluZU51bWJlciAhPT0gMSB8fCBzZWFyY2hTdGFydC5jb2x1bW4gIT09IDEpIHsKICAgICAgICAvLyBUcnkgYWdhaW4gZnJvbSB0aGUgdG9wCiAgICAgICAgcmV0dXJuIHRoaXMuX2RvRmluZE5leHRNYXRjaE11bHRpbGluZShtb2RlbCwgbmV3IFBvc2l0aW9uKDEsIDEpLCBzZWFyY2hlciwgY2FwdHVyZU1hdGNoZXMpOwogICAgICB9CiAgICAgIHJldHVybiBudWxsOwogICAgfQogIH0sIHsKICAgIGtleTogIl9kb0ZpbmROZXh0TWF0Y2hMaW5lQnlMaW5lIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBfZG9GaW5kTmV4dE1hdGNoTGluZUJ5TGluZShtb2RlbCwgc2VhcmNoU3RhcnQsIHNlYXJjaGVyLCBjYXB0dXJlTWF0Y2hlcykgewogICAgICB2YXIgbGluZUNvdW50ID0gbW9kZWwuZ2V0TGluZUNvdW50KCk7CiAgICAgIHZhciBzdGFydExpbmVOdW1iZXIgPSBzZWFyY2hTdGFydC5saW5lTnVtYmVyOwogICAgICAvLyBMb29rIGluIGZpcnN0IGxpbmUKICAgICAgdmFyIHRleHQgPSBtb2RlbC5nZXRMaW5lQ29udGVudChzdGFydExpbmVOdW1iZXIpOwogICAgICB2YXIgciA9IHRoaXMuX2ZpbmRGaXJzdE1hdGNoSW5MaW5lKHNlYXJjaGVyLCB0ZXh0LCBzdGFydExpbmVOdW1iZXIsIHNlYXJjaFN0YXJ0LmNvbHVtbiwgY2FwdHVyZU1hdGNoZXMpOwogICAgICBpZiAocikgewogICAgICAgIHJldHVybiByOwogICAgICB9CiAgICAgIGZvciAodmFyIGkgPSAxOyBpIDw9IGxpbmVDb3VudDsgaSsrKSB7CiAgICAgICAgdmFyIGxpbmVJbmRleCA9IChzdGFydExpbmVOdW1iZXIgKyBpIC0gMSkgJSBsaW5lQ291bnQ7CiAgICAgICAgdmFyIF90ZXh0MyA9IG1vZGVsLmdldExpbmVDb250ZW50KGxpbmVJbmRleCArIDEpOwogICAgICAgIHZhciBfciA9IHRoaXMuX2ZpbmRGaXJzdE1hdGNoSW5MaW5lKHNlYXJjaGVyLCBfdGV4dDMsIGxpbmVJbmRleCArIDEsIDEsIGNhcHR1cmVNYXRjaGVzKTsKICAgICAgICBpZiAoX3IpIHsKICAgICAgICAgIHJldHVybiBfcjsKICAgICAgICB9CiAgICAgIH0KICAgICAgcmV0dXJuIG51bGw7CiAgICB9CiAgfSwgewogICAga2V5OiAiX2ZpbmRGaXJzdE1hdGNoSW5MaW5lIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBfZmluZEZpcnN0TWF0Y2hJbkxpbmUoc2VhcmNoZXIsIHRleHQsIGxpbmVOdW1iZXIsIGZyb21Db2x1bW4sIGNhcHR1cmVNYXRjaGVzKSB7CiAgICAgIC8vIFNldCByZWdleCB0byBzZWFyY2ggZnJvbSBjb2x1bW4KICAgICAgc2VhcmNoZXIucmVzZXQoZnJvbUNvbHVtbiAtIDEpOwogICAgICB2YXIgbSA9IHNlYXJjaGVyLm5leHQodGV4dCk7CiAgICAgIGlmIChtKSB7CiAgICAgICAgcmV0dXJuIGNyZWF0ZUZpbmRNYXRjaChuZXcgUmFuZ2UobGluZU51bWJlciwgbS5pbmRleCArIDEsIGxpbmVOdW1iZXIsIG0uaW5kZXggKyAxICsgbVswXS5sZW5ndGgpLCBtLCBjYXB0dXJlTWF0Y2hlcyk7CiAgICAgIH0KICAgICAgcmV0dXJuIG51bGw7CiAgICB9CiAgfSwgewogICAga2V5OiAiZmluZFByZXZpb3VzTWF0Y2giLAogICAgdmFsdWU6IGZ1bmN0aW9uIGZpbmRQcmV2aW91c01hdGNoKG1vZGVsLCBzZWFyY2hQYXJhbXMsIHNlYXJjaFN0YXJ0LCBjYXB0dXJlTWF0Y2hlcykgewogICAgICB2YXIgc2VhcmNoRGF0YSA9IHNlYXJjaFBhcmFtcy5wYXJzZVNlYXJjaFJlcXVlc3QoKTsKICAgICAgaWYgKCFzZWFyY2hEYXRhKSB7CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgIH0KICAgICAgdmFyIHNlYXJjaGVyID0gbmV3IFNlYXJjaGVyKHNlYXJjaERhdGEud29yZFNlcGFyYXRvcnMsIHNlYXJjaERhdGEucmVnZXgpOwogICAgICBpZiAoc2VhcmNoRGF0YS5yZWdleC5tdWx0aWxpbmUpIHsKICAgICAgICByZXR1cm4gdGhpcy5fZG9GaW5kUHJldmlvdXNNYXRjaE11bHRpbGluZShtb2RlbCwgc2VhcmNoU3RhcnQsIHNlYXJjaGVyLCBjYXB0dXJlTWF0Y2hlcyk7CiAgICAgIH0KICAgICAgcmV0dXJuIHRoaXMuX2RvRmluZFByZXZpb3VzTWF0Y2hMaW5lQnlMaW5lKG1vZGVsLCBzZWFyY2hTdGFydCwgc2VhcmNoZXIsIGNhcHR1cmVNYXRjaGVzKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJfZG9GaW5kUHJldmlvdXNNYXRjaE11bHRpbGluZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX2RvRmluZFByZXZpb3VzTWF0Y2hNdWx0aWxpbmUobW9kZWwsIHNlYXJjaFN0YXJ0LCBzZWFyY2hlciwgY2FwdHVyZU1hdGNoZXMpIHsKICAgICAgdmFyIG1hdGNoZXMgPSB0aGlzLl9kb0ZpbmRNYXRjaGVzTXVsdGlsaW5lKG1vZGVsLCBuZXcgUmFuZ2UoMSwgMSwgc2VhcmNoU3RhcnQubGluZU51bWJlciwgc2VhcmNoU3RhcnQuY29sdW1uKSwgc2VhcmNoZXIsIGNhcHR1cmVNYXRjaGVzLCAxMCAqIExJTUlUX0ZJTkRfQ09VTlQpOwogICAgICBpZiAobWF0Y2hlcy5sZW5ndGggPiAwKSB7CiAgICAgICAgcmV0dXJuIG1hdGNoZXNbbWF0Y2hlcy5sZW5ndGggLSAxXTsKICAgICAgfQogICAgICB2YXIgbGluZUNvdW50ID0gbW9kZWwuZ2V0TGluZUNvdW50KCk7CiAgICAgIGlmIChzZWFyY2hTdGFydC5saW5lTnVtYmVyICE9PSBsaW5lQ291bnQgfHwgc2VhcmNoU3RhcnQuY29sdW1uICE9PSBtb2RlbC5nZXRMaW5lTWF4Q29sdW1uKGxpbmVDb3VudCkpIHsKICAgICAgICAvLyBUcnkgYWdhaW4gd2l0aCBhbGwgY29udGVudAogICAgICAgIHJldHVybiB0aGlzLl9kb0ZpbmRQcmV2aW91c01hdGNoTXVsdGlsaW5lKG1vZGVsLCBuZXcgUG9zaXRpb24obGluZUNvdW50LCBtb2RlbC5nZXRMaW5lTWF4Q29sdW1uKGxpbmVDb3VudCkpLCBzZWFyY2hlciwgY2FwdHVyZU1hdGNoZXMpOwogICAgICB9CiAgICAgIHJldHVybiBudWxsOwogICAgfQogIH0sIHsKICAgIGtleTogIl9kb0ZpbmRQcmV2aW91c01hdGNoTGluZUJ5TGluZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX2RvRmluZFByZXZpb3VzTWF0Y2hMaW5lQnlMaW5lKG1vZGVsLCBzZWFyY2hTdGFydCwgc2VhcmNoZXIsIGNhcHR1cmVNYXRjaGVzKSB7CiAgICAgIHZhciBsaW5lQ291bnQgPSBtb2RlbC5nZXRMaW5lQ291bnQoKTsKICAgICAgdmFyIHN0YXJ0TGluZU51bWJlciA9IHNlYXJjaFN0YXJ0LmxpbmVOdW1iZXI7CiAgICAgIC8vIExvb2sgaW4gZmlyc3QgbGluZQogICAgICB2YXIgdGV4dCA9IG1vZGVsLmdldExpbmVDb250ZW50KHN0YXJ0TGluZU51bWJlcikuc3Vic3RyaW5nKDAsIHNlYXJjaFN0YXJ0LmNvbHVtbiAtIDEpOwogICAgICB2YXIgciA9IHRoaXMuX2ZpbmRMYXN0TWF0Y2hJbkxpbmUoc2VhcmNoZXIsIHRleHQsIHN0YXJ0TGluZU51bWJlciwgY2FwdHVyZU1hdGNoZXMpOwogICAgICBpZiAocikgewogICAgICAgIHJldHVybiByOwogICAgICB9CiAgICAgIGZvciAodmFyIGkgPSAxOyBpIDw9IGxpbmVDb3VudDsgaSsrKSB7CiAgICAgICAgdmFyIGxpbmVJbmRleCA9IChsaW5lQ291bnQgKyBzdGFydExpbmVOdW1iZXIgLSBpIC0gMSkgJSBsaW5lQ291bnQ7CiAgICAgICAgdmFyIF90ZXh0NCA9IG1vZGVsLmdldExpbmVDb250ZW50KGxpbmVJbmRleCArIDEpOwogICAgICAgIHZhciBfcjIgPSB0aGlzLl9maW5kTGFzdE1hdGNoSW5MaW5lKHNlYXJjaGVyLCBfdGV4dDQsIGxpbmVJbmRleCArIDEsIGNhcHR1cmVNYXRjaGVzKTsKICAgICAgICBpZiAoX3IyKSB7CiAgICAgICAgICByZXR1cm4gX3IyOwogICAgICAgIH0KICAgICAgfQogICAgICByZXR1cm4gbnVsbDsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJfZmluZExhc3RNYXRjaEluTGluZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX2ZpbmRMYXN0TWF0Y2hJbkxpbmUoc2VhcmNoZXIsIHRleHQsIGxpbmVOdW1iZXIsIGNhcHR1cmVNYXRjaGVzKSB7CiAgICAgIHZhciBiZXN0UmVzdWx0ID0gbnVsbDsKICAgICAgdmFyIG07CiAgICAgIHNlYXJjaGVyLnJlc2V0KDApOwogICAgICB3aGlsZSAobSA9IHNlYXJjaGVyLm5leHQodGV4dCkpIHsKICAgICAgICBiZXN0UmVzdWx0ID0gY3JlYXRlRmluZE1hdGNoKG5ldyBSYW5nZShsaW5lTnVtYmVyLCBtLmluZGV4ICsgMSwgbGluZU51bWJlciwgbS5pbmRleCArIDEgKyBtWzBdLmxlbmd0aCksIG0sIGNhcHR1cmVNYXRjaGVzKTsKICAgICAgfQogICAgICByZXR1cm4gYmVzdFJlc3VsdDsKICAgIH0KICB9XSk7CiAgcmV0dXJuIFRleHRNb2RlbFNlYXJjaDsKfSgpOwpmdW5jdGlvbiBsZWZ0SXNXb3JkQm91bmRheSh3b3JkU2VwYXJhdG9ycywgdGV4dCwgdGV4dExlbmd0aCwgbWF0Y2hTdGFydEluZGV4LCBtYXRjaExlbmd0aCkgewogIGlmIChtYXRjaFN0YXJ0SW5kZXggPT09IDApIHsKICAgIC8vIE1hdGNoIHN0YXJ0cyBhdCBzdGFydCBvZiBzdHJpbmcKICAgIHJldHVybiB0cnVlOwogIH0KICB2YXIgY2hhckJlZm9yZSA9IHRleHQuY2hhckNvZGVBdChtYXRjaFN0YXJ0SW5kZXggLSAxKTsKICBpZiAod29yZFNlcGFyYXRvcnMuZ2V0KGNoYXJCZWZvcmUpICE9PSAwIC8qIFdvcmRDaGFyYWN0ZXJDbGFzcy5SZWd1bGFyICovKSB7CiAgICAvLyBUaGUgY2hhcmFjdGVyIGJlZm9yZSB0aGUgbWF0Y2ggaXMgYSB3b3JkIHNlcGFyYXRvcgogICAgcmV0dXJuIHRydWU7CiAgfQogIGlmIChjaGFyQmVmb3JlID09PSAxMyAvKiBDaGFyQ29kZS5DYXJyaWFnZVJldHVybiAqLyB8fCBjaGFyQmVmb3JlID09PSAxMCAvKiBDaGFyQ29kZS5MaW5lRmVlZCAqLykgewogICAgLy8gVGhlIGNoYXJhY3RlciBiZWZvcmUgdGhlIG1hdGNoIGlzIGxpbmUgYnJlYWsgb3IgY2FycmlhZ2UgcmV0dXJuLgogICAgcmV0dXJuIHRydWU7CiAgfQogIGlmIChtYXRjaExlbmd0aCA+IDApIHsKICAgIHZhciBmaXJzdENoYXJJbk1hdGNoID0gdGV4dC5jaGFyQ29kZUF0KG1hdGNoU3RhcnRJbmRleCk7CiAgICBpZiAod29yZFNlcGFyYXRvcnMuZ2V0KGZpcnN0Q2hhckluTWF0Y2gpICE9PSAwIC8qIFdvcmRDaGFyYWN0ZXJDbGFzcy5SZWd1bGFyICovKSB7CiAgICAgIC8vIFRoZSBmaXJzdCBjaGFyYWN0ZXIgaW5zaWRlIHRoZSBtYXRjaCBpcyBhIHdvcmQgc2VwYXJhdG9yCiAgICAgIHJldHVybiB0cnVlOwogICAgfQogIH0KICByZXR1cm4gZmFsc2U7Cn0KZnVuY3Rpb24gcmlnaHRJc1dvcmRCb3VuZGF5KHdvcmRTZXBhcmF0b3JzLCB0ZXh0LCB0ZXh0TGVuZ3RoLCBtYXRjaFN0YXJ0SW5kZXgsIG1hdGNoTGVuZ3RoKSB7CiAgaWYgKG1hdGNoU3RhcnRJbmRleCArIG1hdGNoTGVuZ3RoID09PSB0ZXh0TGVuZ3RoKSB7CiAgICAvLyBNYXRjaCBlbmRzIGF0IGVuZCBvZiBzdHJpbmcKICAgIHJldHVybiB0cnVlOwogIH0KICB2YXIgY2hhckFmdGVyID0gdGV4dC5jaGFyQ29kZUF0KG1hdGNoU3RhcnRJbmRleCArIG1hdGNoTGVuZ3RoKTsKICBpZiAod29yZFNlcGFyYXRvcnMuZ2V0KGNoYXJBZnRlcikgIT09IDAgLyogV29yZENoYXJhY3RlckNsYXNzLlJlZ3VsYXIgKi8pIHsKICAgIC8vIFRoZSBjaGFyYWN0ZXIgYWZ0ZXIgdGhlIG1hdGNoIGlzIGEgd29yZCBzZXBhcmF0b3IKICAgIHJldHVybiB0cnVlOwogIH0KICBpZiAoY2hhckFmdGVyID09PSAxMyAvKiBDaGFyQ29kZS5DYXJyaWFnZVJldHVybiAqLyB8fCBjaGFyQWZ0ZXIgPT09IDEwIC8qIENoYXJDb2RlLkxpbmVGZWVkICovKSB7CiAgICAvLyBUaGUgY2hhcmFjdGVyIGFmdGVyIHRoZSBtYXRjaCBpcyBsaW5lIGJyZWFrIG9yIGNhcnJpYWdlIHJldHVybi4KICAgIHJldHVybiB0cnVlOwogIH0KICBpZiAobWF0Y2hMZW5ndGggPiAwKSB7CiAgICB2YXIgbGFzdENoYXJJbk1hdGNoID0gdGV4dC5jaGFyQ29kZUF0KG1hdGNoU3RhcnRJbmRleCArIG1hdGNoTGVuZ3RoIC0gMSk7CiAgICBpZiAod29yZFNlcGFyYXRvcnMuZ2V0KGxhc3RDaGFySW5NYXRjaCkgIT09IDAgLyogV29yZENoYXJhY3RlckNsYXNzLlJlZ3VsYXIgKi8pIHsKICAgICAgLy8gVGhlIGxhc3QgY2hhcmFjdGVyIGluIHRoZSBtYXRjaCBpcyBhIHdvcmQgc2VwYXJhdG9yCiAgICAgIHJldHVybiB0cnVlOwogICAgfQogIH0KICByZXR1cm4gZmFsc2U7Cn0KZXhwb3J0IGZ1bmN0aW9uIGlzVmFsaWRNYXRjaCh3b3JkU2VwYXJhdG9ycywgdGV4dCwgdGV4dExlbmd0aCwgbWF0Y2hTdGFydEluZGV4LCBtYXRjaExlbmd0aCkgewogIHJldHVybiBsZWZ0SXNXb3JkQm91bmRheSh3b3JkU2VwYXJhdG9ycywgdGV4dCwgdGV4dExlbmd0aCwgbWF0Y2hTdGFydEluZGV4LCBtYXRjaExlbmd0aCkgJiYgcmlnaHRJc1dvcmRCb3VuZGF5KHdvcmRTZXBhcmF0b3JzLCB0ZXh0LCB0ZXh0TGVuZ3RoLCBtYXRjaFN0YXJ0SW5kZXgsIG1hdGNoTGVuZ3RoKTsKfQpleHBvcnQgdmFyIFNlYXJjaGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBTZWFyY2hlcih3b3JkU2VwYXJhdG9ycywgc2VhcmNoUmVnZXgpIHsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTZWFyY2hlcik7CiAgICB0aGlzLl93b3JkU2VwYXJhdG9ycyA9IHdvcmRTZXBhcmF0b3JzOwogICAgdGhpcy5fc2VhcmNoUmVnZXggPSBzZWFyY2hSZWdleDsKICAgIHRoaXMuX3ByZXZNYXRjaFN0YXJ0SW5kZXggPSAtMTsKICAgIHRoaXMuX3ByZXZNYXRjaExlbmd0aCA9IDA7CiAgfQogIF9jcmVhdGVDbGFzcyhTZWFyY2hlciwgW3sKICAgIGtleTogInJlc2V0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZXNldChsYXN0SW5kZXgpIHsKICAgICAgdGhpcy5fc2VhcmNoUmVnZXgubGFzdEluZGV4ID0gbGFzdEluZGV4OwogICAgICB0aGlzLl9wcmV2TWF0Y2hTdGFydEluZGV4ID0gLTE7CiAgICAgIHRoaXMuX3ByZXZNYXRjaExlbmd0aCA9IDA7CiAgICB9CiAgfSwgewogICAga2V5OiAibmV4dCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gbmV4dCh0ZXh0KSB7CiAgICAgIHZhciB0ZXh0TGVuZ3RoID0gdGV4dC5sZW5ndGg7CiAgICAgIHZhciBtOwogICAgICBkbyB7CiAgICAgICAgaWYgKHRoaXMuX3ByZXZNYXRjaFN0YXJ0SW5kZXggKyB0aGlzLl9wcmV2TWF0Y2hMZW5ndGggPT09IHRleHRMZW5ndGgpIHsKICAgICAgICAgIC8vIFJlYWNoZWQgdGhlIGVuZCBvZiB0aGUgbGluZQogICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgfQogICAgICAgIG0gPSB0aGlzLl9zZWFyY2hSZWdleC5leGVjKHRleHQpOwogICAgICAgIGlmICghbSkgewogICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgfQogICAgICAgIHZhciBtYXRjaFN0YXJ0SW5kZXggPSBtLmluZGV4OwogICAgICAgIHZhciBtYXRjaExlbmd0aCA9IG1bMF0ubGVuZ3RoOwogICAgICAgIGlmIChtYXRjaFN0YXJ0SW5kZXggPT09IHRoaXMuX3ByZXZNYXRjaFN0YXJ0SW5kZXggJiYgbWF0Y2hMZW5ndGggPT09IHRoaXMuX3ByZXZNYXRjaExlbmd0aCkgewogICAgICAgICAgaWYgKG1hdGNoTGVuZ3RoID09PSAwKSB7CiAgICAgICAgICAgIC8vIHRoZSBzZWFyY2ggcmVzdWx0IGlzIGFuIGVtcHR5IHN0cmluZyBhbmQgd29uJ3QgYWR2YW5jZSBgcmVnZXgubGFzdEluZGV4YCwgc28gYHJlZ2V4LmV4ZWNgIHdpbGwgc3R1Y2sgaGVyZQogICAgICAgICAgICAvLyB3ZSBhdHRlbXB0IHRvIHJlY292ZXIgZnJvbSB0aGF0IGJ5IGFkdmFuY2luZyBieSB0d28gaWYgc3Vycm9nYXRlIHBhaXIgZm91bmQgYW5kIGJ5IG9uZSBvdGhlcndpc2UKICAgICAgICAgICAgaWYgKHN0cmluZ3MuZ2V0TmV4dENvZGVQb2ludCh0ZXh0LCB0ZXh0TGVuZ3RoLCB0aGlzLl9zZWFyY2hSZWdleC5sYXN0SW5kZXgpID4gMHhGRkZGKSB7CiAgICAgICAgICAgICAgdGhpcy5fc2VhcmNoUmVnZXgubGFzdEluZGV4ICs9IDI7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgdGhpcy5fc2VhcmNoUmVnZXgubGFzdEluZGV4ICs9IDE7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICB9CiAgICAgICAgICAvLyBFeGl0IGVhcmx5IGlmIHRoZSByZWdleCBtYXRjaGVzIHRoZSBzYW1lIHJhbmdlIHR3aWNlCiAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICB9CiAgICAgICAgdGhpcy5fcHJldk1hdGNoU3RhcnRJbmRleCA9IG1hdGNoU3RhcnRJbmRleDsKICAgICAgICB0aGlzLl9wcmV2TWF0Y2hMZW5ndGggPSBtYXRjaExlbmd0aDsKICAgICAgICBpZiAoIXRoaXMuX3dvcmRTZXBhcmF0b3JzIHx8IGlzVmFsaWRNYXRjaCh0aGlzLl93b3JkU2VwYXJhdG9ycywgdGV4dCwgdGV4dExlbmd0aCwgbWF0Y2hTdGFydEluZGV4LCBtYXRjaExlbmd0aCkpIHsKICAgICAgICAgIHJldHVybiBtOwogICAgICAgIH0KICAgICAgfSB3aGlsZSAobSk7CiAgICAgIHJldHVybiBudWxsOwogICAgfQogIH1dKTsKICByZXR1cm4gU2VhcmNoZXI7Cn0oKTs="},{"version":3,"names":["strings","getMapForWordSeparators","Position","Range","FindMatch","SearchData","LIMIT_FIND_COUNT","SearchParams","searchString","isRegex","matchCase","wordSeparators","multiline","isMultilineRegexSource","indexOf","regex","createRegExp","wholeWord","global","unicode","err","canUseSimpleSearch","toLowerCase","toUpperCase","length","i","len","chCode","charCodeAt","nextChCode","createFindMatch","range","rawMatches","captureMatches","matches","LineFeedCounter","text","lineFeedsOffsets","lineFeedsOffsetsLen","textLen","_lineFeedsOffsets","offset","min","max","mid","TextModelSearch","model","searchParams","searchRange","limitResultCount","searchData","parseSearchRequest","_doFindMatchesMultiline","Searcher","_doFindMatchesLineByLine","deltaOffset","lfCounter","matchIndex","match0","startOffset","lineFeedCountBeforeMatch","findLineFeedCountBeforeOffset","endOffset","lineFeedCountBeforeEndOfMatch","lineFeedCountInMatch","startPosition","getPositionAt","endPosition","lineNumber","column","searcher","getOffsetAt","getStartPosition","getValueInRange","getEOL","result","counter","m","reset","next","_getMultilineMatchRange","index","resultLen","startLineNumber","endLineNumber","getLineContent","substring","startColumn","endColumn","_findMatchesInLine","simpleSearch","searchStringLen","textLength","lastMatchIndex","isValidMatch","searchStart","_doFindNextMatchMultiline","_doFindNextMatchLineByLine","searchTextStart","lineCount","getLineCount","getLineMaxColumn","r","_findFirstMatchInLine","lineIndex","fromColumn","_doFindPreviousMatchMultiline","_doFindPreviousMatchLineByLine","_findLastMatchInLine","bestResult","leftIsWordBounday","matchStartIndex","matchLength","charBefore","get","firstCharInMatch","rightIsWordBounday","charAfter","lastCharInMatch","searchRegex","_wordSeparators","_searchRegex","_prevMatchStartIndex","_prevMatchLength","lastIndex","exec","getNextCodePoint"],"sources":["/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/common/model/textModelSearch.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../base/common/strings.js';\nimport { getMapForWordSeparators } from '../core/wordCharacterClassifier.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { FindMatch, SearchData } from '../model.js';\nconst LIMIT_FIND_COUNT = 999;\nexport class SearchParams {\n    constructor(searchString, isRegex, matchCase, wordSeparators) {\n        this.searchString = searchString;\n        this.isRegex = isRegex;\n        this.matchCase = matchCase;\n        this.wordSeparators = wordSeparators;\n    }\n    parseSearchRequest() {\n        if (this.searchString === '') {\n            return null;\n        }\n        // Try to create a RegExp out of the params\n        let multiline;\n        if (this.isRegex) {\n            multiline = isMultilineRegexSource(this.searchString);\n        }\n        else {\n            multiline = (this.searchString.indexOf('\\n') >= 0);\n        }\n        let regex = null;\n        try {\n            regex = strings.createRegExp(this.searchString, this.isRegex, {\n                matchCase: this.matchCase,\n                wholeWord: false,\n                multiline: multiline,\n                global: true,\n                unicode: true\n            });\n        }\n        catch (err) {\n            return null;\n        }\n        if (!regex) {\n            return null;\n        }\n        let canUseSimpleSearch = (!this.isRegex && !multiline);\n        if (canUseSimpleSearch && this.searchString.toLowerCase() !== this.searchString.toUpperCase()) {\n            // casing might make a difference\n            canUseSimpleSearch = this.matchCase;\n        }\n        return new SearchData(regex, this.wordSeparators ? getMapForWordSeparators(this.wordSeparators) : null, canUseSimpleSearch ? this.searchString : null);\n    }\n}\nexport function isMultilineRegexSource(searchString) {\n    if (!searchString || searchString.length === 0) {\n        return false;\n    }\n    for (let i = 0, len = searchString.length; i < len; i++) {\n        const chCode = searchString.charCodeAt(i);\n        if (chCode === 10 /* CharCode.LineFeed */) {\n            return true;\n        }\n        if (chCode === 92 /* CharCode.Backslash */) {\n            // move to next char\n            i++;\n            if (i >= len) {\n                // string ends with a \\\n                break;\n            }\n            const nextChCode = searchString.charCodeAt(i);\n            if (nextChCode === 110 /* CharCode.n */ || nextChCode === 114 /* CharCode.r */ || nextChCode === 87 /* CharCode.W */) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\nexport function createFindMatch(range, rawMatches, captureMatches) {\n    if (!captureMatches) {\n        return new FindMatch(range, null);\n    }\n    const matches = [];\n    for (let i = 0, len = rawMatches.length; i < len; i++) {\n        matches[i] = rawMatches[i];\n    }\n    return new FindMatch(range, matches);\n}\nclass LineFeedCounter {\n    constructor(text) {\n        const lineFeedsOffsets = [];\n        let lineFeedsOffsetsLen = 0;\n        for (let i = 0, textLen = text.length; i < textLen; i++) {\n            if (text.charCodeAt(i) === 10 /* CharCode.LineFeed */) {\n                lineFeedsOffsets[lineFeedsOffsetsLen++] = i;\n            }\n        }\n        this._lineFeedsOffsets = lineFeedsOffsets;\n    }\n    findLineFeedCountBeforeOffset(offset) {\n        const lineFeedsOffsets = this._lineFeedsOffsets;\n        let min = 0;\n        let max = lineFeedsOffsets.length - 1;\n        if (max === -1) {\n            // no line feeds\n            return 0;\n        }\n        if (offset <= lineFeedsOffsets[0]) {\n            // before first line feed\n            return 0;\n        }\n        while (min < max) {\n            const mid = min + ((max - min) / 2 >> 0);\n            if (lineFeedsOffsets[mid] >= offset) {\n                max = mid - 1;\n            }\n            else {\n                if (lineFeedsOffsets[mid + 1] >= offset) {\n                    // bingo!\n                    min = mid;\n                    max = mid;\n                }\n                else {\n                    min = mid + 1;\n                }\n            }\n        }\n        return min + 1;\n    }\n}\nexport class TextModelSearch {\n    static findMatches(model, searchParams, searchRange, captureMatches, limitResultCount) {\n        const searchData = searchParams.parseSearchRequest();\n        if (!searchData) {\n            return [];\n        }\n        if (searchData.regex.multiline) {\n            return this._doFindMatchesMultiline(model, searchRange, new Searcher(searchData.wordSeparators, searchData.regex), captureMatches, limitResultCount);\n        }\n        return this._doFindMatchesLineByLine(model, searchRange, searchData, captureMatches, limitResultCount);\n    }\n    /**\n     * Multiline search always executes on the lines concatenated with \\n.\n     * We must therefore compensate for the count of \\n in case the model is CRLF\n     */\n    static _getMultilineMatchRange(model, deltaOffset, text, lfCounter, matchIndex, match0) {\n        let startOffset;\n        let lineFeedCountBeforeMatch = 0;\n        if (lfCounter) {\n            lineFeedCountBeforeMatch = lfCounter.findLineFeedCountBeforeOffset(matchIndex);\n            startOffset = deltaOffset + matchIndex + lineFeedCountBeforeMatch /* add as many \\r as there were \\n */;\n        }\n        else {\n            startOffset = deltaOffset + matchIndex;\n        }\n        let endOffset;\n        if (lfCounter) {\n            const lineFeedCountBeforeEndOfMatch = lfCounter.findLineFeedCountBeforeOffset(matchIndex + match0.length);\n            const lineFeedCountInMatch = lineFeedCountBeforeEndOfMatch - lineFeedCountBeforeMatch;\n            endOffset = startOffset + match0.length + lineFeedCountInMatch /* add as many \\r as there were \\n */;\n        }\n        else {\n            endOffset = startOffset + match0.length;\n        }\n        const startPosition = model.getPositionAt(startOffset);\n        const endPosition = model.getPositionAt(endOffset);\n        return new Range(startPosition.lineNumber, startPosition.column, endPosition.lineNumber, endPosition.column);\n    }\n    static _doFindMatchesMultiline(model, searchRange, searcher, captureMatches, limitResultCount) {\n        const deltaOffset = model.getOffsetAt(searchRange.getStartPosition());\n        // We always execute multiline search over the lines joined with \\n\n        // This makes it that \\n will match the EOL for both CRLF and LF models\n        // We compensate for offset errors in `_getMultilineMatchRange`\n        const text = model.getValueInRange(searchRange, 1 /* EndOfLinePreference.LF */);\n        const lfCounter = (model.getEOL() === '\\r\\n' ? new LineFeedCounter(text) : null);\n        const result = [];\n        let counter = 0;\n        let m;\n        searcher.reset(0);\n        while ((m = searcher.next(text))) {\n            result[counter++] = createFindMatch(this._getMultilineMatchRange(model, deltaOffset, text, lfCounter, m.index, m[0]), m, captureMatches);\n            if (counter >= limitResultCount) {\n                return result;\n            }\n        }\n        return result;\n    }\n    static _doFindMatchesLineByLine(model, searchRange, searchData, captureMatches, limitResultCount) {\n        const result = [];\n        let resultLen = 0;\n        // Early case for a search range that starts & stops on the same line number\n        if (searchRange.startLineNumber === searchRange.endLineNumber) {\n            const text = model.getLineContent(searchRange.startLineNumber).substring(searchRange.startColumn - 1, searchRange.endColumn - 1);\n            resultLen = this._findMatchesInLine(searchData, text, searchRange.startLineNumber, searchRange.startColumn - 1, resultLen, result, captureMatches, limitResultCount);\n            return result;\n        }\n        // Collect results from first line\n        const text = model.getLineContent(searchRange.startLineNumber).substring(searchRange.startColumn - 1);\n        resultLen = this._findMatchesInLine(searchData, text, searchRange.startLineNumber, searchRange.startColumn - 1, resultLen, result, captureMatches, limitResultCount);\n        // Collect results from middle lines\n        for (let lineNumber = searchRange.startLineNumber + 1; lineNumber < searchRange.endLineNumber && resultLen < limitResultCount; lineNumber++) {\n            resultLen = this._findMatchesInLine(searchData, model.getLineContent(lineNumber), lineNumber, 0, resultLen, result, captureMatches, limitResultCount);\n        }\n        // Collect results from last line\n        if (resultLen < limitResultCount) {\n            const text = model.getLineContent(searchRange.endLineNumber).substring(0, searchRange.endColumn - 1);\n            resultLen = this._findMatchesInLine(searchData, text, searchRange.endLineNumber, 0, resultLen, result, captureMatches, limitResultCount);\n        }\n        return result;\n    }\n    static _findMatchesInLine(searchData, text, lineNumber, deltaOffset, resultLen, result, captureMatches, limitResultCount) {\n        const wordSeparators = searchData.wordSeparators;\n        if (!captureMatches && searchData.simpleSearch) {\n            const searchString = searchData.simpleSearch;\n            const searchStringLen = searchString.length;\n            const textLength = text.length;\n            let lastMatchIndex = -searchStringLen;\n            while ((lastMatchIndex = text.indexOf(searchString, lastMatchIndex + searchStringLen)) !== -1) {\n                if (!wordSeparators || isValidMatch(wordSeparators, text, textLength, lastMatchIndex, searchStringLen)) {\n                    result[resultLen++] = new FindMatch(new Range(lineNumber, lastMatchIndex + 1 + deltaOffset, lineNumber, lastMatchIndex + 1 + searchStringLen + deltaOffset), null);\n                    if (resultLen >= limitResultCount) {\n                        return resultLen;\n                    }\n                }\n            }\n            return resultLen;\n        }\n        const searcher = new Searcher(searchData.wordSeparators, searchData.regex);\n        let m;\n        // Reset regex to search from the beginning\n        searcher.reset(0);\n        do {\n            m = searcher.next(text);\n            if (m) {\n                result[resultLen++] = createFindMatch(new Range(lineNumber, m.index + 1 + deltaOffset, lineNumber, m.index + 1 + m[0].length + deltaOffset), m, captureMatches);\n                if (resultLen >= limitResultCount) {\n                    return resultLen;\n                }\n            }\n        } while (m);\n        return resultLen;\n    }\n    static findNextMatch(model, searchParams, searchStart, captureMatches) {\n        const searchData = searchParams.parseSearchRequest();\n        if (!searchData) {\n            return null;\n        }\n        const searcher = new Searcher(searchData.wordSeparators, searchData.regex);\n        if (searchData.regex.multiline) {\n            return this._doFindNextMatchMultiline(model, searchStart, searcher, captureMatches);\n        }\n        return this._doFindNextMatchLineByLine(model, searchStart, searcher, captureMatches);\n    }\n    static _doFindNextMatchMultiline(model, searchStart, searcher, captureMatches) {\n        const searchTextStart = new Position(searchStart.lineNumber, 1);\n        const deltaOffset = model.getOffsetAt(searchTextStart);\n        const lineCount = model.getLineCount();\n        // We always execute multiline search over the lines joined with \\n\n        // This makes it that \\n will match the EOL for both CRLF and LF models\n        // We compensate for offset errors in `_getMultilineMatchRange`\n        const text = model.getValueInRange(new Range(searchTextStart.lineNumber, searchTextStart.column, lineCount, model.getLineMaxColumn(lineCount)), 1 /* EndOfLinePreference.LF */);\n        const lfCounter = (model.getEOL() === '\\r\\n' ? new LineFeedCounter(text) : null);\n        searcher.reset(searchStart.column - 1);\n        const m = searcher.next(text);\n        if (m) {\n            return createFindMatch(this._getMultilineMatchRange(model, deltaOffset, text, lfCounter, m.index, m[0]), m, captureMatches);\n        }\n        if (searchStart.lineNumber !== 1 || searchStart.column !== 1) {\n            // Try again from the top\n            return this._doFindNextMatchMultiline(model, new Position(1, 1), searcher, captureMatches);\n        }\n        return null;\n    }\n    static _doFindNextMatchLineByLine(model, searchStart, searcher, captureMatches) {\n        const lineCount = model.getLineCount();\n        const startLineNumber = searchStart.lineNumber;\n        // Look in first line\n        const text = model.getLineContent(startLineNumber);\n        const r = this._findFirstMatchInLine(searcher, text, startLineNumber, searchStart.column, captureMatches);\n        if (r) {\n            return r;\n        }\n        for (let i = 1; i <= lineCount; i++) {\n            const lineIndex = (startLineNumber + i - 1) % lineCount;\n            const text = model.getLineContent(lineIndex + 1);\n            const r = this._findFirstMatchInLine(searcher, text, lineIndex + 1, 1, captureMatches);\n            if (r) {\n                return r;\n            }\n        }\n        return null;\n    }\n    static _findFirstMatchInLine(searcher, text, lineNumber, fromColumn, captureMatches) {\n        // Set regex to search from column\n        searcher.reset(fromColumn - 1);\n        const m = searcher.next(text);\n        if (m) {\n            return createFindMatch(new Range(lineNumber, m.index + 1, lineNumber, m.index + 1 + m[0].length), m, captureMatches);\n        }\n        return null;\n    }\n    static findPreviousMatch(model, searchParams, searchStart, captureMatches) {\n        const searchData = searchParams.parseSearchRequest();\n        if (!searchData) {\n            return null;\n        }\n        const searcher = new Searcher(searchData.wordSeparators, searchData.regex);\n        if (searchData.regex.multiline) {\n            return this._doFindPreviousMatchMultiline(model, searchStart, searcher, captureMatches);\n        }\n        return this._doFindPreviousMatchLineByLine(model, searchStart, searcher, captureMatches);\n    }\n    static _doFindPreviousMatchMultiline(model, searchStart, searcher, captureMatches) {\n        const matches = this._doFindMatchesMultiline(model, new Range(1, 1, searchStart.lineNumber, searchStart.column), searcher, captureMatches, 10 * LIMIT_FIND_COUNT);\n        if (matches.length > 0) {\n            return matches[matches.length - 1];\n        }\n        const lineCount = model.getLineCount();\n        if (searchStart.lineNumber !== lineCount || searchStart.column !== model.getLineMaxColumn(lineCount)) {\n            // Try again with all content\n            return this._doFindPreviousMatchMultiline(model, new Position(lineCount, model.getLineMaxColumn(lineCount)), searcher, captureMatches);\n        }\n        return null;\n    }\n    static _doFindPreviousMatchLineByLine(model, searchStart, searcher, captureMatches) {\n        const lineCount = model.getLineCount();\n        const startLineNumber = searchStart.lineNumber;\n        // Look in first line\n        const text = model.getLineContent(startLineNumber).substring(0, searchStart.column - 1);\n        const r = this._findLastMatchInLine(searcher, text, startLineNumber, captureMatches);\n        if (r) {\n            return r;\n        }\n        for (let i = 1; i <= lineCount; i++) {\n            const lineIndex = (lineCount + startLineNumber - i - 1) % lineCount;\n            const text = model.getLineContent(lineIndex + 1);\n            const r = this._findLastMatchInLine(searcher, text, lineIndex + 1, captureMatches);\n            if (r) {\n                return r;\n            }\n        }\n        return null;\n    }\n    static _findLastMatchInLine(searcher, text, lineNumber, captureMatches) {\n        let bestResult = null;\n        let m;\n        searcher.reset(0);\n        while ((m = searcher.next(text))) {\n            bestResult = createFindMatch(new Range(lineNumber, m.index + 1, lineNumber, m.index + 1 + m[0].length), m, captureMatches);\n        }\n        return bestResult;\n    }\n}\nfunction leftIsWordBounday(wordSeparators, text, textLength, matchStartIndex, matchLength) {\n    if (matchStartIndex === 0) {\n        // Match starts at start of string\n        return true;\n    }\n    const charBefore = text.charCodeAt(matchStartIndex - 1);\n    if (wordSeparators.get(charBefore) !== 0 /* WordCharacterClass.Regular */) {\n        // The character before the match is a word separator\n        return true;\n    }\n    if (charBefore === 13 /* CharCode.CarriageReturn */ || charBefore === 10 /* CharCode.LineFeed */) {\n        // The character before the match is line break or carriage return.\n        return true;\n    }\n    if (matchLength > 0) {\n        const firstCharInMatch = text.charCodeAt(matchStartIndex);\n        if (wordSeparators.get(firstCharInMatch) !== 0 /* WordCharacterClass.Regular */) {\n            // The first character inside the match is a word separator\n            return true;\n        }\n    }\n    return false;\n}\nfunction rightIsWordBounday(wordSeparators, text, textLength, matchStartIndex, matchLength) {\n    if (matchStartIndex + matchLength === textLength) {\n        // Match ends at end of string\n        return true;\n    }\n    const charAfter = text.charCodeAt(matchStartIndex + matchLength);\n    if (wordSeparators.get(charAfter) !== 0 /* WordCharacterClass.Regular */) {\n        // The character after the match is a word separator\n        return true;\n    }\n    if (charAfter === 13 /* CharCode.CarriageReturn */ || charAfter === 10 /* CharCode.LineFeed */) {\n        // The character after the match is line break or carriage return.\n        return true;\n    }\n    if (matchLength > 0) {\n        const lastCharInMatch = text.charCodeAt(matchStartIndex + matchLength - 1);\n        if (wordSeparators.get(lastCharInMatch) !== 0 /* WordCharacterClass.Regular */) {\n            // The last character in the match is a word separator\n            return true;\n        }\n    }\n    return false;\n}\nexport function isValidMatch(wordSeparators, text, textLength, matchStartIndex, matchLength) {\n    return (leftIsWordBounday(wordSeparators, text, textLength, matchStartIndex, matchLength)\n        && rightIsWordBounday(wordSeparators, text, textLength, matchStartIndex, matchLength));\n}\nexport class Searcher {\n    constructor(wordSeparators, searchRegex) {\n        this._wordSeparators = wordSeparators;\n        this._searchRegex = searchRegex;\n        this._prevMatchStartIndex = -1;\n        this._prevMatchLength = 0;\n    }\n    reset(lastIndex) {\n        this._searchRegex.lastIndex = lastIndex;\n        this._prevMatchStartIndex = -1;\n        this._prevMatchLength = 0;\n    }\n    next(text) {\n        const textLength = text.length;\n        let m;\n        do {\n            if (this._prevMatchStartIndex + this._prevMatchLength === textLength) {\n                // Reached the end of the line\n                return null;\n            }\n            m = this._searchRegex.exec(text);\n            if (!m) {\n                return null;\n            }\n            const matchStartIndex = m.index;\n            const matchLength = m[0].length;\n            if (matchStartIndex === this._prevMatchStartIndex && matchLength === this._prevMatchLength) {\n                if (matchLength === 0) {\n                    // the search result is an empty string and won't advance `regex.lastIndex`, so `regex.exec` will stuck here\n                    // we attempt to recover from that by advancing by two if surrogate pair found and by one otherwise\n                    if (strings.getNextCodePoint(text, textLength, this._searchRegex.lastIndex) > 0xFFFF) {\n                        this._searchRegex.lastIndex += 2;\n                    }\n                    else {\n                        this._searchRegex.lastIndex += 1;\n                    }\n                    continue;\n                }\n                // Exit early if the regex matches the same range twice\n                return null;\n            }\n            this._prevMatchStartIndex = matchStartIndex;\n            this._prevMatchLength = matchLength;\n            if (!this._wordSeparators || isValidMatch(this._wordSeparators, text, textLength, matchStartIndex, matchLength)) {\n                return m;\n            }\n        } while (m);\n        return null;\n    }\n}\n"],"mappings":"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"}]}