{"remainingRequest":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js!/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/common/model/textModel.js","dependencies":[{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/common/model/textModel.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/babel.config.js","mtime":1668271197000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js","mtime":456789000000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","ArrayQueue","pushMany","Color","onUnexpectedError","Emitter","combinedDisposable","Disposable","strings","URI","countEOL","normalizeIndentation","Position","Range","Selection","EDITOR_MODEL_DEFAULTS","ILanguageService","ILanguageConfigurationService","model","BracketPairsTextModelPart","ColorizedBracketPairsDecorationProvider","EditStack","GuidesTextModelPart","guessIndentation","IntervalNode","IntervalTree","recomputeMaxEnd","PieceTreeTextBuffer","PieceTreeTextBufferBuilder","SearchParams","TextModelSearch","TokenizationTextModelPart","InternalModelContentChangeEvent","LineInjectedText","ModelInjectedTextChangedEvent","ModelRawContentChangedEvent","ModelRawEOLChanged","ModelRawFlush","ModelRawLineChanged","ModelRawLinesDeleted","ModelRawLinesInserted","IUndoRedoService","createTextBufferFactory","text","builder","acceptChunk","finish","createTextBufferFactoryFromSnapshot","snapshot","chunk","read","createTextBuffer","value","defaultEOL","factory","isITextSnapshot","create","MODEL_ID","LIMIT_FIND_COUNT","LONG_LINE_BOUNDARY","TextModelSnapshot","source","_source","_eos","result","resultCnt","resultLength","tmp","join","invalidFunc","Error","TextModel","languageId","creationOptions","associatedResource","_undoRedoService","_languageService","_languageConfigurationService","_onWillDispose","_register","onWillDispose","event","_onDidChangeDecorations","DidChangeDecorationsEmitter","affectedInjectedTextLines","handleBeforeFireDecorationsChangedEvent","onDidChangeDecorations","_onDidChangeOptions","onDidChangeOptions","_onDidChangeAttached","onDidChangeAttached","_onDidChangeInjectedText","_eventEmitter","DidChangeContentEmitter","_deltaDecorationCallCnt","id","isForSimpleWidget","_associatedResource","parse","_attachedEditorCount","textBuffer","disposable","_buffer","_bufferDisposable","_options","resolveOptions","_bracketPairs","_guidesTextModelPart","_decorationProvider","_tokenizationTextModelPart","bufferLineCount","getLineCount","bufferTextLength","getValueLengthInRange","getLineLength","largeFileOptimizations","_isTooLargeForTokenization","LARGE_FILE_SIZE_THRESHOLD","LARGE_FILE_LINE_COUNT_THRESHOLD","_isTooLargeForSyncing","MODEL_SYNC_LIMIT","_versionId","_alternativeVersionId","_initialUndoRedoSnapshot","_isDisposed","__isDisposing","_instanceId","singleLetterHash","_lastDecorationId","_decorations","_decorationsTree","DecorationsTrees","_commandManager","_isUndoing","_isRedoing","_trimAutoWhitespaceLines","onDidChange","beginDeferredEmit","fire","endDeferredEmit","onDidChangeLanguage","onDidChangeLanguageConfiguration","onDidChangeTokens","listener","slowEvent","e","contentChangedEvent","fastEvent","dispose","emptyDisposedTextBuffer","None","rawChange","change","handleDidChangeContent","_assertNotDisposed","_setValueFromTextBuffer","range","rangeOffset","rangeLength","isUndoing","isRedoing","isFlush","changes","eol","getEOL","versionId","getVersionId","textBufferDisposable","oldFullModelRange","getFullModelRange","oldModelValueLength","endLineNumber","endColumn","getLineMaxColumn","_increaseVersionId","flush","clear","_emitContentChangedEvent","_createContentChanged2","getValue","newEOL","_onBeforeEOLChange","setEOL","_onAfterEOLChange","ensureAllNodesHaveRanges","allDecorations","collectNodesPostOrder","len","node","delta","cachedAbsoluteStart","start","startOffset","getOffsetAt","startLineNumber","startColumn","endOffset","cachedAbsoluteEnd","cachedVersionId","end","handleDidChangeAttached","undefined","isTooLargeForTokenization","smallLineCharCount","longLineCharCount","lineCount","lineNumber","lineLength","tabSize","indentSize","insertSpaces","_newOpts","trimAutoWhitespace","bracketPairColorizationOptions","bracketColorizationOptions","newOpts","TextModelResolvedOptions","equals","createChangeEvent","handleDidChangeOptions","defaultInsertSpaces","defaultTabSize","guessedIndentation","updateOptions","str","mightContainRTL","mightContainUnusualLineTerminators","selections","matches","findMatches","UNUSUAL_LINE_TERMINATORS","resetMightContainUnusualLineTerminators","pushEditOperations","map","m","mightContainNonBasicASCII","rawPosition","position","_validatePosition","column","rawOffset","offset","Math","min","getLength","max","getPositionAt","newAlternativeVersionId","newInitialUndoRedoSnapshot","preserveBOM","fullModelRange","fullModelValue","getValueInRange","getBOM","createSnapshot","rawRange","validateRange","getCharacterCountInRange","getLineContent","getLinesContent","getLineFirstNonWhitespaceColumn","getLineLastNonWhitespaceColumn","linesCount","initialStartLineNumber","initialStartColumn","floor","isNaN","maxColumn","initialEndLineNumber","initialEndColumn","validationType","charCodeBefore","getLineCharCode","isHighSurrogate","_lineNumber","_column","_isValidPosition","charCodeBeforeStart","charCodeBeforeEnd","startInsideSurrogatePair","endInsideSurrogatePair","_range","_isValidRange","candidate","searchRange","searchData","captureMatches","limitResultCount","findMatchesLineByLine","searchString","rawSearchScope","isRegex","matchCase","wordSeparators","searchRanges","Array","isArray","every","searchScope","isIRange","sort","d1","d2","uniqueSearchRanges","push","reduce","prev","curr","areIntersecting","plusRange","matchMapper","indexOf","searchParams","parseSearchRequest","arr","concat","rawSearchStart","searchStart","validatePosition","ret","findNextMatch","findPreviousMatch","pushStackElement","popStackElement","currentEOL","uri","pushEOL","rawOperation","ValidAnnotatedEditOperation","identifier","forceMoveMarkers","isAutoWhitespaceEdit","_isTracked","rawOperations","_validateEditOperation","beforeCursorState","editOperations","cursorStateComputer","_pushEditOperations","_validateEditOperations","incomingEdits","op","editsAreNearCursors","sel","foundEditNearSel","j","lenJ","editRange","selIsAbove","selIsBelow","trimLineNumber","maxLineColumn","allowTrimLine","editText","isEmpty","charAt","trimRange","pushEditOperation","resultingAlternativeVersionId","resultingSelection","edits","rangeStart","newPosition","rangeEnd","newEnd","oldText","_applyUndoRedoEdits","oldPosition","oldEnd","newText","applyEdits","_overwriteAlternativeVersionId","computeUndoEdits","operations","_doApplyEdits","oldLineCount","newLineCount","contentChanges","trimAutoWhitespaceLineNumbers","eolCount","firstLineLength","lastLineLength","acceptEdit","acceptReplace","rawContentChanges","deletingLinesCnt","insertingLinesCnt","editingLinesCnt","changeLineCountDelta","currentEditStartLineNumber","firstEditLineNumber","lastInsertedLineNumber","decorationsWithInjectedTextInEditedRange","getInjectedTextInInterval","injectedTextInEditedRange","fromDecorations","injectedTextInEditedRangeQueue","editLineNumber","currentEditLineNumber","takeFromEndWhile","decorationsInCurrentLine","spliceStartLineNumber","spliceLineNumber","cnt","fromLineNumber","injectedTexts","newLines","takeWhile","reverseEdits","undo","canUndo","redo","canRedo","size","affectedLines","from","lineChangeEvents","_getInjectedTextInLine","callback","ownerId","_changeDecorations","changeAccessor","addDecoration","options","_deltaDecorationsImpl","changeDecoration","newRange","_changeDecorationImpl","changeDecorationOptions","_changeDecorationOptionsImpl","_normalizeOptions","removeDecoration","deltaDecorations","oldDecorations","newDecorations","console","warn","getDecorationRange","newStickiness","TRACKED_RANGE_OPTIONS","delete","_validateRangeRelaxedNoAllocations","reset","setOptions","insert","nodes","collectNodesFromOwner","decorationId","getNodeRange","filterOutValidation","getLinesDecorations","_startLineNumber","_endLineNumber","decorations","_getDecorationsInRange","getDecorationsInRange","validatedRange","getAll","getAllInjectedText","filter","t","getAllDecorations","filterRange","filterOwnerId","getAllInInterval","getRangeAt","after","oldRange","recordLineAffectedByInjectedText","before","checkAffectedAndFire","nodeWasInOverviewRuler","overviewRuler","color","nodeIsInOverviewRuler","nodeRange","oldDecorationsIds","oldDecorationsLen","oldDecorationIndex","newDecorationsLen","newDecorationIndex","internalDecorationId","newDecoration","tokenization","getLanguageId","setLanguageId","getLanguageIdAtPosition","getWordAtPosition","getWordUntilPosition","affinity","indentOfLine","detectIndentation","DEFAULT_CREATION_OPTIONS","line","indent","isNodeInOverviewRuler","isNodeInjectedText","_decorationsTree0","_decorationsTree1","_injectedTextDecorationsTree","host","_intervalSearch","_ensureNodesHaveRanges","r0","intervalSearch","r1","r2","showIfCollapsed","search","overviewRulerOnly","_search","_resolveNode","resolveNode","textLength","cleanClassName","className","replace","DecorationOptions","darkColor","ModelDecorationOverviewRulerOptions","_resolvedColor","OverviewRulerLane","Center","theme","type","_resolveColor","getColor","toString","ModelDecorationMinimapOptions","fromHex","ModelDecorationInjectedTextOptions","content","inlineClassName","inlineClassNameAffectsLetterSpacing","attachedData","cursorStops","ModelDecorationOptions","_a","_b","description","blockClassName","stickiness","zIndex","hoverMessage","glyphMarginHoverMessage","isWholeLine","collapseOnReplaceEdit","minimap","glyphMarginClassName","linesDecorationsClassName","firstLineDecorationClassName","marginClassName","beforeContentClassName","afterContentClassName","hideInCommentTokens","hideInStringTokens","EMPTY","register","createDynamic","handleBeforeFire","_actual","_affectedInjectedTextLines","_deferredCnt","_shouldFire","_affectsMinimap","_affectsOverviewRuler","affectsMinimap","affectsOverviewRuler","Set","add","_fastEmitter","_slowEmitter","_deferredEvent","rawContentChangedEvent","merge"],"sources":["/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/common/model/textModel.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport { ArrayQueue, pushMany } from '../../../base/common/arrays.js';\nimport { Color } from '../../../base/common/color.js';\nimport { onUnexpectedError } from '../../../base/common/errors.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { combinedDisposable, Disposable } from '../../../base/common/lifecycle.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { countEOL } from '../core/eolCounter.js';\nimport { normalizeIndentation } from '../core/indentation.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { Selection } from '../core/selection.js';\nimport { EDITOR_MODEL_DEFAULTS } from '../core/textModelDefaults.js';\nimport { ILanguageService } from '../languages/language.js';\nimport { ILanguageConfigurationService } from '../languages/languageConfigurationRegistry.js';\nimport * as model from '../model.js';\nimport { BracketPairsTextModelPart } from './bracketPairsTextModelPart/bracketPairsImpl.js';\nimport { ColorizedBracketPairsDecorationProvider } from './bracketPairsTextModelPart/colorizedBracketPairsDecorationProvider.js';\nimport { EditStack } from './editStack.js';\nimport { GuidesTextModelPart } from './guidesTextModelPart.js';\nimport { guessIndentation } from './indentationGuesser.js';\nimport { IntervalNode, IntervalTree, recomputeMaxEnd } from './intervalTree.js';\nimport { PieceTreeTextBuffer } from './pieceTreeTextBuffer/pieceTreeTextBuffer.js';\nimport { PieceTreeTextBufferBuilder } from './pieceTreeTextBuffer/pieceTreeTextBufferBuilder.js';\nimport { SearchParams, TextModelSearch } from './textModelSearch.js';\nimport { TokenizationTextModelPart } from './tokenizationTextModelPart.js';\nimport { InternalModelContentChangeEvent, LineInjectedText, ModelInjectedTextChangedEvent, ModelRawContentChangedEvent, ModelRawEOLChanged, ModelRawFlush, ModelRawLineChanged, ModelRawLinesDeleted, ModelRawLinesInserted } from '../textModelEvents.js';\nimport { IUndoRedoService } from '../../../platform/undoRedo/common/undoRedo.js';\nexport function createTextBufferFactory(text) {\n    const builder = new PieceTreeTextBufferBuilder();\n    builder.acceptChunk(text);\n    return builder.finish();\n}\nexport function createTextBufferFactoryFromSnapshot(snapshot) {\n    const builder = new PieceTreeTextBufferBuilder();\n    let chunk;\n    while (typeof (chunk = snapshot.read()) === 'string') {\n        builder.acceptChunk(chunk);\n    }\n    return builder.finish();\n}\nexport function createTextBuffer(value, defaultEOL) {\n    let factory;\n    if (typeof value === 'string') {\n        factory = createTextBufferFactory(value);\n    }\n    else if (model.isITextSnapshot(value)) {\n        factory = createTextBufferFactoryFromSnapshot(value);\n    }\n    else {\n        factory = value;\n    }\n    return factory.create(defaultEOL);\n}\nlet MODEL_ID = 0;\nconst LIMIT_FIND_COUNT = 999;\nexport const LONG_LINE_BOUNDARY = 10000;\nclass TextModelSnapshot {\n    constructor(source) {\n        this._source = source;\n        this._eos = false;\n    }\n    read() {\n        if (this._eos) {\n            return null;\n        }\n        const result = [];\n        let resultCnt = 0;\n        let resultLength = 0;\n        do {\n            const tmp = this._source.read();\n            if (tmp === null) {\n                // end-of-stream\n                this._eos = true;\n                if (resultCnt === 0) {\n                    return null;\n                }\n                else {\n                    return result.join('');\n                }\n            }\n            if (tmp.length > 0) {\n                result[resultCnt++] = tmp;\n                resultLength += tmp.length;\n            }\n            if (resultLength >= 64 * 1024) {\n                return result.join('');\n            }\n        } while (true);\n    }\n}\nconst invalidFunc = () => { throw new Error(`Invalid change accessor`); };\nlet TextModel = class TextModel extends Disposable {\n    constructor(source, languageId, creationOptions, associatedResource = null, _undoRedoService, _languageService, _languageConfigurationService) {\n        super();\n        this._undoRedoService = _undoRedoService;\n        this._languageService = _languageService;\n        this._languageConfigurationService = _languageConfigurationService;\n        //#region Events\n        this._onWillDispose = this._register(new Emitter());\n        this.onWillDispose = this._onWillDispose.event;\n        this._onDidChangeDecorations = this._register(new DidChangeDecorationsEmitter(affectedInjectedTextLines => this.handleBeforeFireDecorationsChangedEvent(affectedInjectedTextLines)));\n        this.onDidChangeDecorations = this._onDidChangeDecorations.event;\n        this._onDidChangeOptions = this._register(new Emitter());\n        this.onDidChangeOptions = this._onDidChangeOptions.event;\n        this._onDidChangeAttached = this._register(new Emitter());\n        this.onDidChangeAttached = this._onDidChangeAttached.event;\n        this._onDidChangeInjectedText = this._register(new Emitter());\n        this._eventEmitter = this._register(new DidChangeContentEmitter());\n        this._deltaDecorationCallCnt = 0;\n        // Generate a new unique model id\n        MODEL_ID++;\n        this.id = '$model' + MODEL_ID;\n        this.isForSimpleWidget = creationOptions.isForSimpleWidget;\n        if (typeof associatedResource === 'undefined' || associatedResource === null) {\n            this._associatedResource = URI.parse('inmemory://model/' + MODEL_ID);\n        }\n        else {\n            this._associatedResource = associatedResource;\n        }\n        this._attachedEditorCount = 0;\n        const { textBuffer, disposable } = createTextBuffer(source, creationOptions.defaultEOL);\n        this._buffer = textBuffer;\n        this._bufferDisposable = disposable;\n        this._options = TextModel.resolveOptions(this._buffer, creationOptions);\n        this._bracketPairs = this._register(new BracketPairsTextModelPart(this, this._languageConfigurationService));\n        this._guidesTextModelPart = this._register(new GuidesTextModelPart(this, this._languageConfigurationService));\n        this._decorationProvider = this._register(new ColorizedBracketPairsDecorationProvider(this));\n        this._tokenizationTextModelPart = new TokenizationTextModelPart(this._languageService, this._languageConfigurationService, this, this._bracketPairs, languageId);\n        const bufferLineCount = this._buffer.getLineCount();\n        const bufferTextLength = this._buffer.getValueLengthInRange(new Range(1, 1, bufferLineCount, this._buffer.getLineLength(bufferLineCount) + 1), 0 /* model.EndOfLinePreference.TextDefined */);\n        // !!! Make a decision in the ctor and permanently respect this decision !!!\n        // If a model is too large at construction time, it will never get tokenized,\n        // under no circumstances.\n        if (creationOptions.largeFileOptimizations) {\n            this._isTooLargeForTokenization = ((bufferTextLength > TextModel.LARGE_FILE_SIZE_THRESHOLD)\n                || (bufferLineCount > TextModel.LARGE_FILE_LINE_COUNT_THRESHOLD));\n        }\n        else {\n            this._isTooLargeForTokenization = false;\n        }\n        this._isTooLargeForSyncing = (bufferTextLength > TextModel.MODEL_SYNC_LIMIT);\n        this._versionId = 1;\n        this._alternativeVersionId = 1;\n        this._initialUndoRedoSnapshot = null;\n        this._isDisposed = false;\n        this.__isDisposing = false;\n        this._instanceId = strings.singleLetterHash(MODEL_ID);\n        this._lastDecorationId = 0;\n        this._decorations = Object.create(null);\n        this._decorationsTree = new DecorationsTrees();\n        this._commandManager = new EditStack(this, this._undoRedoService);\n        this._isUndoing = false;\n        this._isRedoing = false;\n        this._trimAutoWhitespaceLines = null;\n        this._register(this._decorationProvider.onDidChange(() => {\n            this._onDidChangeDecorations.beginDeferredEmit();\n            this._onDidChangeDecorations.fire();\n            this._onDidChangeDecorations.endDeferredEmit();\n        }));\n    }\n    static resolveOptions(textBuffer, options) {\n        if (options.detectIndentation) {\n            const guessedIndentation = guessIndentation(textBuffer, options.tabSize, options.insertSpaces);\n            return new model.TextModelResolvedOptions({\n                tabSize: guessedIndentation.tabSize,\n                indentSize: guessedIndentation.tabSize,\n                insertSpaces: guessedIndentation.insertSpaces,\n                trimAutoWhitespace: options.trimAutoWhitespace,\n                defaultEOL: options.defaultEOL,\n                bracketPairColorizationOptions: options.bracketPairColorizationOptions,\n            });\n        }\n        return new model.TextModelResolvedOptions({\n            tabSize: options.tabSize,\n            indentSize: options.indentSize,\n            insertSpaces: options.insertSpaces,\n            trimAutoWhitespace: options.trimAutoWhitespace,\n            defaultEOL: options.defaultEOL,\n            bracketPairColorizationOptions: options.bracketPairColorizationOptions,\n        });\n    }\n    get onDidChangeLanguage() { return this._tokenizationTextModelPart.onDidChangeLanguage; }\n    get onDidChangeLanguageConfiguration() { return this._tokenizationTextModelPart.onDidChangeLanguageConfiguration; }\n    get onDidChangeTokens() { return this._tokenizationTextModelPart.onDidChangeTokens; }\n    onDidChangeContent(listener) {\n        return this._eventEmitter.slowEvent((e) => listener(e.contentChangedEvent));\n    }\n    onDidChangeContentOrInjectedText(listener) {\n        return combinedDisposable(this._eventEmitter.fastEvent(e => listener(e)), this._onDidChangeInjectedText.event(e => listener(e)));\n    }\n    _isDisposing() { return this.__isDisposing; }\n    get tokenization() { return this._tokenizationTextModelPart; }\n    get bracketPairs() { return this._bracketPairs; }\n    get guides() { return this._guidesTextModelPart; }\n    dispose() {\n        this.__isDisposing = true;\n        this._onWillDispose.fire();\n        this._tokenizationTextModelPart.dispose();\n        this._isDisposed = true;\n        super.dispose();\n        this._bufferDisposable.dispose();\n        this.__isDisposing = false;\n        // Manually release reference to previous text buffer to avoid large leaks\n        // in case someone leaks a TextModel reference\n        const emptyDisposedTextBuffer = new PieceTreeTextBuffer([], '', '\\n', false, false, true, true);\n        emptyDisposedTextBuffer.dispose();\n        this._buffer = emptyDisposedTextBuffer;\n        this._bufferDisposable = Disposable.None;\n    }\n    _assertNotDisposed() {\n        if (this._isDisposed) {\n            throw new Error('Model is disposed!');\n        }\n    }\n    _emitContentChangedEvent(rawChange, change) {\n        if (this.__isDisposing) {\n            // Do not confuse listeners by emitting any event after disposing\n            return;\n        }\n        this._tokenizationTextModelPart.handleDidChangeContent(change);\n        this._bracketPairs.handleDidChangeContent(change);\n        this._eventEmitter.fire(new InternalModelContentChangeEvent(rawChange, change));\n    }\n    setValue(value) {\n        this._assertNotDisposed();\n        if (value === null) {\n            // There's nothing to do\n            return;\n        }\n        const { textBuffer, disposable } = createTextBuffer(value, this._options.defaultEOL);\n        this._setValueFromTextBuffer(textBuffer, disposable);\n    }\n    _createContentChanged2(range, rangeOffset, rangeLength, text, isUndoing, isRedoing, isFlush) {\n        return {\n            changes: [{\n                    range: range,\n                    rangeOffset: rangeOffset,\n                    rangeLength: rangeLength,\n                    text: text,\n                }],\n            eol: this._buffer.getEOL(),\n            versionId: this.getVersionId(),\n            isUndoing: isUndoing,\n            isRedoing: isRedoing,\n            isFlush: isFlush\n        };\n    }\n    _setValueFromTextBuffer(textBuffer, textBufferDisposable) {\n        this._assertNotDisposed();\n        const oldFullModelRange = this.getFullModelRange();\n        const oldModelValueLength = this.getValueLengthInRange(oldFullModelRange);\n        const endLineNumber = this.getLineCount();\n        const endColumn = this.getLineMaxColumn(endLineNumber);\n        this._buffer = textBuffer;\n        this._bufferDisposable.dispose();\n        this._bufferDisposable = textBufferDisposable;\n        this._increaseVersionId();\n        // Flush all tokens\n        this._tokenizationTextModelPart.flush();\n        // Destroy all my decorations\n        this._decorations = Object.create(null);\n        this._decorationsTree = new DecorationsTrees();\n        // Destroy my edit history and settings\n        this._commandManager.clear();\n        this._trimAutoWhitespaceLines = null;\n        this._emitContentChangedEvent(new ModelRawContentChangedEvent([\n            new ModelRawFlush()\n        ], this._versionId, false, false), this._createContentChanged2(new Range(1, 1, endLineNumber, endColumn), 0, oldModelValueLength, this.getValue(), false, false, true));\n    }\n    setEOL(eol) {\n        this._assertNotDisposed();\n        const newEOL = (eol === 1 /* model.EndOfLineSequence.CRLF */ ? '\\r\\n' : '\\n');\n        if (this._buffer.getEOL() === newEOL) {\n            // Nothing to do\n            return;\n        }\n        const oldFullModelRange = this.getFullModelRange();\n        const oldModelValueLength = this.getValueLengthInRange(oldFullModelRange);\n        const endLineNumber = this.getLineCount();\n        const endColumn = this.getLineMaxColumn(endLineNumber);\n        this._onBeforeEOLChange();\n        this._buffer.setEOL(newEOL);\n        this._increaseVersionId();\n        this._onAfterEOLChange();\n        this._emitContentChangedEvent(new ModelRawContentChangedEvent([\n            new ModelRawEOLChanged()\n        ], this._versionId, false, false), this._createContentChanged2(new Range(1, 1, endLineNumber, endColumn), 0, oldModelValueLength, this.getValue(), false, false, false));\n    }\n    _onBeforeEOLChange() {\n        // Ensure all decorations get their `range` set.\n        this._decorationsTree.ensureAllNodesHaveRanges(this);\n    }\n    _onAfterEOLChange() {\n        // Transform back `range` to offsets\n        const versionId = this.getVersionId();\n        const allDecorations = this._decorationsTree.collectNodesPostOrder();\n        for (let i = 0, len = allDecorations.length; i < len; i++) {\n            const node = allDecorations[i];\n            const range = node.range; // the range is defined due to `_onBeforeEOLChange`\n            const delta = node.cachedAbsoluteStart - node.start;\n            const startOffset = this._buffer.getOffsetAt(range.startLineNumber, range.startColumn);\n            const endOffset = this._buffer.getOffsetAt(range.endLineNumber, range.endColumn);\n            node.cachedAbsoluteStart = startOffset;\n            node.cachedAbsoluteEnd = endOffset;\n            node.cachedVersionId = versionId;\n            node.start = startOffset - delta;\n            node.end = endOffset - delta;\n            recomputeMaxEnd(node);\n        }\n    }\n    onBeforeAttached() {\n        this._attachedEditorCount++;\n        if (this._attachedEditorCount === 1) {\n            this._tokenizationTextModelPart.handleDidChangeAttached();\n            this._onDidChangeAttached.fire(undefined);\n        }\n    }\n    onBeforeDetached() {\n        this._attachedEditorCount--;\n        if (this._attachedEditorCount === 0) {\n            this._tokenizationTextModelPart.handleDidChangeAttached();\n            this._onDidChangeAttached.fire(undefined);\n        }\n    }\n    isAttachedToEditor() {\n        return this._attachedEditorCount > 0;\n    }\n    getAttachedEditorCount() {\n        return this._attachedEditorCount;\n    }\n    isTooLargeForSyncing() {\n        return this._isTooLargeForSyncing;\n    }\n    isTooLargeForTokenization() {\n        return this._isTooLargeForTokenization;\n    }\n    isDisposed() {\n        return this._isDisposed;\n    }\n    isDominatedByLongLines() {\n        this._assertNotDisposed();\n        if (this.isTooLargeForTokenization()) {\n            // Cannot word wrap huge files anyways, so it doesn't really matter\n            return false;\n        }\n        let smallLineCharCount = 0;\n        let longLineCharCount = 0;\n        const lineCount = this._buffer.getLineCount();\n        for (let lineNumber = 1; lineNumber <= lineCount; lineNumber++) {\n            const lineLength = this._buffer.getLineLength(lineNumber);\n            if (lineLength >= LONG_LINE_BOUNDARY) {\n                longLineCharCount += lineLength;\n            }\n            else {\n                smallLineCharCount += lineLength;\n            }\n        }\n        return (longLineCharCount > smallLineCharCount);\n    }\n    get uri() {\n        return this._associatedResource;\n    }\n    //#region Options\n    getOptions() {\n        this._assertNotDisposed();\n        return this._options;\n    }\n    getFormattingOptions() {\n        return {\n            tabSize: this._options.indentSize,\n            insertSpaces: this._options.insertSpaces\n        };\n    }\n    updateOptions(_newOpts) {\n        this._assertNotDisposed();\n        const tabSize = (typeof _newOpts.tabSize !== 'undefined') ? _newOpts.tabSize : this._options.tabSize;\n        const indentSize = (typeof _newOpts.indentSize !== 'undefined') ? _newOpts.indentSize : this._options.indentSize;\n        const insertSpaces = (typeof _newOpts.insertSpaces !== 'undefined') ? _newOpts.insertSpaces : this._options.insertSpaces;\n        const trimAutoWhitespace = (typeof _newOpts.trimAutoWhitespace !== 'undefined') ? _newOpts.trimAutoWhitespace : this._options.trimAutoWhitespace;\n        const bracketPairColorizationOptions = (typeof _newOpts.bracketColorizationOptions !== 'undefined') ? _newOpts.bracketColorizationOptions : this._options.bracketPairColorizationOptions;\n        const newOpts = new model.TextModelResolvedOptions({\n            tabSize: tabSize,\n            indentSize: indentSize,\n            insertSpaces: insertSpaces,\n            defaultEOL: this._options.defaultEOL,\n            trimAutoWhitespace: trimAutoWhitespace,\n            bracketPairColorizationOptions,\n        });\n        if (this._options.equals(newOpts)) {\n            return;\n        }\n        const e = this._options.createChangeEvent(newOpts);\n        this._options = newOpts;\n        this._bracketPairs.handleDidChangeOptions(e);\n        this._decorationProvider.handleDidChangeOptions(e);\n        this._onDidChangeOptions.fire(e);\n    }\n    detectIndentation(defaultInsertSpaces, defaultTabSize) {\n        this._assertNotDisposed();\n        const guessedIndentation = guessIndentation(this._buffer, defaultTabSize, defaultInsertSpaces);\n        this.updateOptions({\n            insertSpaces: guessedIndentation.insertSpaces,\n            tabSize: guessedIndentation.tabSize,\n            indentSize: guessedIndentation.tabSize, // TODO@Alex: guess indentSize independent of tabSize\n        });\n    }\n    normalizeIndentation(str) {\n        this._assertNotDisposed();\n        return normalizeIndentation(str, this._options.indentSize, this._options.insertSpaces);\n    }\n    //#endregion\n    //#region Reading\n    getVersionId() {\n        this._assertNotDisposed();\n        return this._versionId;\n    }\n    mightContainRTL() {\n        return this._buffer.mightContainRTL();\n    }\n    mightContainUnusualLineTerminators() {\n        return this._buffer.mightContainUnusualLineTerminators();\n    }\n    removeUnusualLineTerminators(selections = null) {\n        const matches = this.findMatches(strings.UNUSUAL_LINE_TERMINATORS.source, false, true, false, null, false, 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */);\n        this._buffer.resetMightContainUnusualLineTerminators();\n        this.pushEditOperations(selections, matches.map(m => ({ range: m.range, text: null })), () => null);\n    }\n    mightContainNonBasicASCII() {\n        return this._buffer.mightContainNonBasicASCII();\n    }\n    getAlternativeVersionId() {\n        this._assertNotDisposed();\n        return this._alternativeVersionId;\n    }\n    getInitialUndoRedoSnapshot() {\n        this._assertNotDisposed();\n        return this._initialUndoRedoSnapshot;\n    }\n    getOffsetAt(rawPosition) {\n        this._assertNotDisposed();\n        const position = this._validatePosition(rawPosition.lineNumber, rawPosition.column, 0 /* StringOffsetValidationType.Relaxed */);\n        return this._buffer.getOffsetAt(position.lineNumber, position.column);\n    }\n    getPositionAt(rawOffset) {\n        this._assertNotDisposed();\n        const offset = (Math.min(this._buffer.getLength(), Math.max(0, rawOffset)));\n        return this._buffer.getPositionAt(offset);\n    }\n    _increaseVersionId() {\n        this._versionId = this._versionId + 1;\n        this._alternativeVersionId = this._versionId;\n    }\n    _overwriteVersionId(versionId) {\n        this._versionId = versionId;\n    }\n    _overwriteAlternativeVersionId(newAlternativeVersionId) {\n        this._alternativeVersionId = newAlternativeVersionId;\n    }\n    _overwriteInitialUndoRedoSnapshot(newInitialUndoRedoSnapshot) {\n        this._initialUndoRedoSnapshot = newInitialUndoRedoSnapshot;\n    }\n    getValue(eol, preserveBOM = false) {\n        this._assertNotDisposed();\n        const fullModelRange = this.getFullModelRange();\n        const fullModelValue = this.getValueInRange(fullModelRange, eol);\n        if (preserveBOM) {\n            return this._buffer.getBOM() + fullModelValue;\n        }\n        return fullModelValue;\n    }\n    createSnapshot(preserveBOM = false) {\n        return new TextModelSnapshot(this._buffer.createSnapshot(preserveBOM));\n    }\n    getValueLength(eol, preserveBOM = false) {\n        this._assertNotDisposed();\n        const fullModelRange = this.getFullModelRange();\n        const fullModelValue = this.getValueLengthInRange(fullModelRange, eol);\n        if (preserveBOM) {\n            return this._buffer.getBOM().length + fullModelValue;\n        }\n        return fullModelValue;\n    }\n    getValueInRange(rawRange, eol = 0 /* model.EndOfLinePreference.TextDefined */) {\n        this._assertNotDisposed();\n        return this._buffer.getValueInRange(this.validateRange(rawRange), eol);\n    }\n    getValueLengthInRange(rawRange, eol = 0 /* model.EndOfLinePreference.TextDefined */) {\n        this._assertNotDisposed();\n        return this._buffer.getValueLengthInRange(this.validateRange(rawRange), eol);\n    }\n    getCharacterCountInRange(rawRange, eol = 0 /* model.EndOfLinePreference.TextDefined */) {\n        this._assertNotDisposed();\n        return this._buffer.getCharacterCountInRange(this.validateRange(rawRange), eol);\n    }\n    getLineCount() {\n        this._assertNotDisposed();\n        return this._buffer.getLineCount();\n    }\n    getLineContent(lineNumber) {\n        this._assertNotDisposed();\n        if (lineNumber < 1 || lineNumber > this.getLineCount()) {\n            throw new Error('Illegal value for lineNumber');\n        }\n        return this._buffer.getLineContent(lineNumber);\n    }\n    getLineLength(lineNumber) {\n        this._assertNotDisposed();\n        if (lineNumber < 1 || lineNumber > this.getLineCount()) {\n            throw new Error('Illegal value for lineNumber');\n        }\n        return this._buffer.getLineLength(lineNumber);\n    }\n    getLinesContent() {\n        this._assertNotDisposed();\n        return this._buffer.getLinesContent();\n    }\n    getEOL() {\n        this._assertNotDisposed();\n        return this._buffer.getEOL();\n    }\n    getEndOfLineSequence() {\n        this._assertNotDisposed();\n        return (this._buffer.getEOL() === '\\n'\n            ? 0 /* model.EndOfLineSequence.LF */\n            : 1 /* model.EndOfLineSequence.CRLF */);\n    }\n    getLineMinColumn(lineNumber) {\n        this._assertNotDisposed();\n        return 1;\n    }\n    getLineMaxColumn(lineNumber) {\n        this._assertNotDisposed();\n        if (lineNumber < 1 || lineNumber > this.getLineCount()) {\n            throw new Error('Illegal value for lineNumber');\n        }\n        return this._buffer.getLineLength(lineNumber) + 1;\n    }\n    getLineFirstNonWhitespaceColumn(lineNumber) {\n        this._assertNotDisposed();\n        if (lineNumber < 1 || lineNumber > this.getLineCount()) {\n            throw new Error('Illegal value for lineNumber');\n        }\n        return this._buffer.getLineFirstNonWhitespaceColumn(lineNumber);\n    }\n    getLineLastNonWhitespaceColumn(lineNumber) {\n        this._assertNotDisposed();\n        if (lineNumber < 1 || lineNumber > this.getLineCount()) {\n            throw new Error('Illegal value for lineNumber');\n        }\n        return this._buffer.getLineLastNonWhitespaceColumn(lineNumber);\n    }\n    /**\n     * Validates `range` is within buffer bounds, but allows it to sit in between surrogate pairs, etc.\n     * Will try to not allocate if possible.\n     */\n    _validateRangeRelaxedNoAllocations(range) {\n        const linesCount = this._buffer.getLineCount();\n        const initialStartLineNumber = range.startLineNumber;\n        const initialStartColumn = range.startColumn;\n        let startLineNumber = Math.floor((typeof initialStartLineNumber === 'number' && !isNaN(initialStartLineNumber)) ? initialStartLineNumber : 1);\n        let startColumn = Math.floor((typeof initialStartColumn === 'number' && !isNaN(initialStartColumn)) ? initialStartColumn : 1);\n        if (startLineNumber < 1) {\n            startLineNumber = 1;\n            startColumn = 1;\n        }\n        else if (startLineNumber > linesCount) {\n            startLineNumber = linesCount;\n            startColumn = this.getLineMaxColumn(startLineNumber);\n        }\n        else {\n            if (startColumn <= 1) {\n                startColumn = 1;\n            }\n            else {\n                const maxColumn = this.getLineMaxColumn(startLineNumber);\n                if (startColumn >= maxColumn) {\n                    startColumn = maxColumn;\n                }\n            }\n        }\n        const initialEndLineNumber = range.endLineNumber;\n        const initialEndColumn = range.endColumn;\n        let endLineNumber = Math.floor((typeof initialEndLineNumber === 'number' && !isNaN(initialEndLineNumber)) ? initialEndLineNumber : 1);\n        let endColumn = Math.floor((typeof initialEndColumn === 'number' && !isNaN(initialEndColumn)) ? initialEndColumn : 1);\n        if (endLineNumber < 1) {\n            endLineNumber = 1;\n            endColumn = 1;\n        }\n        else if (endLineNumber > linesCount) {\n            endLineNumber = linesCount;\n            endColumn = this.getLineMaxColumn(endLineNumber);\n        }\n        else {\n            if (endColumn <= 1) {\n                endColumn = 1;\n            }\n            else {\n                const maxColumn = this.getLineMaxColumn(endLineNumber);\n                if (endColumn >= maxColumn) {\n                    endColumn = maxColumn;\n                }\n            }\n        }\n        if (initialStartLineNumber === startLineNumber\n            && initialStartColumn === startColumn\n            && initialEndLineNumber === endLineNumber\n            && initialEndColumn === endColumn\n            && range instanceof Range\n            && !(range instanceof Selection)) {\n            return range;\n        }\n        return new Range(startLineNumber, startColumn, endLineNumber, endColumn);\n    }\n    _isValidPosition(lineNumber, column, validationType) {\n        if (typeof lineNumber !== 'number' || typeof column !== 'number') {\n            return false;\n        }\n        if (isNaN(lineNumber) || isNaN(column)) {\n            return false;\n        }\n        if (lineNumber < 1 || column < 1) {\n            return false;\n        }\n        if ((lineNumber | 0) !== lineNumber || (column | 0) !== column) {\n            return false;\n        }\n        const lineCount = this._buffer.getLineCount();\n        if (lineNumber > lineCount) {\n            return false;\n        }\n        if (column === 1) {\n            return true;\n        }\n        const maxColumn = this.getLineMaxColumn(lineNumber);\n        if (column > maxColumn) {\n            return false;\n        }\n        if (validationType === 1 /* StringOffsetValidationType.SurrogatePairs */) {\n            // !!At this point, column > 1\n            const charCodeBefore = this._buffer.getLineCharCode(lineNumber, column - 2);\n            if (strings.isHighSurrogate(charCodeBefore)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    _validatePosition(_lineNumber, _column, validationType) {\n        const lineNumber = Math.floor((typeof _lineNumber === 'number' && !isNaN(_lineNumber)) ? _lineNumber : 1);\n        const column = Math.floor((typeof _column === 'number' && !isNaN(_column)) ? _column : 1);\n        const lineCount = this._buffer.getLineCount();\n        if (lineNumber < 1) {\n            return new Position(1, 1);\n        }\n        if (lineNumber > lineCount) {\n            return new Position(lineCount, this.getLineMaxColumn(lineCount));\n        }\n        if (column <= 1) {\n            return new Position(lineNumber, 1);\n        }\n        const maxColumn = this.getLineMaxColumn(lineNumber);\n        if (column >= maxColumn) {\n            return new Position(lineNumber, maxColumn);\n        }\n        if (validationType === 1 /* StringOffsetValidationType.SurrogatePairs */) {\n            // If the position would end up in the middle of a high-low surrogate pair,\n            // we move it to before the pair\n            // !!At this point, column > 1\n            const charCodeBefore = this._buffer.getLineCharCode(lineNumber, column - 2);\n            if (strings.isHighSurrogate(charCodeBefore)) {\n                return new Position(lineNumber, column - 1);\n            }\n        }\n        return new Position(lineNumber, column);\n    }\n    validatePosition(position) {\n        const validationType = 1 /* StringOffsetValidationType.SurrogatePairs */;\n        this._assertNotDisposed();\n        // Avoid object allocation and cover most likely case\n        if (position instanceof Position) {\n            if (this._isValidPosition(position.lineNumber, position.column, validationType)) {\n                return position;\n            }\n        }\n        return this._validatePosition(position.lineNumber, position.column, validationType);\n    }\n    _isValidRange(range, validationType) {\n        const startLineNumber = range.startLineNumber;\n        const startColumn = range.startColumn;\n        const endLineNumber = range.endLineNumber;\n        const endColumn = range.endColumn;\n        if (!this._isValidPosition(startLineNumber, startColumn, 0 /* StringOffsetValidationType.Relaxed */)) {\n            return false;\n        }\n        if (!this._isValidPosition(endLineNumber, endColumn, 0 /* StringOffsetValidationType.Relaxed */)) {\n            return false;\n        }\n        if (validationType === 1 /* StringOffsetValidationType.SurrogatePairs */) {\n            const charCodeBeforeStart = (startColumn > 1 ? this._buffer.getLineCharCode(startLineNumber, startColumn - 2) : 0);\n            const charCodeBeforeEnd = (endColumn > 1 && endColumn <= this._buffer.getLineLength(endLineNumber) ? this._buffer.getLineCharCode(endLineNumber, endColumn - 2) : 0);\n            const startInsideSurrogatePair = strings.isHighSurrogate(charCodeBeforeStart);\n            const endInsideSurrogatePair = strings.isHighSurrogate(charCodeBeforeEnd);\n            if (!startInsideSurrogatePair && !endInsideSurrogatePair) {\n                return true;\n            }\n            return false;\n        }\n        return true;\n    }\n    validateRange(_range) {\n        const validationType = 1 /* StringOffsetValidationType.SurrogatePairs */;\n        this._assertNotDisposed();\n        // Avoid object allocation and cover most likely case\n        if ((_range instanceof Range) && !(_range instanceof Selection)) {\n            if (this._isValidRange(_range, validationType)) {\n                return _range;\n            }\n        }\n        const start = this._validatePosition(_range.startLineNumber, _range.startColumn, 0 /* StringOffsetValidationType.Relaxed */);\n        const end = this._validatePosition(_range.endLineNumber, _range.endColumn, 0 /* StringOffsetValidationType.Relaxed */);\n        const startLineNumber = start.lineNumber;\n        const startColumn = start.column;\n        const endLineNumber = end.lineNumber;\n        const endColumn = end.column;\n        if (validationType === 1 /* StringOffsetValidationType.SurrogatePairs */) {\n            const charCodeBeforeStart = (startColumn > 1 ? this._buffer.getLineCharCode(startLineNumber, startColumn - 2) : 0);\n            const charCodeBeforeEnd = (endColumn > 1 && endColumn <= this._buffer.getLineLength(endLineNumber) ? this._buffer.getLineCharCode(endLineNumber, endColumn - 2) : 0);\n            const startInsideSurrogatePair = strings.isHighSurrogate(charCodeBeforeStart);\n            const endInsideSurrogatePair = strings.isHighSurrogate(charCodeBeforeEnd);\n            if (!startInsideSurrogatePair && !endInsideSurrogatePair) {\n                return new Range(startLineNumber, startColumn, endLineNumber, endColumn);\n            }\n            if (startLineNumber === endLineNumber && startColumn === endColumn) {\n                // do not expand a collapsed range, simply move it to a valid location\n                return new Range(startLineNumber, startColumn - 1, endLineNumber, endColumn - 1);\n            }\n            if (startInsideSurrogatePair && endInsideSurrogatePair) {\n                // expand range at both ends\n                return new Range(startLineNumber, startColumn - 1, endLineNumber, endColumn + 1);\n            }\n            if (startInsideSurrogatePair) {\n                // only expand range at the start\n                return new Range(startLineNumber, startColumn - 1, endLineNumber, endColumn);\n            }\n            // only expand range at the end\n            return new Range(startLineNumber, startColumn, endLineNumber, endColumn + 1);\n        }\n        return new Range(startLineNumber, startColumn, endLineNumber, endColumn);\n    }\n    modifyPosition(rawPosition, offset) {\n        this._assertNotDisposed();\n        const candidate = this.getOffsetAt(rawPosition) + offset;\n        return this.getPositionAt(Math.min(this._buffer.getLength(), Math.max(0, candidate)));\n    }\n    getFullModelRange() {\n        this._assertNotDisposed();\n        const lineCount = this.getLineCount();\n        return new Range(1, 1, lineCount, this.getLineMaxColumn(lineCount));\n    }\n    findMatchesLineByLine(searchRange, searchData, captureMatches, limitResultCount) {\n        return this._buffer.findMatchesLineByLine(searchRange, searchData, captureMatches, limitResultCount);\n    }\n    findMatches(searchString, rawSearchScope, isRegex, matchCase, wordSeparators, captureMatches, limitResultCount = LIMIT_FIND_COUNT) {\n        this._assertNotDisposed();\n        let searchRanges = null;\n        if (rawSearchScope !== null) {\n            if (!Array.isArray(rawSearchScope)) {\n                rawSearchScope = [rawSearchScope];\n            }\n            if (rawSearchScope.every((searchScope) => Range.isIRange(searchScope))) {\n                searchRanges = rawSearchScope.map((searchScope) => this.validateRange(searchScope));\n            }\n        }\n        if (searchRanges === null) {\n            searchRanges = [this.getFullModelRange()];\n        }\n        searchRanges = searchRanges.sort((d1, d2) => d1.startLineNumber - d2.startLineNumber || d1.startColumn - d2.startColumn);\n        const uniqueSearchRanges = [];\n        uniqueSearchRanges.push(searchRanges.reduce((prev, curr) => {\n            if (Range.areIntersecting(prev, curr)) {\n                return prev.plusRange(curr);\n            }\n            uniqueSearchRanges.push(prev);\n            return curr;\n        }));\n        let matchMapper;\n        if (!isRegex && searchString.indexOf('\\n') < 0) {\n            // not regex, not multi line\n            const searchParams = new SearchParams(searchString, isRegex, matchCase, wordSeparators);\n            const searchData = searchParams.parseSearchRequest();\n            if (!searchData) {\n                return [];\n            }\n            matchMapper = (searchRange) => this.findMatchesLineByLine(searchRange, searchData, captureMatches, limitResultCount);\n        }\n        else {\n            matchMapper = (searchRange) => TextModelSearch.findMatches(this, new SearchParams(searchString, isRegex, matchCase, wordSeparators), searchRange, captureMatches, limitResultCount);\n        }\n        return uniqueSearchRanges.map(matchMapper).reduce((arr, matches) => arr.concat(matches), []);\n    }\n    findNextMatch(searchString, rawSearchStart, isRegex, matchCase, wordSeparators, captureMatches) {\n        this._assertNotDisposed();\n        const searchStart = this.validatePosition(rawSearchStart);\n        if (!isRegex && searchString.indexOf('\\n') < 0) {\n            const searchParams = new SearchParams(searchString, isRegex, matchCase, wordSeparators);\n            const searchData = searchParams.parseSearchRequest();\n            if (!searchData) {\n                return null;\n            }\n            const lineCount = this.getLineCount();\n            let searchRange = new Range(searchStart.lineNumber, searchStart.column, lineCount, this.getLineMaxColumn(lineCount));\n            let ret = this.findMatchesLineByLine(searchRange, searchData, captureMatches, 1);\n            TextModelSearch.findNextMatch(this, new SearchParams(searchString, isRegex, matchCase, wordSeparators), searchStart, captureMatches);\n            if (ret.length > 0) {\n                return ret[0];\n            }\n            searchRange = new Range(1, 1, searchStart.lineNumber, this.getLineMaxColumn(searchStart.lineNumber));\n            ret = this.findMatchesLineByLine(searchRange, searchData, captureMatches, 1);\n            if (ret.length > 0) {\n                return ret[0];\n            }\n            return null;\n        }\n        return TextModelSearch.findNextMatch(this, new SearchParams(searchString, isRegex, matchCase, wordSeparators), searchStart, captureMatches);\n    }\n    findPreviousMatch(searchString, rawSearchStart, isRegex, matchCase, wordSeparators, captureMatches) {\n        this._assertNotDisposed();\n        const searchStart = this.validatePosition(rawSearchStart);\n        return TextModelSearch.findPreviousMatch(this, new SearchParams(searchString, isRegex, matchCase, wordSeparators), searchStart, captureMatches);\n    }\n    //#endregion\n    //#region Editing\n    pushStackElement() {\n        this._commandManager.pushStackElement();\n    }\n    popStackElement() {\n        this._commandManager.popStackElement();\n    }\n    pushEOL(eol) {\n        const currentEOL = (this.getEOL() === '\\n' ? 0 /* model.EndOfLineSequence.LF */ : 1 /* model.EndOfLineSequence.CRLF */);\n        if (currentEOL === eol) {\n            return;\n        }\n        try {\n            this._onDidChangeDecorations.beginDeferredEmit();\n            this._eventEmitter.beginDeferredEmit();\n            if (this._initialUndoRedoSnapshot === null) {\n                this._initialUndoRedoSnapshot = this._undoRedoService.createSnapshot(this.uri);\n            }\n            this._commandManager.pushEOL(eol);\n        }\n        finally {\n            this._eventEmitter.endDeferredEmit();\n            this._onDidChangeDecorations.endDeferredEmit();\n        }\n    }\n    _validateEditOperation(rawOperation) {\n        if (rawOperation instanceof model.ValidAnnotatedEditOperation) {\n            return rawOperation;\n        }\n        return new model.ValidAnnotatedEditOperation(rawOperation.identifier || null, this.validateRange(rawOperation.range), rawOperation.text, rawOperation.forceMoveMarkers || false, rawOperation.isAutoWhitespaceEdit || false, rawOperation._isTracked || false);\n    }\n    _validateEditOperations(rawOperations) {\n        const result = [];\n        for (let i = 0, len = rawOperations.length; i < len; i++) {\n            result[i] = this._validateEditOperation(rawOperations[i]);\n        }\n        return result;\n    }\n    pushEditOperations(beforeCursorState, editOperations, cursorStateComputer) {\n        try {\n            this._onDidChangeDecorations.beginDeferredEmit();\n            this._eventEmitter.beginDeferredEmit();\n            return this._pushEditOperations(beforeCursorState, this._validateEditOperations(editOperations), cursorStateComputer);\n        }\n        finally {\n            this._eventEmitter.endDeferredEmit();\n            this._onDidChangeDecorations.endDeferredEmit();\n        }\n    }\n    _pushEditOperations(beforeCursorState, editOperations, cursorStateComputer) {\n        if (this._options.trimAutoWhitespace && this._trimAutoWhitespaceLines) {\n            // Go through each saved line number and insert a trim whitespace edit\n            // if it is safe to do so (no conflicts with other edits).\n            const incomingEdits = editOperations.map((op) => {\n                return {\n                    range: this.validateRange(op.range),\n                    text: op.text\n                };\n            });\n            // Sometimes, auto-formatters change ranges automatically which can cause undesired auto whitespace trimming near the cursor\n            // We'll use the following heuristic: if the edits occur near the cursor, then it's ok to trim auto whitespace\n            let editsAreNearCursors = true;\n            if (beforeCursorState) {\n                for (let i = 0, len = beforeCursorState.length; i < len; i++) {\n                    const sel = beforeCursorState[i];\n                    let foundEditNearSel = false;\n                    for (let j = 0, lenJ = incomingEdits.length; j < lenJ; j++) {\n                        const editRange = incomingEdits[j].range;\n                        const selIsAbove = editRange.startLineNumber > sel.endLineNumber;\n                        const selIsBelow = sel.startLineNumber > editRange.endLineNumber;\n                        if (!selIsAbove && !selIsBelow) {\n                            foundEditNearSel = true;\n                            break;\n                        }\n                    }\n                    if (!foundEditNearSel) {\n                        editsAreNearCursors = false;\n                        break;\n                    }\n                }\n            }\n            if (editsAreNearCursors) {\n                for (let i = 0, len = this._trimAutoWhitespaceLines.length; i < len; i++) {\n                    const trimLineNumber = this._trimAutoWhitespaceLines[i];\n                    const maxLineColumn = this.getLineMaxColumn(trimLineNumber);\n                    let allowTrimLine = true;\n                    for (let j = 0, lenJ = incomingEdits.length; j < lenJ; j++) {\n                        const editRange = incomingEdits[j].range;\n                        const editText = incomingEdits[j].text;\n                        if (trimLineNumber < editRange.startLineNumber || trimLineNumber > editRange.endLineNumber) {\n                            // `trimLine` is completely outside this edit\n                            continue;\n                        }\n                        // At this point:\n                        //   editRange.startLineNumber <= trimLine <= editRange.endLineNumber\n                        if (trimLineNumber === editRange.startLineNumber && editRange.startColumn === maxLineColumn\n                            && editRange.isEmpty() && editText && editText.length > 0 && editText.charAt(0) === '\\n') {\n                            // This edit inserts a new line (and maybe other text) after `trimLine`\n                            continue;\n                        }\n                        if (trimLineNumber === editRange.startLineNumber && editRange.startColumn === 1\n                            && editRange.isEmpty() && editText && editText.length > 0 && editText.charAt(editText.length - 1) === '\\n') {\n                            // This edit inserts a new line (and maybe other text) before `trimLine`\n                            continue;\n                        }\n                        // Looks like we can't trim this line as it would interfere with an incoming edit\n                        allowTrimLine = false;\n                        break;\n                    }\n                    if (allowTrimLine) {\n                        const trimRange = new Range(trimLineNumber, 1, trimLineNumber, maxLineColumn);\n                        editOperations.push(new model.ValidAnnotatedEditOperation(null, trimRange, null, false, false, false));\n                    }\n                }\n            }\n            this._trimAutoWhitespaceLines = null;\n        }\n        if (this._initialUndoRedoSnapshot === null) {\n            this._initialUndoRedoSnapshot = this._undoRedoService.createSnapshot(this.uri);\n        }\n        return this._commandManager.pushEditOperation(beforeCursorState, editOperations, cursorStateComputer);\n    }\n    _applyUndo(changes, eol, resultingAlternativeVersionId, resultingSelection) {\n        const edits = changes.map((change) => {\n            const rangeStart = this.getPositionAt(change.newPosition);\n            const rangeEnd = this.getPositionAt(change.newEnd);\n            return {\n                range: new Range(rangeStart.lineNumber, rangeStart.column, rangeEnd.lineNumber, rangeEnd.column),\n                text: change.oldText\n            };\n        });\n        this._applyUndoRedoEdits(edits, eol, true, false, resultingAlternativeVersionId, resultingSelection);\n    }\n    _applyRedo(changes, eol, resultingAlternativeVersionId, resultingSelection) {\n        const edits = changes.map((change) => {\n            const rangeStart = this.getPositionAt(change.oldPosition);\n            const rangeEnd = this.getPositionAt(change.oldEnd);\n            return {\n                range: new Range(rangeStart.lineNumber, rangeStart.column, rangeEnd.lineNumber, rangeEnd.column),\n                text: change.newText\n            };\n        });\n        this._applyUndoRedoEdits(edits, eol, false, true, resultingAlternativeVersionId, resultingSelection);\n    }\n    _applyUndoRedoEdits(edits, eol, isUndoing, isRedoing, resultingAlternativeVersionId, resultingSelection) {\n        try {\n            this._onDidChangeDecorations.beginDeferredEmit();\n            this._eventEmitter.beginDeferredEmit();\n            this._isUndoing = isUndoing;\n            this._isRedoing = isRedoing;\n            this.applyEdits(edits, false);\n            this.setEOL(eol);\n            this._overwriteAlternativeVersionId(resultingAlternativeVersionId);\n        }\n        finally {\n            this._isUndoing = false;\n            this._isRedoing = false;\n            this._eventEmitter.endDeferredEmit(resultingSelection);\n            this._onDidChangeDecorations.endDeferredEmit();\n        }\n    }\n    applyEdits(rawOperations, computeUndoEdits = false) {\n        try {\n            this._onDidChangeDecorations.beginDeferredEmit();\n            this._eventEmitter.beginDeferredEmit();\n            const operations = this._validateEditOperations(rawOperations);\n            return this._doApplyEdits(operations, computeUndoEdits);\n        }\n        finally {\n            this._eventEmitter.endDeferredEmit();\n            this._onDidChangeDecorations.endDeferredEmit();\n        }\n    }\n    _doApplyEdits(rawOperations, computeUndoEdits) {\n        const oldLineCount = this._buffer.getLineCount();\n        const result = this._buffer.applyEdits(rawOperations, this._options.trimAutoWhitespace, computeUndoEdits);\n        const newLineCount = this._buffer.getLineCount();\n        const contentChanges = result.changes;\n        this._trimAutoWhitespaceLines = result.trimAutoWhitespaceLineNumbers;\n        if (contentChanges.length !== 0) {\n            // We do a first pass to update tokens and decorations\n            // because we want to read decorations in the second pass\n            // where we will emit content change events\n            // and we want to read the final decorations\n            for (let i = 0, len = contentChanges.length; i < len; i++) {\n                const change = contentChanges[i];\n                const [eolCount, firstLineLength, lastLineLength] = countEOL(change.text);\n                this._tokenizationTextModelPart.acceptEdit(change.range, change.text, eolCount, firstLineLength, lastLineLength);\n                this._decorationsTree.acceptReplace(change.rangeOffset, change.rangeLength, change.text.length, change.forceMoveMarkers);\n            }\n            const rawContentChanges = [];\n            this._increaseVersionId();\n            let lineCount = oldLineCount;\n            for (let i = 0, len = contentChanges.length; i < len; i++) {\n                const change = contentChanges[i];\n                const [eolCount] = countEOL(change.text);\n                this._onDidChangeDecorations.fire();\n                const startLineNumber = change.range.startLineNumber;\n                const endLineNumber = change.range.endLineNumber;\n                const deletingLinesCnt = endLineNumber - startLineNumber;\n                const insertingLinesCnt = eolCount;\n                const editingLinesCnt = Math.min(deletingLinesCnt, insertingLinesCnt);\n                const changeLineCountDelta = (insertingLinesCnt - deletingLinesCnt);\n                const currentEditStartLineNumber = newLineCount - lineCount - changeLineCountDelta + startLineNumber;\n                const firstEditLineNumber = currentEditStartLineNumber;\n                const lastInsertedLineNumber = currentEditStartLineNumber + insertingLinesCnt;\n                const decorationsWithInjectedTextInEditedRange = this._decorationsTree.getInjectedTextInInterval(this, this.getOffsetAt(new Position(firstEditLineNumber, 1)), this.getOffsetAt(new Position(lastInsertedLineNumber, this.getLineMaxColumn(lastInsertedLineNumber))), 0);\n                const injectedTextInEditedRange = LineInjectedText.fromDecorations(decorationsWithInjectedTextInEditedRange);\n                const injectedTextInEditedRangeQueue = new ArrayQueue(injectedTextInEditedRange);\n                for (let j = editingLinesCnt; j >= 0; j--) {\n                    const editLineNumber = startLineNumber + j;\n                    const currentEditLineNumber = currentEditStartLineNumber + j;\n                    injectedTextInEditedRangeQueue.takeFromEndWhile(r => r.lineNumber > currentEditLineNumber);\n                    const decorationsInCurrentLine = injectedTextInEditedRangeQueue.takeFromEndWhile(r => r.lineNumber === currentEditLineNumber);\n                    rawContentChanges.push(new ModelRawLineChanged(editLineNumber, this.getLineContent(currentEditLineNumber), decorationsInCurrentLine));\n                }\n                if (editingLinesCnt < deletingLinesCnt) {\n                    // Must delete some lines\n                    const spliceStartLineNumber = startLineNumber + editingLinesCnt;\n                    rawContentChanges.push(new ModelRawLinesDeleted(spliceStartLineNumber + 1, endLineNumber));\n                }\n                if (editingLinesCnt < insertingLinesCnt) {\n                    const injectedTextInEditedRangeQueue = new ArrayQueue(injectedTextInEditedRange);\n                    // Must insert some lines\n                    const spliceLineNumber = startLineNumber + editingLinesCnt;\n                    const cnt = insertingLinesCnt - editingLinesCnt;\n                    const fromLineNumber = newLineCount - lineCount - cnt + spliceLineNumber + 1;\n                    const injectedTexts = [];\n                    const newLines = [];\n                    for (let i = 0; i < cnt; i++) {\n                        const lineNumber = fromLineNumber + i;\n                        newLines[i] = this.getLineContent(lineNumber);\n                        injectedTextInEditedRangeQueue.takeWhile(r => r.lineNumber < lineNumber);\n                        injectedTexts[i] = injectedTextInEditedRangeQueue.takeWhile(r => r.lineNumber === lineNumber);\n                    }\n                    rawContentChanges.push(new ModelRawLinesInserted(spliceLineNumber + 1, startLineNumber + insertingLinesCnt, newLines, injectedTexts));\n                }\n                lineCount += changeLineCountDelta;\n            }\n            this._emitContentChangedEvent(new ModelRawContentChangedEvent(rawContentChanges, this.getVersionId(), this._isUndoing, this._isRedoing), {\n                changes: contentChanges,\n                eol: this._buffer.getEOL(),\n                versionId: this.getVersionId(),\n                isUndoing: this._isUndoing,\n                isRedoing: this._isRedoing,\n                isFlush: false\n            });\n        }\n        return (result.reverseEdits === null ? undefined : result.reverseEdits);\n    }\n    undo() {\n        return this._undoRedoService.undo(this.uri);\n    }\n    canUndo() {\n        return this._undoRedoService.canUndo(this.uri);\n    }\n    redo() {\n        return this._undoRedoService.redo(this.uri);\n    }\n    canRedo() {\n        return this._undoRedoService.canRedo(this.uri);\n    }\n    //#endregion\n    //#region Decorations\n    handleBeforeFireDecorationsChangedEvent(affectedInjectedTextLines) {\n        // This is called before the decoration changed event is fired.\n        if (affectedInjectedTextLines === null || affectedInjectedTextLines.size === 0) {\n            return;\n        }\n        const affectedLines = Array.from(affectedInjectedTextLines);\n        const lineChangeEvents = affectedLines.map(lineNumber => new ModelRawLineChanged(lineNumber, this.getLineContent(lineNumber), this._getInjectedTextInLine(lineNumber)));\n        this._onDidChangeInjectedText.fire(new ModelInjectedTextChangedEvent(lineChangeEvents));\n    }\n    changeDecorations(callback, ownerId = 0) {\n        this._assertNotDisposed();\n        try {\n            this._onDidChangeDecorations.beginDeferredEmit();\n            return this._changeDecorations(ownerId, callback);\n        }\n        finally {\n            this._onDidChangeDecorations.endDeferredEmit();\n        }\n    }\n    _changeDecorations(ownerId, callback) {\n        const changeAccessor = {\n            addDecoration: (range, options) => {\n                return this._deltaDecorationsImpl(ownerId, [], [{ range: range, options: options }])[0];\n            },\n            changeDecoration: (id, newRange) => {\n                this._changeDecorationImpl(id, newRange);\n            },\n            changeDecorationOptions: (id, options) => {\n                this._changeDecorationOptionsImpl(id, _normalizeOptions(options));\n            },\n            removeDecoration: (id) => {\n                this._deltaDecorationsImpl(ownerId, [id], []);\n            },\n            deltaDecorations: (oldDecorations, newDecorations) => {\n                if (oldDecorations.length === 0 && newDecorations.length === 0) {\n                    // nothing to do\n                    return [];\n                }\n                return this._deltaDecorationsImpl(ownerId, oldDecorations, newDecorations);\n            }\n        };\n        let result = null;\n        try {\n            result = callback(changeAccessor);\n        }\n        catch (e) {\n            onUnexpectedError(e);\n        }\n        // Invalidate change accessor\n        changeAccessor.addDecoration = invalidFunc;\n        changeAccessor.changeDecoration = invalidFunc;\n        changeAccessor.changeDecorationOptions = invalidFunc;\n        changeAccessor.removeDecoration = invalidFunc;\n        changeAccessor.deltaDecorations = invalidFunc;\n        return result;\n    }\n    deltaDecorations(oldDecorations, newDecorations, ownerId = 0) {\n        this._assertNotDisposed();\n        if (!oldDecorations) {\n            oldDecorations = [];\n        }\n        if (oldDecorations.length === 0 && newDecorations.length === 0) {\n            // nothing to do\n            return [];\n        }\n        try {\n            this._deltaDecorationCallCnt++;\n            if (this._deltaDecorationCallCnt > 1) {\n                console.warn(`Invoking deltaDecorations recursively could lead to leaking decorations.`);\n                onUnexpectedError(new Error(`Invoking deltaDecorations recursively could lead to leaking decorations.`));\n            }\n            this._onDidChangeDecorations.beginDeferredEmit();\n            return this._deltaDecorationsImpl(ownerId, oldDecorations, newDecorations);\n        }\n        finally {\n            this._onDidChangeDecorations.endDeferredEmit();\n            this._deltaDecorationCallCnt--;\n        }\n    }\n    _getTrackedRange(id) {\n        return this.getDecorationRange(id);\n    }\n    _setTrackedRange(id, newRange, newStickiness) {\n        const node = (id ? this._decorations[id] : null);\n        if (!node) {\n            if (!newRange) {\n                // node doesn't exist, the request is to delete => nothing to do\n                return null;\n            }\n            // node doesn't exist, the request is to set => add the tracked range\n            return this._deltaDecorationsImpl(0, [], [{ range: newRange, options: TRACKED_RANGE_OPTIONS[newStickiness] }])[0];\n        }\n        if (!newRange) {\n            // node exists, the request is to delete => delete node\n            this._decorationsTree.delete(node);\n            delete this._decorations[node.id];\n            return null;\n        }\n        // node exists, the request is to set => change the tracked range and its options\n        const range = this._validateRangeRelaxedNoAllocations(newRange);\n        const startOffset = this._buffer.getOffsetAt(range.startLineNumber, range.startColumn);\n        const endOffset = this._buffer.getOffsetAt(range.endLineNumber, range.endColumn);\n        this._decorationsTree.delete(node);\n        node.reset(this.getVersionId(), startOffset, endOffset, range);\n        node.setOptions(TRACKED_RANGE_OPTIONS[newStickiness]);\n        this._decorationsTree.insert(node);\n        return node.id;\n    }\n    removeAllDecorationsWithOwnerId(ownerId) {\n        if (this._isDisposed) {\n            return;\n        }\n        const nodes = this._decorationsTree.collectNodesFromOwner(ownerId);\n        for (let i = 0, len = nodes.length; i < len; i++) {\n            const node = nodes[i];\n            this._decorationsTree.delete(node);\n            delete this._decorations[node.id];\n        }\n    }\n    getDecorationOptions(decorationId) {\n        const node = this._decorations[decorationId];\n        if (!node) {\n            return null;\n        }\n        return node.options;\n    }\n    getDecorationRange(decorationId) {\n        const node = this._decorations[decorationId];\n        if (!node) {\n            return null;\n        }\n        return this._decorationsTree.getNodeRange(this, node);\n    }\n    getLineDecorations(lineNumber, ownerId = 0, filterOutValidation = false) {\n        if (lineNumber < 1 || lineNumber > this.getLineCount()) {\n            return [];\n        }\n        return this.getLinesDecorations(lineNumber, lineNumber, ownerId, filterOutValidation);\n    }\n    getLinesDecorations(_startLineNumber, _endLineNumber, ownerId = 0, filterOutValidation = false) {\n        const lineCount = this.getLineCount();\n        const startLineNumber = Math.min(lineCount, Math.max(1, _startLineNumber));\n        const endLineNumber = Math.min(lineCount, Math.max(1, _endLineNumber));\n        const endColumn = this.getLineMaxColumn(endLineNumber);\n        const range = new Range(startLineNumber, 1, endLineNumber, endColumn);\n        const decorations = this._getDecorationsInRange(range, ownerId, filterOutValidation);\n        pushMany(decorations, this._decorationProvider.getDecorationsInRange(range, ownerId, filterOutValidation));\n        return decorations;\n    }\n    getDecorationsInRange(range, ownerId = 0, filterOutValidation = false) {\n        const validatedRange = this.validateRange(range);\n        const decorations = this._getDecorationsInRange(validatedRange, ownerId, filterOutValidation);\n        pushMany(decorations, this._decorationProvider.getDecorationsInRange(validatedRange, ownerId, filterOutValidation));\n        return decorations;\n    }\n    getOverviewRulerDecorations(ownerId = 0, filterOutValidation = false) {\n        return this._decorationsTree.getAll(this, ownerId, filterOutValidation, true);\n    }\n    getInjectedTextDecorations(ownerId = 0) {\n        return this._decorationsTree.getAllInjectedText(this, ownerId);\n    }\n    _getInjectedTextInLine(lineNumber) {\n        const startOffset = this._buffer.getOffsetAt(lineNumber, 1);\n        const endOffset = startOffset + this._buffer.getLineLength(lineNumber);\n        const result = this._decorationsTree.getInjectedTextInInterval(this, startOffset, endOffset, 0);\n        return LineInjectedText.fromDecorations(result).filter(t => t.lineNumber === lineNumber);\n    }\n    getAllDecorations(ownerId = 0, filterOutValidation = false) {\n        let result = this._decorationsTree.getAll(this, ownerId, filterOutValidation, false);\n        result = result.concat(this._decorationProvider.getAllDecorations(ownerId, filterOutValidation));\n        return result;\n    }\n    _getDecorationsInRange(filterRange, filterOwnerId, filterOutValidation) {\n        const startOffset = this._buffer.getOffsetAt(filterRange.startLineNumber, filterRange.startColumn);\n        const endOffset = this._buffer.getOffsetAt(filterRange.endLineNumber, filterRange.endColumn);\n        return this._decorationsTree.getAllInInterval(this, startOffset, endOffset, filterOwnerId, filterOutValidation);\n    }\n    getRangeAt(start, end) {\n        return this._buffer.getRangeAt(start, end - start);\n    }\n    _changeDecorationImpl(decorationId, _range) {\n        const node = this._decorations[decorationId];\n        if (!node) {\n            return;\n        }\n        if (node.options.after) {\n            const oldRange = this.getDecorationRange(decorationId);\n            this._onDidChangeDecorations.recordLineAffectedByInjectedText(oldRange.endLineNumber);\n        }\n        if (node.options.before) {\n            const oldRange = this.getDecorationRange(decorationId);\n            this._onDidChangeDecorations.recordLineAffectedByInjectedText(oldRange.startLineNumber);\n        }\n        const range = this._validateRangeRelaxedNoAllocations(_range);\n        const startOffset = this._buffer.getOffsetAt(range.startLineNumber, range.startColumn);\n        const endOffset = this._buffer.getOffsetAt(range.endLineNumber, range.endColumn);\n        this._decorationsTree.delete(node);\n        node.reset(this.getVersionId(), startOffset, endOffset, range);\n        this._decorationsTree.insert(node);\n        this._onDidChangeDecorations.checkAffectedAndFire(node.options);\n        if (node.options.after) {\n            this._onDidChangeDecorations.recordLineAffectedByInjectedText(range.endLineNumber);\n        }\n        if (node.options.before) {\n            this._onDidChangeDecorations.recordLineAffectedByInjectedText(range.startLineNumber);\n        }\n    }\n    _changeDecorationOptionsImpl(decorationId, options) {\n        const node = this._decorations[decorationId];\n        if (!node) {\n            return;\n        }\n        const nodeWasInOverviewRuler = (node.options.overviewRuler && node.options.overviewRuler.color ? true : false);\n        const nodeIsInOverviewRuler = (options.overviewRuler && options.overviewRuler.color ? true : false);\n        this._onDidChangeDecorations.checkAffectedAndFire(node.options);\n        this._onDidChangeDecorations.checkAffectedAndFire(options);\n        if (node.options.after || options.after) {\n            const nodeRange = this._decorationsTree.getNodeRange(this, node);\n            this._onDidChangeDecorations.recordLineAffectedByInjectedText(nodeRange.endLineNumber);\n        }\n        if (node.options.before || options.before) {\n            const nodeRange = this._decorationsTree.getNodeRange(this, node);\n            this._onDidChangeDecorations.recordLineAffectedByInjectedText(nodeRange.startLineNumber);\n        }\n        if (nodeWasInOverviewRuler !== nodeIsInOverviewRuler) {\n            // Delete + Insert due to an overview ruler status change\n            this._decorationsTree.delete(node);\n            node.setOptions(options);\n            this._decorationsTree.insert(node);\n        }\n        else {\n            node.setOptions(options);\n        }\n    }\n    _deltaDecorationsImpl(ownerId, oldDecorationsIds, newDecorations) {\n        const versionId = this.getVersionId();\n        const oldDecorationsLen = oldDecorationsIds.length;\n        let oldDecorationIndex = 0;\n        const newDecorationsLen = newDecorations.length;\n        let newDecorationIndex = 0;\n        const result = new Array(newDecorationsLen);\n        while (oldDecorationIndex < oldDecorationsLen || newDecorationIndex < newDecorationsLen) {\n            let node = null;\n            if (oldDecorationIndex < oldDecorationsLen) {\n                // (1) get ourselves an old node\n                do {\n                    node = this._decorations[oldDecorationsIds[oldDecorationIndex++]];\n                } while (!node && oldDecorationIndex < oldDecorationsLen);\n                // (2) remove the node from the tree (if it exists)\n                if (node) {\n                    if (node.options.after) {\n                        const nodeRange = this._decorationsTree.getNodeRange(this, node);\n                        this._onDidChangeDecorations.recordLineAffectedByInjectedText(nodeRange.endLineNumber);\n                    }\n                    if (node.options.before) {\n                        const nodeRange = this._decorationsTree.getNodeRange(this, node);\n                        this._onDidChangeDecorations.recordLineAffectedByInjectedText(nodeRange.startLineNumber);\n                    }\n                    this._decorationsTree.delete(node);\n                    this._onDidChangeDecorations.checkAffectedAndFire(node.options);\n                }\n            }\n            if (newDecorationIndex < newDecorationsLen) {\n                // (3) create a new node if necessary\n                if (!node) {\n                    const internalDecorationId = (++this._lastDecorationId);\n                    const decorationId = `${this._instanceId};${internalDecorationId}`;\n                    node = new IntervalNode(decorationId, 0, 0);\n                    this._decorations[decorationId] = node;\n                }\n                // (4) initialize node\n                const newDecoration = newDecorations[newDecorationIndex];\n                const range = this._validateRangeRelaxedNoAllocations(newDecoration.range);\n                const options = _normalizeOptions(newDecoration.options);\n                const startOffset = this._buffer.getOffsetAt(range.startLineNumber, range.startColumn);\n                const endOffset = this._buffer.getOffsetAt(range.endLineNumber, range.endColumn);\n                node.ownerId = ownerId;\n                node.reset(versionId, startOffset, endOffset, range);\n                node.setOptions(options);\n                if (node.options.after) {\n                    this._onDidChangeDecorations.recordLineAffectedByInjectedText(range.endLineNumber);\n                }\n                if (node.options.before) {\n                    this._onDidChangeDecorations.recordLineAffectedByInjectedText(range.startLineNumber);\n                }\n                this._onDidChangeDecorations.checkAffectedAndFire(options);\n                this._decorationsTree.insert(node);\n                result[newDecorationIndex] = node.id;\n                newDecorationIndex++;\n            }\n            else {\n                if (node) {\n                    delete this._decorations[node.id];\n                }\n            }\n        }\n        return result;\n    }\n    //#endregion\n    //#region Tokenization\n    // TODO move them to the tokenization part.\n    getLanguageId() {\n        return this.tokenization.getLanguageId();\n    }\n    setMode(languageId) {\n        this.tokenization.setLanguageId(languageId);\n    }\n    getLanguageIdAtPosition(lineNumber, column) {\n        return this.tokenization.getLanguageIdAtPosition(lineNumber, column);\n    }\n    getWordAtPosition(position) {\n        return this._tokenizationTextModelPart.getWordAtPosition(position);\n    }\n    getWordUntilPosition(position) {\n        return this._tokenizationTextModelPart.getWordUntilPosition(position);\n    }\n    //#endregion\n    normalizePosition(position, affinity) {\n        return position;\n    }\n    /**\n     * Gets the column at which indentation stops at a given line.\n     * @internal\n    */\n    getLineIndentColumn(lineNumber) {\n        // Columns start with 1.\n        return indentOfLine(this.getLineContent(lineNumber)) + 1;\n    }\n};\nTextModel.MODEL_SYNC_LIMIT = 50 * 1024 * 1024; // 50 MB\nTextModel.LARGE_FILE_SIZE_THRESHOLD = 20 * 1024 * 1024; // 20 MB;\nTextModel.LARGE_FILE_LINE_COUNT_THRESHOLD = 300 * 1000; // 300K lines\nTextModel.DEFAULT_CREATION_OPTIONS = {\n    isForSimpleWidget: false,\n    tabSize: EDITOR_MODEL_DEFAULTS.tabSize,\n    indentSize: EDITOR_MODEL_DEFAULTS.indentSize,\n    insertSpaces: EDITOR_MODEL_DEFAULTS.insertSpaces,\n    detectIndentation: false,\n    defaultEOL: 1 /* model.DefaultEndOfLine.LF */,\n    trimAutoWhitespace: EDITOR_MODEL_DEFAULTS.trimAutoWhitespace,\n    largeFileOptimizations: EDITOR_MODEL_DEFAULTS.largeFileOptimizations,\n    bracketPairColorizationOptions: EDITOR_MODEL_DEFAULTS.bracketPairColorizationOptions,\n};\nTextModel = __decorate([\n    __param(4, IUndoRedoService),\n    __param(5, ILanguageService),\n    __param(6, ILanguageConfigurationService)\n], TextModel);\nexport { TextModel };\nfunction indentOfLine(line) {\n    let indent = 0;\n    for (const c of line) {\n        if (c === ' ' || c === '\\t') {\n            indent++;\n        }\n        else {\n            break;\n        }\n    }\n    return indent;\n}\n//#region Decorations\nfunction isNodeInOverviewRuler(node) {\n    return (node.options.overviewRuler && node.options.overviewRuler.color ? true : false);\n}\nfunction isNodeInjectedText(node) {\n    return !!node.options.after || !!node.options.before;\n}\nclass DecorationsTrees {\n    constructor() {\n        this._decorationsTree0 = new IntervalTree();\n        this._decorationsTree1 = new IntervalTree();\n        this._injectedTextDecorationsTree = new IntervalTree();\n    }\n    ensureAllNodesHaveRanges(host) {\n        this.getAll(host, 0, false, false);\n    }\n    _ensureNodesHaveRanges(host, nodes) {\n        for (const node of nodes) {\n            if (node.range === null) {\n                node.range = host.getRangeAt(node.cachedAbsoluteStart, node.cachedAbsoluteEnd);\n            }\n        }\n        return nodes;\n    }\n    getAllInInterval(host, start, end, filterOwnerId, filterOutValidation) {\n        const versionId = host.getVersionId();\n        const result = this._intervalSearch(start, end, filterOwnerId, filterOutValidation, versionId);\n        return this._ensureNodesHaveRanges(host, result);\n    }\n    _intervalSearch(start, end, filterOwnerId, filterOutValidation, cachedVersionId) {\n        const r0 = this._decorationsTree0.intervalSearch(start, end, filterOwnerId, filterOutValidation, cachedVersionId);\n        const r1 = this._decorationsTree1.intervalSearch(start, end, filterOwnerId, filterOutValidation, cachedVersionId);\n        const r2 = this._injectedTextDecorationsTree.intervalSearch(start, end, filterOwnerId, filterOutValidation, cachedVersionId);\n        return r0.concat(r1).concat(r2);\n    }\n    getInjectedTextInInterval(host, start, end, filterOwnerId) {\n        const versionId = host.getVersionId();\n        const result = this._injectedTextDecorationsTree.intervalSearch(start, end, filterOwnerId, false, versionId);\n        return this._ensureNodesHaveRanges(host, result).filter((i) => i.options.showIfCollapsed || !i.range.isEmpty());\n    }\n    getAllInjectedText(host, filterOwnerId) {\n        const versionId = host.getVersionId();\n        const result = this._injectedTextDecorationsTree.search(filterOwnerId, false, versionId);\n        return this._ensureNodesHaveRanges(host, result).filter((i) => i.options.showIfCollapsed || !i.range.isEmpty());\n    }\n    getAll(host, filterOwnerId, filterOutValidation, overviewRulerOnly) {\n        const versionId = host.getVersionId();\n        const result = this._search(filterOwnerId, filterOutValidation, overviewRulerOnly, versionId);\n        return this._ensureNodesHaveRanges(host, result);\n    }\n    _search(filterOwnerId, filterOutValidation, overviewRulerOnly, cachedVersionId) {\n        if (overviewRulerOnly) {\n            return this._decorationsTree1.search(filterOwnerId, filterOutValidation, cachedVersionId);\n        }\n        else {\n            const r0 = this._decorationsTree0.search(filterOwnerId, filterOutValidation, cachedVersionId);\n            const r1 = this._decorationsTree1.search(filterOwnerId, filterOutValidation, cachedVersionId);\n            const r2 = this._injectedTextDecorationsTree.search(filterOwnerId, filterOutValidation, cachedVersionId);\n            return r0.concat(r1).concat(r2);\n        }\n    }\n    collectNodesFromOwner(ownerId) {\n        const r0 = this._decorationsTree0.collectNodesFromOwner(ownerId);\n        const r1 = this._decorationsTree1.collectNodesFromOwner(ownerId);\n        const r2 = this._injectedTextDecorationsTree.collectNodesFromOwner(ownerId);\n        return r0.concat(r1).concat(r2);\n    }\n    collectNodesPostOrder() {\n        const r0 = this._decorationsTree0.collectNodesPostOrder();\n        const r1 = this._decorationsTree1.collectNodesPostOrder();\n        const r2 = this._injectedTextDecorationsTree.collectNodesPostOrder();\n        return r0.concat(r1).concat(r2);\n    }\n    insert(node) {\n        if (isNodeInjectedText(node)) {\n            this._injectedTextDecorationsTree.insert(node);\n        }\n        else if (isNodeInOverviewRuler(node)) {\n            this._decorationsTree1.insert(node);\n        }\n        else {\n            this._decorationsTree0.insert(node);\n        }\n    }\n    delete(node) {\n        if (isNodeInjectedText(node)) {\n            this._injectedTextDecorationsTree.delete(node);\n        }\n        else if (isNodeInOverviewRuler(node)) {\n            this._decorationsTree1.delete(node);\n        }\n        else {\n            this._decorationsTree0.delete(node);\n        }\n    }\n    getNodeRange(host, node) {\n        const versionId = host.getVersionId();\n        if (node.cachedVersionId !== versionId) {\n            this._resolveNode(node, versionId);\n        }\n        if (node.range === null) {\n            node.range = host.getRangeAt(node.cachedAbsoluteStart, node.cachedAbsoluteEnd);\n        }\n        return node.range;\n    }\n    _resolveNode(node, cachedVersionId) {\n        if (isNodeInjectedText(node)) {\n            this._injectedTextDecorationsTree.resolveNode(node, cachedVersionId);\n        }\n        else if (isNodeInOverviewRuler(node)) {\n            this._decorationsTree1.resolveNode(node, cachedVersionId);\n        }\n        else {\n            this._decorationsTree0.resolveNode(node, cachedVersionId);\n        }\n    }\n    acceptReplace(offset, length, textLength, forceMoveMarkers) {\n        this._decorationsTree0.acceptReplace(offset, length, textLength, forceMoveMarkers);\n        this._decorationsTree1.acceptReplace(offset, length, textLength, forceMoveMarkers);\n        this._injectedTextDecorationsTree.acceptReplace(offset, length, textLength, forceMoveMarkers);\n    }\n}\nfunction cleanClassName(className) {\n    return className.replace(/[^a-z0-9\\-_]/gi, ' ');\n}\nclass DecorationOptions {\n    constructor(options) {\n        this.color = options.color || '';\n        this.darkColor = options.darkColor || '';\n    }\n}\nexport class ModelDecorationOverviewRulerOptions extends DecorationOptions {\n    constructor(options) {\n        super(options);\n        this._resolvedColor = null;\n        this.position = (typeof options.position === 'number' ? options.position : model.OverviewRulerLane.Center);\n    }\n    getColor(theme) {\n        if (!this._resolvedColor) {\n            if (theme.type !== 'light' && this.darkColor) {\n                this._resolvedColor = this._resolveColor(this.darkColor, theme);\n            }\n            else {\n                this._resolvedColor = this._resolveColor(this.color, theme);\n            }\n        }\n        return this._resolvedColor;\n    }\n    invalidateCachedColor() {\n        this._resolvedColor = null;\n    }\n    _resolveColor(color, theme) {\n        if (typeof color === 'string') {\n            return color;\n        }\n        const c = color ? theme.getColor(color.id) : null;\n        if (!c) {\n            return '';\n        }\n        return c.toString();\n    }\n}\nexport class ModelDecorationMinimapOptions extends DecorationOptions {\n    constructor(options) {\n        super(options);\n        this.position = options.position;\n    }\n    getColor(theme) {\n        if (!this._resolvedColor) {\n            if (theme.type !== 'light' && this.darkColor) {\n                this._resolvedColor = this._resolveColor(this.darkColor, theme);\n            }\n            else {\n                this._resolvedColor = this._resolveColor(this.color, theme);\n            }\n        }\n        return this._resolvedColor;\n    }\n    invalidateCachedColor() {\n        this._resolvedColor = undefined;\n    }\n    _resolveColor(color, theme) {\n        if (typeof color === 'string') {\n            return Color.fromHex(color);\n        }\n        return theme.getColor(color.id);\n    }\n}\nexport class ModelDecorationInjectedTextOptions {\n    constructor(options) {\n        this.content = options.content || '';\n        this.inlineClassName = options.inlineClassName || null;\n        this.inlineClassNameAffectsLetterSpacing = options.inlineClassNameAffectsLetterSpacing || false;\n        this.attachedData = options.attachedData || null;\n        this.cursorStops = options.cursorStops || null;\n    }\n    static from(options) {\n        if (options instanceof ModelDecorationInjectedTextOptions) {\n            return options;\n        }\n        return new ModelDecorationInjectedTextOptions(options);\n    }\n}\nexport class ModelDecorationOptions {\n    constructor(options) {\n        var _a, _b;\n        this.description = options.description;\n        this.blockClassName = options.blockClassName ? cleanClassName(options.blockClassName) : null;\n        this.stickiness = options.stickiness || 0 /* model.TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges */;\n        this.zIndex = options.zIndex || 0;\n        this.className = options.className ? cleanClassName(options.className) : null;\n        this.hoverMessage = options.hoverMessage || null;\n        this.glyphMarginHoverMessage = options.glyphMarginHoverMessage || null;\n        this.isWholeLine = options.isWholeLine || false;\n        this.showIfCollapsed = options.showIfCollapsed || false;\n        this.collapseOnReplaceEdit = options.collapseOnReplaceEdit || false;\n        this.overviewRuler = options.overviewRuler ? new ModelDecorationOverviewRulerOptions(options.overviewRuler) : null;\n        this.minimap = options.minimap ? new ModelDecorationMinimapOptions(options.minimap) : null;\n        this.glyphMarginClassName = options.glyphMarginClassName ? cleanClassName(options.glyphMarginClassName) : null;\n        this.linesDecorationsClassName = options.linesDecorationsClassName ? cleanClassName(options.linesDecorationsClassName) : null;\n        this.firstLineDecorationClassName = options.firstLineDecorationClassName ? cleanClassName(options.firstLineDecorationClassName) : null;\n        this.marginClassName = options.marginClassName ? cleanClassName(options.marginClassName) : null;\n        this.inlineClassName = options.inlineClassName ? cleanClassName(options.inlineClassName) : null;\n        this.inlineClassNameAffectsLetterSpacing = options.inlineClassNameAffectsLetterSpacing || false;\n        this.beforeContentClassName = options.beforeContentClassName ? cleanClassName(options.beforeContentClassName) : null;\n        this.afterContentClassName = options.afterContentClassName ? cleanClassName(options.afterContentClassName) : null;\n        this.after = options.after ? ModelDecorationInjectedTextOptions.from(options.after) : null;\n        this.before = options.before ? ModelDecorationInjectedTextOptions.from(options.before) : null;\n        this.hideInCommentTokens = (_a = options.hideInCommentTokens) !== null && _a !== void 0 ? _a : false;\n        this.hideInStringTokens = (_b = options.hideInStringTokens) !== null && _b !== void 0 ? _b : false;\n    }\n    static register(options) {\n        return new ModelDecorationOptions(options);\n    }\n    static createDynamic(options) {\n        return new ModelDecorationOptions(options);\n    }\n}\nModelDecorationOptions.EMPTY = ModelDecorationOptions.register({ description: 'empty' });\n/**\n * The order carefully matches the values of the enum.\n */\nconst TRACKED_RANGE_OPTIONS = [\n    ModelDecorationOptions.register({ description: 'tracked-range-always-grows-when-typing-at-edges', stickiness: 0 /* model.TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges */ }),\n    ModelDecorationOptions.register({ description: 'tracked-range-never-grows-when-typing-at-edges', stickiness: 1 /* model.TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges */ }),\n    ModelDecorationOptions.register({ description: 'tracked-range-grows-only-when-typing-before', stickiness: 2 /* model.TrackedRangeStickiness.GrowsOnlyWhenTypingBefore */ }),\n    ModelDecorationOptions.register({ description: 'tracked-range-grows-only-when-typing-after', stickiness: 3 /* model.TrackedRangeStickiness.GrowsOnlyWhenTypingAfter */ }),\n];\nfunction _normalizeOptions(options) {\n    if (options instanceof ModelDecorationOptions) {\n        return options;\n    }\n    return ModelDecorationOptions.createDynamic(options);\n}\nexport class DidChangeDecorationsEmitter extends Disposable {\n    constructor(handleBeforeFire) {\n        super();\n        this.handleBeforeFire = handleBeforeFire;\n        this._actual = this._register(new Emitter());\n        this.event = this._actual.event;\n        this._affectedInjectedTextLines = null;\n        this._deferredCnt = 0;\n        this._shouldFire = false;\n        this._affectsMinimap = false;\n        this._affectsOverviewRuler = false;\n    }\n    beginDeferredEmit() {\n        this._deferredCnt++;\n    }\n    endDeferredEmit() {\n        var _a;\n        this._deferredCnt--;\n        if (this._deferredCnt === 0) {\n            if (this._shouldFire) {\n                this.handleBeforeFire(this._affectedInjectedTextLines);\n                const event = {\n                    affectsMinimap: this._affectsMinimap,\n                    affectsOverviewRuler: this._affectsOverviewRuler\n                };\n                this._shouldFire = false;\n                this._affectsMinimap = false;\n                this._affectsOverviewRuler = false;\n                this._actual.fire(event);\n            }\n            (_a = this._affectedInjectedTextLines) === null || _a === void 0 ? void 0 : _a.clear();\n            this._affectedInjectedTextLines = null;\n        }\n    }\n    recordLineAffectedByInjectedText(lineNumber) {\n        if (!this._affectedInjectedTextLines) {\n            this._affectedInjectedTextLines = new Set();\n        }\n        this._affectedInjectedTextLines.add(lineNumber);\n    }\n    checkAffectedAndFire(options) {\n        if (!this._affectsMinimap) {\n            this._affectsMinimap = options.minimap && options.minimap.position ? true : false;\n        }\n        if (!this._affectsOverviewRuler) {\n            this._affectsOverviewRuler = options.overviewRuler && options.overviewRuler.color ? true : false;\n        }\n        this._shouldFire = true;\n    }\n    fire() {\n        this._affectsMinimap = true;\n        this._affectsOverviewRuler = true;\n        this._shouldFire = true;\n    }\n}\n//#endregion\nexport class DidChangeContentEmitter extends Disposable {\n    constructor() {\n        super();\n        /**\n         * Both `fastEvent` and `slowEvent` work the same way and contain the same events, but first we invoke `fastEvent` and then `slowEvent`.\n         */\n        this._fastEmitter = this._register(new Emitter());\n        this.fastEvent = this._fastEmitter.event;\n        this._slowEmitter = this._register(new Emitter());\n        this.slowEvent = this._slowEmitter.event;\n        this._deferredCnt = 0;\n        this._deferredEvent = null;\n    }\n    beginDeferredEmit() {\n        this._deferredCnt++;\n    }\n    endDeferredEmit(resultingSelection = null) {\n        this._deferredCnt--;\n        if (this._deferredCnt === 0) {\n            if (this._deferredEvent !== null) {\n                this._deferredEvent.rawContentChangedEvent.resultingSelection = resultingSelection;\n                const e = this._deferredEvent;\n                this._deferredEvent = null;\n                this._fastEmitter.fire(e);\n                this._slowEmitter.fire(e);\n            }\n        }\n    }\n    fire(e) {\n        if (this._deferredCnt > 0) {\n            if (this._deferredEvent) {\n                this._deferredEvent = this._deferredEvent.merge(e);\n            }\n            else {\n                this._deferredEvent = e;\n            }\n            return;\n        }\n        this._fastEmitter.fire(e);\n        this._slowEmitter.fire(e);\n    }\n}\n"],"mappings":"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"}]}