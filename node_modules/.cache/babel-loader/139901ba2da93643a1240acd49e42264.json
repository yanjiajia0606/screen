{"remainingRequest":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js!/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/common/viewLayout/linesLayout.js","dependencies":[{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/common/viewLayout/linesLayout.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/babel.config.js","mtime":1668271197000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js","mtime":456789000000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["strings","PendingChanges","_hasPending","_inserts","_changes","_removes","x","push","linesLayout","inserts","changes","removes","_commitPendingChanges","EditorWhitespace","id","afterLineNumber","ordinal","height","minWidth","prefixSum","LinesLayout","lineCount","lineHeight","paddingTop","paddingBottom","_instanceId","singleLetterHash","INSTANCE_COUNT","_pendingChanges","_lastWhitespaceId","_arr","_prefixSumValidIndex","_minWidth","_lineCount","_lineHeight","_paddingTop","_paddingBottom","_checkPendingChanges","callback","hadAChange","accessor","insertWhitespace","heightInPx","insert","changeOneWhitespace","newAfterLineNumber","newHeight","change","removeWhitespace","remove","commit","length","_insertWhitespace","_changeOneWhitespace","index","_findWhitespaceIndex","_removeWhitespace","toRemove","Set","add","toChange","Map","set","applyRemoveAndChange","whitespaces","result","whitespace","has","get","concat","sort","a","b","mustCommit","insertIndex","findInsertionIndex","splice","Math","min","arr","i","len","removeIndex","fromLineNumber","toLineNumber","getWhitespacesAccumulatedHeight","startIndex","max","linesHeight","whitespacesHeight","getWhitespacesTotalHeight","lineNumber","lastWhitespaceBeforeLineNumber","_findLastWhitespaceBeforeLineNumber","low","high","delta","halfDelta","mid","firstWhitespaceAfterLineNumber","_findFirstWhitespaceAfterLineNumber","includeViewZones","previousLinesHeight","previousWhitespacesHeight","getWhitespaceAccumulatedHeightBeforeLineNumber","verticalOffset","totalHeight","getLinesTotalHeight","linesCount","minLineNumber","maxLineNumber","midLineNumber","midLineNumberVerticalOffset","getVerticalOffsetForLineNumber","verticalOffset1","verticalOffset2","startLineNumber","getLineNumberAtOrAfterVerticalOffset","startLineNumberVerticalOffset","endLineNumber","whitespaceIndex","getFirstWhitespaceIndexAfterLineNumber","whitespaceCount","getWhitespacesCount","currentWhitespaceHeight","currentWhitespaceAfterLineNumber","getAfterLineNumberForWhitespaceIndex","getHeightForWhitespaceIndex","currentVerticalOffset","currentLineRelativeOffset","STEP_SIZE","bigNumbersDelta","floor","linesOffsets","verticalCenter","centeredLineNumber","currentLineTop","currentLineBottom","endLineNumberVerticalOffset","completelyVisibleStartLineNumber","completelyVisibleEndLineNumber","relativeVerticalOffset","minWhitespaceIndex","maxWhitespaceIndex","maxWhitespaceVerticalOffset","getVerticalOffsetForWhitespaceIndex","maxWhitespaceHeight","midWhitespaceIndex","midWhitespaceVerticalOffset","midWhitespaceHeight","candidateIndex","getWhitespaceIndexAtOrAfterVerticallOffset","candidateTop","candidateHeight","candidateId","getIdForWhitespaceIndex","candidateAfterLineNumber","endIndex","top","slice"],"sources":["/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/common/viewLayout/linesLayout.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../base/common/strings.js';\nclass PendingChanges {\n    constructor() {\n        this._hasPending = false;\n        this._inserts = [];\n        this._changes = [];\n        this._removes = [];\n    }\n    insert(x) {\n        this._hasPending = true;\n        this._inserts.push(x);\n    }\n    change(x) {\n        this._hasPending = true;\n        this._changes.push(x);\n    }\n    remove(x) {\n        this._hasPending = true;\n        this._removes.push(x);\n    }\n    mustCommit() {\n        return this._hasPending;\n    }\n    commit(linesLayout) {\n        if (!this._hasPending) {\n            return;\n        }\n        const inserts = this._inserts;\n        const changes = this._changes;\n        const removes = this._removes;\n        this._hasPending = false;\n        this._inserts = [];\n        this._changes = [];\n        this._removes = [];\n        linesLayout._commitPendingChanges(inserts, changes, removes);\n    }\n}\nexport class EditorWhitespace {\n    constructor(id, afterLineNumber, ordinal, height, minWidth) {\n        this.id = id;\n        this.afterLineNumber = afterLineNumber;\n        this.ordinal = ordinal;\n        this.height = height;\n        this.minWidth = minWidth;\n        this.prefixSum = 0;\n    }\n}\n/**\n * Layouting of objects that take vertical space (by having a height) and push down other objects.\n *\n * These objects are basically either text (lines) or spaces between those lines (whitespaces).\n * This provides commodity operations for working with lines that contain whitespace that pushes lines lower (vertically).\n */\nexport class LinesLayout {\n    constructor(lineCount, lineHeight, paddingTop, paddingBottom) {\n        this._instanceId = strings.singleLetterHash(++LinesLayout.INSTANCE_COUNT);\n        this._pendingChanges = new PendingChanges();\n        this._lastWhitespaceId = 0;\n        this._arr = [];\n        this._prefixSumValidIndex = -1;\n        this._minWidth = -1; /* marker for not being computed */\n        this._lineCount = lineCount;\n        this._lineHeight = lineHeight;\n        this._paddingTop = paddingTop;\n        this._paddingBottom = paddingBottom;\n    }\n    /**\n     * Find the insertion index for a new value inside a sorted array of values.\n     * If the value is already present in the sorted array, the insertion index will be after the already existing value.\n     */\n    static findInsertionIndex(arr, afterLineNumber, ordinal) {\n        let low = 0;\n        let high = arr.length;\n        while (low < high) {\n            const mid = ((low + high) >>> 1);\n            if (afterLineNumber === arr[mid].afterLineNumber) {\n                if (ordinal < arr[mid].ordinal) {\n                    high = mid;\n                }\n                else {\n                    low = mid + 1;\n                }\n            }\n            else if (afterLineNumber < arr[mid].afterLineNumber) {\n                high = mid;\n            }\n            else {\n                low = mid + 1;\n            }\n        }\n        return low;\n    }\n    /**\n     * Change the height of a line in pixels.\n     */\n    setLineHeight(lineHeight) {\n        this._checkPendingChanges();\n        this._lineHeight = lineHeight;\n    }\n    /**\n     * Changes the padding used to calculate vertical offsets.\n     */\n    setPadding(paddingTop, paddingBottom) {\n        this._paddingTop = paddingTop;\n        this._paddingBottom = paddingBottom;\n    }\n    /**\n     * Set the number of lines.\n     *\n     * @param lineCount New number of lines.\n     */\n    onFlushed(lineCount) {\n        this._checkPendingChanges();\n        this._lineCount = lineCount;\n    }\n    changeWhitespace(callback) {\n        let hadAChange = false;\n        try {\n            const accessor = {\n                insertWhitespace: (afterLineNumber, ordinal, heightInPx, minWidth) => {\n                    hadAChange = true;\n                    afterLineNumber = afterLineNumber | 0;\n                    ordinal = ordinal | 0;\n                    heightInPx = heightInPx | 0;\n                    minWidth = minWidth | 0;\n                    const id = this._instanceId + (++this._lastWhitespaceId);\n                    this._pendingChanges.insert(new EditorWhitespace(id, afterLineNumber, ordinal, heightInPx, minWidth));\n                    return id;\n                },\n                changeOneWhitespace: (id, newAfterLineNumber, newHeight) => {\n                    hadAChange = true;\n                    newAfterLineNumber = newAfterLineNumber | 0;\n                    newHeight = newHeight | 0;\n                    this._pendingChanges.change({ id, newAfterLineNumber, newHeight });\n                },\n                removeWhitespace: (id) => {\n                    hadAChange = true;\n                    this._pendingChanges.remove({ id });\n                }\n            };\n            callback(accessor);\n        }\n        finally {\n            this._pendingChanges.commit(this);\n        }\n        return hadAChange;\n    }\n    _commitPendingChanges(inserts, changes, removes) {\n        if (inserts.length > 0 || removes.length > 0) {\n            this._minWidth = -1; /* marker for not being computed */\n        }\n        if (inserts.length + changes.length + removes.length <= 1) {\n            // when only one thing happened, handle it \"delicately\"\n            for (const insert of inserts) {\n                this._insertWhitespace(insert);\n            }\n            for (const change of changes) {\n                this._changeOneWhitespace(change.id, change.newAfterLineNumber, change.newHeight);\n            }\n            for (const remove of removes) {\n                const index = this._findWhitespaceIndex(remove.id);\n                if (index === -1) {\n                    continue;\n                }\n                this._removeWhitespace(index);\n            }\n            return;\n        }\n        // simply rebuild the entire datastructure\n        const toRemove = new Set();\n        for (const remove of removes) {\n            toRemove.add(remove.id);\n        }\n        const toChange = new Map();\n        for (const change of changes) {\n            toChange.set(change.id, change);\n        }\n        const applyRemoveAndChange = (whitespaces) => {\n            const result = [];\n            for (const whitespace of whitespaces) {\n                if (toRemove.has(whitespace.id)) {\n                    continue;\n                }\n                if (toChange.has(whitespace.id)) {\n                    const change = toChange.get(whitespace.id);\n                    whitespace.afterLineNumber = change.newAfterLineNumber;\n                    whitespace.height = change.newHeight;\n                }\n                result.push(whitespace);\n            }\n            return result;\n        };\n        const result = applyRemoveAndChange(this._arr).concat(applyRemoveAndChange(inserts));\n        result.sort((a, b) => {\n            if (a.afterLineNumber === b.afterLineNumber) {\n                return a.ordinal - b.ordinal;\n            }\n            return a.afterLineNumber - b.afterLineNumber;\n        });\n        this._arr = result;\n        this._prefixSumValidIndex = -1;\n    }\n    _checkPendingChanges() {\n        if (this._pendingChanges.mustCommit()) {\n            this._pendingChanges.commit(this);\n        }\n    }\n    _insertWhitespace(whitespace) {\n        const insertIndex = LinesLayout.findInsertionIndex(this._arr, whitespace.afterLineNumber, whitespace.ordinal);\n        this._arr.splice(insertIndex, 0, whitespace);\n        this._prefixSumValidIndex = Math.min(this._prefixSumValidIndex, insertIndex - 1);\n    }\n    _findWhitespaceIndex(id) {\n        const arr = this._arr;\n        for (let i = 0, len = arr.length; i < len; i++) {\n            if (arr[i].id === id) {\n                return i;\n            }\n        }\n        return -1;\n    }\n    _changeOneWhitespace(id, newAfterLineNumber, newHeight) {\n        const index = this._findWhitespaceIndex(id);\n        if (index === -1) {\n            return;\n        }\n        if (this._arr[index].height !== newHeight) {\n            this._arr[index].height = newHeight;\n            this._prefixSumValidIndex = Math.min(this._prefixSumValidIndex, index - 1);\n        }\n        if (this._arr[index].afterLineNumber !== newAfterLineNumber) {\n            // `afterLineNumber` changed for this whitespace\n            // Record old whitespace\n            const whitespace = this._arr[index];\n            // Since changing `afterLineNumber` can trigger a reordering, we're gonna remove this whitespace\n            this._removeWhitespace(index);\n            whitespace.afterLineNumber = newAfterLineNumber;\n            // And add it again\n            this._insertWhitespace(whitespace);\n        }\n    }\n    _removeWhitespace(removeIndex) {\n        this._arr.splice(removeIndex, 1);\n        this._prefixSumValidIndex = Math.min(this._prefixSumValidIndex, removeIndex - 1);\n    }\n    /**\n     * Notify the layouter that lines have been deleted (a continuous zone of lines).\n     *\n     * @param fromLineNumber The line number at which the deletion started, inclusive\n     * @param toLineNumber The line number at which the deletion ended, inclusive\n     */\n    onLinesDeleted(fromLineNumber, toLineNumber) {\n        this._checkPendingChanges();\n        fromLineNumber = fromLineNumber | 0;\n        toLineNumber = toLineNumber | 0;\n        this._lineCount -= (toLineNumber - fromLineNumber + 1);\n        for (let i = 0, len = this._arr.length; i < len; i++) {\n            const afterLineNumber = this._arr[i].afterLineNumber;\n            if (fromLineNumber <= afterLineNumber && afterLineNumber <= toLineNumber) {\n                // The line this whitespace was after has been deleted\n                //  => move whitespace to before first deleted line\n                this._arr[i].afterLineNumber = fromLineNumber - 1;\n            }\n            else if (afterLineNumber > toLineNumber) {\n                // The line this whitespace was after has been moved up\n                //  => move whitespace up\n                this._arr[i].afterLineNumber -= (toLineNumber - fromLineNumber + 1);\n            }\n        }\n    }\n    /**\n     * Notify the layouter that lines have been inserted (a continuous zone of lines).\n     *\n     * @param fromLineNumber The line number at which the insertion started, inclusive\n     * @param toLineNumber The line number at which the insertion ended, inclusive.\n     */\n    onLinesInserted(fromLineNumber, toLineNumber) {\n        this._checkPendingChanges();\n        fromLineNumber = fromLineNumber | 0;\n        toLineNumber = toLineNumber | 0;\n        this._lineCount += (toLineNumber - fromLineNumber + 1);\n        for (let i = 0, len = this._arr.length; i < len; i++) {\n            const afterLineNumber = this._arr[i].afterLineNumber;\n            if (fromLineNumber <= afterLineNumber) {\n                this._arr[i].afterLineNumber += (toLineNumber - fromLineNumber + 1);\n            }\n        }\n    }\n    /**\n     * Get the sum of all the whitespaces.\n     */\n    getWhitespacesTotalHeight() {\n        this._checkPendingChanges();\n        if (this._arr.length === 0) {\n            return 0;\n        }\n        return this.getWhitespacesAccumulatedHeight(this._arr.length - 1);\n    }\n    /**\n     * Return the sum of the heights of the whitespaces at [0..index].\n     * This includes the whitespace at `index`.\n     *\n     * @param index The index of the whitespace.\n     * @return The sum of the heights of all whitespaces before the one at `index`, including the one at `index`.\n     */\n    getWhitespacesAccumulatedHeight(index) {\n        this._checkPendingChanges();\n        index = index | 0;\n        let startIndex = Math.max(0, this._prefixSumValidIndex + 1);\n        if (startIndex === 0) {\n            this._arr[0].prefixSum = this._arr[0].height;\n            startIndex++;\n        }\n        for (let i = startIndex; i <= index; i++) {\n            this._arr[i].prefixSum = this._arr[i - 1].prefixSum + this._arr[i].height;\n        }\n        this._prefixSumValidIndex = Math.max(this._prefixSumValidIndex, index);\n        return this._arr[index].prefixSum;\n    }\n    /**\n     * Get the sum of heights for all objects.\n     *\n     * @return The sum of heights for all objects.\n     */\n    getLinesTotalHeight() {\n        this._checkPendingChanges();\n        const linesHeight = this._lineHeight * this._lineCount;\n        const whitespacesHeight = this.getWhitespacesTotalHeight();\n        return linesHeight + whitespacesHeight + this._paddingTop + this._paddingBottom;\n    }\n    /**\n     * Returns the accumulated height of whitespaces before the given line number.\n     *\n     * @param lineNumber The line number\n     */\n    getWhitespaceAccumulatedHeightBeforeLineNumber(lineNumber) {\n        this._checkPendingChanges();\n        lineNumber = lineNumber | 0;\n        const lastWhitespaceBeforeLineNumber = this._findLastWhitespaceBeforeLineNumber(lineNumber);\n        if (lastWhitespaceBeforeLineNumber === -1) {\n            return 0;\n        }\n        return this.getWhitespacesAccumulatedHeight(lastWhitespaceBeforeLineNumber);\n    }\n    _findLastWhitespaceBeforeLineNumber(lineNumber) {\n        lineNumber = lineNumber | 0;\n        // Find the whitespace before line number\n        const arr = this._arr;\n        let low = 0;\n        let high = arr.length - 1;\n        while (low <= high) {\n            const delta = (high - low) | 0;\n            const halfDelta = (delta / 2) | 0;\n            const mid = (low + halfDelta) | 0;\n            if (arr[mid].afterLineNumber < lineNumber) {\n                if (mid + 1 >= arr.length || arr[mid + 1].afterLineNumber >= lineNumber) {\n                    return mid;\n                }\n                else {\n                    low = (mid + 1) | 0;\n                }\n            }\n            else {\n                high = (mid - 1) | 0;\n            }\n        }\n        return -1;\n    }\n    _findFirstWhitespaceAfterLineNumber(lineNumber) {\n        lineNumber = lineNumber | 0;\n        const lastWhitespaceBeforeLineNumber = this._findLastWhitespaceBeforeLineNumber(lineNumber);\n        const firstWhitespaceAfterLineNumber = lastWhitespaceBeforeLineNumber + 1;\n        if (firstWhitespaceAfterLineNumber < this._arr.length) {\n            return firstWhitespaceAfterLineNumber;\n        }\n        return -1;\n    }\n    /**\n     * Find the index of the first whitespace which has `afterLineNumber` >= `lineNumber`.\n     * @return The index of the first whitespace with `afterLineNumber` >= `lineNumber` or -1 if no whitespace is found.\n     */\n    getFirstWhitespaceIndexAfterLineNumber(lineNumber) {\n        this._checkPendingChanges();\n        lineNumber = lineNumber | 0;\n        return this._findFirstWhitespaceAfterLineNumber(lineNumber);\n    }\n    /**\n     * Get the vertical offset (the sum of heights for all objects above) a certain line number.\n     *\n     * @param lineNumber The line number\n     * @return The sum of heights for all objects above `lineNumber`.\n     */\n    getVerticalOffsetForLineNumber(lineNumber, includeViewZones = false) {\n        this._checkPendingChanges();\n        lineNumber = lineNumber | 0;\n        let previousLinesHeight;\n        if (lineNumber > 1) {\n            previousLinesHeight = this._lineHeight * (lineNumber - 1);\n        }\n        else {\n            previousLinesHeight = 0;\n        }\n        const previousWhitespacesHeight = this.getWhitespaceAccumulatedHeightBeforeLineNumber(lineNumber - (includeViewZones ? 1 : 0));\n        return previousLinesHeight + previousWhitespacesHeight + this._paddingTop;\n    }\n    /**\n     * Get the vertical offset (the sum of heights for all objects above) a certain line number.\n     *\n     * @param lineNumber The line number\n     * @return The sum of heights for all objects above `lineNumber`.\n     */\n    getVerticalOffsetAfterLineNumber(lineNumber, includeViewZones = false) {\n        this._checkPendingChanges();\n        lineNumber = lineNumber | 0;\n        const previousLinesHeight = this._lineHeight * lineNumber;\n        const previousWhitespacesHeight = this.getWhitespaceAccumulatedHeightBeforeLineNumber(lineNumber + (includeViewZones ? 1 : 0));\n        return previousLinesHeight + previousWhitespacesHeight + this._paddingTop;\n    }\n    /**\n     * The maximum min width for all whitespaces.\n     */\n    getWhitespaceMinWidth() {\n        this._checkPendingChanges();\n        if (this._minWidth === -1) {\n            let minWidth = 0;\n            for (let i = 0, len = this._arr.length; i < len; i++) {\n                minWidth = Math.max(minWidth, this._arr[i].minWidth);\n            }\n            this._minWidth = minWidth;\n        }\n        return this._minWidth;\n    }\n    /**\n     * Check if `verticalOffset` is below all lines.\n     */\n    isAfterLines(verticalOffset) {\n        this._checkPendingChanges();\n        const totalHeight = this.getLinesTotalHeight();\n        return verticalOffset > totalHeight;\n    }\n    isInTopPadding(verticalOffset) {\n        if (this._paddingTop === 0) {\n            return false;\n        }\n        this._checkPendingChanges();\n        return (verticalOffset < this._paddingTop);\n    }\n    isInBottomPadding(verticalOffset) {\n        if (this._paddingBottom === 0) {\n            return false;\n        }\n        this._checkPendingChanges();\n        const totalHeight = this.getLinesTotalHeight();\n        return (verticalOffset >= totalHeight - this._paddingBottom);\n    }\n    /**\n     * Find the first line number that is at or after vertical offset `verticalOffset`.\n     * i.e. if getVerticalOffsetForLine(line) is x and getVerticalOffsetForLine(line + 1) is y, then\n     * getLineNumberAtOrAfterVerticalOffset(i) = line, x <= i < y.\n     *\n     * @param verticalOffset The vertical offset to search at.\n     * @return The line number at or after vertical offset `verticalOffset`.\n     */\n    getLineNumberAtOrAfterVerticalOffset(verticalOffset) {\n        this._checkPendingChanges();\n        verticalOffset = verticalOffset | 0;\n        if (verticalOffset < 0) {\n            return 1;\n        }\n        const linesCount = this._lineCount | 0;\n        const lineHeight = this._lineHeight;\n        let minLineNumber = 1;\n        let maxLineNumber = linesCount;\n        while (minLineNumber < maxLineNumber) {\n            const midLineNumber = ((minLineNumber + maxLineNumber) / 2) | 0;\n            const midLineNumberVerticalOffset = this.getVerticalOffsetForLineNumber(midLineNumber) | 0;\n            if (verticalOffset >= midLineNumberVerticalOffset + lineHeight) {\n                // vertical offset is after mid line number\n                minLineNumber = midLineNumber + 1;\n            }\n            else if (verticalOffset >= midLineNumberVerticalOffset) {\n                // Hit\n                return midLineNumber;\n            }\n            else {\n                // vertical offset is before mid line number, but mid line number could still be what we're searching for\n                maxLineNumber = midLineNumber;\n            }\n        }\n        if (minLineNumber > linesCount) {\n            return linesCount;\n        }\n        return minLineNumber;\n    }\n    /**\n     * Get all the lines and their relative vertical offsets that are positioned between `verticalOffset1` and `verticalOffset2`.\n     *\n     * @param verticalOffset1 The beginning of the viewport.\n     * @param verticalOffset2 The end of the viewport.\n     * @return A structure describing the lines positioned between `verticalOffset1` and `verticalOffset2`.\n     */\n    getLinesViewportData(verticalOffset1, verticalOffset2) {\n        this._checkPendingChanges();\n        verticalOffset1 = verticalOffset1 | 0;\n        verticalOffset2 = verticalOffset2 | 0;\n        const lineHeight = this._lineHeight;\n        // Find first line number\n        // We don't live in a perfect world, so the line number might start before or after verticalOffset1\n        const startLineNumber = this.getLineNumberAtOrAfterVerticalOffset(verticalOffset1) | 0;\n        const startLineNumberVerticalOffset = this.getVerticalOffsetForLineNumber(startLineNumber) | 0;\n        let endLineNumber = this._lineCount | 0;\n        // Also keep track of what whitespace we've got\n        let whitespaceIndex = this.getFirstWhitespaceIndexAfterLineNumber(startLineNumber) | 0;\n        const whitespaceCount = this.getWhitespacesCount() | 0;\n        let currentWhitespaceHeight;\n        let currentWhitespaceAfterLineNumber;\n        if (whitespaceIndex === -1) {\n            whitespaceIndex = whitespaceCount;\n            currentWhitespaceAfterLineNumber = endLineNumber + 1;\n            currentWhitespaceHeight = 0;\n        }\n        else {\n            currentWhitespaceAfterLineNumber = this.getAfterLineNumberForWhitespaceIndex(whitespaceIndex) | 0;\n            currentWhitespaceHeight = this.getHeightForWhitespaceIndex(whitespaceIndex) | 0;\n        }\n        let currentVerticalOffset = startLineNumberVerticalOffset;\n        let currentLineRelativeOffset = currentVerticalOffset;\n        // IE (all versions) cannot handle units above about 1,533,908 px, so every 500k pixels bring numbers down\n        const STEP_SIZE = 500000;\n        let bigNumbersDelta = 0;\n        if (startLineNumberVerticalOffset >= STEP_SIZE) {\n            // Compute a delta that guarantees that lines are positioned at `lineHeight` increments\n            bigNumbersDelta = Math.floor(startLineNumberVerticalOffset / STEP_SIZE) * STEP_SIZE;\n            bigNumbersDelta = Math.floor(bigNumbersDelta / lineHeight) * lineHeight;\n            currentLineRelativeOffset -= bigNumbersDelta;\n        }\n        const linesOffsets = [];\n        const verticalCenter = verticalOffset1 + (verticalOffset2 - verticalOffset1) / 2;\n        let centeredLineNumber = -1;\n        // Figure out how far the lines go\n        for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n            if (centeredLineNumber === -1) {\n                const currentLineTop = currentVerticalOffset;\n                const currentLineBottom = currentVerticalOffset + lineHeight;\n                if ((currentLineTop <= verticalCenter && verticalCenter < currentLineBottom) || currentLineTop > verticalCenter) {\n                    centeredLineNumber = lineNumber;\n                }\n            }\n            // Count current line height in the vertical offsets\n            currentVerticalOffset += lineHeight;\n            linesOffsets[lineNumber - startLineNumber] = currentLineRelativeOffset;\n            // Next line starts immediately after this one\n            currentLineRelativeOffset += lineHeight;\n            while (currentWhitespaceAfterLineNumber === lineNumber) {\n                // Push down next line with the height of the current whitespace\n                currentLineRelativeOffset += currentWhitespaceHeight;\n                // Count current whitespace in the vertical offsets\n                currentVerticalOffset += currentWhitespaceHeight;\n                whitespaceIndex++;\n                if (whitespaceIndex >= whitespaceCount) {\n                    currentWhitespaceAfterLineNumber = endLineNumber + 1;\n                }\n                else {\n                    currentWhitespaceAfterLineNumber = this.getAfterLineNumberForWhitespaceIndex(whitespaceIndex) | 0;\n                    currentWhitespaceHeight = this.getHeightForWhitespaceIndex(whitespaceIndex) | 0;\n                }\n            }\n            if (currentVerticalOffset >= verticalOffset2) {\n                // We have covered the entire viewport area, time to stop\n                endLineNumber = lineNumber;\n                break;\n            }\n        }\n        if (centeredLineNumber === -1) {\n            centeredLineNumber = endLineNumber;\n        }\n        const endLineNumberVerticalOffset = this.getVerticalOffsetForLineNumber(endLineNumber) | 0;\n        let completelyVisibleStartLineNumber = startLineNumber;\n        let completelyVisibleEndLineNumber = endLineNumber;\n        if (completelyVisibleStartLineNumber < completelyVisibleEndLineNumber) {\n            if (startLineNumberVerticalOffset < verticalOffset1) {\n                completelyVisibleStartLineNumber++;\n            }\n        }\n        if (completelyVisibleStartLineNumber < completelyVisibleEndLineNumber) {\n            if (endLineNumberVerticalOffset + lineHeight > verticalOffset2) {\n                completelyVisibleEndLineNumber--;\n            }\n        }\n        return {\n            bigNumbersDelta: bigNumbersDelta,\n            startLineNumber: startLineNumber,\n            endLineNumber: endLineNumber,\n            relativeVerticalOffset: linesOffsets,\n            centeredLineNumber: centeredLineNumber,\n            completelyVisibleStartLineNumber: completelyVisibleStartLineNumber,\n            completelyVisibleEndLineNumber: completelyVisibleEndLineNumber\n        };\n    }\n    getVerticalOffsetForWhitespaceIndex(whitespaceIndex) {\n        this._checkPendingChanges();\n        whitespaceIndex = whitespaceIndex | 0;\n        const afterLineNumber = this.getAfterLineNumberForWhitespaceIndex(whitespaceIndex);\n        let previousLinesHeight;\n        if (afterLineNumber >= 1) {\n            previousLinesHeight = this._lineHeight * afterLineNumber;\n        }\n        else {\n            previousLinesHeight = 0;\n        }\n        let previousWhitespacesHeight;\n        if (whitespaceIndex > 0) {\n            previousWhitespacesHeight = this.getWhitespacesAccumulatedHeight(whitespaceIndex - 1);\n        }\n        else {\n            previousWhitespacesHeight = 0;\n        }\n        return previousLinesHeight + previousWhitespacesHeight + this._paddingTop;\n    }\n    getWhitespaceIndexAtOrAfterVerticallOffset(verticalOffset) {\n        this._checkPendingChanges();\n        verticalOffset = verticalOffset | 0;\n        let minWhitespaceIndex = 0;\n        let maxWhitespaceIndex = this.getWhitespacesCount() - 1;\n        if (maxWhitespaceIndex < 0) {\n            return -1;\n        }\n        // Special case: nothing to be found\n        const maxWhitespaceVerticalOffset = this.getVerticalOffsetForWhitespaceIndex(maxWhitespaceIndex);\n        const maxWhitespaceHeight = this.getHeightForWhitespaceIndex(maxWhitespaceIndex);\n        if (verticalOffset >= maxWhitespaceVerticalOffset + maxWhitespaceHeight) {\n            return -1;\n        }\n        while (minWhitespaceIndex < maxWhitespaceIndex) {\n            const midWhitespaceIndex = Math.floor((minWhitespaceIndex + maxWhitespaceIndex) / 2);\n            const midWhitespaceVerticalOffset = this.getVerticalOffsetForWhitespaceIndex(midWhitespaceIndex);\n            const midWhitespaceHeight = this.getHeightForWhitespaceIndex(midWhitespaceIndex);\n            if (verticalOffset >= midWhitespaceVerticalOffset + midWhitespaceHeight) {\n                // vertical offset is after whitespace\n                minWhitespaceIndex = midWhitespaceIndex + 1;\n            }\n            else if (verticalOffset >= midWhitespaceVerticalOffset) {\n                // Hit\n                return midWhitespaceIndex;\n            }\n            else {\n                // vertical offset is before whitespace, but midWhitespaceIndex might still be what we're searching for\n                maxWhitespaceIndex = midWhitespaceIndex;\n            }\n        }\n        return minWhitespaceIndex;\n    }\n    /**\n     * Get exactly the whitespace that is layouted at `verticalOffset`.\n     *\n     * @param verticalOffset The vertical offset.\n     * @return Precisely the whitespace that is layouted at `verticaloffset` or null.\n     */\n    getWhitespaceAtVerticalOffset(verticalOffset) {\n        this._checkPendingChanges();\n        verticalOffset = verticalOffset | 0;\n        const candidateIndex = this.getWhitespaceIndexAtOrAfterVerticallOffset(verticalOffset);\n        if (candidateIndex < 0) {\n            return null;\n        }\n        if (candidateIndex >= this.getWhitespacesCount()) {\n            return null;\n        }\n        const candidateTop = this.getVerticalOffsetForWhitespaceIndex(candidateIndex);\n        if (candidateTop > verticalOffset) {\n            return null;\n        }\n        const candidateHeight = this.getHeightForWhitespaceIndex(candidateIndex);\n        const candidateId = this.getIdForWhitespaceIndex(candidateIndex);\n        const candidateAfterLineNumber = this.getAfterLineNumberForWhitespaceIndex(candidateIndex);\n        return {\n            id: candidateId,\n            afterLineNumber: candidateAfterLineNumber,\n            verticalOffset: candidateTop,\n            height: candidateHeight\n        };\n    }\n    /**\n     * Get a list of whitespaces that are positioned between `verticalOffset1` and `verticalOffset2`.\n     *\n     * @param verticalOffset1 The beginning of the viewport.\n     * @param verticalOffset2 The end of the viewport.\n     * @return An array with all the whitespaces in the viewport. If no whitespace is in viewport, the array is empty.\n     */\n    getWhitespaceViewportData(verticalOffset1, verticalOffset2) {\n        this._checkPendingChanges();\n        verticalOffset1 = verticalOffset1 | 0;\n        verticalOffset2 = verticalOffset2 | 0;\n        const startIndex = this.getWhitespaceIndexAtOrAfterVerticallOffset(verticalOffset1);\n        const endIndex = this.getWhitespacesCount() - 1;\n        if (startIndex < 0) {\n            return [];\n        }\n        const result = [];\n        for (let i = startIndex; i <= endIndex; i++) {\n            const top = this.getVerticalOffsetForWhitespaceIndex(i);\n            const height = this.getHeightForWhitespaceIndex(i);\n            if (top >= verticalOffset2) {\n                break;\n            }\n            result.push({\n                id: this.getIdForWhitespaceIndex(i),\n                afterLineNumber: this.getAfterLineNumberForWhitespaceIndex(i),\n                verticalOffset: top,\n                height: height\n            });\n        }\n        return result;\n    }\n    /**\n     * Get all whitespaces.\n     */\n    getWhitespaces() {\n        this._checkPendingChanges();\n        return this._arr.slice(0);\n    }\n    /**\n     * The number of whitespaces.\n     */\n    getWhitespacesCount() {\n        this._checkPendingChanges();\n        return this._arr.length;\n    }\n    /**\n     * Get the `id` for whitespace at index `index`.\n     *\n     * @param index The index of the whitespace.\n     * @return `id` of whitespace at `index`.\n     */\n    getIdForWhitespaceIndex(index) {\n        this._checkPendingChanges();\n        index = index | 0;\n        return this._arr[index].id;\n    }\n    /**\n     * Get the `afterLineNumber` for whitespace at index `index`.\n     *\n     * @param index The index of the whitespace.\n     * @return `afterLineNumber` of whitespace at `index`.\n     */\n    getAfterLineNumberForWhitespaceIndex(index) {\n        this._checkPendingChanges();\n        index = index | 0;\n        return this._arr[index].afterLineNumber;\n    }\n    /**\n     * Get the `height` for whitespace at index `index`.\n     *\n     * @param index The index of the whitespace.\n     * @return `height` of whitespace at `index`.\n     */\n    getHeightForWhitespaceIndex(index) {\n        this._checkPendingChanges();\n        index = index | 0;\n        return this._arr[index].height;\n    }\n}\nLinesLayout.INSTANCE_COUNT = 0;\n"],"mappings":"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"}]}