{"remainingRequest":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/thread-loader/dist/cjs.js!/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js!/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/common/viewLayout/viewLineRenderer.js","dependencies":[{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/common/viewLayout/viewLineRenderer.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/babel.config.js","mtime":1668271197000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js","mtime":456789000000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["strings","createStringBuilder","LineDecoration","LineDecorationsNormalizer","LinePart","LineRange","startIndex","endIndex","startOffset","endOffset","otherLineRange","RenderLineInput","useMonospaceOptimizations","canUseHalfwidthRightwardsArrow","lineContent","continuesWithWrappedLine","isBasicASCII","containsRTL","fauxIndentLength","lineTokens","lineDecorations","tabSize","startVisibleColumn","spaceWidth","middotWidth","wsmiddotWidth","stopRenderingLineAfter","renderWhitespace","renderControlCharacters","fontLigatures","selectionsOnLine","sort","compare","a","b","wsmiddotDiff","Math","abs","middotDiff","renderSpaceWidth","renderSpaceCharCode","otherSelections","length","i","equals","other","equalsArr","sameSelection","DomPosition","partIndex","charIndex","CharacterMapping","partCount","_data","Uint32Array","_horizontalOffset","column","horizontalOffset","partData","charOffset","charOffsetToPartData","getPartIndex","getCharIndex","domPosition","partLength","partDataToCharOffset","searchEntry","min","max","mid","midEntry","minEntry","maxEntry","minPartIndex","minCharIndex","maxPartIndex","maxCharIndex","minEntryDistance","maxEntryDistance","RenderLineOutput","characterMapping","containsForeignElements","_renderLineOutputBrand","undefined","renderViewLine","input","sb","appendASCIIString","beforeCount","afterCount","lineDecoration","type","className","setColumnInfo","_renderLine","resolveRenderLineInput","RenderLineOutput2","html","renderViewLine2","out","build","ResolvedRenderLineInput","fontIsMonospace","len","isOverflowing","parts","tokens","transformAndRemoveOverflowing","extractControlCharacters","_applyRenderWhitespace","_applyInlineDecorations","splitLargeTokens","lineContainsRTL","result","resultLen","tokenIndex","tokensLen","getCount","getEndOffset","getClassName","tokenContainsRTL","substring","onlyAtSpaces","lastTokenEndIndex","token","tokenEndIndex","tokenType","tokenMetadata","metadata","lastSpaceOffset","currTokenStart","j","charCodeAt","diff","piecesCount","ceil","pieceEndIndex","isControlCharacter","charCode","lastLinePart","push","selections","onlyBoundary","onlyTrailing","generateLinePartForEachWhitespace","tokensLength","lineIsEmptyOrWhitespace","firstNonWhitespaceIndex","lastNonWhitespaceIndex","wasInWhitespace","currentSelectionIndex","currentSelection","tmpIndent","chCode","isInWhitespace","nextChCode","lastEndIndex","isFullWidthCharacter","generateWhitespace","lastCharCode","prevCharCode","isSingleTrailingSpace","_lineDecorations","normalize","lineDecorationsLen","lineDecorationIndex","lastResultEndIndex","lastCharacterMappingDefined","visibleColumn","charOffsetInPart","charHorizontalOffset","partDisplacement","part","partEndIndex","partType","partContainsRTL","partRendersWhitespace","isWhitespace","partRendersWhitespaceWithWidth","partIsEmptyAndHasPseudoAfter","isPseudoAfter","appendASCII","partWidth","_charIndex","_visibleColumn","charWidth","String","producedCharacters","write1","space","to4CharHex","n","toString","toUpperCase","padStart"],"sources":["/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/common/viewLayout/viewLineRenderer.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../base/common/strings.js';\nimport { createStringBuilder } from '../core/stringBuilder.js';\nimport { LineDecoration, LineDecorationsNormalizer } from './lineDecorations.js';\nimport { LinePart } from './linePart.js';\nexport class LineRange {\n    constructor(startIndex, endIndex) {\n        this.startOffset = startIndex;\n        this.endOffset = endIndex;\n    }\n    equals(otherLineRange) {\n        return this.startOffset === otherLineRange.startOffset\n            && this.endOffset === otherLineRange.endOffset;\n    }\n}\nexport class RenderLineInput {\n    constructor(useMonospaceOptimizations, canUseHalfwidthRightwardsArrow, lineContent, continuesWithWrappedLine, isBasicASCII, containsRTL, fauxIndentLength, lineTokens, lineDecorations, tabSize, startVisibleColumn, spaceWidth, middotWidth, wsmiddotWidth, stopRenderingLineAfter, renderWhitespace, renderControlCharacters, fontLigatures, selectionsOnLine) {\n        this.useMonospaceOptimizations = useMonospaceOptimizations;\n        this.canUseHalfwidthRightwardsArrow = canUseHalfwidthRightwardsArrow;\n        this.lineContent = lineContent;\n        this.continuesWithWrappedLine = continuesWithWrappedLine;\n        this.isBasicASCII = isBasicASCII;\n        this.containsRTL = containsRTL;\n        this.fauxIndentLength = fauxIndentLength;\n        this.lineTokens = lineTokens;\n        this.lineDecorations = lineDecorations.sort(LineDecoration.compare);\n        this.tabSize = tabSize;\n        this.startVisibleColumn = startVisibleColumn;\n        this.spaceWidth = spaceWidth;\n        this.stopRenderingLineAfter = stopRenderingLineAfter;\n        this.renderWhitespace = (renderWhitespace === 'all'\n            ? 4 /* RenderWhitespace.All */\n            : renderWhitespace === 'boundary'\n                ? 1 /* RenderWhitespace.Boundary */\n                : renderWhitespace === 'selection'\n                    ? 2 /* RenderWhitespace.Selection */\n                    : renderWhitespace === 'trailing'\n                        ? 3 /* RenderWhitespace.Trailing */\n                        : 0 /* RenderWhitespace.None */);\n        this.renderControlCharacters = renderControlCharacters;\n        this.fontLigatures = fontLigatures;\n        this.selectionsOnLine = selectionsOnLine && selectionsOnLine.sort((a, b) => a.startOffset < b.startOffset ? -1 : 1);\n        const wsmiddotDiff = Math.abs(wsmiddotWidth - spaceWidth);\n        const middotDiff = Math.abs(middotWidth - spaceWidth);\n        if (wsmiddotDiff < middotDiff) {\n            this.renderSpaceWidth = wsmiddotWidth;\n            this.renderSpaceCharCode = 0x2E31; // U+2E31 - WORD SEPARATOR MIDDLE DOT\n        }\n        else {\n            this.renderSpaceWidth = middotWidth;\n            this.renderSpaceCharCode = 0xB7; // U+00B7 - MIDDLE DOT\n        }\n    }\n    sameSelection(otherSelections) {\n        if (this.selectionsOnLine === null) {\n            return otherSelections === null;\n        }\n        if (otherSelections === null) {\n            return false;\n        }\n        if (otherSelections.length !== this.selectionsOnLine.length) {\n            return false;\n        }\n        for (let i = 0; i < this.selectionsOnLine.length; i++) {\n            if (!this.selectionsOnLine[i].equals(otherSelections[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n    equals(other) {\n        return (this.useMonospaceOptimizations === other.useMonospaceOptimizations\n            && this.canUseHalfwidthRightwardsArrow === other.canUseHalfwidthRightwardsArrow\n            && this.lineContent === other.lineContent\n            && this.continuesWithWrappedLine === other.continuesWithWrappedLine\n            && this.isBasicASCII === other.isBasicASCII\n            && this.containsRTL === other.containsRTL\n            && this.fauxIndentLength === other.fauxIndentLength\n            && this.tabSize === other.tabSize\n            && this.startVisibleColumn === other.startVisibleColumn\n            && this.spaceWidth === other.spaceWidth\n            && this.renderSpaceWidth === other.renderSpaceWidth\n            && this.renderSpaceCharCode === other.renderSpaceCharCode\n            && this.stopRenderingLineAfter === other.stopRenderingLineAfter\n            && this.renderWhitespace === other.renderWhitespace\n            && this.renderControlCharacters === other.renderControlCharacters\n            && this.fontLigatures === other.fontLigatures\n            && LineDecoration.equalsArr(this.lineDecorations, other.lineDecorations)\n            && this.lineTokens.equals(other.lineTokens)\n            && this.sameSelection(other.selectionsOnLine));\n    }\n}\nexport class DomPosition {\n    constructor(partIndex, charIndex) {\n        this.partIndex = partIndex;\n        this.charIndex = charIndex;\n    }\n}\n/**\n * Provides a both direction mapping between a line's character and its rendered position.\n */\nexport class CharacterMapping {\n    constructor(length, partCount) {\n        this.length = length;\n        this._data = new Uint32Array(this.length);\n        this._horizontalOffset = new Uint32Array(this.length);\n    }\n    static getPartIndex(partData) {\n        return (partData & 4294901760 /* CharacterMappingConstants.PART_INDEX_MASK */) >>> 16 /* CharacterMappingConstants.PART_INDEX_OFFSET */;\n    }\n    static getCharIndex(partData) {\n        return (partData & 65535 /* CharacterMappingConstants.CHAR_INDEX_MASK */) >>> 0 /* CharacterMappingConstants.CHAR_INDEX_OFFSET */;\n    }\n    setColumnInfo(column, partIndex, charIndex, horizontalOffset) {\n        const partData = ((partIndex << 16 /* CharacterMappingConstants.PART_INDEX_OFFSET */)\n            | (charIndex << 0 /* CharacterMappingConstants.CHAR_INDEX_OFFSET */)) >>> 0;\n        this._data[column - 1] = partData;\n        this._horizontalOffset[column - 1] = horizontalOffset;\n    }\n    getHorizontalOffset(column) {\n        if (this._horizontalOffset.length === 0) {\n            // No characters on this line\n            return 0;\n        }\n        return this._horizontalOffset[column - 1];\n    }\n    charOffsetToPartData(charOffset) {\n        if (this.length === 0) {\n            return 0;\n        }\n        if (charOffset < 0) {\n            return this._data[0];\n        }\n        if (charOffset >= this.length) {\n            return this._data[this.length - 1];\n        }\n        return this._data[charOffset];\n    }\n    getDomPosition(column) {\n        const partData = this.charOffsetToPartData(column - 1);\n        const partIndex = CharacterMapping.getPartIndex(partData);\n        const charIndex = CharacterMapping.getCharIndex(partData);\n        return new DomPosition(partIndex, charIndex);\n    }\n    getColumn(domPosition, partLength) {\n        const charOffset = this.partDataToCharOffset(domPosition.partIndex, partLength, domPosition.charIndex);\n        return charOffset + 1;\n    }\n    partDataToCharOffset(partIndex, partLength, charIndex) {\n        if (this.length === 0) {\n            return 0;\n        }\n        const searchEntry = ((partIndex << 16 /* CharacterMappingConstants.PART_INDEX_OFFSET */)\n            | (charIndex << 0 /* CharacterMappingConstants.CHAR_INDEX_OFFSET */)) >>> 0;\n        let min = 0;\n        let max = this.length - 1;\n        while (min + 1 < max) {\n            const mid = ((min + max) >>> 1);\n            const midEntry = this._data[mid];\n            if (midEntry === searchEntry) {\n                return mid;\n            }\n            else if (midEntry > searchEntry) {\n                max = mid;\n            }\n            else {\n                min = mid;\n            }\n        }\n        if (min === max) {\n            return min;\n        }\n        const minEntry = this._data[min];\n        const maxEntry = this._data[max];\n        if (minEntry === searchEntry) {\n            return min;\n        }\n        if (maxEntry === searchEntry) {\n            return max;\n        }\n        const minPartIndex = CharacterMapping.getPartIndex(minEntry);\n        const minCharIndex = CharacterMapping.getCharIndex(minEntry);\n        const maxPartIndex = CharacterMapping.getPartIndex(maxEntry);\n        let maxCharIndex;\n        if (minPartIndex !== maxPartIndex) {\n            // sitting between parts\n            maxCharIndex = partLength;\n        }\n        else {\n            maxCharIndex = CharacterMapping.getCharIndex(maxEntry);\n        }\n        const minEntryDistance = charIndex - minCharIndex;\n        const maxEntryDistance = maxCharIndex - charIndex;\n        if (minEntryDistance <= maxEntryDistance) {\n            return min;\n        }\n        return max;\n    }\n}\nexport class RenderLineOutput {\n    constructor(characterMapping, containsRTL, containsForeignElements) {\n        this._renderLineOutputBrand = undefined;\n        this.characterMapping = characterMapping;\n        this.containsRTL = containsRTL;\n        this.containsForeignElements = containsForeignElements;\n    }\n}\nexport function renderViewLine(input, sb) {\n    if (input.lineContent.length === 0) {\n        if (input.lineDecorations.length > 0) {\n            // This line is empty, but it contains inline decorations\n            sb.appendASCIIString(`<span>`);\n            let beforeCount = 0;\n            let afterCount = 0;\n            let containsForeignElements = 0 /* ForeignElementType.None */;\n            for (const lineDecoration of input.lineDecorations) {\n                if (lineDecoration.type === 1 /* InlineDecorationType.Before */ || lineDecoration.type === 2 /* InlineDecorationType.After */) {\n                    sb.appendASCIIString(`<span class=\"`);\n                    sb.appendASCIIString(lineDecoration.className);\n                    sb.appendASCIIString(`\"></span>`);\n                    if (lineDecoration.type === 1 /* InlineDecorationType.Before */) {\n                        containsForeignElements |= 1 /* ForeignElementType.Before */;\n                        beforeCount++;\n                    }\n                    if (lineDecoration.type === 2 /* InlineDecorationType.After */) {\n                        containsForeignElements |= 2 /* ForeignElementType.After */;\n                        afterCount++;\n                    }\n                }\n            }\n            sb.appendASCIIString(`</span>`);\n            const characterMapping = new CharacterMapping(1, beforeCount + afterCount);\n            characterMapping.setColumnInfo(1, beforeCount, 0, 0);\n            return new RenderLineOutput(characterMapping, false, containsForeignElements);\n        }\n        // completely empty line\n        sb.appendASCIIString('<span><span></span></span>');\n        return new RenderLineOutput(new CharacterMapping(0, 0), false, 0 /* ForeignElementType.None */);\n    }\n    return _renderLine(resolveRenderLineInput(input), sb);\n}\nexport class RenderLineOutput2 {\n    constructor(characterMapping, html, containsRTL, containsForeignElements) {\n        this.characterMapping = characterMapping;\n        this.html = html;\n        this.containsRTL = containsRTL;\n        this.containsForeignElements = containsForeignElements;\n    }\n}\nexport function renderViewLine2(input) {\n    const sb = createStringBuilder(10000);\n    const out = renderViewLine(input, sb);\n    return new RenderLineOutput2(out.characterMapping, sb.build(), out.containsRTL, out.containsForeignElements);\n}\nclass ResolvedRenderLineInput {\n    constructor(fontIsMonospace, canUseHalfwidthRightwardsArrow, lineContent, len, isOverflowing, parts, containsForeignElements, fauxIndentLength, tabSize, startVisibleColumn, containsRTL, spaceWidth, renderSpaceCharCode, renderWhitespace, renderControlCharacters) {\n        this.fontIsMonospace = fontIsMonospace;\n        this.canUseHalfwidthRightwardsArrow = canUseHalfwidthRightwardsArrow;\n        this.lineContent = lineContent;\n        this.len = len;\n        this.isOverflowing = isOverflowing;\n        this.parts = parts;\n        this.containsForeignElements = containsForeignElements;\n        this.fauxIndentLength = fauxIndentLength;\n        this.tabSize = tabSize;\n        this.startVisibleColumn = startVisibleColumn;\n        this.containsRTL = containsRTL;\n        this.spaceWidth = spaceWidth;\n        this.renderSpaceCharCode = renderSpaceCharCode;\n        this.renderWhitespace = renderWhitespace;\n        this.renderControlCharacters = renderControlCharacters;\n        //\n    }\n}\nfunction resolveRenderLineInput(input) {\n    const lineContent = input.lineContent;\n    let isOverflowing;\n    let len;\n    if (input.stopRenderingLineAfter !== -1 && input.stopRenderingLineAfter < lineContent.length) {\n        isOverflowing = true;\n        len = input.stopRenderingLineAfter;\n    }\n    else {\n        isOverflowing = false;\n        len = lineContent.length;\n    }\n    let tokens = transformAndRemoveOverflowing(lineContent, input.containsRTL, input.lineTokens, input.fauxIndentLength, len);\n    if (input.renderControlCharacters && !input.isBasicASCII) {\n        // Calling `extractControlCharacters` before adding (possibly empty) line parts\n        // for inline decorations. `extractControlCharacters` removes empty line parts.\n        tokens = extractControlCharacters(lineContent, tokens);\n    }\n    if (input.renderWhitespace === 4 /* RenderWhitespace.All */ ||\n        input.renderWhitespace === 1 /* RenderWhitespace.Boundary */ ||\n        (input.renderWhitespace === 2 /* RenderWhitespace.Selection */ && !!input.selectionsOnLine) ||\n        input.renderWhitespace === 3 /* RenderWhitespace.Trailing */) {\n        tokens = _applyRenderWhitespace(input, lineContent, len, tokens);\n    }\n    let containsForeignElements = 0 /* ForeignElementType.None */;\n    if (input.lineDecorations.length > 0) {\n        for (let i = 0, len = input.lineDecorations.length; i < len; i++) {\n            const lineDecoration = input.lineDecorations[i];\n            if (lineDecoration.type === 3 /* InlineDecorationType.RegularAffectingLetterSpacing */) {\n                // Pretend there are foreign elements... although not 100% accurate.\n                containsForeignElements |= 1 /* ForeignElementType.Before */;\n            }\n            else if (lineDecoration.type === 1 /* InlineDecorationType.Before */) {\n                containsForeignElements |= 1 /* ForeignElementType.Before */;\n            }\n            else if (lineDecoration.type === 2 /* InlineDecorationType.After */) {\n                containsForeignElements |= 2 /* ForeignElementType.After */;\n            }\n        }\n        tokens = _applyInlineDecorations(lineContent, len, tokens, input.lineDecorations);\n    }\n    if (!input.containsRTL) {\n        // We can never split RTL text, as it ruins the rendering\n        tokens = splitLargeTokens(lineContent, tokens, !input.isBasicASCII || input.fontLigatures);\n    }\n    return new ResolvedRenderLineInput(input.useMonospaceOptimizations, input.canUseHalfwidthRightwardsArrow, lineContent, len, isOverflowing, tokens, containsForeignElements, input.fauxIndentLength, input.tabSize, input.startVisibleColumn, input.containsRTL, input.spaceWidth, input.renderSpaceCharCode, input.renderWhitespace, input.renderControlCharacters);\n}\n/**\n * In the rendering phase, characters are always looped until token.endIndex.\n * Ensure that all tokens end before `len` and the last one ends precisely at `len`.\n */\nfunction transformAndRemoveOverflowing(lineContent, lineContainsRTL, tokens, fauxIndentLength, len) {\n    const result = [];\n    let resultLen = 0;\n    // The faux indent part of the line should have no token type\n    if (fauxIndentLength > 0) {\n        result[resultLen++] = new LinePart(fauxIndentLength, '', 0, false);\n    }\n    let startOffset = fauxIndentLength;\n    for (let tokenIndex = 0, tokensLen = tokens.getCount(); tokenIndex < tokensLen; tokenIndex++) {\n        const endIndex = tokens.getEndOffset(tokenIndex);\n        if (endIndex <= fauxIndentLength) {\n            // The faux indent part of the line should have no token type\n            continue;\n        }\n        const type = tokens.getClassName(tokenIndex);\n        if (endIndex >= len) {\n            const tokenContainsRTL = (lineContainsRTL ? strings.containsRTL(lineContent.substring(startOffset, len)) : false);\n            result[resultLen++] = new LinePart(len, type, 0, tokenContainsRTL);\n            break;\n        }\n        const tokenContainsRTL = (lineContainsRTL ? strings.containsRTL(lineContent.substring(startOffset, endIndex)) : false);\n        result[resultLen++] = new LinePart(endIndex, type, 0, tokenContainsRTL);\n        startOffset = endIndex;\n    }\n    return result;\n}\n/**\n * See https://github.com/microsoft/vscode/issues/6885.\n * It appears that having very large spans causes very slow reading of character positions.\n * So here we try to avoid that.\n */\nfunction splitLargeTokens(lineContent, tokens, onlyAtSpaces) {\n    let lastTokenEndIndex = 0;\n    const result = [];\n    let resultLen = 0;\n    if (onlyAtSpaces) {\n        // Split only at spaces => we need to walk each character\n        for (let i = 0, len = tokens.length; i < len; i++) {\n            const token = tokens[i];\n            const tokenEndIndex = token.endIndex;\n            if (lastTokenEndIndex + 50 /* Constants.LongToken */ < tokenEndIndex) {\n                const tokenType = token.type;\n                const tokenMetadata = token.metadata;\n                const tokenContainsRTL = token.containsRTL;\n                let lastSpaceOffset = -1;\n                let currTokenStart = lastTokenEndIndex;\n                for (let j = lastTokenEndIndex; j < tokenEndIndex; j++) {\n                    if (lineContent.charCodeAt(j) === 32 /* CharCode.Space */) {\n                        lastSpaceOffset = j;\n                    }\n                    if (lastSpaceOffset !== -1 && j - currTokenStart >= 50 /* Constants.LongToken */) {\n                        // Split at `lastSpaceOffset` + 1\n                        result[resultLen++] = new LinePart(lastSpaceOffset + 1, tokenType, tokenMetadata, tokenContainsRTL);\n                        currTokenStart = lastSpaceOffset + 1;\n                        lastSpaceOffset = -1;\n                    }\n                }\n                if (currTokenStart !== tokenEndIndex) {\n                    result[resultLen++] = new LinePart(tokenEndIndex, tokenType, tokenMetadata, tokenContainsRTL);\n                }\n            }\n            else {\n                result[resultLen++] = token;\n            }\n            lastTokenEndIndex = tokenEndIndex;\n        }\n    }\n    else {\n        // Split anywhere => we don't need to walk each character\n        for (let i = 0, len = tokens.length; i < len; i++) {\n            const token = tokens[i];\n            const tokenEndIndex = token.endIndex;\n            const diff = (tokenEndIndex - lastTokenEndIndex);\n            if (diff > 50 /* Constants.LongToken */) {\n                const tokenType = token.type;\n                const tokenMetadata = token.metadata;\n                const tokenContainsRTL = token.containsRTL;\n                const piecesCount = Math.ceil(diff / 50 /* Constants.LongToken */);\n                for (let j = 1; j < piecesCount; j++) {\n                    const pieceEndIndex = lastTokenEndIndex + (j * 50 /* Constants.LongToken */);\n                    result[resultLen++] = new LinePart(pieceEndIndex, tokenType, tokenMetadata, tokenContainsRTL);\n                }\n                result[resultLen++] = new LinePart(tokenEndIndex, tokenType, tokenMetadata, tokenContainsRTL);\n            }\n            else {\n                result[resultLen++] = token;\n            }\n            lastTokenEndIndex = tokenEndIndex;\n        }\n    }\n    return result;\n}\nfunction isControlCharacter(charCode) {\n    if (charCode < 32) {\n        return (charCode !== 9 /* CharCode.Tab */);\n    }\n    if (charCode === 127) {\n        // DEL\n        return true;\n    }\n    if ((charCode >= 0x202A && charCode <= 0x202E)\n        || (charCode >= 0x2066 && charCode <= 0x2069)\n        || (charCode >= 0x200E && charCode <= 0x200F)\n        || charCode === 0x061C) {\n        // Unicode Directional Formatting Characters\n        // LRE\tU+202A\tLEFT-TO-RIGHT EMBEDDING\n        // RLE\tU+202B\tRIGHT-TO-LEFT EMBEDDING\n        // PDF\tU+202C\tPOP DIRECTIONAL FORMATTING\n        // LRO\tU+202D\tLEFT-TO-RIGHT OVERRIDE\n        // RLO\tU+202E\tRIGHT-TO-LEFT OVERRIDE\n        // LRI\tU+2066\tLEFT-TO-RIGHT ISOLATE\n        // RLI\tU+2067\tRIGHT-TO-LEFT ISOLATE\n        // FSI\tU+2068\tFIRST STRONG ISOLATE\n        // PDI\tU+2069\tPOP DIRECTIONAL ISOLATE\n        // LRM\tU+200E\tLEFT-TO-RIGHT MARK\n        // RLM\tU+200F\tRIGHT-TO-LEFT MARK\n        // ALM\tU+061C\tARABIC LETTER MARK\n        return true;\n    }\n    return false;\n}\nfunction extractControlCharacters(lineContent, tokens) {\n    const result = [];\n    let lastLinePart = new LinePart(0, '', 0, false);\n    let charOffset = 0;\n    for (const token of tokens) {\n        const tokenEndIndex = token.endIndex;\n        for (; charOffset < tokenEndIndex; charOffset++) {\n            const charCode = lineContent.charCodeAt(charOffset);\n            if (isControlCharacter(charCode)) {\n                if (charOffset > lastLinePart.endIndex) {\n                    // emit previous part if it has text\n                    lastLinePart = new LinePart(charOffset, token.type, token.metadata, token.containsRTL);\n                    result.push(lastLinePart);\n                }\n                lastLinePart = new LinePart(charOffset + 1, 'mtkcontrol', token.metadata, false);\n                result.push(lastLinePart);\n            }\n        }\n        if (charOffset > lastLinePart.endIndex) {\n            // emit previous part if it has text\n            lastLinePart = new LinePart(tokenEndIndex, token.type, token.metadata, token.containsRTL);\n            result.push(lastLinePart);\n        }\n    }\n    return result;\n}\n/**\n * Whitespace is rendered by \"replacing\" tokens with a special-purpose `mtkw` type that is later recognized in the rendering phase.\n * Moreover, a token is created for every visual indent because on some fonts the glyphs used for rendering whitespace (&rarr; or &middot;) do not have the same width as &nbsp;.\n * The rendering phase will generate `style=\"width:...\"` for these tokens.\n */\nfunction _applyRenderWhitespace(input, lineContent, len, tokens) {\n    const continuesWithWrappedLine = input.continuesWithWrappedLine;\n    const fauxIndentLength = input.fauxIndentLength;\n    const tabSize = input.tabSize;\n    const startVisibleColumn = input.startVisibleColumn;\n    const useMonospaceOptimizations = input.useMonospaceOptimizations;\n    const selections = input.selectionsOnLine;\n    const onlyBoundary = (input.renderWhitespace === 1 /* RenderWhitespace.Boundary */);\n    const onlyTrailing = (input.renderWhitespace === 3 /* RenderWhitespace.Trailing */);\n    const generateLinePartForEachWhitespace = (input.renderSpaceWidth !== input.spaceWidth);\n    const result = [];\n    let resultLen = 0;\n    let tokenIndex = 0;\n    let tokenType = tokens[tokenIndex].type;\n    let tokenContainsRTL = tokens[tokenIndex].containsRTL;\n    let tokenEndIndex = tokens[tokenIndex].endIndex;\n    const tokensLength = tokens.length;\n    let lineIsEmptyOrWhitespace = false;\n    let firstNonWhitespaceIndex = strings.firstNonWhitespaceIndex(lineContent);\n    let lastNonWhitespaceIndex;\n    if (firstNonWhitespaceIndex === -1) {\n        lineIsEmptyOrWhitespace = true;\n        firstNonWhitespaceIndex = len;\n        lastNonWhitespaceIndex = len;\n    }\n    else {\n        lastNonWhitespaceIndex = strings.lastNonWhitespaceIndex(lineContent);\n    }\n    let wasInWhitespace = false;\n    let currentSelectionIndex = 0;\n    let currentSelection = selections && selections[currentSelectionIndex];\n    let tmpIndent = startVisibleColumn % tabSize;\n    for (let charIndex = fauxIndentLength; charIndex < len; charIndex++) {\n        const chCode = lineContent.charCodeAt(charIndex);\n        if (currentSelection && charIndex >= currentSelection.endOffset) {\n            currentSelectionIndex++;\n            currentSelection = selections && selections[currentSelectionIndex];\n        }\n        let isInWhitespace;\n        if (charIndex < firstNonWhitespaceIndex || charIndex > lastNonWhitespaceIndex) {\n            // in leading or trailing whitespace\n            isInWhitespace = true;\n        }\n        else if (chCode === 9 /* CharCode.Tab */) {\n            // a tab character is rendered both in all and boundary cases\n            isInWhitespace = true;\n        }\n        else if (chCode === 32 /* CharCode.Space */) {\n            // hit a space character\n            if (onlyBoundary) {\n                // rendering only boundary whitespace\n                if (wasInWhitespace) {\n                    isInWhitespace = true;\n                }\n                else {\n                    const nextChCode = (charIndex + 1 < len ? lineContent.charCodeAt(charIndex + 1) : 0 /* CharCode.Null */);\n                    isInWhitespace = (nextChCode === 32 /* CharCode.Space */ || nextChCode === 9 /* CharCode.Tab */);\n                }\n            }\n            else {\n                isInWhitespace = true;\n            }\n        }\n        else {\n            isInWhitespace = false;\n        }\n        // If rendering whitespace on selection, check that the charIndex falls within a selection\n        if (isInWhitespace && selections) {\n            isInWhitespace = !!currentSelection && currentSelection.startOffset <= charIndex && currentSelection.endOffset > charIndex;\n        }\n        // If rendering only trailing whitespace, check that the charIndex points to trailing whitespace.\n        if (isInWhitespace && onlyTrailing) {\n            isInWhitespace = lineIsEmptyOrWhitespace || charIndex > lastNonWhitespaceIndex;\n        }\n        if (isInWhitespace && tokenContainsRTL) {\n            // If the token contains RTL text, breaking it up into multiple line parts\n            // to render whitespace might affect the browser's bidi layout.\n            //\n            // We render whitespace in such tokens only if the whitespace\n            // is the leading or the trailing whitespace of the line,\n            // which doesn't affect the browser's bidi layout.\n            if (charIndex >= firstNonWhitespaceIndex && charIndex <= lastNonWhitespaceIndex) {\n                isInWhitespace = false;\n            }\n        }\n        if (wasInWhitespace) {\n            // was in whitespace token\n            if (!isInWhitespace || (!useMonospaceOptimizations && tmpIndent >= tabSize)) {\n                // leaving whitespace token or entering a new indent\n                if (generateLinePartForEachWhitespace) {\n                    const lastEndIndex = (resultLen > 0 ? result[resultLen - 1].endIndex : fauxIndentLength);\n                    for (let i = lastEndIndex + 1; i <= charIndex; i++) {\n                        result[resultLen++] = new LinePart(i, 'mtkw', 1 /* LinePartMetadata.IS_WHITESPACE */, false);\n                    }\n                }\n                else {\n                    result[resultLen++] = new LinePart(charIndex, 'mtkw', 1 /* LinePartMetadata.IS_WHITESPACE */, false);\n                }\n                tmpIndent = tmpIndent % tabSize;\n            }\n        }\n        else {\n            // was in regular token\n            if (charIndex === tokenEndIndex || (isInWhitespace && charIndex > fauxIndentLength)) {\n                result[resultLen++] = new LinePart(charIndex, tokenType, 0, tokenContainsRTL);\n                tmpIndent = tmpIndent % tabSize;\n            }\n        }\n        if (chCode === 9 /* CharCode.Tab */) {\n            tmpIndent = tabSize;\n        }\n        else if (strings.isFullWidthCharacter(chCode)) {\n            tmpIndent += 2;\n        }\n        else {\n            tmpIndent++;\n        }\n        wasInWhitespace = isInWhitespace;\n        while (charIndex === tokenEndIndex) {\n            tokenIndex++;\n            if (tokenIndex < tokensLength) {\n                tokenType = tokens[tokenIndex].type;\n                tokenContainsRTL = tokens[tokenIndex].containsRTL;\n                tokenEndIndex = tokens[tokenIndex].endIndex;\n            }\n            else {\n                break;\n            }\n        }\n    }\n    let generateWhitespace = false;\n    if (wasInWhitespace) {\n        // was in whitespace token\n        if (continuesWithWrappedLine && onlyBoundary) {\n            const lastCharCode = (len > 0 ? lineContent.charCodeAt(len - 1) : 0 /* CharCode.Null */);\n            const prevCharCode = (len > 1 ? lineContent.charCodeAt(len - 2) : 0 /* CharCode.Null */);\n            const isSingleTrailingSpace = (lastCharCode === 32 /* CharCode.Space */ && (prevCharCode !== 32 /* CharCode.Space */ && prevCharCode !== 9 /* CharCode.Tab */));\n            if (!isSingleTrailingSpace) {\n                generateWhitespace = true;\n            }\n        }\n        else {\n            generateWhitespace = true;\n        }\n    }\n    if (generateWhitespace) {\n        if (generateLinePartForEachWhitespace) {\n            const lastEndIndex = (resultLen > 0 ? result[resultLen - 1].endIndex : fauxIndentLength);\n            for (let i = lastEndIndex + 1; i <= len; i++) {\n                result[resultLen++] = new LinePart(i, 'mtkw', 1 /* LinePartMetadata.IS_WHITESPACE */, false);\n            }\n        }\n        else {\n            result[resultLen++] = new LinePart(len, 'mtkw', 1 /* LinePartMetadata.IS_WHITESPACE */, false);\n        }\n    }\n    else {\n        result[resultLen++] = new LinePart(len, tokenType, 0, tokenContainsRTL);\n    }\n    return result;\n}\n/**\n * Inline decorations are \"merged\" on top of tokens.\n * Special care must be taken when multiple inline decorations are at play and they overlap.\n */\nfunction _applyInlineDecorations(lineContent, len, tokens, _lineDecorations) {\n    _lineDecorations.sort(LineDecoration.compare);\n    const lineDecorations = LineDecorationsNormalizer.normalize(lineContent, _lineDecorations);\n    const lineDecorationsLen = lineDecorations.length;\n    let lineDecorationIndex = 0;\n    const result = [];\n    let resultLen = 0;\n    let lastResultEndIndex = 0;\n    for (let tokenIndex = 0, len = tokens.length; tokenIndex < len; tokenIndex++) {\n        const token = tokens[tokenIndex];\n        const tokenEndIndex = token.endIndex;\n        const tokenType = token.type;\n        const tokenMetadata = token.metadata;\n        const tokenContainsRTL = token.containsRTL;\n        while (lineDecorationIndex < lineDecorationsLen && lineDecorations[lineDecorationIndex].startOffset < tokenEndIndex) {\n            const lineDecoration = lineDecorations[lineDecorationIndex];\n            if (lineDecoration.startOffset > lastResultEndIndex) {\n                lastResultEndIndex = lineDecoration.startOffset;\n                result[resultLen++] = new LinePart(lastResultEndIndex, tokenType, tokenMetadata, tokenContainsRTL);\n            }\n            if (lineDecoration.endOffset + 1 <= tokenEndIndex) {\n                // This line decoration ends before this token ends\n                lastResultEndIndex = lineDecoration.endOffset + 1;\n                result[resultLen++] = new LinePart(lastResultEndIndex, tokenType + ' ' + lineDecoration.className, tokenMetadata | lineDecoration.metadata, tokenContainsRTL);\n                lineDecorationIndex++;\n            }\n            else {\n                // This line decoration continues on to the next token\n                lastResultEndIndex = tokenEndIndex;\n                result[resultLen++] = new LinePart(lastResultEndIndex, tokenType + ' ' + lineDecoration.className, tokenMetadata | lineDecoration.metadata, tokenContainsRTL);\n                break;\n            }\n        }\n        if (tokenEndIndex > lastResultEndIndex) {\n            lastResultEndIndex = tokenEndIndex;\n            result[resultLen++] = new LinePart(lastResultEndIndex, tokenType, tokenMetadata, tokenContainsRTL);\n        }\n    }\n    const lastTokenEndIndex = tokens[tokens.length - 1].endIndex;\n    if (lineDecorationIndex < lineDecorationsLen && lineDecorations[lineDecorationIndex].startOffset === lastTokenEndIndex) {\n        while (lineDecorationIndex < lineDecorationsLen && lineDecorations[lineDecorationIndex].startOffset === lastTokenEndIndex) {\n            const lineDecoration = lineDecorations[lineDecorationIndex];\n            result[resultLen++] = new LinePart(lastResultEndIndex, lineDecoration.className, lineDecoration.metadata, false);\n            lineDecorationIndex++;\n        }\n    }\n    return result;\n}\n/**\n * This function is on purpose not split up into multiple functions to allow runtime type inference (i.e. performance reasons).\n * Notice how all the needed data is fully resolved and passed in (i.e. no other calls).\n */\nfunction _renderLine(input, sb) {\n    const fontIsMonospace = input.fontIsMonospace;\n    const canUseHalfwidthRightwardsArrow = input.canUseHalfwidthRightwardsArrow;\n    const containsForeignElements = input.containsForeignElements;\n    const lineContent = input.lineContent;\n    const len = input.len;\n    const isOverflowing = input.isOverflowing;\n    const parts = input.parts;\n    const fauxIndentLength = input.fauxIndentLength;\n    const tabSize = input.tabSize;\n    const startVisibleColumn = input.startVisibleColumn;\n    const containsRTL = input.containsRTL;\n    const spaceWidth = input.spaceWidth;\n    const renderSpaceCharCode = input.renderSpaceCharCode;\n    const renderWhitespace = input.renderWhitespace;\n    const renderControlCharacters = input.renderControlCharacters;\n    const characterMapping = new CharacterMapping(len + 1, parts.length);\n    let lastCharacterMappingDefined = false;\n    let charIndex = 0;\n    let visibleColumn = startVisibleColumn;\n    let charOffsetInPart = 0; // the character offset in the current part\n    let charHorizontalOffset = 0; // the character horizontal position in terms of chars relative to line start\n    let partDisplacement = 0;\n    if (containsRTL) {\n        sb.appendASCIIString('<span dir=\"ltr\">');\n    }\n    else {\n        sb.appendASCIIString('<span>');\n    }\n    for (let partIndex = 0, tokensLen = parts.length; partIndex < tokensLen; partIndex++) {\n        const part = parts[partIndex];\n        const partEndIndex = part.endIndex;\n        const partType = part.type;\n        const partContainsRTL = part.containsRTL;\n        const partRendersWhitespace = (renderWhitespace !== 0 /* RenderWhitespace.None */ && part.isWhitespace());\n        const partRendersWhitespaceWithWidth = partRendersWhitespace && !fontIsMonospace && (partType === 'mtkw' /*only whitespace*/ || !containsForeignElements);\n        const partIsEmptyAndHasPseudoAfter = (charIndex === partEndIndex && part.isPseudoAfter());\n        charOffsetInPart = 0;\n        sb.appendASCIIString('<span ');\n        if (partContainsRTL) {\n            sb.appendASCIIString('style=\"unicode-bidi:isolate\" ');\n        }\n        sb.appendASCIIString('class=\"');\n        sb.appendASCIIString(partRendersWhitespaceWithWidth ? 'mtkz' : partType);\n        sb.appendASCII(34 /* CharCode.DoubleQuote */);\n        if (partRendersWhitespace) {\n            let partWidth = 0;\n            {\n                let _charIndex = charIndex;\n                let _visibleColumn = visibleColumn;\n                for (; _charIndex < partEndIndex; _charIndex++) {\n                    const charCode = lineContent.charCodeAt(_charIndex);\n                    const charWidth = (charCode === 9 /* CharCode.Tab */ ? (tabSize - (_visibleColumn % tabSize)) : 1) | 0;\n                    partWidth += charWidth;\n                    if (_charIndex >= fauxIndentLength) {\n                        _visibleColumn += charWidth;\n                    }\n                }\n            }\n            if (partRendersWhitespaceWithWidth) {\n                sb.appendASCIIString(' style=\"width:');\n                sb.appendASCIIString(String(spaceWidth * partWidth));\n                sb.appendASCIIString('px\"');\n            }\n            sb.appendASCII(62 /* CharCode.GreaterThan */);\n            for (; charIndex < partEndIndex; charIndex++) {\n                characterMapping.setColumnInfo(charIndex + 1, partIndex - partDisplacement, charOffsetInPart, charHorizontalOffset);\n                partDisplacement = 0;\n                const charCode = lineContent.charCodeAt(charIndex);\n                let producedCharacters;\n                let charWidth;\n                if (charCode === 9 /* CharCode.Tab */) {\n                    producedCharacters = (tabSize - (visibleColumn % tabSize)) | 0;\n                    charWidth = producedCharacters;\n                    if (!canUseHalfwidthRightwardsArrow || charWidth > 1) {\n                        sb.write1(0x2192); // RIGHTWARDS ARROW\n                    }\n                    else {\n                        sb.write1(0xFFEB); // HALFWIDTH RIGHTWARDS ARROW\n                    }\n                    for (let space = 2; space <= charWidth; space++) {\n                        sb.write1(0xA0); // &nbsp;\n                    }\n                }\n                else { // must be CharCode.Space\n                    producedCharacters = 2;\n                    charWidth = 1;\n                    sb.write1(renderSpaceCharCode); // &middot; or word separator middle dot\n                    sb.write1(0x200C); // ZERO WIDTH NON-JOINER\n                }\n                charOffsetInPart += producedCharacters;\n                charHorizontalOffset += charWidth;\n                if (charIndex >= fauxIndentLength) {\n                    visibleColumn += charWidth;\n                }\n            }\n        }\n        else {\n            sb.appendASCII(62 /* CharCode.GreaterThan */);\n            for (; charIndex < partEndIndex; charIndex++) {\n                characterMapping.setColumnInfo(charIndex + 1, partIndex - partDisplacement, charOffsetInPart, charHorizontalOffset);\n                partDisplacement = 0;\n                const charCode = lineContent.charCodeAt(charIndex);\n                let producedCharacters = 1;\n                let charWidth = 1;\n                switch (charCode) {\n                    case 9 /* CharCode.Tab */:\n                        producedCharacters = (tabSize - (visibleColumn % tabSize));\n                        charWidth = producedCharacters;\n                        for (let space = 1; space <= producedCharacters; space++) {\n                            sb.write1(0xA0); // &nbsp;\n                        }\n                        break;\n                    case 32 /* CharCode.Space */:\n                        sb.write1(0xA0); // &nbsp;\n                        break;\n                    case 60 /* CharCode.LessThan */:\n                        sb.appendASCIIString('&lt;');\n                        break;\n                    case 62 /* CharCode.GreaterThan */:\n                        sb.appendASCIIString('&gt;');\n                        break;\n                    case 38 /* CharCode.Ampersand */:\n                        sb.appendASCIIString('&amp;');\n                        break;\n                    case 0 /* CharCode.Null */:\n                        if (renderControlCharacters) {\n                            // See https://unicode-table.com/en/blocks/control-pictures/\n                            sb.write1(9216);\n                        }\n                        else {\n                            sb.appendASCIIString('&#00;');\n                        }\n                        break;\n                    case 65279 /* CharCode.UTF8_BOM */:\n                    case 8232 /* CharCode.LINE_SEPARATOR */:\n                    case 8233 /* CharCode.PARAGRAPH_SEPARATOR */:\n                    case 133 /* CharCode.NEXT_LINE */:\n                        sb.write1(0xFFFD);\n                        break;\n                    default:\n                        if (strings.isFullWidthCharacter(charCode)) {\n                            charWidth++;\n                        }\n                        // See https://unicode-table.com/en/blocks/control-pictures/\n                        if (renderControlCharacters && charCode < 32) {\n                            sb.write1(9216 + charCode);\n                        }\n                        else if (renderControlCharacters && charCode === 127) {\n                            // DEL\n                            sb.write1(9249);\n                        }\n                        else if (renderControlCharacters && isControlCharacter(charCode)) {\n                            sb.appendASCIIString('[U+');\n                            sb.appendASCIIString(to4CharHex(charCode));\n                            sb.appendASCIIString(']');\n                            producedCharacters = 8;\n                            charWidth = producedCharacters;\n                        }\n                        else {\n                            sb.write1(charCode);\n                        }\n                }\n                charOffsetInPart += producedCharacters;\n                charHorizontalOffset += charWidth;\n                if (charIndex >= fauxIndentLength) {\n                    visibleColumn += charWidth;\n                }\n            }\n        }\n        if (partIsEmptyAndHasPseudoAfter) {\n            partDisplacement++;\n        }\n        else {\n            partDisplacement = 0;\n        }\n        if (charIndex >= len && !lastCharacterMappingDefined && part.isPseudoAfter()) {\n            lastCharacterMappingDefined = true;\n            characterMapping.setColumnInfo(charIndex + 1, partIndex, charOffsetInPart, charHorizontalOffset);\n        }\n        sb.appendASCIIString('</span>');\n    }\n    if (!lastCharacterMappingDefined) {\n        // When getting client rects for the last character, we will position the\n        // text range at the end of the span, insteaf of at the beginning of next span\n        characterMapping.setColumnInfo(len + 1, parts.length - 1, charOffsetInPart, charHorizontalOffset);\n    }\n    if (isOverflowing) {\n        sb.appendASCIIString('<span>&hellip;</span>');\n    }\n    sb.appendASCIIString('</span>');\n    return new RenderLineOutput(characterMapping, containsRTL, containsForeignElements);\n}\nfunction to4CharHex(n) {\n    return n.toString(16).toUpperCase().padStart(4, '0');\n}\n"],"mappings":"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"}]}