{"remainingRequest":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js!/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/common/languages/autoIndent.js","dependencies":[{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/common/languages/autoIndent.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/babel.config.js","mtime":1668271197000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js","mtime":456789000000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["strings","IndentAction","createScopedLineTokens","getScopedLineTokens","getPrecedingValidLine","model","lineNumber","indentRulesSupport","languageId","tokenization","getLanguageIdAtPosition","lastLineNumber","resultLineNumber","text","getLineContent","shouldIgnore","test","getInheritIndentForLine","autoIndent","honorIntentialIndent","languageConfigurationService","getLanguageConfiguration","getLanguageId","indentation","action","precedingUnIgnoredLine","precedingUnIgnoredLineContent","shouldIncrease","shouldIndentNextLine","getLeadingWhitespace","Indent","line","shouldDecrease","previousLine","previousLineIndentMetadata","getIndentMetadata","stopLine","i","lineContent","j","getGoodIndentForLine","virtualModel","indentConverter","richEditSupport","indent","undefined","inheritLine","enterResult","onEnter","removeText","substring","length","indentAction","IndentOutdent","shiftIndent","Outdent","unshiftIndent","appendText","getIndentForEnter","range","forceTokenization","startLineNumber","lineTokens","getLineTokens","scopedLineTokens","startColumn","scopedLineText","embeddedLanguage","beforeEnterText","firstCharOffset","substr","afterEnterText","isEmpty","endScopedLineTokens","endLineNumber","endColumn","beforeEnterResult","beforeEnterIndent","column","currentLineIndent","afterEnterAction","beforeEnter","afterEnter","afterEnterIndent","getIndentActionForType","ch","beforeTypeText","afterTypeText","r","getLineCount"],"sources":["/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/common/languages/autoIndent.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../base/common/strings.js';\nimport { IndentAction } from './languageConfiguration.js';\nimport { createScopedLineTokens } from './supports.js';\nimport { getScopedLineTokens } from './languageConfigurationRegistry.js';\n/**\n * Get nearest preceding line which doesn't match unIndentPattern or contains all whitespace.\n * Result:\n * -1: run into the boundary of embedded languages\n * 0: every line above are invalid\n * else: nearest preceding line of the same language\n */\nfunction getPrecedingValidLine(model, lineNumber, indentRulesSupport) {\n    const languageId = model.tokenization.getLanguageIdAtPosition(lineNumber, 0);\n    if (lineNumber > 1) {\n        let lastLineNumber;\n        let resultLineNumber = -1;\n        for (lastLineNumber = lineNumber - 1; lastLineNumber >= 1; lastLineNumber--) {\n            if (model.tokenization.getLanguageIdAtPosition(lastLineNumber, 0) !== languageId) {\n                return resultLineNumber;\n            }\n            const text = model.getLineContent(lastLineNumber);\n            if (indentRulesSupport.shouldIgnore(text) || /^\\s+$/.test(text) || text === '') {\n                resultLineNumber = lastLineNumber;\n                continue;\n            }\n            return lastLineNumber;\n        }\n    }\n    return -1;\n}\n/**\n * Get inherited indentation from above lines.\n * 1. Find the nearest preceding line which doesn't match unIndentedLinePattern.\n * 2. If this line matches indentNextLinePattern or increaseIndentPattern, it means that the indent level of `lineNumber` should be 1 greater than this line.\n * 3. If this line doesn't match any indent rules\n *   a. check whether the line above it matches indentNextLinePattern\n *   b. If not, the indent level of this line is the result\n *   c. If so, it means the indent of this line is *temporary*, go upward utill we find a line whose indent is not temporary (the same workflow a -> b -> c).\n * 4. Otherwise, we fail to get an inherited indent from aboves. Return null and we should not touch the indent of `lineNumber`\n *\n * This function only return the inherited indent based on above lines, it doesn't check whether current line should decrease or not.\n */\nexport function getInheritIndentForLine(autoIndent, model, lineNumber, honorIntentialIndent = true, languageConfigurationService) {\n    if (autoIndent < 4 /* EditorAutoIndentStrategy.Full */) {\n        return null;\n    }\n    const indentRulesSupport = languageConfigurationService.getLanguageConfiguration(model.tokenization.getLanguageId()).indentRulesSupport;\n    if (!indentRulesSupport) {\n        return null;\n    }\n    if (lineNumber <= 1) {\n        return {\n            indentation: '',\n            action: null\n        };\n    }\n    const precedingUnIgnoredLine = getPrecedingValidLine(model, lineNumber, indentRulesSupport);\n    if (precedingUnIgnoredLine < 0) {\n        return null;\n    }\n    else if (precedingUnIgnoredLine < 1) {\n        return {\n            indentation: '',\n            action: null\n        };\n    }\n    const precedingUnIgnoredLineContent = model.getLineContent(precedingUnIgnoredLine);\n    if (indentRulesSupport.shouldIncrease(precedingUnIgnoredLineContent) || indentRulesSupport.shouldIndentNextLine(precedingUnIgnoredLineContent)) {\n        return {\n            indentation: strings.getLeadingWhitespace(precedingUnIgnoredLineContent),\n            action: IndentAction.Indent,\n            line: precedingUnIgnoredLine\n        };\n    }\n    else if (indentRulesSupport.shouldDecrease(precedingUnIgnoredLineContent)) {\n        return {\n            indentation: strings.getLeadingWhitespace(precedingUnIgnoredLineContent),\n            action: null,\n            line: precedingUnIgnoredLine\n        };\n    }\n    else {\n        // precedingUnIgnoredLine can not be ignored.\n        // it doesn't increase indent of following lines\n        // it doesn't increase just next line\n        // so current line is not affect by precedingUnIgnoredLine\n        // and then we should get a correct inheritted indentation from above lines\n        if (precedingUnIgnoredLine === 1) {\n            return {\n                indentation: strings.getLeadingWhitespace(model.getLineContent(precedingUnIgnoredLine)),\n                action: null,\n                line: precedingUnIgnoredLine\n            };\n        }\n        const previousLine = precedingUnIgnoredLine - 1;\n        const previousLineIndentMetadata = indentRulesSupport.getIndentMetadata(model.getLineContent(previousLine));\n        if (!(previousLineIndentMetadata & (1 /* IndentConsts.INCREASE_MASK */ | 2 /* IndentConsts.DECREASE_MASK */)) &&\n            (previousLineIndentMetadata & 4 /* IndentConsts.INDENT_NEXTLINE_MASK */)) {\n            let stopLine = 0;\n            for (let i = previousLine - 1; i > 0; i--) {\n                if (indentRulesSupport.shouldIndentNextLine(model.getLineContent(i))) {\n                    continue;\n                }\n                stopLine = i;\n                break;\n            }\n            return {\n                indentation: strings.getLeadingWhitespace(model.getLineContent(stopLine + 1)),\n                action: null,\n                line: stopLine + 1\n            };\n        }\n        if (honorIntentialIndent) {\n            return {\n                indentation: strings.getLeadingWhitespace(model.getLineContent(precedingUnIgnoredLine)),\n                action: null,\n                line: precedingUnIgnoredLine\n            };\n        }\n        else {\n            // search from precedingUnIgnoredLine until we find one whose indent is not temporary\n            for (let i = precedingUnIgnoredLine; i > 0; i--) {\n                const lineContent = model.getLineContent(i);\n                if (indentRulesSupport.shouldIncrease(lineContent)) {\n                    return {\n                        indentation: strings.getLeadingWhitespace(lineContent),\n                        action: IndentAction.Indent,\n                        line: i\n                    };\n                }\n                else if (indentRulesSupport.shouldIndentNextLine(lineContent)) {\n                    let stopLine = 0;\n                    for (let j = i - 1; j > 0; j--) {\n                        if (indentRulesSupport.shouldIndentNextLine(model.getLineContent(i))) {\n                            continue;\n                        }\n                        stopLine = j;\n                        break;\n                    }\n                    return {\n                        indentation: strings.getLeadingWhitespace(model.getLineContent(stopLine + 1)),\n                        action: null,\n                        line: stopLine + 1\n                    };\n                }\n                else if (indentRulesSupport.shouldDecrease(lineContent)) {\n                    return {\n                        indentation: strings.getLeadingWhitespace(lineContent),\n                        action: null,\n                        line: i\n                    };\n                }\n            }\n            return {\n                indentation: strings.getLeadingWhitespace(model.getLineContent(1)),\n                action: null,\n                line: 1\n            };\n        }\n    }\n}\nexport function getGoodIndentForLine(autoIndent, virtualModel, languageId, lineNumber, indentConverter, languageConfigurationService) {\n    if (autoIndent < 4 /* EditorAutoIndentStrategy.Full */) {\n        return null;\n    }\n    const richEditSupport = languageConfigurationService.getLanguageConfiguration(languageId);\n    if (!richEditSupport) {\n        return null;\n    }\n    const indentRulesSupport = languageConfigurationService.getLanguageConfiguration(languageId).indentRulesSupport;\n    if (!indentRulesSupport) {\n        return null;\n    }\n    const indent = getInheritIndentForLine(autoIndent, virtualModel, lineNumber, undefined, languageConfigurationService);\n    const lineContent = virtualModel.getLineContent(lineNumber);\n    if (indent) {\n        const inheritLine = indent.line;\n        if (inheritLine !== undefined) {\n            const enterResult = richEditSupport.onEnter(autoIndent, '', virtualModel.getLineContent(inheritLine), '');\n            if (enterResult) {\n                let indentation = strings.getLeadingWhitespace(virtualModel.getLineContent(inheritLine));\n                if (enterResult.removeText) {\n                    indentation = indentation.substring(0, indentation.length - enterResult.removeText);\n                }\n                if ((enterResult.indentAction === IndentAction.Indent) ||\n                    (enterResult.indentAction === IndentAction.IndentOutdent)) {\n                    indentation = indentConverter.shiftIndent(indentation);\n                }\n                else if (enterResult.indentAction === IndentAction.Outdent) {\n                    indentation = indentConverter.unshiftIndent(indentation);\n                }\n                if (indentRulesSupport.shouldDecrease(lineContent)) {\n                    indentation = indentConverter.unshiftIndent(indentation);\n                }\n                if (enterResult.appendText) {\n                    indentation += enterResult.appendText;\n                }\n                return strings.getLeadingWhitespace(indentation);\n            }\n        }\n        if (indentRulesSupport.shouldDecrease(lineContent)) {\n            if (indent.action === IndentAction.Indent) {\n                return indent.indentation;\n            }\n            else {\n                return indentConverter.unshiftIndent(indent.indentation);\n            }\n        }\n        else {\n            if (indent.action === IndentAction.Indent) {\n                return indentConverter.shiftIndent(indent.indentation);\n            }\n            else {\n                return indent.indentation;\n            }\n        }\n    }\n    return null;\n}\nexport function getIndentForEnter(autoIndent, model, range, indentConverter, languageConfigurationService) {\n    if (autoIndent < 4 /* EditorAutoIndentStrategy.Full */) {\n        return null;\n    }\n    model.tokenization.forceTokenization(range.startLineNumber);\n    const lineTokens = model.tokenization.getLineTokens(range.startLineNumber);\n    const scopedLineTokens = createScopedLineTokens(lineTokens, range.startColumn - 1);\n    const scopedLineText = scopedLineTokens.getLineContent();\n    let embeddedLanguage = false;\n    let beforeEnterText;\n    if (scopedLineTokens.firstCharOffset > 0 && lineTokens.getLanguageId(0) !== scopedLineTokens.languageId) {\n        // we are in the embeded language content\n        embeddedLanguage = true; // if embeddedLanguage is true, then we don't touch the indentation of current line\n        beforeEnterText = scopedLineText.substr(0, range.startColumn - 1 - scopedLineTokens.firstCharOffset);\n    }\n    else {\n        beforeEnterText = lineTokens.getLineContent().substring(0, range.startColumn - 1);\n    }\n    let afterEnterText;\n    if (range.isEmpty()) {\n        afterEnterText = scopedLineText.substr(range.startColumn - 1 - scopedLineTokens.firstCharOffset);\n    }\n    else {\n        const endScopedLineTokens = getScopedLineTokens(model, range.endLineNumber, range.endColumn);\n        afterEnterText = endScopedLineTokens.getLineContent().substr(range.endColumn - 1 - scopedLineTokens.firstCharOffset);\n    }\n    const indentRulesSupport = languageConfigurationService.getLanguageConfiguration(scopedLineTokens.languageId).indentRulesSupport;\n    if (!indentRulesSupport) {\n        return null;\n    }\n    const beforeEnterResult = beforeEnterText;\n    const beforeEnterIndent = strings.getLeadingWhitespace(beforeEnterText);\n    const virtualModel = {\n        tokenization: {\n            getLineTokens: (lineNumber) => {\n                return model.tokenization.getLineTokens(lineNumber);\n            },\n            getLanguageId: () => {\n                return model.getLanguageId();\n            },\n            getLanguageIdAtPosition: (lineNumber, column) => {\n                return model.getLanguageIdAtPosition(lineNumber, column);\n            },\n        },\n        getLineContent: (lineNumber) => {\n            if (lineNumber === range.startLineNumber) {\n                return beforeEnterResult;\n            }\n            else {\n                return model.getLineContent(lineNumber);\n            }\n        }\n    };\n    const currentLineIndent = strings.getLeadingWhitespace(lineTokens.getLineContent());\n    const afterEnterAction = getInheritIndentForLine(autoIndent, virtualModel, range.startLineNumber + 1, undefined, languageConfigurationService);\n    if (!afterEnterAction) {\n        const beforeEnter = embeddedLanguage ? currentLineIndent : beforeEnterIndent;\n        return {\n            beforeEnter: beforeEnter,\n            afterEnter: beforeEnter\n        };\n    }\n    let afterEnterIndent = embeddedLanguage ? currentLineIndent : afterEnterAction.indentation;\n    if (afterEnterAction.action === IndentAction.Indent) {\n        afterEnterIndent = indentConverter.shiftIndent(afterEnterIndent);\n    }\n    if (indentRulesSupport.shouldDecrease(afterEnterText)) {\n        afterEnterIndent = indentConverter.unshiftIndent(afterEnterIndent);\n    }\n    return {\n        beforeEnter: embeddedLanguage ? currentLineIndent : beforeEnterIndent,\n        afterEnter: afterEnterIndent\n    };\n}\n/**\n * We should always allow intentional indentation. It means, if users change the indentation of `lineNumber` and the content of\n * this line doesn't match decreaseIndentPattern, we should not adjust the indentation.\n */\nexport function getIndentActionForType(autoIndent, model, range, ch, indentConverter, languageConfigurationService) {\n    if (autoIndent < 4 /* EditorAutoIndentStrategy.Full */) {\n        return null;\n    }\n    const scopedLineTokens = getScopedLineTokens(model, range.startLineNumber, range.startColumn);\n    if (scopedLineTokens.firstCharOffset) {\n        // this line has mixed languages and indentation rules will not work\n        return null;\n    }\n    const indentRulesSupport = languageConfigurationService.getLanguageConfiguration(scopedLineTokens.languageId).indentRulesSupport;\n    if (!indentRulesSupport) {\n        return null;\n    }\n    const scopedLineText = scopedLineTokens.getLineContent();\n    const beforeTypeText = scopedLineText.substr(0, range.startColumn - 1 - scopedLineTokens.firstCharOffset);\n    // selection support\n    let afterTypeText;\n    if (range.isEmpty()) {\n        afterTypeText = scopedLineText.substr(range.startColumn - 1 - scopedLineTokens.firstCharOffset);\n    }\n    else {\n        const endScopedLineTokens = getScopedLineTokens(model, range.endLineNumber, range.endColumn);\n        afterTypeText = endScopedLineTokens.getLineContent().substr(range.endColumn - 1 - scopedLineTokens.firstCharOffset);\n    }\n    // If previous content already matches decreaseIndentPattern, it means indentation of this line should already be adjusted\n    // Users might change the indentation by purpose and we should honor that instead of readjusting.\n    if (!indentRulesSupport.shouldDecrease(beforeTypeText + afterTypeText) && indentRulesSupport.shouldDecrease(beforeTypeText + ch + afterTypeText)) {\n        // after typing `ch`, the content matches decreaseIndentPattern, we should adjust the indent to a good manner.\n        // 1. Get inherited indent action\n        const r = getInheritIndentForLine(autoIndent, model, range.startLineNumber, false, languageConfigurationService);\n        if (!r) {\n            return null;\n        }\n        let indentation = r.indentation;\n        if (r.action !== IndentAction.Indent) {\n            indentation = indentConverter.unshiftIndent(indentation);\n        }\n        return indentation;\n    }\n    return null;\n}\nexport function getIndentMetadata(model, lineNumber, languageConfigurationService) {\n    const indentRulesSupport = languageConfigurationService.getLanguageConfiguration(model.getLanguageId()).indentRulesSupport;\n    if (!indentRulesSupport) {\n        return null;\n    }\n    if (lineNumber < 1 || lineNumber > model.getLineCount()) {\n        return null;\n    }\n    return indentRulesSupport.getIndentMetadata(model.getLineContent(lineNumber));\n}\n"],"mappings":"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"}]}