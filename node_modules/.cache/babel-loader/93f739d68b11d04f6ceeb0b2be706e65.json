{"remainingRequest":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js!/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/base/browser/ui/tree/indexTreeModel.js","dependencies":[{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/base/browser/ui/tree/indexTreeModel.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/babel.config.js","mtime":1668271197000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js","mtime":456789000000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["TreeError","splice","tail2","Delayer","MicrotaskDelay","LcsDiff","Emitter","EventBufferer","Iterable","isFilterResult","obj","getVisibleState","visibility","isCollapsibleStateUpdate","update","collapsible","IndexTreeModel","user","list","rootElement","options","rootRef","eventBufferer","_onDidChangeCollapseState","onDidChangeCollapseState","wrapEvent","event","_onDidChangeRenderNodeCount","onDidChangeRenderNodeCount","_onDidSplice","onDidSplice","refilterDelayer","collapseByDefault","filter","autoExpandSingleChildren","root","parent","undefined","element","children","depth","visibleChildrenCount","visibleChildIndex","collapsed","renderNodeCount","visible","filterData","location","deleteCount","toInsert","empty","length","diffIdentityProvider","spliceSmart","spliceSimple","identity","toInsertIterable","recurseLevels","_a","diffDepth","getParentNodeWithListIndex","parentNode","lastDiffIds","index","diff","getElements","slice","map","e","getId","toString","ComputeDiff","quitEarly","locationPrefix","recurseSplice","fromOriginal","fromModified","count","i","Number","MAX_SAFE_INTEGER","lastStartO","Math","min","lastStartM","changes","sort","a","b","originalStart","change","originalLength","modifiedStart","modifiedLength","onDidCreateNode","onDidDeleteNode","listIndex","revealed","treeListElementsToInsert","nodesToInsertIterator","el","createTreeNode","lastIndex","lastHadChildren","visibleChildStartIndex","child","nodesToInsert","insertedVisibleChildrenCount","push","deletedNodes","n","deletedVisibleChildrenCount","visibleDeleteCount","reduce","r","node","_updateAncestorsRenderNodeCount","visit","forEach","fire","insertedNodes","currentlyHasChildren","setCollapsible","trigger","refilter","getTreeNodeWithListIndex","hasTreeNode","getTreeNode","bufferEvents","_setCollapseState","recursive","result","_setListNodeCollapseState","onlyVisibleChildIndex","_setNodeCollapseState","previousRenderNodeCount","updateNodeAfterCollapseChange","deep","updateNodeAfterFilterChange","cancel","treeElement","parentVisibility","treeListElements","_filterNode","childElements","childRevealed","childNodes","pop","_updateNodeAfterCollapseChange","_updateNodeAfterFilterChange","resultStartLength","hasVisibleDescendants","data","rest","indexTreeNode","indexOf","reverse"],"sources":["/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/base/browser/ui/tree/indexTreeModel.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { TreeError } from './tree.js';\nimport { splice, tail2 } from '../../../common/arrays.js';\nimport { Delayer, MicrotaskDelay } from '../../../common/async.js';\nimport { LcsDiff } from '../../../common/diff/diff.js';\nimport { Emitter, EventBufferer } from '../../../common/event.js';\nimport { Iterable } from '../../../common/iterator.js';\nexport function isFilterResult(obj) {\n    return typeof obj === 'object' && 'visibility' in obj && 'data' in obj;\n}\nexport function getVisibleState(visibility) {\n    switch (visibility) {\n        case true: return 1 /* TreeVisibility.Visible */;\n        case false: return 0 /* TreeVisibility.Hidden */;\n        default: return visibility;\n    }\n}\nfunction isCollapsibleStateUpdate(update) {\n    return typeof update.collapsible === 'boolean';\n}\nexport class IndexTreeModel {\n    constructor(user, list, rootElement, options = {}) {\n        this.user = user;\n        this.list = list;\n        this.rootRef = [];\n        this.eventBufferer = new EventBufferer();\n        this._onDidChangeCollapseState = new Emitter();\n        this.onDidChangeCollapseState = this.eventBufferer.wrapEvent(this._onDidChangeCollapseState.event);\n        this._onDidChangeRenderNodeCount = new Emitter();\n        this.onDidChangeRenderNodeCount = this.eventBufferer.wrapEvent(this._onDidChangeRenderNodeCount.event);\n        this._onDidSplice = new Emitter();\n        this.onDidSplice = this._onDidSplice.event;\n        this.refilterDelayer = new Delayer(MicrotaskDelay);\n        this.collapseByDefault = typeof options.collapseByDefault === 'undefined' ? false : options.collapseByDefault;\n        this.filter = options.filter;\n        this.autoExpandSingleChildren = typeof options.autoExpandSingleChildren === 'undefined' ? false : options.autoExpandSingleChildren;\n        this.root = {\n            parent: undefined,\n            element: rootElement,\n            children: [],\n            depth: 0,\n            visibleChildrenCount: 0,\n            visibleChildIndex: -1,\n            collapsible: false,\n            collapsed: false,\n            renderNodeCount: 0,\n            visibility: 1 /* TreeVisibility.Visible */,\n            visible: true,\n            filterData: undefined\n        };\n    }\n    splice(location, deleteCount, toInsert = Iterable.empty(), options = {}) {\n        if (location.length === 0) {\n            throw new TreeError(this.user, 'Invalid tree location');\n        }\n        if (options.diffIdentityProvider) {\n            this.spliceSmart(options.diffIdentityProvider, location, deleteCount, toInsert, options);\n        }\n        else {\n            this.spliceSimple(location, deleteCount, toInsert, options);\n        }\n    }\n    spliceSmart(identity, location, deleteCount, toInsertIterable, options, recurseLevels) {\n        var _a;\n        if (toInsertIterable === void 0) { toInsertIterable = Iterable.empty(); }\n        if (recurseLevels === void 0) { recurseLevels = (_a = options.diffDepth) !== null && _a !== void 0 ? _a : 0; }\n        const { parentNode } = this.getParentNodeWithListIndex(location);\n        if (!parentNode.lastDiffIds) {\n            return this.spliceSimple(location, deleteCount, toInsertIterable, options);\n        }\n        const toInsert = [...toInsertIterable];\n        const index = location[location.length - 1];\n        const diff = new LcsDiff({ getElements: () => parentNode.lastDiffIds }, {\n            getElements: () => [\n                ...parentNode.children.slice(0, index),\n                ...toInsert,\n                ...parentNode.children.slice(index + deleteCount),\n            ].map(e => identity.getId(e.element).toString())\n        }).ComputeDiff(false);\n        // if we were given a 'best effort' diff, use default behavior\n        if (diff.quitEarly) {\n            parentNode.lastDiffIds = undefined;\n            return this.spliceSimple(location, deleteCount, toInsert, options);\n        }\n        const locationPrefix = location.slice(0, -1);\n        const recurseSplice = (fromOriginal, fromModified, count) => {\n            if (recurseLevels > 0) {\n                for (let i = 0; i < count; i++) {\n                    fromOriginal--;\n                    fromModified--;\n                    this.spliceSmart(identity, [...locationPrefix, fromOriginal, 0], Number.MAX_SAFE_INTEGER, toInsert[fromModified].children, options, recurseLevels - 1);\n                }\n            }\n        };\n        let lastStartO = Math.min(parentNode.children.length, index + deleteCount);\n        let lastStartM = toInsert.length;\n        for (const change of diff.changes.sort((a, b) => b.originalStart - a.originalStart)) {\n            recurseSplice(lastStartO, lastStartM, lastStartO - (change.originalStart + change.originalLength));\n            lastStartO = change.originalStart;\n            lastStartM = change.modifiedStart - index;\n            this.spliceSimple([...locationPrefix, lastStartO], change.originalLength, Iterable.slice(toInsert, lastStartM, lastStartM + change.modifiedLength), options);\n        }\n        // at this point, startO === startM === count since any remaining prefix should match\n        recurseSplice(lastStartO, lastStartM, lastStartO);\n    }\n    spliceSimple(location, deleteCount, toInsert = Iterable.empty(), { onDidCreateNode, onDidDeleteNode, diffIdentityProvider }) {\n        const { parentNode, listIndex, revealed, visible } = this.getParentNodeWithListIndex(location);\n        const treeListElementsToInsert = [];\n        const nodesToInsertIterator = Iterable.map(toInsert, el => this.createTreeNode(el, parentNode, parentNode.visible ? 1 /* TreeVisibility.Visible */ : 0 /* TreeVisibility.Hidden */, revealed, treeListElementsToInsert, onDidCreateNode));\n        const lastIndex = location[location.length - 1];\n        const lastHadChildren = parentNode.children.length > 0;\n        // figure out what's the visible child start index right before the\n        // splice point\n        let visibleChildStartIndex = 0;\n        for (let i = lastIndex; i >= 0 && i < parentNode.children.length; i--) {\n            const child = parentNode.children[i];\n            if (child.visible) {\n                visibleChildStartIndex = child.visibleChildIndex;\n                break;\n            }\n        }\n        const nodesToInsert = [];\n        let insertedVisibleChildrenCount = 0;\n        let renderNodeCount = 0;\n        for (const child of nodesToInsertIterator) {\n            nodesToInsert.push(child);\n            renderNodeCount += child.renderNodeCount;\n            if (child.visible) {\n                child.visibleChildIndex = visibleChildStartIndex + insertedVisibleChildrenCount++;\n            }\n        }\n        const deletedNodes = splice(parentNode.children, lastIndex, deleteCount, nodesToInsert);\n        if (!diffIdentityProvider) {\n            parentNode.lastDiffIds = undefined;\n        }\n        else if (parentNode.lastDiffIds) {\n            splice(parentNode.lastDiffIds, lastIndex, deleteCount, nodesToInsert.map(n => diffIdentityProvider.getId(n.element).toString()));\n        }\n        else {\n            parentNode.lastDiffIds = parentNode.children.map(n => diffIdentityProvider.getId(n.element).toString());\n        }\n        // figure out what is the count of deleted visible children\n        let deletedVisibleChildrenCount = 0;\n        for (const child of deletedNodes) {\n            if (child.visible) {\n                deletedVisibleChildrenCount++;\n            }\n        }\n        // and adjust for all visible children after the splice point\n        if (deletedVisibleChildrenCount !== 0) {\n            for (let i = lastIndex + nodesToInsert.length; i < parentNode.children.length; i++) {\n                const child = parentNode.children[i];\n                if (child.visible) {\n                    child.visibleChildIndex -= deletedVisibleChildrenCount;\n                }\n            }\n        }\n        // update parent's visible children count\n        parentNode.visibleChildrenCount += insertedVisibleChildrenCount - deletedVisibleChildrenCount;\n        if (revealed && visible) {\n            const visibleDeleteCount = deletedNodes.reduce((r, node) => r + (node.visible ? node.renderNodeCount : 0), 0);\n            this._updateAncestorsRenderNodeCount(parentNode, renderNodeCount - visibleDeleteCount);\n            this.list.splice(listIndex, visibleDeleteCount, treeListElementsToInsert);\n        }\n        if (deletedNodes.length > 0 && onDidDeleteNode) {\n            const visit = (node) => {\n                onDidDeleteNode(node);\n                node.children.forEach(visit);\n            };\n            deletedNodes.forEach(visit);\n        }\n        this._onDidSplice.fire({ insertedNodes: nodesToInsert, deletedNodes });\n        const currentlyHasChildren = parentNode.children.length > 0;\n        if (lastHadChildren !== currentlyHasChildren) {\n            this.setCollapsible(location.slice(0, -1), currentlyHasChildren);\n        }\n        let node = parentNode;\n        while (node) {\n            if (node.visibility === 2 /* TreeVisibility.Recurse */) {\n                // delayed to avoid excessive refiltering, see #135941\n                this.refilterDelayer.trigger(() => this.refilter());\n                break;\n            }\n            node = node.parent;\n        }\n    }\n    rerender(location) {\n        if (location.length === 0) {\n            throw new TreeError(this.user, 'Invalid tree location');\n        }\n        const { node, listIndex, revealed } = this.getTreeNodeWithListIndex(location);\n        if (node.visible && revealed) {\n            this.list.splice(listIndex, 1, [node]);\n        }\n    }\n    has(location) {\n        return this.hasTreeNode(location);\n    }\n    getListIndex(location) {\n        const { listIndex, visible, revealed } = this.getTreeNodeWithListIndex(location);\n        return visible && revealed ? listIndex : -1;\n    }\n    getListRenderCount(location) {\n        return this.getTreeNode(location).renderNodeCount;\n    }\n    isCollapsible(location) {\n        return this.getTreeNode(location).collapsible;\n    }\n    setCollapsible(location, collapsible) {\n        const node = this.getTreeNode(location);\n        if (typeof collapsible === 'undefined') {\n            collapsible = !node.collapsible;\n        }\n        const update = { collapsible };\n        return this.eventBufferer.bufferEvents(() => this._setCollapseState(location, update));\n    }\n    isCollapsed(location) {\n        return this.getTreeNode(location).collapsed;\n    }\n    setCollapsed(location, collapsed, recursive) {\n        const node = this.getTreeNode(location);\n        if (typeof collapsed === 'undefined') {\n            collapsed = !node.collapsed;\n        }\n        const update = { collapsed, recursive: recursive || false };\n        return this.eventBufferer.bufferEvents(() => this._setCollapseState(location, update));\n    }\n    _setCollapseState(location, update) {\n        const { node, listIndex, revealed } = this.getTreeNodeWithListIndex(location);\n        const result = this._setListNodeCollapseState(node, listIndex, revealed, update);\n        if (node !== this.root && this.autoExpandSingleChildren && result && !isCollapsibleStateUpdate(update) && node.collapsible && !node.collapsed && !update.recursive) {\n            let onlyVisibleChildIndex = -1;\n            for (let i = 0; i < node.children.length; i++) {\n                const child = node.children[i];\n                if (child.visible) {\n                    if (onlyVisibleChildIndex > -1) {\n                        onlyVisibleChildIndex = -1;\n                        break;\n                    }\n                    else {\n                        onlyVisibleChildIndex = i;\n                    }\n                }\n            }\n            if (onlyVisibleChildIndex > -1) {\n                this._setCollapseState([...location, onlyVisibleChildIndex], update);\n            }\n        }\n        return result;\n    }\n    _setListNodeCollapseState(node, listIndex, revealed, update) {\n        const result = this._setNodeCollapseState(node, update, false);\n        if (!revealed || !node.visible || !result) {\n            return result;\n        }\n        const previousRenderNodeCount = node.renderNodeCount;\n        const toInsert = this.updateNodeAfterCollapseChange(node);\n        const deleteCount = previousRenderNodeCount - (listIndex === -1 ? 0 : 1);\n        this.list.splice(listIndex + 1, deleteCount, toInsert.slice(1));\n        return result;\n    }\n    _setNodeCollapseState(node, update, deep) {\n        let result;\n        if (node === this.root) {\n            result = false;\n        }\n        else {\n            if (isCollapsibleStateUpdate(update)) {\n                result = node.collapsible !== update.collapsible;\n                node.collapsible = update.collapsible;\n            }\n            else if (!node.collapsible) {\n                result = false;\n            }\n            else {\n                result = node.collapsed !== update.collapsed;\n                node.collapsed = update.collapsed;\n            }\n            if (result) {\n                this._onDidChangeCollapseState.fire({ node, deep });\n            }\n        }\n        if (!isCollapsibleStateUpdate(update) && update.recursive) {\n            for (const child of node.children) {\n                result = this._setNodeCollapseState(child, update, true) || result;\n            }\n        }\n        return result;\n    }\n    expandTo(location) {\n        this.eventBufferer.bufferEvents(() => {\n            let node = this.getTreeNode(location);\n            while (node.parent) {\n                node = node.parent;\n                location = location.slice(0, location.length - 1);\n                if (node.collapsed) {\n                    this._setCollapseState(location, { collapsed: false, recursive: false });\n                }\n            }\n        });\n    }\n    refilter() {\n        const previousRenderNodeCount = this.root.renderNodeCount;\n        const toInsert = this.updateNodeAfterFilterChange(this.root);\n        this.list.splice(0, previousRenderNodeCount, toInsert);\n        this.refilterDelayer.cancel();\n    }\n    createTreeNode(treeElement, parent, parentVisibility, revealed, treeListElements, onDidCreateNode) {\n        const node = {\n            parent,\n            element: treeElement.element,\n            children: [],\n            depth: parent.depth + 1,\n            visibleChildrenCount: 0,\n            visibleChildIndex: -1,\n            collapsible: typeof treeElement.collapsible === 'boolean' ? treeElement.collapsible : (typeof treeElement.collapsed !== 'undefined'),\n            collapsed: typeof treeElement.collapsed === 'undefined' ? this.collapseByDefault : treeElement.collapsed,\n            renderNodeCount: 1,\n            visibility: 1 /* TreeVisibility.Visible */,\n            visible: true,\n            filterData: undefined\n        };\n        const visibility = this._filterNode(node, parentVisibility);\n        node.visibility = visibility;\n        if (revealed) {\n            treeListElements.push(node);\n        }\n        const childElements = treeElement.children || Iterable.empty();\n        const childRevealed = revealed && visibility !== 0 /* TreeVisibility.Hidden */ && !node.collapsed;\n        const childNodes = Iterable.map(childElements, el => this.createTreeNode(el, node, visibility, childRevealed, treeListElements, onDidCreateNode));\n        let visibleChildrenCount = 0;\n        let renderNodeCount = 1;\n        for (const child of childNodes) {\n            node.children.push(child);\n            renderNodeCount += child.renderNodeCount;\n            if (child.visible) {\n                child.visibleChildIndex = visibleChildrenCount++;\n            }\n        }\n        node.collapsible = node.collapsible || node.children.length > 0;\n        node.visibleChildrenCount = visibleChildrenCount;\n        node.visible = visibility === 2 /* TreeVisibility.Recurse */ ? visibleChildrenCount > 0 : (visibility === 1 /* TreeVisibility.Visible */);\n        if (!node.visible) {\n            node.renderNodeCount = 0;\n            if (revealed) {\n                treeListElements.pop();\n            }\n        }\n        else if (!node.collapsed) {\n            node.renderNodeCount = renderNodeCount;\n        }\n        onDidCreateNode === null || onDidCreateNode === void 0 ? void 0 : onDidCreateNode(node);\n        return node;\n    }\n    updateNodeAfterCollapseChange(node) {\n        const previousRenderNodeCount = node.renderNodeCount;\n        const result = [];\n        this._updateNodeAfterCollapseChange(node, result);\n        this._updateAncestorsRenderNodeCount(node.parent, result.length - previousRenderNodeCount);\n        return result;\n    }\n    _updateNodeAfterCollapseChange(node, result) {\n        if (node.visible === false) {\n            return 0;\n        }\n        result.push(node);\n        node.renderNodeCount = 1;\n        if (!node.collapsed) {\n            for (const child of node.children) {\n                node.renderNodeCount += this._updateNodeAfterCollapseChange(child, result);\n            }\n        }\n        this._onDidChangeRenderNodeCount.fire(node);\n        return node.renderNodeCount;\n    }\n    updateNodeAfterFilterChange(node) {\n        const previousRenderNodeCount = node.renderNodeCount;\n        const result = [];\n        this._updateNodeAfterFilterChange(node, node.visible ? 1 /* TreeVisibility.Visible */ : 0 /* TreeVisibility.Hidden */, result);\n        this._updateAncestorsRenderNodeCount(node.parent, result.length - previousRenderNodeCount);\n        return result;\n    }\n    _updateNodeAfterFilterChange(node, parentVisibility, result, revealed = true) {\n        let visibility;\n        if (node !== this.root) {\n            visibility = this._filterNode(node, parentVisibility);\n            if (visibility === 0 /* TreeVisibility.Hidden */) {\n                node.visible = false;\n                node.renderNodeCount = 0;\n                return false;\n            }\n            if (revealed) {\n                result.push(node);\n            }\n        }\n        const resultStartLength = result.length;\n        node.renderNodeCount = node === this.root ? 0 : 1;\n        let hasVisibleDescendants = false;\n        if (!node.collapsed || visibility !== 0 /* TreeVisibility.Hidden */) {\n            let visibleChildIndex = 0;\n            for (const child of node.children) {\n                hasVisibleDescendants = this._updateNodeAfterFilterChange(child, visibility, result, revealed && !node.collapsed) || hasVisibleDescendants;\n                if (child.visible) {\n                    child.visibleChildIndex = visibleChildIndex++;\n                }\n            }\n            node.visibleChildrenCount = visibleChildIndex;\n        }\n        else {\n            node.visibleChildrenCount = 0;\n        }\n        if (node !== this.root) {\n            node.visible = visibility === 2 /* TreeVisibility.Recurse */ ? hasVisibleDescendants : (visibility === 1 /* TreeVisibility.Visible */);\n            node.visibility = visibility;\n        }\n        if (!node.visible) {\n            node.renderNodeCount = 0;\n            if (revealed) {\n                result.pop();\n            }\n        }\n        else if (!node.collapsed) {\n            node.renderNodeCount += result.length - resultStartLength;\n        }\n        this._onDidChangeRenderNodeCount.fire(node);\n        return node.visible;\n    }\n    _updateAncestorsRenderNodeCount(node, diff) {\n        if (diff === 0) {\n            return;\n        }\n        while (node) {\n            node.renderNodeCount += diff;\n            this._onDidChangeRenderNodeCount.fire(node);\n            node = node.parent;\n        }\n    }\n    _filterNode(node, parentVisibility) {\n        const result = this.filter ? this.filter.filter(node.element, parentVisibility) : 1 /* TreeVisibility.Visible */;\n        if (typeof result === 'boolean') {\n            node.filterData = undefined;\n            return result ? 1 /* TreeVisibility.Visible */ : 0 /* TreeVisibility.Hidden */;\n        }\n        else if (isFilterResult(result)) {\n            node.filterData = result.data;\n            return getVisibleState(result.visibility);\n        }\n        else {\n            node.filterData = undefined;\n            return getVisibleState(result);\n        }\n    }\n    // cheap\n    hasTreeNode(location, node = this.root) {\n        if (!location || location.length === 0) {\n            return true;\n        }\n        const [index, ...rest] = location;\n        if (index < 0 || index > node.children.length) {\n            return false;\n        }\n        return this.hasTreeNode(rest, node.children[index]);\n    }\n    // cheap\n    getTreeNode(location, node = this.root) {\n        if (!location || location.length === 0) {\n            return node;\n        }\n        const [index, ...rest] = location;\n        if (index < 0 || index > node.children.length) {\n            throw new TreeError(this.user, 'Invalid tree location');\n        }\n        return this.getTreeNode(rest, node.children[index]);\n    }\n    // expensive\n    getTreeNodeWithListIndex(location) {\n        if (location.length === 0) {\n            return { node: this.root, listIndex: -1, revealed: true, visible: false };\n        }\n        const { parentNode, listIndex, revealed, visible } = this.getParentNodeWithListIndex(location);\n        const index = location[location.length - 1];\n        if (index < 0 || index > parentNode.children.length) {\n            throw new TreeError(this.user, 'Invalid tree location');\n        }\n        const node = parentNode.children[index];\n        return { node, listIndex, revealed, visible: visible && node.visible };\n    }\n    getParentNodeWithListIndex(location, node = this.root, listIndex = 0, revealed = true, visible = true) {\n        const [index, ...rest] = location;\n        if (index < 0 || index > node.children.length) {\n            throw new TreeError(this.user, 'Invalid tree location');\n        }\n        // TODO@joao perf!\n        for (let i = 0; i < index; i++) {\n            listIndex += node.children[i].renderNodeCount;\n        }\n        revealed = revealed && !node.collapsed;\n        visible = visible && node.visible;\n        if (rest.length === 0) {\n            return { parentNode: node, listIndex, revealed, visible };\n        }\n        return this.getParentNodeWithListIndex(rest, node.children[index], listIndex + 1, revealed, visible);\n    }\n    getNode(location = []) {\n        return this.getTreeNode(location);\n    }\n    // TODO@joao perf!\n    getNodeLocation(node) {\n        const location = [];\n        let indexTreeNode = node; // typing woes\n        while (indexTreeNode.parent) {\n            location.push(indexTreeNode.parent.children.indexOf(indexTreeNode));\n            indexTreeNode = indexTreeNode.parent;\n        }\n        return location.reverse();\n    }\n    getParentNodeLocation(location) {\n        if (location.length === 0) {\n            return undefined;\n        }\n        else if (location.length === 1) {\n            return [];\n        }\n        else {\n            return tail2(location)[0];\n        }\n    }\n    getFirstElementChild(location) {\n        const node = this.getTreeNode(location);\n        if (node.children.length === 0) {\n            return undefined;\n        }\n        return node.children[0].element;\n    }\n}\n"],"mappings":"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"}]}