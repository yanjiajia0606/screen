{"remainingRequest":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js!/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/base/common/worker/simpleWorker.js","dependencies":[{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/base/common/worker/simpleWorker.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/babel.config.js","mtime":1668271197000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js","mtime":456789000000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["transformErrorForSerialization","Emitter","Disposable","globals","isWeb","types","strings","INITIALIZE","webWorkerWarningLogged","logOnceWebWorkerWarning","err","console","warn","message","RequestMessage","vsWorker","req","method","args","type","ReplyMessage","seq","res","SubscribeEventMessage","eventName","arg","EventMessage","event","UnsubscribeEventMessage","SimpleWorkerProtocol","handler","_workerId","_handler","_lastSentReq","_pendingReplies","Object","create","_pendingEmitters","Map","_pendingEvents","workerId","String","Promise","resolve","reject","_send","emitter","onFirstListenerAdd","set","onLastListenerRemove","delete","_handleMessage","msg","_handleReplyMessage","_handleRequestMessage","_handleSubscribeEventMessage","_handleEventMessage","_handleUnsubscribeEventMessage","replyMessage","reply","$isError","Error","name","stack","requestMessage","result","handleMessage","then","r","undefined","e","detail","disposable","handleEvent","has","get","fire","dispose","transfer","i","length","ArrayBuffer","push","sendMessage","SimpleWorkerClient","workerFactory","moduleId","host","lazyProxyReject","_worker","_register","_protocol","postMessage","apply","propertyIsDynamicEvent","call","propertyIsEvent","setWorkerId","getId","loaderConfiguration","require","getConfig","requirejs","s","contexts","_","config","hostMethods","getAllMethodNames","_onModuleLoaded","JSON","parse","stringify","proxyMethodRequest","_request","proxyListen","listen","_lazyProxy","availableMethods","createProxyObject","_onError","error","info","isUpperAsciiLetter","charCodeAt","test","methodNames","invoke","createProxyMethod","Array","prototype","slice","arguments","createProxyDynamicEvent","methodName","SimpleWorkerServer","requestHandlerFactory","_requestHandlerFactory","_requestHandler","_handleEvent","initialize","loaderConfig","hostProxy","baseUrl","paths","vs","trustedTypesPolicy","catchError","module"],"sources":["/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/base/common/worker/simpleWorker.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { transformErrorForSerialization } from '../errors.js';\nimport { Emitter } from '../event.js';\nimport { Disposable } from '../lifecycle.js';\nimport { globals, isWeb } from '../platform.js';\nimport * as types from '../types.js';\nimport * as strings from '../strings.js';\nconst INITIALIZE = '$initialize';\nlet webWorkerWarningLogged = false;\nexport function logOnceWebWorkerWarning(err) {\n    if (!isWeb) {\n        // running tests\n        return;\n    }\n    if (!webWorkerWarningLogged) {\n        webWorkerWarningLogged = true;\n        console.warn('Could not create web worker(s). Falling back to loading web worker code in main thread, which might cause UI freezes. Please see https://github.com/microsoft/monaco-editor#faq');\n    }\n    console.warn(err.message);\n}\nclass RequestMessage {\n    constructor(vsWorker, req, method, args) {\n        this.vsWorker = vsWorker;\n        this.req = req;\n        this.method = method;\n        this.args = args;\n        this.type = 0 /* MessageType.Request */;\n    }\n}\nclass ReplyMessage {\n    constructor(vsWorker, seq, res, err) {\n        this.vsWorker = vsWorker;\n        this.seq = seq;\n        this.res = res;\n        this.err = err;\n        this.type = 1 /* MessageType.Reply */;\n    }\n}\nclass SubscribeEventMessage {\n    constructor(vsWorker, req, eventName, arg) {\n        this.vsWorker = vsWorker;\n        this.req = req;\n        this.eventName = eventName;\n        this.arg = arg;\n        this.type = 2 /* MessageType.SubscribeEvent */;\n    }\n}\nclass EventMessage {\n    constructor(vsWorker, req, event) {\n        this.vsWorker = vsWorker;\n        this.req = req;\n        this.event = event;\n        this.type = 3 /* MessageType.Event */;\n    }\n}\nclass UnsubscribeEventMessage {\n    constructor(vsWorker, req) {\n        this.vsWorker = vsWorker;\n        this.req = req;\n        this.type = 4 /* MessageType.UnsubscribeEvent */;\n    }\n}\nclass SimpleWorkerProtocol {\n    constructor(handler) {\n        this._workerId = -1;\n        this._handler = handler;\n        this._lastSentReq = 0;\n        this._pendingReplies = Object.create(null);\n        this._pendingEmitters = new Map();\n        this._pendingEvents = new Map();\n    }\n    setWorkerId(workerId) {\n        this._workerId = workerId;\n    }\n    sendMessage(method, args) {\n        const req = String(++this._lastSentReq);\n        return new Promise((resolve, reject) => {\n            this._pendingReplies[req] = {\n                resolve: resolve,\n                reject: reject\n            };\n            this._send(new RequestMessage(this._workerId, req, method, args));\n        });\n    }\n    listen(eventName, arg) {\n        let req = null;\n        const emitter = new Emitter({\n            onFirstListenerAdd: () => {\n                req = String(++this._lastSentReq);\n                this._pendingEmitters.set(req, emitter);\n                this._send(new SubscribeEventMessage(this._workerId, req, eventName, arg));\n            },\n            onLastListenerRemove: () => {\n                this._pendingEmitters.delete(req);\n                this._send(new UnsubscribeEventMessage(this._workerId, req));\n                req = null;\n            }\n        });\n        return emitter.event;\n    }\n    handleMessage(message) {\n        if (!message || !message.vsWorker) {\n            return;\n        }\n        if (this._workerId !== -1 && message.vsWorker !== this._workerId) {\n            return;\n        }\n        this._handleMessage(message);\n    }\n    _handleMessage(msg) {\n        switch (msg.type) {\n            case 1 /* MessageType.Reply */:\n                return this._handleReplyMessage(msg);\n            case 0 /* MessageType.Request */:\n                return this._handleRequestMessage(msg);\n            case 2 /* MessageType.SubscribeEvent */:\n                return this._handleSubscribeEventMessage(msg);\n            case 3 /* MessageType.Event */:\n                return this._handleEventMessage(msg);\n            case 4 /* MessageType.UnsubscribeEvent */:\n                return this._handleUnsubscribeEventMessage(msg);\n        }\n    }\n    _handleReplyMessage(replyMessage) {\n        if (!this._pendingReplies[replyMessage.seq]) {\n            console.warn('Got reply to unknown seq');\n            return;\n        }\n        const reply = this._pendingReplies[replyMessage.seq];\n        delete this._pendingReplies[replyMessage.seq];\n        if (replyMessage.err) {\n            let err = replyMessage.err;\n            if (replyMessage.err.$isError) {\n                err = new Error();\n                err.name = replyMessage.err.name;\n                err.message = replyMessage.err.message;\n                err.stack = replyMessage.err.stack;\n            }\n            reply.reject(err);\n            return;\n        }\n        reply.resolve(replyMessage.res);\n    }\n    _handleRequestMessage(requestMessage) {\n        const req = requestMessage.req;\n        const result = this._handler.handleMessage(requestMessage.method, requestMessage.args);\n        result.then((r) => {\n            this._send(new ReplyMessage(this._workerId, req, r, undefined));\n        }, (e) => {\n            if (e.detail instanceof Error) {\n                // Loading errors have a detail property that points to the actual error\n                e.detail = transformErrorForSerialization(e.detail);\n            }\n            this._send(new ReplyMessage(this._workerId, req, undefined, transformErrorForSerialization(e)));\n        });\n    }\n    _handleSubscribeEventMessage(msg) {\n        const req = msg.req;\n        const disposable = this._handler.handleEvent(msg.eventName, msg.arg)((event) => {\n            this._send(new EventMessage(this._workerId, req, event));\n        });\n        this._pendingEvents.set(req, disposable);\n    }\n    _handleEventMessage(msg) {\n        if (!this._pendingEmitters.has(msg.req)) {\n            console.warn('Got event for unknown req');\n            return;\n        }\n        this._pendingEmitters.get(msg.req).fire(msg.event);\n    }\n    _handleUnsubscribeEventMessage(msg) {\n        if (!this._pendingEvents.has(msg.req)) {\n            console.warn('Got unsubscribe for unknown req');\n            return;\n        }\n        this._pendingEvents.get(msg.req).dispose();\n        this._pendingEvents.delete(msg.req);\n    }\n    _send(msg) {\n        const transfer = [];\n        if (msg.type === 0 /* MessageType.Request */) {\n            for (let i = 0; i < msg.args.length; i++) {\n                if (msg.args[i] instanceof ArrayBuffer) {\n                    transfer.push(msg.args[i]);\n                }\n            }\n        }\n        else if (msg.type === 1 /* MessageType.Reply */) {\n            if (msg.res instanceof ArrayBuffer) {\n                transfer.push(msg.res);\n            }\n        }\n        this._handler.sendMessage(msg, transfer);\n    }\n}\n/**\n * Main thread side\n */\nexport class SimpleWorkerClient extends Disposable {\n    constructor(workerFactory, moduleId, host) {\n        super();\n        let lazyProxyReject = null;\n        this._worker = this._register(workerFactory.create('vs/base/common/worker/simpleWorker', (msg) => {\n            this._protocol.handleMessage(msg);\n        }, (err) => {\n            // in Firefox, web workers fail lazily :(\n            // we will reject the proxy\n            lazyProxyReject === null || lazyProxyReject === void 0 ? void 0 : lazyProxyReject(err);\n        }));\n        this._protocol = new SimpleWorkerProtocol({\n            sendMessage: (msg, transfer) => {\n                this._worker.postMessage(msg, transfer);\n            },\n            handleMessage: (method, args) => {\n                if (typeof host[method] !== 'function') {\n                    return Promise.reject(new Error('Missing method ' + method + ' on main thread host.'));\n                }\n                try {\n                    return Promise.resolve(host[method].apply(host, args));\n                }\n                catch (e) {\n                    return Promise.reject(e);\n                }\n            },\n            handleEvent: (eventName, arg) => {\n                if (propertyIsDynamicEvent(eventName)) {\n                    const event = host[eventName].call(host, arg);\n                    if (typeof event !== 'function') {\n                        throw new Error(`Missing dynamic event ${eventName} on main thread host.`);\n                    }\n                    return event;\n                }\n                if (propertyIsEvent(eventName)) {\n                    const event = host[eventName];\n                    if (typeof event !== 'function') {\n                        throw new Error(`Missing event ${eventName} on main thread host.`);\n                    }\n                    return event;\n                }\n                throw new Error(`Malformed event name ${eventName}`);\n            }\n        });\n        this._protocol.setWorkerId(this._worker.getId());\n        // Gather loader configuration\n        let loaderConfiguration = null;\n        if (typeof globals.require !== 'undefined' && typeof globals.require.getConfig === 'function') {\n            // Get the configuration from the Monaco AMD Loader\n            loaderConfiguration = globals.require.getConfig();\n        }\n        else if (typeof globals.requirejs !== 'undefined') {\n            // Get the configuration from requirejs\n            loaderConfiguration = globals.requirejs.s.contexts._.config;\n        }\n        const hostMethods = types.getAllMethodNames(host);\n        // Send initialize message\n        this._onModuleLoaded = this._protocol.sendMessage(INITIALIZE, [\n            this._worker.getId(),\n            JSON.parse(JSON.stringify(loaderConfiguration)),\n            moduleId,\n            hostMethods,\n        ]);\n        // Create proxy to loaded code\n        const proxyMethodRequest = (method, args) => {\n            return this._request(method, args);\n        };\n        const proxyListen = (eventName, arg) => {\n            return this._protocol.listen(eventName, arg);\n        };\n        this._lazyProxy = new Promise((resolve, reject) => {\n            lazyProxyReject = reject;\n            this._onModuleLoaded.then((availableMethods) => {\n                resolve(createProxyObject(availableMethods, proxyMethodRequest, proxyListen));\n            }, (e) => {\n                reject(e);\n                this._onError('Worker failed to load ' + moduleId, e);\n            });\n        });\n    }\n    getProxyObject() {\n        return this._lazyProxy;\n    }\n    _request(method, args) {\n        return new Promise((resolve, reject) => {\n            this._onModuleLoaded.then(() => {\n                this._protocol.sendMessage(method, args).then(resolve, reject);\n            }, reject);\n        });\n    }\n    _onError(message, error) {\n        console.error(message);\n        console.info(error);\n    }\n}\nfunction propertyIsEvent(name) {\n    // Assume a property is an event if it has a form of \"onSomething\"\n    return name[0] === 'o' && name[1] === 'n' && strings.isUpperAsciiLetter(name.charCodeAt(2));\n}\nfunction propertyIsDynamicEvent(name) {\n    // Assume a property is a dynamic event (a method that returns an event) if it has a form of \"onDynamicSomething\"\n    return /^onDynamic/.test(name) && strings.isUpperAsciiLetter(name.charCodeAt(9));\n}\nfunction createProxyObject(methodNames, invoke, proxyListen) {\n    const createProxyMethod = (method) => {\n        return function () {\n            const args = Array.prototype.slice.call(arguments, 0);\n            return invoke(method, args);\n        };\n    };\n    const createProxyDynamicEvent = (eventName) => {\n        return function (arg) {\n            return proxyListen(eventName, arg);\n        };\n    };\n    const result = {};\n    for (const methodName of methodNames) {\n        if (propertyIsDynamicEvent(methodName)) {\n            result[methodName] = createProxyDynamicEvent(methodName);\n            continue;\n        }\n        if (propertyIsEvent(methodName)) {\n            result[methodName] = proxyListen(methodName, undefined);\n            continue;\n        }\n        result[methodName] = createProxyMethod(methodName);\n    }\n    return result;\n}\n/**\n * Worker side\n */\nexport class SimpleWorkerServer {\n    constructor(postMessage, requestHandlerFactory) {\n        this._requestHandlerFactory = requestHandlerFactory;\n        this._requestHandler = null;\n        this._protocol = new SimpleWorkerProtocol({\n            sendMessage: (msg, transfer) => {\n                postMessage(msg, transfer);\n            },\n            handleMessage: (method, args) => this._handleMessage(method, args),\n            handleEvent: (eventName, arg) => this._handleEvent(eventName, arg)\n        });\n    }\n    onmessage(msg) {\n        this._protocol.handleMessage(msg);\n    }\n    _handleMessage(method, args) {\n        if (method === INITIALIZE) {\n            return this.initialize(args[0], args[1], args[2], args[3]);\n        }\n        if (!this._requestHandler || typeof this._requestHandler[method] !== 'function') {\n            return Promise.reject(new Error('Missing requestHandler or method: ' + method));\n        }\n        try {\n            return Promise.resolve(this._requestHandler[method].apply(this._requestHandler, args));\n        }\n        catch (e) {\n            return Promise.reject(e);\n        }\n    }\n    _handleEvent(eventName, arg) {\n        if (!this._requestHandler) {\n            throw new Error(`Missing requestHandler`);\n        }\n        if (propertyIsDynamicEvent(eventName)) {\n            const event = this._requestHandler[eventName].call(this._requestHandler, arg);\n            if (typeof event !== 'function') {\n                throw new Error(`Missing dynamic event ${eventName} on request handler.`);\n            }\n            return event;\n        }\n        if (propertyIsEvent(eventName)) {\n            const event = this._requestHandler[eventName];\n            if (typeof event !== 'function') {\n                throw new Error(`Missing event ${eventName} on request handler.`);\n            }\n            return event;\n        }\n        throw new Error(`Malformed event name ${eventName}`);\n    }\n    initialize(workerId, loaderConfig, moduleId, hostMethods) {\n        this._protocol.setWorkerId(workerId);\n        const proxyMethodRequest = (method, args) => {\n            return this._protocol.sendMessage(method, args);\n        };\n        const proxyListen = (eventName, arg) => {\n            return this._protocol.listen(eventName, arg);\n        };\n        const hostProxy = createProxyObject(hostMethods, proxyMethodRequest, proxyListen);\n        if (this._requestHandlerFactory) {\n            // static request handler\n            this._requestHandler = this._requestHandlerFactory(hostProxy);\n            return Promise.resolve(types.getAllMethodNames(this._requestHandler));\n        }\n        if (loaderConfig) {\n            // Remove 'baseUrl', handling it is beyond scope for now\n            if (typeof loaderConfig.baseUrl !== 'undefined') {\n                delete loaderConfig['baseUrl'];\n            }\n            if (typeof loaderConfig.paths !== 'undefined') {\n                if (typeof loaderConfig.paths.vs !== 'undefined') {\n                    delete loaderConfig.paths['vs'];\n                }\n            }\n            if (typeof loaderConfig.trustedTypesPolicy !== undefined) {\n                // don't use, it has been destroyed during serialize\n                delete loaderConfig['trustedTypesPolicy'];\n            }\n            // Since this is in a web worker, enable catching errors\n            loaderConfig.catchError = true;\n            globals.require.config(loaderConfig);\n        }\n        return new Promise((resolve, reject) => {\n            // Use the global require to be sure to get the global config\n            // ESM-comment-begin\n            // \t\t\tconst req = (globals.require || require);\n            // ESM-comment-end\n            // ESM-uncomment-begin\n            const req = globals.require;\n            // ESM-uncomment-end\n            req([moduleId], (module) => {\n                this._requestHandler = module.create(hostProxy);\n                if (!this._requestHandler) {\n                    reject(new Error(`No RequestHandler!`));\n                    return;\n                }\n                resolve(types.getAllMethodNames(this._requestHandler));\n            }, reject);\n        });\n    }\n}\n/**\n * Called on the worker side\n */\nexport function create(postMessage) {\n    return new SimpleWorkerServer(postMessage, null);\n}\n"],"mappings":"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"}]}