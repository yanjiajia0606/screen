{"remainingRequest":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/thread-loader/dist/cjs.js!/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js!/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/common/cursor/cursorDeleteOperations.js","dependencies":[{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/common/cursor/cursorDeleteOperations.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/babel.config.js","mtime":1668271197000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js","mtime":456789000000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["strings","ReplaceCommand","EditOperationResult","isQuote","CursorColumns","MoveOperations","Range","Position","DeleteOperations","prevEditOperationType","config","model","selections","commands","shouldPushStackElementBefore","i","len","length","selection","deleteSelection","isEmpty","position","getPosition","rightOfPosition","right","lineNumber","column","startLineNumber","endLineNumber","autoClosingDelete","autoClosingBrackets","autoClosingQuotes","autoClosingPairsOpen","autoClosedCharacters","lineText","getLineContent","character","charAt","autoClosingPairCandidates","get","afterCharacter","foundAutoClosingPair","autoClosingPairCandidate","open","close","found","j","lenJ","autoClosedCharacter","startColumn","isAutoClosingPairDelete","autoClosingPairs","autoClosingPairsOpenByEnd","_runAutoClosingPairDelete","deleteRange","getDeleteRange","useTabStops","lineContent","firstNonWhitespaceIndex","lastIndentationColumn","fromVisibleColumn","visibleColumnFromColumn","toVisibleColumn","prevIndentTabStop","indentSize","toColumn","columnFromVisibleColumn","fromPositions","getPositionAfterDeleteLeft","idx","getLeftDeleteOffset","with","undefined","newLine","getLineMaxColumn","lastCutRange","sort","a","b","compare","getStartPosition","getEndPosition","emptySelectionClipboard","endColumn","getLineCount","shouldPushStackElementAfter"],"sources":["/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/common/cursor/cursorDeleteOperations.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../base/common/strings.js';\nimport { ReplaceCommand } from '../commands/replaceCommand.js';\nimport { EditOperationResult, isQuote } from '../cursorCommon.js';\nimport { CursorColumns } from '../core/cursorColumns.js';\nimport { MoveOperations } from './cursorMoveOperations.js';\nimport { Range } from '../core/range.js';\nimport { Position } from '../core/position.js';\nexport class DeleteOperations {\n    static deleteRight(prevEditOperationType, config, model, selections) {\n        const commands = [];\n        let shouldPushStackElementBefore = (prevEditOperationType !== 3 /* EditOperationType.DeletingRight */);\n        for (let i = 0, len = selections.length; i < len; i++) {\n            const selection = selections[i];\n            let deleteSelection = selection;\n            if (deleteSelection.isEmpty()) {\n                const position = selection.getPosition();\n                const rightOfPosition = MoveOperations.right(config, model, position);\n                deleteSelection = new Range(rightOfPosition.lineNumber, rightOfPosition.column, position.lineNumber, position.column);\n            }\n            if (deleteSelection.isEmpty()) {\n                // Probably at end of file => ignore\n                commands[i] = null;\n                continue;\n            }\n            if (deleteSelection.startLineNumber !== deleteSelection.endLineNumber) {\n                shouldPushStackElementBefore = true;\n            }\n            commands[i] = new ReplaceCommand(deleteSelection, '');\n        }\n        return [shouldPushStackElementBefore, commands];\n    }\n    static isAutoClosingPairDelete(autoClosingDelete, autoClosingBrackets, autoClosingQuotes, autoClosingPairsOpen, model, selections, autoClosedCharacters) {\n        if (autoClosingBrackets === 'never' && autoClosingQuotes === 'never') {\n            return false;\n        }\n        if (autoClosingDelete === 'never') {\n            return false;\n        }\n        for (let i = 0, len = selections.length; i < len; i++) {\n            const selection = selections[i];\n            const position = selection.getPosition();\n            if (!selection.isEmpty()) {\n                return false;\n            }\n            const lineText = model.getLineContent(position.lineNumber);\n            if (position.column < 2 || position.column >= lineText.length + 1) {\n                return false;\n            }\n            const character = lineText.charAt(position.column - 2);\n            const autoClosingPairCandidates = autoClosingPairsOpen.get(character);\n            if (!autoClosingPairCandidates) {\n                return false;\n            }\n            if (isQuote(character)) {\n                if (autoClosingQuotes === 'never') {\n                    return false;\n                }\n            }\n            else {\n                if (autoClosingBrackets === 'never') {\n                    return false;\n                }\n            }\n            const afterCharacter = lineText.charAt(position.column - 1);\n            let foundAutoClosingPair = false;\n            for (const autoClosingPairCandidate of autoClosingPairCandidates) {\n                if (autoClosingPairCandidate.open === character && autoClosingPairCandidate.close === afterCharacter) {\n                    foundAutoClosingPair = true;\n                }\n            }\n            if (!foundAutoClosingPair) {\n                return false;\n            }\n            // Must delete the pair only if it was automatically inserted by the editor\n            if (autoClosingDelete === 'auto') {\n                let found = false;\n                for (let j = 0, lenJ = autoClosedCharacters.length; j < lenJ; j++) {\n                    const autoClosedCharacter = autoClosedCharacters[j];\n                    if (position.lineNumber === autoClosedCharacter.startLineNumber && position.column === autoClosedCharacter.startColumn) {\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    static _runAutoClosingPairDelete(config, model, selections) {\n        const commands = [];\n        for (let i = 0, len = selections.length; i < len; i++) {\n            const position = selections[i].getPosition();\n            const deleteSelection = new Range(position.lineNumber, position.column - 1, position.lineNumber, position.column + 1);\n            commands[i] = new ReplaceCommand(deleteSelection, '');\n        }\n        return [true, commands];\n    }\n    static deleteLeft(prevEditOperationType, config, model, selections, autoClosedCharacters) {\n        if (this.isAutoClosingPairDelete(config.autoClosingDelete, config.autoClosingBrackets, config.autoClosingQuotes, config.autoClosingPairs.autoClosingPairsOpenByEnd, model, selections, autoClosedCharacters)) {\n            return this._runAutoClosingPairDelete(config, model, selections);\n        }\n        const commands = [];\n        let shouldPushStackElementBefore = (prevEditOperationType !== 2 /* EditOperationType.DeletingLeft */);\n        for (let i = 0, len = selections.length; i < len; i++) {\n            const deleteRange = DeleteOperations.getDeleteRange(selections[i], model, config);\n            // Ignore empty delete ranges, as they have no effect\n            // They happen if the cursor is at the beginning of the file.\n            if (deleteRange.isEmpty()) {\n                commands[i] = null;\n                continue;\n            }\n            if (deleteRange.startLineNumber !== deleteRange.endLineNumber) {\n                shouldPushStackElementBefore = true;\n            }\n            commands[i] = new ReplaceCommand(deleteRange, '');\n        }\n        return [shouldPushStackElementBefore, commands];\n    }\n    static getDeleteRange(selection, model, config) {\n        if (!selection.isEmpty()) {\n            return selection;\n        }\n        const position = selection.getPosition();\n        // Unintend when using tab stops and cursor is within indentation\n        if (config.useTabStops && position.column > 1) {\n            const lineContent = model.getLineContent(position.lineNumber);\n            const firstNonWhitespaceIndex = strings.firstNonWhitespaceIndex(lineContent);\n            const lastIndentationColumn = (firstNonWhitespaceIndex === -1\n                ? /* entire string is whitespace */ lineContent.length + 1\n                : firstNonWhitespaceIndex + 1);\n            if (position.column <= lastIndentationColumn) {\n                const fromVisibleColumn = config.visibleColumnFromColumn(model, position);\n                const toVisibleColumn = CursorColumns.prevIndentTabStop(fromVisibleColumn, config.indentSize);\n                const toColumn = config.columnFromVisibleColumn(model, position.lineNumber, toVisibleColumn);\n                return new Range(position.lineNumber, toColumn, position.lineNumber, position.column);\n            }\n        }\n        return Range.fromPositions(DeleteOperations.getPositionAfterDeleteLeft(position, model), position);\n    }\n    static getPositionAfterDeleteLeft(position, model) {\n        if (position.column > 1) {\n            // Convert 1-based columns to 0-based offsets and back.\n            const idx = strings.getLeftDeleteOffset(position.column - 1, model.getLineContent(position.lineNumber));\n            return position.with(undefined, idx + 1);\n        }\n        else if (position.lineNumber > 1) {\n            const newLine = position.lineNumber - 1;\n            return new Position(newLine, model.getLineMaxColumn(newLine));\n        }\n        else {\n            return position;\n        }\n    }\n    static cut(config, model, selections) {\n        const commands = [];\n        let lastCutRange = null;\n        selections.sort((a, b) => Position.compare(a.getStartPosition(), b.getEndPosition()));\n        for (let i = 0, len = selections.length; i < len; i++) {\n            const selection = selections[i];\n            if (selection.isEmpty()) {\n                if (config.emptySelectionClipboard) {\n                    // This is a full line cut\n                    const position = selection.getPosition();\n                    let startLineNumber, startColumn, endLineNumber, endColumn;\n                    if (position.lineNumber < model.getLineCount()) {\n                        // Cutting a line in the middle of the model\n                        startLineNumber = position.lineNumber;\n                        startColumn = 1;\n                        endLineNumber = position.lineNumber + 1;\n                        endColumn = 1;\n                    }\n                    else if (position.lineNumber > 1 && (lastCutRange === null || lastCutRange === void 0 ? void 0 : lastCutRange.endLineNumber) !== position.lineNumber) {\n                        // Cutting the last line & there are more than 1 lines in the model & a previous cut operation does not touch the current cut operation\n                        startLineNumber = position.lineNumber - 1;\n                        startColumn = model.getLineMaxColumn(position.lineNumber - 1);\n                        endLineNumber = position.lineNumber;\n                        endColumn = model.getLineMaxColumn(position.lineNumber);\n                    }\n                    else {\n                        // Cutting the single line that the model contains\n                        startLineNumber = position.lineNumber;\n                        startColumn = 1;\n                        endLineNumber = position.lineNumber;\n                        endColumn = model.getLineMaxColumn(position.lineNumber);\n                    }\n                    const deleteSelection = new Range(startLineNumber, startColumn, endLineNumber, endColumn);\n                    lastCutRange = deleteSelection;\n                    if (!deleteSelection.isEmpty()) {\n                        commands[i] = new ReplaceCommand(deleteSelection, '');\n                    }\n                    else {\n                        commands[i] = null;\n                    }\n                }\n                else {\n                    // Cannot cut empty selection\n                    commands[i] = null;\n                }\n            }\n            else {\n                commands[i] = new ReplaceCommand(selection, '');\n            }\n        }\n        return new EditOperationResult(0 /* EditOperationType.Other */, commands, {\n            shouldPushStackElementBefore: true,\n            shouldPushStackElementAfter: true\n        });\n    }\n}\n"],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA,OAAO,KAAKA,OAAO,MAAM,iCAAiC;AAC1D,SAASC,cAAc,QAAQ,+BAA+B;AAC9D,SAASC,mBAAmB,EAAEC,OAAO,QAAQ,oBAAoB;AACjE,SAASC,aAAa,QAAQ,0BAA0B;AACxD,SAASC,cAAc,QAAQ,2BAA2B;AAC1D,SAASC,KAAK,QAAQ,kBAAkB;AACxC,SAASC,QAAQ,QAAQ,qBAAqB;AAC9C,WAAaC,gBAAgB;EAAA;IAAA;EAAA;EAAA;IAAA;IAAA,OACzB,qBAAmBC,qBAAqB,EAAEC,MAAM,EAAEC,KAAK,EAAEC,UAAU,EAAE;MACjE,IAAMC,QAAQ,GAAG,EAAE;MACnB,IAAIC,4BAA4B,GAAIL,qBAAqB,KAAK,CAAC,CAAC,qCAAsC;MACtG,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEC,GAAG,GAAGJ,UAAU,CAACK,MAAM,EAAEF,CAAC,GAAGC,GAAG,EAAED,CAAC,EAAE,EAAE;QACnD,IAAMG,SAAS,GAAGN,UAAU,CAACG,CAAC,CAAC;QAC/B,IAAII,eAAe,GAAGD,SAAS;QAC/B,IAAIC,eAAe,CAACC,OAAO,EAAE,EAAE;UAC3B,IAAMC,QAAQ,GAAGH,SAAS,CAACI,WAAW,EAAE;UACxC,IAAMC,eAAe,GAAGlB,cAAc,CAACmB,KAAK,CAACd,MAAM,EAAEC,KAAK,EAAEU,QAAQ,CAAC;UACrEF,eAAe,GAAG,IAAIb,KAAK,CAACiB,eAAe,CAACE,UAAU,EAAEF,eAAe,CAACG,MAAM,EAAEL,QAAQ,CAACI,UAAU,EAAEJ,QAAQ,CAACK,MAAM,CAAC;QACzH;QACA,IAAIP,eAAe,CAACC,OAAO,EAAE,EAAE;UAC3B;UACAP,QAAQ,CAACE,CAAC,CAAC,GAAG,IAAI;UAClB;QACJ;QACA,IAAII,eAAe,CAACQ,eAAe,KAAKR,eAAe,CAACS,aAAa,EAAE;UACnEd,4BAA4B,GAAG,IAAI;QACvC;QACAD,QAAQ,CAACE,CAAC,CAAC,GAAG,IAAId,cAAc,CAACkB,eAAe,EAAE,EAAE,CAAC;MACzD;MACA,OAAO,CAACL,4BAA4B,EAAED,QAAQ,CAAC;IACnD;EAAC;IAAA;IAAA,OACD,iCAA+BgB,iBAAiB,EAAEC,mBAAmB,EAAEC,iBAAiB,EAAEC,oBAAoB,EAAErB,KAAK,EAAEC,UAAU,EAAEqB,oBAAoB,EAAE;MACrJ,IAAIH,mBAAmB,KAAK,OAAO,IAAIC,iBAAiB,KAAK,OAAO,EAAE;QAClE,OAAO,KAAK;MAChB;MACA,IAAIF,iBAAiB,KAAK,OAAO,EAAE;QAC/B,OAAO,KAAK;MAChB;MACA,KAAK,IAAId,CAAC,GAAG,CAAC,EAAEC,GAAG,GAAGJ,UAAU,CAACK,MAAM,EAAEF,CAAC,GAAGC,GAAG,EAAED,CAAC,EAAE,EAAE;QACnD,IAAMG,SAAS,GAAGN,UAAU,CAACG,CAAC,CAAC;QAC/B,IAAMM,QAAQ,GAAGH,SAAS,CAACI,WAAW,EAAE;QACxC,IAAI,CAACJ,SAAS,CAACE,OAAO,EAAE,EAAE;UACtB,OAAO,KAAK;QAChB;QACA,IAAMc,QAAQ,GAAGvB,KAAK,CAACwB,cAAc,CAACd,QAAQ,CAACI,UAAU,CAAC;QAC1D,IAAIJ,QAAQ,CAACK,MAAM,GAAG,CAAC,IAAIL,QAAQ,CAACK,MAAM,IAAIQ,QAAQ,CAACjB,MAAM,GAAG,CAAC,EAAE;UAC/D,OAAO,KAAK;QAChB;QACA,IAAMmB,SAAS,GAAGF,QAAQ,CAACG,MAAM,CAAChB,QAAQ,CAACK,MAAM,GAAG,CAAC,CAAC;QACtD,IAAMY,yBAAyB,GAAGN,oBAAoB,CAACO,GAAG,CAACH,SAAS,CAAC;QACrE,IAAI,CAACE,yBAAyB,EAAE;UAC5B,OAAO,KAAK;QAChB;QACA,IAAInC,OAAO,CAACiC,SAAS,CAAC,EAAE;UACpB,IAAIL,iBAAiB,KAAK,OAAO,EAAE;YAC/B,OAAO,KAAK;UAChB;QACJ,CAAC,MACI;UACD,IAAID,mBAAmB,KAAK,OAAO,EAAE;YACjC,OAAO,KAAK;UAChB;QACJ;QACA,IAAMU,cAAc,GAAGN,QAAQ,CAACG,MAAM,CAAChB,QAAQ,CAACK,MAAM,GAAG,CAAC,CAAC;QAC3D,IAAIe,oBAAoB,GAAG,KAAK;QAAC,2CACMH,yBAAyB;UAAA;QAAA;UAAhE,oDAAkE;YAAA,IAAvDI,wBAAwB;YAC/B,IAAIA,wBAAwB,CAACC,IAAI,KAAKP,SAAS,IAAIM,wBAAwB,CAACE,KAAK,KAAKJ,cAAc,EAAE;cAClGC,oBAAoB,GAAG,IAAI;YAC/B;UACJ;QAAC;UAAA;QAAA;UAAA;QAAA;QACD,IAAI,CAACA,oBAAoB,EAAE;UACvB,OAAO,KAAK;QAChB;QACA;QACA,IAAIZ,iBAAiB,KAAK,MAAM,EAAE;UAC9B,IAAIgB,KAAK,GAAG,KAAK;UACjB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEC,IAAI,GAAGd,oBAAoB,CAAChB,MAAM,EAAE6B,CAAC,GAAGC,IAAI,EAAED,CAAC,EAAE,EAAE;YAC/D,IAAME,mBAAmB,GAAGf,oBAAoB,CAACa,CAAC,CAAC;YACnD,IAAIzB,QAAQ,CAACI,UAAU,KAAKuB,mBAAmB,CAACrB,eAAe,IAAIN,QAAQ,CAACK,MAAM,KAAKsB,mBAAmB,CAACC,WAAW,EAAE;cACpHJ,KAAK,GAAG,IAAI;cACZ;YACJ;UACJ;UACA,IAAI,CAACA,KAAK,EAAE;YACR,OAAO,KAAK;UAChB;QACJ;MACJ;MACA,OAAO,IAAI;IACf;EAAC;IAAA;IAAA,OACD,mCAAiCnC,MAAM,EAAEC,KAAK,EAAEC,UAAU,EAAE;MACxD,IAAMC,QAAQ,GAAG,EAAE;MACnB,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEC,GAAG,GAAGJ,UAAU,CAACK,MAAM,EAAEF,CAAC,GAAGC,GAAG,EAAED,CAAC,EAAE,EAAE;QACnD,IAAMM,QAAQ,GAAGT,UAAU,CAACG,CAAC,CAAC,CAACO,WAAW,EAAE;QAC5C,IAAMH,eAAe,GAAG,IAAIb,KAAK,CAACe,QAAQ,CAACI,UAAU,EAAEJ,QAAQ,CAACK,MAAM,GAAG,CAAC,EAAEL,QAAQ,CAACI,UAAU,EAAEJ,QAAQ,CAACK,MAAM,GAAG,CAAC,CAAC;QACrHb,QAAQ,CAACE,CAAC,CAAC,GAAG,IAAId,cAAc,CAACkB,eAAe,EAAE,EAAE,CAAC;MACzD;MACA,OAAO,CAAC,IAAI,EAAEN,QAAQ,CAAC;IAC3B;EAAC;IAAA;IAAA,OACD,oBAAkBJ,qBAAqB,EAAEC,MAAM,EAAEC,KAAK,EAAEC,UAAU,EAAEqB,oBAAoB,EAAE;MACtF,IAAI,IAAI,CAACiB,uBAAuB,CAACxC,MAAM,CAACmB,iBAAiB,EAAEnB,MAAM,CAACoB,mBAAmB,EAAEpB,MAAM,CAACqB,iBAAiB,EAAErB,MAAM,CAACyC,gBAAgB,CAACC,yBAAyB,EAAEzC,KAAK,EAAEC,UAAU,EAAEqB,oBAAoB,CAAC,EAAE;QAC1M,OAAO,IAAI,CAACoB,yBAAyB,CAAC3C,MAAM,EAAEC,KAAK,EAAEC,UAAU,CAAC;MACpE;MACA,IAAMC,QAAQ,GAAG,EAAE;MACnB,IAAIC,4BAA4B,GAAIL,qBAAqB,KAAK,CAAC,CAAC,oCAAqC;MACrG,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEC,GAAG,GAAGJ,UAAU,CAACK,MAAM,EAAEF,CAAC,GAAGC,GAAG,EAAED,CAAC,EAAE,EAAE;QACnD,IAAMuC,WAAW,GAAG9C,gBAAgB,CAAC+C,cAAc,CAAC3C,UAAU,CAACG,CAAC,CAAC,EAAEJ,KAAK,EAAED,MAAM,CAAC;QACjF;QACA;QACA,IAAI4C,WAAW,CAAClC,OAAO,EAAE,EAAE;UACvBP,QAAQ,CAACE,CAAC,CAAC,GAAG,IAAI;UAClB;QACJ;QACA,IAAIuC,WAAW,CAAC3B,eAAe,KAAK2B,WAAW,CAAC1B,aAAa,EAAE;UAC3Dd,4BAA4B,GAAG,IAAI;QACvC;QACAD,QAAQ,CAACE,CAAC,CAAC,GAAG,IAAId,cAAc,CAACqD,WAAW,EAAE,EAAE,CAAC;MACrD;MACA,OAAO,CAACxC,4BAA4B,EAAED,QAAQ,CAAC;IACnD;EAAC;IAAA;IAAA,OACD,wBAAsBK,SAAS,EAAEP,KAAK,EAAED,MAAM,EAAE;MAC5C,IAAI,CAACQ,SAAS,CAACE,OAAO,EAAE,EAAE;QACtB,OAAOF,SAAS;MACpB;MACA,IAAMG,QAAQ,GAAGH,SAAS,CAACI,WAAW,EAAE;MACxC;MACA,IAAIZ,MAAM,CAAC8C,WAAW,IAAInC,QAAQ,CAACK,MAAM,GAAG,CAAC,EAAE;QAC3C,IAAM+B,WAAW,GAAG9C,KAAK,CAACwB,cAAc,CAACd,QAAQ,CAACI,UAAU,CAAC;QAC7D,IAAMiC,uBAAuB,GAAG1D,OAAO,CAAC0D,uBAAuB,CAACD,WAAW,CAAC;QAC5E,IAAME,qBAAqB,GAAID,uBAAuB,KAAK,CAAC,CAAC,GACvD,iCAAkCD,WAAW,CAACxC,MAAM,GAAG,CAAC,GACxDyC,uBAAuB,GAAG,CAAE;QAClC,IAAIrC,QAAQ,CAACK,MAAM,IAAIiC,qBAAqB,EAAE;UAC1C,IAAMC,iBAAiB,GAAGlD,MAAM,CAACmD,uBAAuB,CAAClD,KAAK,EAAEU,QAAQ,CAAC;UACzE,IAAMyC,eAAe,GAAG1D,aAAa,CAAC2D,iBAAiB,CAACH,iBAAiB,EAAElD,MAAM,CAACsD,UAAU,CAAC;UAC7F,IAAMC,QAAQ,GAAGvD,MAAM,CAACwD,uBAAuB,CAACvD,KAAK,EAAEU,QAAQ,CAACI,UAAU,EAAEqC,eAAe,CAAC;UAC5F,OAAO,IAAIxD,KAAK,CAACe,QAAQ,CAACI,UAAU,EAAEwC,QAAQ,EAAE5C,QAAQ,CAACI,UAAU,EAAEJ,QAAQ,CAACK,MAAM,CAAC;QACzF;MACJ;MACA,OAAOpB,KAAK,CAAC6D,aAAa,CAAC3D,gBAAgB,CAAC4D,0BAA0B,CAAC/C,QAAQ,EAAEV,KAAK,CAAC,EAAEU,QAAQ,CAAC;IACtG;EAAC;IAAA;IAAA,OACD,oCAAkCA,QAAQ,EAAEV,KAAK,EAAE;MAC/C,IAAIU,QAAQ,CAACK,MAAM,GAAG,CAAC,EAAE;QACrB;QACA,IAAM2C,GAAG,GAAGrE,OAAO,CAACsE,mBAAmB,CAACjD,QAAQ,CAACK,MAAM,GAAG,CAAC,EAAEf,KAAK,CAACwB,cAAc,CAACd,QAAQ,CAACI,UAAU,CAAC,CAAC;QACvG,OAAOJ,QAAQ,CAACkD,IAAI,CAACC,SAAS,EAAEH,GAAG,GAAG,CAAC,CAAC;MAC5C,CAAC,MACI,IAAIhD,QAAQ,CAACI,UAAU,GAAG,CAAC,EAAE;QAC9B,IAAMgD,OAAO,GAAGpD,QAAQ,CAACI,UAAU,GAAG,CAAC;QACvC,OAAO,IAAIlB,QAAQ,CAACkE,OAAO,EAAE9D,KAAK,CAAC+D,gBAAgB,CAACD,OAAO,CAAC,CAAC;MACjE,CAAC,MACI;QACD,OAAOpD,QAAQ;MACnB;IACJ;EAAC;IAAA;IAAA,OACD,aAAWX,MAAM,EAAEC,KAAK,EAAEC,UAAU,EAAE;MAClC,IAAMC,QAAQ,GAAG,EAAE;MACnB,IAAI8D,YAAY,GAAG,IAAI;MACvB/D,UAAU,CAACgE,IAAI,CAAC,UAACC,CAAC,EAAEC,CAAC;QAAA,OAAKvE,QAAQ,CAACwE,OAAO,CAACF,CAAC,CAACG,gBAAgB,EAAE,EAAEF,CAAC,CAACG,cAAc,EAAE,CAAC;MAAA,EAAC;MACrF,KAAK,IAAIlE,CAAC,GAAG,CAAC,EAAEC,GAAG,GAAGJ,UAAU,CAACK,MAAM,EAAEF,CAAC,GAAGC,GAAG,EAAED,CAAC,EAAE,EAAE;QACnD,IAAMG,SAAS,GAAGN,UAAU,CAACG,CAAC,CAAC;QAC/B,IAAIG,SAAS,CAACE,OAAO,EAAE,EAAE;UACrB,IAAIV,MAAM,CAACwE,uBAAuB,EAAE;YAChC;YACA,IAAM7D,QAAQ,GAAGH,SAAS,CAACI,WAAW,EAAE;YACxC,IAAIK,eAAe;cAAEsB,WAAW;cAAErB,aAAa;cAAEuD,SAAS;YAC1D,IAAI9D,QAAQ,CAACI,UAAU,GAAGd,KAAK,CAACyE,YAAY,EAAE,EAAE;cAC5C;cACAzD,eAAe,GAAGN,QAAQ,CAACI,UAAU;cACrCwB,WAAW,GAAG,CAAC;cACfrB,aAAa,GAAGP,QAAQ,CAACI,UAAU,GAAG,CAAC;cACvC0D,SAAS,GAAG,CAAC;YACjB,CAAC,MACI,IAAI9D,QAAQ,CAACI,UAAU,GAAG,CAAC,IAAI,CAACkD,YAAY,KAAK,IAAI,IAAIA,YAAY,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,YAAY,CAAC/C,aAAa,MAAMP,QAAQ,CAACI,UAAU,EAAE;cAClJ;cACAE,eAAe,GAAGN,QAAQ,CAACI,UAAU,GAAG,CAAC;cACzCwB,WAAW,GAAGtC,KAAK,CAAC+D,gBAAgB,CAACrD,QAAQ,CAACI,UAAU,GAAG,CAAC,CAAC;cAC7DG,aAAa,GAAGP,QAAQ,CAACI,UAAU;cACnC0D,SAAS,GAAGxE,KAAK,CAAC+D,gBAAgB,CAACrD,QAAQ,CAACI,UAAU,CAAC;YAC3D,CAAC,MACI;cACD;cACAE,eAAe,GAAGN,QAAQ,CAACI,UAAU;cACrCwB,WAAW,GAAG,CAAC;cACfrB,aAAa,GAAGP,QAAQ,CAACI,UAAU;cACnC0D,SAAS,GAAGxE,KAAK,CAAC+D,gBAAgB,CAACrD,QAAQ,CAACI,UAAU,CAAC;YAC3D;YACA,IAAMN,eAAe,GAAG,IAAIb,KAAK,CAACqB,eAAe,EAAEsB,WAAW,EAAErB,aAAa,EAAEuD,SAAS,CAAC;YACzFR,YAAY,GAAGxD,eAAe;YAC9B,IAAI,CAACA,eAAe,CAACC,OAAO,EAAE,EAAE;cAC5BP,QAAQ,CAACE,CAAC,CAAC,GAAG,IAAId,cAAc,CAACkB,eAAe,EAAE,EAAE,CAAC;YACzD,CAAC,MACI;cACDN,QAAQ,CAACE,CAAC,CAAC,GAAG,IAAI;YACtB;UACJ,CAAC,MACI;YACD;YACAF,QAAQ,CAACE,CAAC,CAAC,GAAG,IAAI;UACtB;QACJ,CAAC,MACI;UACDF,QAAQ,CAACE,CAAC,CAAC,GAAG,IAAId,cAAc,CAACiB,SAAS,EAAE,EAAE,CAAC;QACnD;MACJ;MACA,OAAO,IAAIhB,mBAAmB,CAAC,CAAC,CAAC,+BAA+BW,QAAQ,EAAE;QACtEC,4BAA4B,EAAE,IAAI;QAClCuE,2BAA2B,EAAE;MACjC,CAAC,CAAC;IACN;EAAC;EAAA;AAAA"}]}