{"remainingRequest":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js!/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/browser/view/viewLayer.js","dependencies":[{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/browser/view/viewLayer.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/babel.config.js","mtime":1668271197000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js","mtime":456789000000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["_a","createFastDomNode","createStringBuilder","RenderedLinesCollection","createLine","_createLine","_set","rendLineNumberStart","lines","_lines","_rendLineNumberStart","length","lineNumber","lineIndex","Error","deleteFromLineNumber","deleteToLineNumber","getCount","startLineNumber","getStartLineNumber","endLineNumber","getEndLineNumber","deleteCnt","deleteStartIndex","deleteCount","deleteAboveCount","deleted","splice","changeFromLineNumber","changeCount","changeToLineNumber","someoneNotified","changedLineNumber","onContentChanged","insertFromLineNumber","insertToLineNumber","insertCnt","newLines","i","insertIndex","beforeLines","slice","afterLines","deletedLines","concat","ranges","notifiedSomeone","len","rng","toLineNumber","fromLineNumber","from","Math","max","to","min","onTokensChanged","VisibleLinesCollection","host","_host","domNode","_createDomNode","_linesCollection","createVisibleLine","document","createElement","setClassName","setPosition","setAttribute","e","hasChanged","flush","onLinesChanged","count","onLinesDeleted","lineDomNode","getDomNode","removeChild","onLinesInserted","scrollTopChanged","getLine","viewportData","inp","_get","renderer","ViewLayerRenderer","ctx","linesLength","resCtx","render","relativeVerticalOffset","inContext","stopLineNumber","deltaTop","x","_finishRendering","_renderUntouchedLines","_insertLinesBefore","removeCnt","_removeLinesBefore","_insertLinesAfter","_removeLinesAfter","startIndex","endIndex","deltaLN","layoutLine","newLinesLen","removeCount","removeIndex","domNodeIsEmpty","newLinesHTML","wasNew","_ttPolicy","createHTML","lastChild","innerHTML","insertAdjacentHTML","currChild","line","setDomNode","previousSibling","invalidLinesHTML","wasInvalid","hugeDomNode","source","firstChild","parentNode","replaceChild","sb","_sb","reset","hadNewLine","renderResult","renderLine","_finishRenderingNewLines","build","hadInvalidLine","_finishRenderingInvalidLines","window","trustedTypes","createPolicy","value"],"sources":["/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/browser/view/viewLayer.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar _a;\nimport { createFastDomNode } from '../../../base/browser/fastDomNode.js';\nimport { createStringBuilder } from '../../common/core/stringBuilder.js';\nexport class RenderedLinesCollection {\n    constructor(createLine) {\n        this._createLine = createLine;\n        this._set(1, []);\n    }\n    flush() {\n        this._set(1, []);\n    }\n    _set(rendLineNumberStart, lines) {\n        this._lines = lines;\n        this._rendLineNumberStart = rendLineNumberStart;\n    }\n    _get() {\n        return {\n            rendLineNumberStart: this._rendLineNumberStart,\n            lines: this._lines\n        };\n    }\n    /**\n     * @returns Inclusive line number that is inside this collection\n     */\n    getStartLineNumber() {\n        return this._rendLineNumberStart;\n    }\n    /**\n     * @returns Inclusive line number that is inside this collection\n     */\n    getEndLineNumber() {\n        return this._rendLineNumberStart + this._lines.length - 1;\n    }\n    getCount() {\n        return this._lines.length;\n    }\n    getLine(lineNumber) {\n        const lineIndex = lineNumber - this._rendLineNumberStart;\n        if (lineIndex < 0 || lineIndex >= this._lines.length) {\n            throw new Error('Illegal value for lineNumber');\n        }\n        return this._lines[lineIndex];\n    }\n    /**\n     * @returns Lines that were removed from this collection\n     */\n    onLinesDeleted(deleteFromLineNumber, deleteToLineNumber) {\n        if (this.getCount() === 0) {\n            // no lines\n            return null;\n        }\n        const startLineNumber = this.getStartLineNumber();\n        const endLineNumber = this.getEndLineNumber();\n        if (deleteToLineNumber < startLineNumber) {\n            // deleting above the viewport\n            const deleteCnt = deleteToLineNumber - deleteFromLineNumber + 1;\n            this._rendLineNumberStart -= deleteCnt;\n            return null;\n        }\n        if (deleteFromLineNumber > endLineNumber) {\n            // deleted below the viewport\n            return null;\n        }\n        // Record what needs to be deleted\n        let deleteStartIndex = 0;\n        let deleteCount = 0;\n        for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - this._rendLineNumberStart;\n            if (deleteFromLineNumber <= lineNumber && lineNumber <= deleteToLineNumber) {\n                // this is a line to be deleted\n                if (deleteCount === 0) {\n                    // this is the first line to be deleted\n                    deleteStartIndex = lineIndex;\n                    deleteCount = 1;\n                }\n                else {\n                    deleteCount++;\n                }\n            }\n        }\n        // Adjust this._rendLineNumberStart for lines deleted above\n        if (deleteFromLineNumber < startLineNumber) {\n            // Something was deleted above\n            let deleteAboveCount = 0;\n            if (deleteToLineNumber < startLineNumber) {\n                // the entire deleted lines are above\n                deleteAboveCount = deleteToLineNumber - deleteFromLineNumber + 1;\n            }\n            else {\n                deleteAboveCount = startLineNumber - deleteFromLineNumber;\n            }\n            this._rendLineNumberStart -= deleteAboveCount;\n        }\n        const deleted = this._lines.splice(deleteStartIndex, deleteCount);\n        return deleted;\n    }\n    onLinesChanged(changeFromLineNumber, changeCount) {\n        const changeToLineNumber = changeFromLineNumber + changeCount - 1;\n        if (this.getCount() === 0) {\n            // no lines\n            return false;\n        }\n        const startLineNumber = this.getStartLineNumber();\n        const endLineNumber = this.getEndLineNumber();\n        let someoneNotified = false;\n        for (let changedLineNumber = changeFromLineNumber; changedLineNumber <= changeToLineNumber; changedLineNumber++) {\n            if (changedLineNumber >= startLineNumber && changedLineNumber <= endLineNumber) {\n                // Notify the line\n                this._lines[changedLineNumber - this._rendLineNumberStart].onContentChanged();\n                someoneNotified = true;\n            }\n        }\n        return someoneNotified;\n    }\n    onLinesInserted(insertFromLineNumber, insertToLineNumber) {\n        if (this.getCount() === 0) {\n            // no lines\n            return null;\n        }\n        const insertCnt = insertToLineNumber - insertFromLineNumber + 1;\n        const startLineNumber = this.getStartLineNumber();\n        const endLineNumber = this.getEndLineNumber();\n        if (insertFromLineNumber <= startLineNumber) {\n            // inserting above the viewport\n            this._rendLineNumberStart += insertCnt;\n            return null;\n        }\n        if (insertFromLineNumber > endLineNumber) {\n            // inserting below the viewport\n            return null;\n        }\n        if (insertCnt + insertFromLineNumber > endLineNumber) {\n            // insert inside the viewport in such a way that all remaining lines are pushed outside\n            const deleted = this._lines.splice(insertFromLineNumber - this._rendLineNumberStart, endLineNumber - insertFromLineNumber + 1);\n            return deleted;\n        }\n        // insert inside the viewport, push out some lines, but not all remaining lines\n        const newLines = [];\n        for (let i = 0; i < insertCnt; i++) {\n            newLines[i] = this._createLine();\n        }\n        const insertIndex = insertFromLineNumber - this._rendLineNumberStart;\n        const beforeLines = this._lines.slice(0, insertIndex);\n        const afterLines = this._lines.slice(insertIndex, this._lines.length - insertCnt);\n        const deletedLines = this._lines.slice(this._lines.length - insertCnt, this._lines.length);\n        this._lines = beforeLines.concat(newLines).concat(afterLines);\n        return deletedLines;\n    }\n    onTokensChanged(ranges) {\n        if (this.getCount() === 0) {\n            // no lines\n            return false;\n        }\n        const startLineNumber = this.getStartLineNumber();\n        const endLineNumber = this.getEndLineNumber();\n        let notifiedSomeone = false;\n        for (let i = 0, len = ranges.length; i < len; i++) {\n            const rng = ranges[i];\n            if (rng.toLineNumber < startLineNumber || rng.fromLineNumber > endLineNumber) {\n                // range outside viewport\n                continue;\n            }\n            const from = Math.max(startLineNumber, rng.fromLineNumber);\n            const to = Math.min(endLineNumber, rng.toLineNumber);\n            for (let lineNumber = from; lineNumber <= to; lineNumber++) {\n                const lineIndex = lineNumber - this._rendLineNumberStart;\n                this._lines[lineIndex].onTokensChanged();\n                notifiedSomeone = true;\n            }\n        }\n        return notifiedSomeone;\n    }\n}\nexport class VisibleLinesCollection {\n    constructor(host) {\n        this._host = host;\n        this.domNode = this._createDomNode();\n        this._linesCollection = new RenderedLinesCollection(() => this._host.createVisibleLine());\n    }\n    _createDomNode() {\n        const domNode = createFastDomNode(document.createElement('div'));\n        domNode.setClassName('view-layer');\n        domNode.setPosition('absolute');\n        domNode.domNode.setAttribute('role', 'presentation');\n        domNode.domNode.setAttribute('aria-hidden', 'true');\n        return domNode;\n    }\n    // ---- begin view event handlers\n    onConfigurationChanged(e) {\n        if (e.hasChanged(133 /* EditorOption.layoutInfo */)) {\n            return true;\n        }\n        return false;\n    }\n    onFlushed(e) {\n        this._linesCollection.flush();\n        // No need to clear the dom node because a full .innerHTML will occur in ViewLayerRenderer._render\n        return true;\n    }\n    onLinesChanged(e) {\n        return this._linesCollection.onLinesChanged(e.fromLineNumber, e.count);\n    }\n    onLinesDeleted(e) {\n        const deleted = this._linesCollection.onLinesDeleted(e.fromLineNumber, e.toLineNumber);\n        if (deleted) {\n            // Remove from DOM\n            for (let i = 0, len = deleted.length; i < len; i++) {\n                const lineDomNode = deleted[i].getDomNode();\n                if (lineDomNode) {\n                    this.domNode.domNode.removeChild(lineDomNode);\n                }\n            }\n        }\n        return true;\n    }\n    onLinesInserted(e) {\n        const deleted = this._linesCollection.onLinesInserted(e.fromLineNumber, e.toLineNumber);\n        if (deleted) {\n            // Remove from DOM\n            for (let i = 0, len = deleted.length; i < len; i++) {\n                const lineDomNode = deleted[i].getDomNode();\n                if (lineDomNode) {\n                    this.domNode.domNode.removeChild(lineDomNode);\n                }\n            }\n        }\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged;\n    }\n    onTokensChanged(e) {\n        return this._linesCollection.onTokensChanged(e.ranges);\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // ---- end view event handlers\n    getStartLineNumber() {\n        return this._linesCollection.getStartLineNumber();\n    }\n    getEndLineNumber() {\n        return this._linesCollection.getEndLineNumber();\n    }\n    getVisibleLine(lineNumber) {\n        return this._linesCollection.getLine(lineNumber);\n    }\n    renderLines(viewportData) {\n        const inp = this._linesCollection._get();\n        const renderer = new ViewLayerRenderer(this.domNode.domNode, this._host, viewportData);\n        const ctx = {\n            rendLineNumberStart: inp.rendLineNumberStart,\n            lines: inp.lines,\n            linesLength: inp.lines.length\n        };\n        // Decide if this render will do a single update (single large .innerHTML) or many updates (inserting/removing dom nodes)\n        const resCtx = renderer.render(ctx, viewportData.startLineNumber, viewportData.endLineNumber, viewportData.relativeVerticalOffset);\n        this._linesCollection._set(resCtx.rendLineNumberStart, resCtx.lines);\n    }\n}\nclass ViewLayerRenderer {\n    constructor(domNode, host, viewportData) {\n        this.domNode = domNode;\n        this.host = host;\n        this.viewportData = viewportData;\n    }\n    render(inContext, startLineNumber, stopLineNumber, deltaTop) {\n        const ctx = {\n            rendLineNumberStart: inContext.rendLineNumberStart,\n            lines: inContext.lines.slice(0),\n            linesLength: inContext.linesLength\n        };\n        if ((ctx.rendLineNumberStart + ctx.linesLength - 1 < startLineNumber) || (stopLineNumber < ctx.rendLineNumberStart)) {\n            // There is no overlap whatsoever\n            ctx.rendLineNumberStart = startLineNumber;\n            ctx.linesLength = stopLineNumber - startLineNumber + 1;\n            ctx.lines = [];\n            for (let x = startLineNumber; x <= stopLineNumber; x++) {\n                ctx.lines[x - startLineNumber] = this.host.createVisibleLine();\n            }\n            this._finishRendering(ctx, true, deltaTop);\n            return ctx;\n        }\n        // Update lines which will remain untouched\n        this._renderUntouchedLines(ctx, Math.max(startLineNumber - ctx.rendLineNumberStart, 0), Math.min(stopLineNumber - ctx.rendLineNumberStart, ctx.linesLength - 1), deltaTop, startLineNumber);\n        if (ctx.rendLineNumberStart > startLineNumber) {\n            // Insert lines before\n            const fromLineNumber = startLineNumber;\n            const toLineNumber = Math.min(stopLineNumber, ctx.rendLineNumberStart - 1);\n            if (fromLineNumber <= toLineNumber) {\n                this._insertLinesBefore(ctx, fromLineNumber, toLineNumber, deltaTop, startLineNumber);\n                ctx.linesLength += toLineNumber - fromLineNumber + 1;\n            }\n        }\n        else if (ctx.rendLineNumberStart < startLineNumber) {\n            // Remove lines before\n            const removeCnt = Math.min(ctx.linesLength, startLineNumber - ctx.rendLineNumberStart);\n            if (removeCnt > 0) {\n                this._removeLinesBefore(ctx, removeCnt);\n                ctx.linesLength -= removeCnt;\n            }\n        }\n        ctx.rendLineNumberStart = startLineNumber;\n        if (ctx.rendLineNumberStart + ctx.linesLength - 1 < stopLineNumber) {\n            // Insert lines after\n            const fromLineNumber = ctx.rendLineNumberStart + ctx.linesLength;\n            const toLineNumber = stopLineNumber;\n            if (fromLineNumber <= toLineNumber) {\n                this._insertLinesAfter(ctx, fromLineNumber, toLineNumber, deltaTop, startLineNumber);\n                ctx.linesLength += toLineNumber - fromLineNumber + 1;\n            }\n        }\n        else if (ctx.rendLineNumberStart + ctx.linesLength - 1 > stopLineNumber) {\n            // Remove lines after\n            const fromLineNumber = Math.max(0, stopLineNumber - ctx.rendLineNumberStart + 1);\n            const toLineNumber = ctx.linesLength - 1;\n            const removeCnt = toLineNumber - fromLineNumber + 1;\n            if (removeCnt > 0) {\n                this._removeLinesAfter(ctx, removeCnt);\n                ctx.linesLength -= removeCnt;\n            }\n        }\n        this._finishRendering(ctx, false, deltaTop);\n        return ctx;\n    }\n    _renderUntouchedLines(ctx, startIndex, endIndex, deltaTop, deltaLN) {\n        const rendLineNumberStart = ctx.rendLineNumberStart;\n        const lines = ctx.lines;\n        for (let i = startIndex; i <= endIndex; i++) {\n            const lineNumber = rendLineNumberStart + i;\n            lines[i].layoutLine(lineNumber, deltaTop[lineNumber - deltaLN]);\n        }\n    }\n    _insertLinesBefore(ctx, fromLineNumber, toLineNumber, deltaTop, deltaLN) {\n        const newLines = [];\n        let newLinesLen = 0;\n        for (let lineNumber = fromLineNumber; lineNumber <= toLineNumber; lineNumber++) {\n            newLines[newLinesLen++] = this.host.createVisibleLine();\n        }\n        ctx.lines = newLines.concat(ctx.lines);\n    }\n    _removeLinesBefore(ctx, removeCount) {\n        for (let i = 0; i < removeCount; i++) {\n            const lineDomNode = ctx.lines[i].getDomNode();\n            if (lineDomNode) {\n                this.domNode.removeChild(lineDomNode);\n            }\n        }\n        ctx.lines.splice(0, removeCount);\n    }\n    _insertLinesAfter(ctx, fromLineNumber, toLineNumber, deltaTop, deltaLN) {\n        const newLines = [];\n        let newLinesLen = 0;\n        for (let lineNumber = fromLineNumber; lineNumber <= toLineNumber; lineNumber++) {\n            newLines[newLinesLen++] = this.host.createVisibleLine();\n        }\n        ctx.lines = ctx.lines.concat(newLines);\n    }\n    _removeLinesAfter(ctx, removeCount) {\n        const removeIndex = ctx.linesLength - removeCount;\n        for (let i = 0; i < removeCount; i++) {\n            const lineDomNode = ctx.lines[removeIndex + i].getDomNode();\n            if (lineDomNode) {\n                this.domNode.removeChild(lineDomNode);\n            }\n        }\n        ctx.lines.splice(removeIndex, removeCount);\n    }\n    _finishRenderingNewLines(ctx, domNodeIsEmpty, newLinesHTML, wasNew) {\n        if (ViewLayerRenderer._ttPolicy) {\n            newLinesHTML = ViewLayerRenderer._ttPolicy.createHTML(newLinesHTML);\n        }\n        const lastChild = this.domNode.lastChild;\n        if (domNodeIsEmpty || !lastChild) {\n            this.domNode.innerHTML = newLinesHTML; // explains the ugly casts -> https://github.com/microsoft/vscode/issues/106396#issuecomment-692625393;\n        }\n        else {\n            lastChild.insertAdjacentHTML('afterend', newLinesHTML);\n        }\n        let currChild = this.domNode.lastChild;\n        for (let i = ctx.linesLength - 1; i >= 0; i--) {\n            const line = ctx.lines[i];\n            if (wasNew[i]) {\n                line.setDomNode(currChild);\n                currChild = currChild.previousSibling;\n            }\n        }\n    }\n    _finishRenderingInvalidLines(ctx, invalidLinesHTML, wasInvalid) {\n        const hugeDomNode = document.createElement('div');\n        if (ViewLayerRenderer._ttPolicy) {\n            invalidLinesHTML = ViewLayerRenderer._ttPolicy.createHTML(invalidLinesHTML);\n        }\n        hugeDomNode.innerHTML = invalidLinesHTML;\n        for (let i = 0; i < ctx.linesLength; i++) {\n            const line = ctx.lines[i];\n            if (wasInvalid[i]) {\n                const source = hugeDomNode.firstChild;\n                const lineDomNode = line.getDomNode();\n                lineDomNode.parentNode.replaceChild(source, lineDomNode);\n                line.setDomNode(source);\n            }\n        }\n    }\n    _finishRendering(ctx, domNodeIsEmpty, deltaTop) {\n        const sb = ViewLayerRenderer._sb;\n        const linesLength = ctx.linesLength;\n        const lines = ctx.lines;\n        const rendLineNumberStart = ctx.rendLineNumberStart;\n        const wasNew = [];\n        {\n            sb.reset();\n            let hadNewLine = false;\n            for (let i = 0; i < linesLength; i++) {\n                const line = lines[i];\n                wasNew[i] = false;\n                const lineDomNode = line.getDomNode();\n                if (lineDomNode) {\n                    // line is not new\n                    continue;\n                }\n                const renderResult = line.renderLine(i + rendLineNumberStart, deltaTop[i], this.viewportData, sb);\n                if (!renderResult) {\n                    // line does not need rendering\n                    continue;\n                }\n                wasNew[i] = true;\n                hadNewLine = true;\n            }\n            if (hadNewLine) {\n                this._finishRenderingNewLines(ctx, domNodeIsEmpty, sb.build(), wasNew);\n            }\n        }\n        {\n            sb.reset();\n            let hadInvalidLine = false;\n            const wasInvalid = [];\n            for (let i = 0; i < linesLength; i++) {\n                const line = lines[i];\n                wasInvalid[i] = false;\n                if (wasNew[i]) {\n                    // line was new\n                    continue;\n                }\n                const renderResult = line.renderLine(i + rendLineNumberStart, deltaTop[i], this.viewportData, sb);\n                if (!renderResult) {\n                    // line does not need rendering\n                    continue;\n                }\n                wasInvalid[i] = true;\n                hadInvalidLine = true;\n            }\n            if (hadInvalidLine) {\n                this._finishRenderingInvalidLines(ctx, sb.build(), wasInvalid);\n            }\n        }\n    }\n}\nViewLayerRenderer._ttPolicy = (_a = window.trustedTypes) === null || _a === void 0 ? void 0 : _a.createPolicy('editorViewLayer', { createHTML: value => value });\nViewLayerRenderer._sb = createStringBuilder(100000);\n"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA,IAAIA,EAAE;AACN,SAASC,iBAAiB,QAAQ,sCAAsC;AACxE,SAASC,mBAAmB,QAAQ,oCAAoC;AACxE,WAAaC,uBAAuB;EAChC,iCAAYC,UAAU,EAAE;IAAA;IACpB,IAAI,CAACC,WAAW,GAAGD,UAAU;IAC7B,IAAI,CAACE,IAAI,CAAC,CAAC,EAAE,EAAE,CAAC;EACpB;EAAC;IAAA;IAAA,OACD,iBAAQ;MACJ,IAAI,CAACA,IAAI,CAAC,CAAC,EAAE,EAAE,CAAC;IACpB;EAAC;IAAA;IAAA,OACD,cAAKC,mBAAmB,EAAEC,KAAK,EAAE;MAC7B,IAAI,CAACC,MAAM,GAAGD,KAAK;MACnB,IAAI,CAACE,oBAAoB,GAAGH,mBAAmB;IACnD;EAAC;IAAA;IAAA,OACD,gBAAO;MACH,OAAO;QACHA,mBAAmB,EAAE,IAAI,CAACG,oBAAoB;QAC9CF,KAAK,EAAE,IAAI,CAACC;MAChB,CAAC;IACL;IACA;AACJ;AACA;EAFI;IAAA;IAAA,OAGA,8BAAqB;MACjB,OAAO,IAAI,CAACC,oBAAoB;IACpC;IACA;AACJ;AACA;EAFI;IAAA;IAAA,OAGA,4BAAmB;MACf,OAAO,IAAI,CAACA,oBAAoB,GAAG,IAAI,CAACD,MAAM,CAACE,MAAM,GAAG,CAAC;IAC7D;EAAC;IAAA;IAAA,OACD,oBAAW;MACP,OAAO,IAAI,CAACF,MAAM,CAACE,MAAM;IAC7B;EAAC;IAAA;IAAA,OACD,iBAAQC,UAAU,EAAE;MAChB,IAAMC,SAAS,GAAGD,UAAU,GAAG,IAAI,CAACF,oBAAoB;MACxD,IAAIG,SAAS,GAAG,CAAC,IAAIA,SAAS,IAAI,IAAI,CAACJ,MAAM,CAACE,MAAM,EAAE;QAClD,MAAM,IAAIG,KAAK,CAAC,8BAA8B,CAAC;MACnD;MACA,OAAO,IAAI,CAACL,MAAM,CAACI,SAAS,CAAC;IACjC;IACA;AACJ;AACA;EAFI;IAAA;IAAA,OAGA,wBAAeE,oBAAoB,EAAEC,kBAAkB,EAAE;MACrD,IAAI,IAAI,CAACC,QAAQ,EAAE,KAAK,CAAC,EAAE;QACvB;QACA,OAAO,IAAI;MACf;MACA,IAAMC,eAAe,GAAG,IAAI,CAACC,kBAAkB,EAAE;MACjD,IAAMC,aAAa,GAAG,IAAI,CAACC,gBAAgB,EAAE;MAC7C,IAAIL,kBAAkB,GAAGE,eAAe,EAAE;QACtC;QACA,IAAMI,SAAS,GAAGN,kBAAkB,GAAGD,oBAAoB,GAAG,CAAC;QAC/D,IAAI,CAACL,oBAAoB,IAAIY,SAAS;QACtC,OAAO,IAAI;MACf;MACA,IAAIP,oBAAoB,GAAGK,aAAa,EAAE;QACtC;QACA,OAAO,IAAI;MACf;MACA;MACA,IAAIG,gBAAgB,GAAG,CAAC;MACxB,IAAIC,WAAW,GAAG,CAAC;MACnB,KAAK,IAAIZ,UAAU,GAAGM,eAAe,EAAEN,UAAU,IAAIQ,aAAa,EAAER,UAAU,EAAE,EAAE;QAC9E,IAAMC,SAAS,GAAGD,UAAU,GAAG,IAAI,CAACF,oBAAoB;QACxD,IAAIK,oBAAoB,IAAIH,UAAU,IAAIA,UAAU,IAAII,kBAAkB,EAAE;UACxE;UACA,IAAIQ,WAAW,KAAK,CAAC,EAAE;YACnB;YACAD,gBAAgB,GAAGV,SAAS;YAC5BW,WAAW,GAAG,CAAC;UACnB,CAAC,MACI;YACDA,WAAW,EAAE;UACjB;QACJ;MACJ;MACA;MACA,IAAIT,oBAAoB,GAAGG,eAAe,EAAE;QACxC;QACA,IAAIO,gBAAgB,GAAG,CAAC;QACxB,IAAIT,kBAAkB,GAAGE,eAAe,EAAE;UACtC;UACAO,gBAAgB,GAAGT,kBAAkB,GAAGD,oBAAoB,GAAG,CAAC;QACpE,CAAC,MACI;UACDU,gBAAgB,GAAGP,eAAe,GAAGH,oBAAoB;QAC7D;QACA,IAAI,CAACL,oBAAoB,IAAIe,gBAAgB;MACjD;MACA,IAAMC,OAAO,GAAG,IAAI,CAACjB,MAAM,CAACkB,MAAM,CAACJ,gBAAgB,EAAEC,WAAW,CAAC;MACjE,OAAOE,OAAO;IAClB;EAAC;IAAA;IAAA,OACD,wBAAeE,oBAAoB,EAAEC,WAAW,EAAE;MAC9C,IAAMC,kBAAkB,GAAGF,oBAAoB,GAAGC,WAAW,GAAG,CAAC;MACjE,IAAI,IAAI,CAACZ,QAAQ,EAAE,KAAK,CAAC,EAAE;QACvB;QACA,OAAO,KAAK;MAChB;MACA,IAAMC,eAAe,GAAG,IAAI,CAACC,kBAAkB,EAAE;MACjD,IAAMC,aAAa,GAAG,IAAI,CAACC,gBAAgB,EAAE;MAC7C,IAAIU,eAAe,GAAG,KAAK;MAC3B,KAAK,IAAIC,iBAAiB,GAAGJ,oBAAoB,EAAEI,iBAAiB,IAAIF,kBAAkB,EAAEE,iBAAiB,EAAE,EAAE;QAC7G,IAAIA,iBAAiB,IAAId,eAAe,IAAIc,iBAAiB,IAAIZ,aAAa,EAAE;UAC5E;UACA,IAAI,CAACX,MAAM,CAACuB,iBAAiB,GAAG,IAAI,CAACtB,oBAAoB,CAAC,CAACuB,gBAAgB,EAAE;UAC7EF,eAAe,GAAG,IAAI;QAC1B;MACJ;MACA,OAAOA,eAAe;IAC1B;EAAC;IAAA;IAAA,OACD,yBAAgBG,oBAAoB,EAAEC,kBAAkB,EAAE;MACtD,IAAI,IAAI,CAAClB,QAAQ,EAAE,KAAK,CAAC,EAAE;QACvB;QACA,OAAO,IAAI;MACf;MACA,IAAMmB,SAAS,GAAGD,kBAAkB,GAAGD,oBAAoB,GAAG,CAAC;MAC/D,IAAMhB,eAAe,GAAG,IAAI,CAACC,kBAAkB,EAAE;MACjD,IAAMC,aAAa,GAAG,IAAI,CAACC,gBAAgB,EAAE;MAC7C,IAAIa,oBAAoB,IAAIhB,eAAe,EAAE;QACzC;QACA,IAAI,CAACR,oBAAoB,IAAI0B,SAAS;QACtC,OAAO,IAAI;MACf;MACA,IAAIF,oBAAoB,GAAGd,aAAa,EAAE;QACtC;QACA,OAAO,IAAI;MACf;MACA,IAAIgB,SAAS,GAAGF,oBAAoB,GAAGd,aAAa,EAAE;QAClD;QACA,IAAMM,OAAO,GAAG,IAAI,CAACjB,MAAM,CAACkB,MAAM,CAACO,oBAAoB,GAAG,IAAI,CAACxB,oBAAoB,EAAEU,aAAa,GAAGc,oBAAoB,GAAG,CAAC,CAAC;QAC9H,OAAOR,OAAO;MAClB;MACA;MACA,IAAMW,QAAQ,GAAG,EAAE;MACnB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,SAAS,EAAEE,CAAC,EAAE,EAAE;QAChCD,QAAQ,CAACC,CAAC,CAAC,GAAG,IAAI,CAACjC,WAAW,EAAE;MACpC;MACA,IAAMkC,WAAW,GAAGL,oBAAoB,GAAG,IAAI,CAACxB,oBAAoB;MACpE,IAAM8B,WAAW,GAAG,IAAI,CAAC/B,MAAM,CAACgC,KAAK,CAAC,CAAC,EAAEF,WAAW,CAAC;MACrD,IAAMG,UAAU,GAAG,IAAI,CAACjC,MAAM,CAACgC,KAAK,CAACF,WAAW,EAAE,IAAI,CAAC9B,MAAM,CAACE,MAAM,GAAGyB,SAAS,CAAC;MACjF,IAAMO,YAAY,GAAG,IAAI,CAAClC,MAAM,CAACgC,KAAK,CAAC,IAAI,CAAChC,MAAM,CAACE,MAAM,GAAGyB,SAAS,EAAE,IAAI,CAAC3B,MAAM,CAACE,MAAM,CAAC;MAC1F,IAAI,CAACF,MAAM,GAAG+B,WAAW,CAACI,MAAM,CAACP,QAAQ,CAAC,CAACO,MAAM,CAACF,UAAU,CAAC;MAC7D,OAAOC,YAAY;IACvB;EAAC;IAAA;IAAA,OACD,yBAAgBE,MAAM,EAAE;MACpB,IAAI,IAAI,CAAC5B,QAAQ,EAAE,KAAK,CAAC,EAAE;QACvB;QACA,OAAO,KAAK;MAChB;MACA,IAAMC,eAAe,GAAG,IAAI,CAACC,kBAAkB,EAAE;MACjD,IAAMC,aAAa,GAAG,IAAI,CAACC,gBAAgB,EAAE;MAC7C,IAAIyB,eAAe,GAAG,KAAK;MAC3B,KAAK,IAAIR,CAAC,GAAG,CAAC,EAAES,GAAG,GAAGF,MAAM,CAAClC,MAAM,EAAE2B,CAAC,GAAGS,GAAG,EAAET,CAAC,EAAE,EAAE;QAC/C,IAAMU,GAAG,GAAGH,MAAM,CAACP,CAAC,CAAC;QACrB,IAAIU,GAAG,CAACC,YAAY,GAAG/B,eAAe,IAAI8B,GAAG,CAACE,cAAc,GAAG9B,aAAa,EAAE;UAC1E;UACA;QACJ;QACA,IAAM+B,IAAI,GAAGC,IAAI,CAACC,GAAG,CAACnC,eAAe,EAAE8B,GAAG,CAACE,cAAc,CAAC;QAC1D,IAAMI,EAAE,GAAGF,IAAI,CAACG,GAAG,CAACnC,aAAa,EAAE4B,GAAG,CAACC,YAAY,CAAC;QACpD,KAAK,IAAIrC,UAAU,GAAGuC,IAAI,EAAEvC,UAAU,IAAI0C,EAAE,EAAE1C,UAAU,EAAE,EAAE;UACxD,IAAMC,SAAS,GAAGD,UAAU,GAAG,IAAI,CAACF,oBAAoB;UACxD,IAAI,CAACD,MAAM,CAACI,SAAS,CAAC,CAAC2C,eAAe,EAAE;UACxCV,eAAe,GAAG,IAAI;QAC1B;MACJ;MACA,OAAOA,eAAe;IAC1B;EAAC;EAAA;AAAA;AAEL,WAAaW,sBAAsB;EAC/B,gCAAYC,IAAI,EAAE;IAAA;IAAA;IACd,IAAI,CAACC,KAAK,GAAGD,IAAI;IACjB,IAAI,CAACE,OAAO,GAAG,IAAI,CAACC,cAAc,EAAE;IACpC,IAAI,CAACC,gBAAgB,GAAG,IAAI3D,uBAAuB,CAAC;MAAA,OAAM,KAAI,CAACwD,KAAK,CAACI,iBAAiB,EAAE;IAAA,EAAC;EAC7F;EAAC;IAAA;IAAA,OACD,0BAAiB;MACb,IAAMH,OAAO,GAAG3D,iBAAiB,CAAC+D,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC,CAAC;MAChEL,OAAO,CAACM,YAAY,CAAC,YAAY,CAAC;MAClCN,OAAO,CAACO,WAAW,CAAC,UAAU,CAAC;MAC/BP,OAAO,CAACA,OAAO,CAACQ,YAAY,CAAC,MAAM,EAAE,cAAc,CAAC;MACpDR,OAAO,CAACA,OAAO,CAACQ,YAAY,CAAC,aAAa,EAAE,MAAM,CAAC;MACnD,OAAOR,OAAO;IAClB;IACA;EAAA;IAAA;IAAA,OACA,gCAAuBS,CAAC,EAAE;MACtB,IAAIA,CAAC,CAACC,UAAU,CAAC,GAAG,CAAC,8BAA8B,EAAE;QACjD,OAAO,IAAI;MACf;MACA,OAAO,KAAK;IAChB;EAAC;IAAA;IAAA,OACD,mBAAUD,CAAC,EAAE;MACT,IAAI,CAACP,gBAAgB,CAACS,KAAK,EAAE;MAC7B;MACA,OAAO,IAAI;IACf;EAAC;IAAA;IAAA,OACD,wBAAeF,CAAC,EAAE;MACd,OAAO,IAAI,CAACP,gBAAgB,CAACU,cAAc,CAACH,CAAC,CAACnB,cAAc,EAAEmB,CAAC,CAACI,KAAK,CAAC;IAC1E;EAAC;IAAA;IAAA,OACD,wBAAeJ,CAAC,EAAE;MACd,IAAM3C,OAAO,GAAG,IAAI,CAACoC,gBAAgB,CAACY,cAAc,CAACL,CAAC,CAACnB,cAAc,EAAEmB,CAAC,CAACpB,YAAY,CAAC;MACtF,IAAIvB,OAAO,EAAE;QACT;QACA,KAAK,IAAIY,CAAC,GAAG,CAAC,EAAES,GAAG,GAAGrB,OAAO,CAACf,MAAM,EAAE2B,CAAC,GAAGS,GAAG,EAAET,CAAC,EAAE,EAAE;UAChD,IAAMqC,WAAW,GAAGjD,OAAO,CAACY,CAAC,CAAC,CAACsC,UAAU,EAAE;UAC3C,IAAID,WAAW,EAAE;YACb,IAAI,CAACf,OAAO,CAACA,OAAO,CAACiB,WAAW,CAACF,WAAW,CAAC;UACjD;QACJ;MACJ;MACA,OAAO,IAAI;IACf;EAAC;IAAA;IAAA,OACD,yBAAgBN,CAAC,EAAE;MACf,IAAM3C,OAAO,GAAG,IAAI,CAACoC,gBAAgB,CAACgB,eAAe,CAACT,CAAC,CAACnB,cAAc,EAAEmB,CAAC,CAACpB,YAAY,CAAC;MACvF,IAAIvB,OAAO,EAAE;QACT;QACA,KAAK,IAAIY,CAAC,GAAG,CAAC,EAAES,GAAG,GAAGrB,OAAO,CAACf,MAAM,EAAE2B,CAAC,GAAGS,GAAG,EAAET,CAAC,EAAE,EAAE;UAChD,IAAMqC,WAAW,GAAGjD,OAAO,CAACY,CAAC,CAAC,CAACsC,UAAU,EAAE;UAC3C,IAAID,WAAW,EAAE;YACb,IAAI,CAACf,OAAO,CAACA,OAAO,CAACiB,WAAW,CAACF,WAAW,CAAC;UACjD;QACJ;MACJ;MACA,OAAO,IAAI;IACf;EAAC;IAAA;IAAA,OACD,yBAAgBN,CAAC,EAAE;MACf,OAAOA,CAAC,CAACU,gBAAgB;IAC7B;EAAC;IAAA;IAAA,OACD,yBAAgBV,CAAC,EAAE;MACf,OAAO,IAAI,CAACP,gBAAgB,CAACN,eAAe,CAACa,CAAC,CAACxB,MAAM,CAAC;IAC1D;EAAC;IAAA;IAAA,OACD,wBAAewB,CAAC,EAAE;MACd,OAAO,IAAI;IACf;IACA;EAAA;IAAA;IAAA,OACA,8BAAqB;MACjB,OAAO,IAAI,CAACP,gBAAgB,CAAC3C,kBAAkB,EAAE;IACrD;EAAC;IAAA;IAAA,OACD,4BAAmB;MACf,OAAO,IAAI,CAAC2C,gBAAgB,CAACzC,gBAAgB,EAAE;IACnD;EAAC;IAAA;IAAA,OACD,wBAAeT,UAAU,EAAE;MACvB,OAAO,IAAI,CAACkD,gBAAgB,CAACkB,OAAO,CAACpE,UAAU,CAAC;IACpD;EAAC;IAAA;IAAA,OACD,qBAAYqE,YAAY,EAAE;MACtB,IAAMC,GAAG,GAAG,IAAI,CAACpB,gBAAgB,CAACqB,IAAI,EAAE;MACxC,IAAMC,QAAQ,GAAG,IAAIC,iBAAiB,CAAC,IAAI,CAACzB,OAAO,CAACA,OAAO,EAAE,IAAI,CAACD,KAAK,EAAEsB,YAAY,CAAC;MACtF,IAAMK,GAAG,GAAG;QACR/E,mBAAmB,EAAE2E,GAAG,CAAC3E,mBAAmB;QAC5CC,KAAK,EAAE0E,GAAG,CAAC1E,KAAK;QAChB+E,WAAW,EAAEL,GAAG,CAAC1E,KAAK,CAACG;MAC3B,CAAC;MACD;MACA,IAAM6E,MAAM,GAAGJ,QAAQ,CAACK,MAAM,CAACH,GAAG,EAAEL,YAAY,CAAC/D,eAAe,EAAE+D,YAAY,CAAC7D,aAAa,EAAE6D,YAAY,CAACS,sBAAsB,CAAC;MAClI,IAAI,CAAC5B,gBAAgB,CAACxD,IAAI,CAACkF,MAAM,CAACjF,mBAAmB,EAAEiF,MAAM,CAAChF,KAAK,CAAC;IACxE;EAAC;EAAA;AAAA;AACJ,IACK6E,iBAAiB;EACnB,2BAAYzB,OAAO,EAAEF,IAAI,EAAEuB,YAAY,EAAE;IAAA;IACrC,IAAI,CAACrB,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACF,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACuB,YAAY,GAAGA,YAAY;EACpC;EAAC;IAAA;IAAA,OACD,gBAAOU,SAAS,EAAEzE,eAAe,EAAE0E,cAAc,EAAEC,QAAQ,EAAE;MACzD,IAAMP,GAAG,GAAG;QACR/E,mBAAmB,EAAEoF,SAAS,CAACpF,mBAAmB;QAClDC,KAAK,EAAEmF,SAAS,CAACnF,KAAK,CAACiC,KAAK,CAAC,CAAC,CAAC;QAC/B8C,WAAW,EAAEI,SAAS,CAACJ;MAC3B,CAAC;MACD,IAAKD,GAAG,CAAC/E,mBAAmB,GAAG+E,GAAG,CAACC,WAAW,GAAG,CAAC,GAAGrE,eAAe,IAAM0E,cAAc,GAAGN,GAAG,CAAC/E,mBAAoB,EAAE;QACjH;QACA+E,GAAG,CAAC/E,mBAAmB,GAAGW,eAAe;QACzCoE,GAAG,CAACC,WAAW,GAAGK,cAAc,GAAG1E,eAAe,GAAG,CAAC;QACtDoE,GAAG,CAAC9E,KAAK,GAAG,EAAE;QACd,KAAK,IAAIsF,CAAC,GAAG5E,eAAe,EAAE4E,CAAC,IAAIF,cAAc,EAAEE,CAAC,EAAE,EAAE;UACpDR,GAAG,CAAC9E,KAAK,CAACsF,CAAC,GAAG5E,eAAe,CAAC,GAAG,IAAI,CAACwC,IAAI,CAACK,iBAAiB,EAAE;QAClE;QACA,IAAI,CAACgC,gBAAgB,CAACT,GAAG,EAAE,IAAI,EAAEO,QAAQ,CAAC;QAC1C,OAAOP,GAAG;MACd;MACA;MACA,IAAI,CAACU,qBAAqB,CAACV,GAAG,EAAElC,IAAI,CAACC,GAAG,CAACnC,eAAe,GAAGoE,GAAG,CAAC/E,mBAAmB,EAAE,CAAC,CAAC,EAAE6C,IAAI,CAACG,GAAG,CAACqC,cAAc,GAAGN,GAAG,CAAC/E,mBAAmB,EAAE+E,GAAG,CAACC,WAAW,GAAG,CAAC,CAAC,EAAEM,QAAQ,EAAE3E,eAAe,CAAC;MAC3L,IAAIoE,GAAG,CAAC/E,mBAAmB,GAAGW,eAAe,EAAE;QAC3C;QACA,IAAMgC,cAAc,GAAGhC,eAAe;QACtC,IAAM+B,YAAY,GAAGG,IAAI,CAACG,GAAG,CAACqC,cAAc,EAAEN,GAAG,CAAC/E,mBAAmB,GAAG,CAAC,CAAC;QAC1E,IAAI2C,cAAc,IAAID,YAAY,EAAE;UAChC,IAAI,CAACgD,kBAAkB,CAACX,GAAG,EAAEpC,cAAc,EAAED,YAAY,EAAE4C,QAAQ,EAAE3E,eAAe,CAAC;UACrFoE,GAAG,CAACC,WAAW,IAAItC,YAAY,GAAGC,cAAc,GAAG,CAAC;QACxD;MACJ,CAAC,MACI,IAAIoC,GAAG,CAAC/E,mBAAmB,GAAGW,eAAe,EAAE;QAChD;QACA,IAAMgF,SAAS,GAAG9C,IAAI,CAACG,GAAG,CAAC+B,GAAG,CAACC,WAAW,EAAErE,eAAe,GAAGoE,GAAG,CAAC/E,mBAAmB,CAAC;QACtF,IAAI2F,SAAS,GAAG,CAAC,EAAE;UACf,IAAI,CAACC,kBAAkB,CAACb,GAAG,EAAEY,SAAS,CAAC;UACvCZ,GAAG,CAACC,WAAW,IAAIW,SAAS;QAChC;MACJ;MACAZ,GAAG,CAAC/E,mBAAmB,GAAGW,eAAe;MACzC,IAAIoE,GAAG,CAAC/E,mBAAmB,GAAG+E,GAAG,CAACC,WAAW,GAAG,CAAC,GAAGK,cAAc,EAAE;QAChE;QACA,IAAM1C,eAAc,GAAGoC,GAAG,CAAC/E,mBAAmB,GAAG+E,GAAG,CAACC,WAAW;QAChE,IAAMtC,aAAY,GAAG2C,cAAc;QACnC,IAAI1C,eAAc,IAAID,aAAY,EAAE;UAChC,IAAI,CAACmD,iBAAiB,CAACd,GAAG,EAAEpC,eAAc,EAAED,aAAY,EAAE4C,QAAQ,EAAE3E,eAAe,CAAC;UACpFoE,GAAG,CAACC,WAAW,IAAItC,aAAY,GAAGC,eAAc,GAAG,CAAC;QACxD;MACJ,CAAC,MACI,IAAIoC,GAAG,CAAC/E,mBAAmB,GAAG+E,GAAG,CAACC,WAAW,GAAG,CAAC,GAAGK,cAAc,EAAE;QACrE;QACA,IAAM1C,gBAAc,GAAGE,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEuC,cAAc,GAAGN,GAAG,CAAC/E,mBAAmB,GAAG,CAAC,CAAC;QAChF,IAAM0C,cAAY,GAAGqC,GAAG,CAACC,WAAW,GAAG,CAAC;QACxC,IAAMW,UAAS,GAAGjD,cAAY,GAAGC,gBAAc,GAAG,CAAC;QACnD,IAAIgD,UAAS,GAAG,CAAC,EAAE;UACf,IAAI,CAACG,iBAAiB,CAACf,GAAG,EAAEY,UAAS,CAAC;UACtCZ,GAAG,CAACC,WAAW,IAAIW,UAAS;QAChC;MACJ;MACA,IAAI,CAACH,gBAAgB,CAACT,GAAG,EAAE,KAAK,EAAEO,QAAQ,CAAC;MAC3C,OAAOP,GAAG;IACd;EAAC;IAAA;IAAA,OACD,+BAAsBA,GAAG,EAAEgB,UAAU,EAAEC,QAAQ,EAAEV,QAAQ,EAAEW,OAAO,EAAE;MAChE,IAAMjG,mBAAmB,GAAG+E,GAAG,CAAC/E,mBAAmB;MACnD,IAAMC,KAAK,GAAG8E,GAAG,CAAC9E,KAAK;MACvB,KAAK,IAAI8B,CAAC,GAAGgE,UAAU,EAAEhE,CAAC,IAAIiE,QAAQ,EAAEjE,CAAC,EAAE,EAAE;QACzC,IAAM1B,UAAU,GAAGL,mBAAmB,GAAG+B,CAAC;QAC1C9B,KAAK,CAAC8B,CAAC,CAAC,CAACmE,UAAU,CAAC7F,UAAU,EAAEiF,QAAQ,CAACjF,UAAU,GAAG4F,OAAO,CAAC,CAAC;MACnE;IACJ;EAAC;IAAA;IAAA,OACD,4BAAmBlB,GAAG,EAAEpC,cAAc,EAAED,YAAY,EAAE4C,QAAQ,EAAEW,OAAO,EAAE;MACrE,IAAMnE,QAAQ,GAAG,EAAE;MACnB,IAAIqE,WAAW,GAAG,CAAC;MACnB,KAAK,IAAI9F,UAAU,GAAGsC,cAAc,EAAEtC,UAAU,IAAIqC,YAAY,EAAErC,UAAU,EAAE,EAAE;QAC5EyB,QAAQ,CAACqE,WAAW,EAAE,CAAC,GAAG,IAAI,CAAChD,IAAI,CAACK,iBAAiB,EAAE;MAC3D;MACAuB,GAAG,CAAC9E,KAAK,GAAG6B,QAAQ,CAACO,MAAM,CAAC0C,GAAG,CAAC9E,KAAK,CAAC;IAC1C;EAAC;IAAA;IAAA,OACD,4BAAmB8E,GAAG,EAAEqB,WAAW,EAAE;MACjC,KAAK,IAAIrE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGqE,WAAW,EAAErE,CAAC,EAAE,EAAE;QAClC,IAAMqC,WAAW,GAAGW,GAAG,CAAC9E,KAAK,CAAC8B,CAAC,CAAC,CAACsC,UAAU,EAAE;QAC7C,IAAID,WAAW,EAAE;UACb,IAAI,CAACf,OAAO,CAACiB,WAAW,CAACF,WAAW,CAAC;QACzC;MACJ;MACAW,GAAG,CAAC9E,KAAK,CAACmB,MAAM,CAAC,CAAC,EAAEgF,WAAW,CAAC;IACpC;EAAC;IAAA;IAAA,OACD,2BAAkBrB,GAAG,EAAEpC,cAAc,EAAED,YAAY,EAAE4C,QAAQ,EAAEW,OAAO,EAAE;MACpE,IAAMnE,QAAQ,GAAG,EAAE;MACnB,IAAIqE,WAAW,GAAG,CAAC;MACnB,KAAK,IAAI9F,UAAU,GAAGsC,cAAc,EAAEtC,UAAU,IAAIqC,YAAY,EAAErC,UAAU,EAAE,EAAE;QAC5EyB,QAAQ,CAACqE,WAAW,EAAE,CAAC,GAAG,IAAI,CAAChD,IAAI,CAACK,iBAAiB,EAAE;MAC3D;MACAuB,GAAG,CAAC9E,KAAK,GAAG8E,GAAG,CAAC9E,KAAK,CAACoC,MAAM,CAACP,QAAQ,CAAC;IAC1C;EAAC;IAAA;IAAA,OACD,2BAAkBiD,GAAG,EAAEqB,WAAW,EAAE;MAChC,IAAMC,WAAW,GAAGtB,GAAG,CAACC,WAAW,GAAGoB,WAAW;MACjD,KAAK,IAAIrE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGqE,WAAW,EAAErE,CAAC,EAAE,EAAE;QAClC,IAAMqC,WAAW,GAAGW,GAAG,CAAC9E,KAAK,CAACoG,WAAW,GAAGtE,CAAC,CAAC,CAACsC,UAAU,EAAE;QAC3D,IAAID,WAAW,EAAE;UACb,IAAI,CAACf,OAAO,CAACiB,WAAW,CAACF,WAAW,CAAC;QACzC;MACJ;MACAW,GAAG,CAAC9E,KAAK,CAACmB,MAAM,CAACiF,WAAW,EAAED,WAAW,CAAC;IAC9C;EAAC;IAAA;IAAA,OACD,kCAAyBrB,GAAG,EAAEuB,cAAc,EAAEC,YAAY,EAAEC,MAAM,EAAE;MAChE,IAAI1B,iBAAiB,CAAC2B,SAAS,EAAE;QAC7BF,YAAY,GAAGzB,iBAAiB,CAAC2B,SAAS,CAACC,UAAU,CAACH,YAAY,CAAC;MACvE;MACA,IAAMI,SAAS,GAAG,IAAI,CAACtD,OAAO,CAACsD,SAAS;MACxC,IAAIL,cAAc,IAAI,CAACK,SAAS,EAAE;QAC9B,IAAI,CAACtD,OAAO,CAACuD,SAAS,GAAGL,YAAY,CAAC,CAAC;MAC3C,CAAC,MACI;QACDI,SAAS,CAACE,kBAAkB,CAAC,UAAU,EAAEN,YAAY,CAAC;MAC1D;MACA,IAAIO,SAAS,GAAG,IAAI,CAACzD,OAAO,CAACsD,SAAS;MACtC,KAAK,IAAI5E,CAAC,GAAGgD,GAAG,CAACC,WAAW,GAAG,CAAC,EAAEjD,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;QAC3C,IAAMgF,IAAI,GAAGhC,GAAG,CAAC9E,KAAK,CAAC8B,CAAC,CAAC;QACzB,IAAIyE,MAAM,CAACzE,CAAC,CAAC,EAAE;UACXgF,IAAI,CAACC,UAAU,CAACF,SAAS,CAAC;UAC1BA,SAAS,GAAGA,SAAS,CAACG,eAAe;QACzC;MACJ;IACJ;EAAC;IAAA;IAAA,OACD,sCAA6BlC,GAAG,EAAEmC,gBAAgB,EAAEC,UAAU,EAAE;MAC5D,IAAMC,WAAW,GAAG3D,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;MACjD,IAAIoB,iBAAiB,CAAC2B,SAAS,EAAE;QAC7BS,gBAAgB,GAAGpC,iBAAiB,CAAC2B,SAAS,CAACC,UAAU,CAACQ,gBAAgB,CAAC;MAC/E;MACAE,WAAW,CAACR,SAAS,GAAGM,gBAAgB;MACxC,KAAK,IAAInF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGgD,GAAG,CAACC,WAAW,EAAEjD,CAAC,EAAE,EAAE;QACtC,IAAMgF,IAAI,GAAGhC,GAAG,CAAC9E,KAAK,CAAC8B,CAAC,CAAC;QACzB,IAAIoF,UAAU,CAACpF,CAAC,CAAC,EAAE;UACf,IAAMsF,MAAM,GAAGD,WAAW,CAACE,UAAU;UACrC,IAAMlD,WAAW,GAAG2C,IAAI,CAAC1C,UAAU,EAAE;UACrCD,WAAW,CAACmD,UAAU,CAACC,YAAY,CAACH,MAAM,EAAEjD,WAAW,CAAC;UACxD2C,IAAI,CAACC,UAAU,CAACK,MAAM,CAAC;QAC3B;MACJ;IACJ;EAAC;IAAA;IAAA,OACD,0BAAiBtC,GAAG,EAAEuB,cAAc,EAAEhB,QAAQ,EAAE;MAC5C,IAAMmC,EAAE,GAAG3C,iBAAiB,CAAC4C,GAAG;MAChC,IAAM1C,WAAW,GAAGD,GAAG,CAACC,WAAW;MACnC,IAAM/E,KAAK,GAAG8E,GAAG,CAAC9E,KAAK;MACvB,IAAMD,mBAAmB,GAAG+E,GAAG,CAAC/E,mBAAmB;MACnD,IAAMwG,MAAM,GAAG,EAAE;MACjB;QACIiB,EAAE,CAACE,KAAK,EAAE;QACV,IAAIC,UAAU,GAAG,KAAK;QACtB,KAAK,IAAI7F,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGiD,WAAW,EAAEjD,CAAC,EAAE,EAAE;UAClC,IAAMgF,IAAI,GAAG9G,KAAK,CAAC8B,CAAC,CAAC;UACrByE,MAAM,CAACzE,CAAC,CAAC,GAAG,KAAK;UACjB,IAAMqC,WAAW,GAAG2C,IAAI,CAAC1C,UAAU,EAAE;UACrC,IAAID,WAAW,EAAE;YACb;YACA;UACJ;UACA,IAAMyD,YAAY,GAAGd,IAAI,CAACe,UAAU,CAAC/F,CAAC,GAAG/B,mBAAmB,EAAEsF,QAAQ,CAACvD,CAAC,CAAC,EAAE,IAAI,CAAC2C,YAAY,EAAE+C,EAAE,CAAC;UACjG,IAAI,CAACI,YAAY,EAAE;YACf;YACA;UACJ;UACArB,MAAM,CAACzE,CAAC,CAAC,GAAG,IAAI;UAChB6F,UAAU,GAAG,IAAI;QACrB;QACA,IAAIA,UAAU,EAAE;UACZ,IAAI,CAACG,wBAAwB,CAAChD,GAAG,EAAEuB,cAAc,EAAEmB,EAAE,CAACO,KAAK,EAAE,EAAExB,MAAM,CAAC;QAC1E;MACJ;MACA;QACIiB,EAAE,CAACE,KAAK,EAAE;QACV,IAAIM,cAAc,GAAG,KAAK;QAC1B,IAAMd,UAAU,GAAG,EAAE;QACrB,KAAK,IAAIpF,EAAC,GAAG,CAAC,EAAEA,EAAC,GAAGiD,WAAW,EAAEjD,EAAC,EAAE,EAAE;UAClC,IAAMgF,KAAI,GAAG9G,KAAK,CAAC8B,EAAC,CAAC;UACrBoF,UAAU,CAACpF,EAAC,CAAC,GAAG,KAAK;UACrB,IAAIyE,MAAM,CAACzE,EAAC,CAAC,EAAE;YACX;YACA;UACJ;UACA,IAAM8F,aAAY,GAAGd,KAAI,CAACe,UAAU,CAAC/F,EAAC,GAAG/B,mBAAmB,EAAEsF,QAAQ,CAACvD,EAAC,CAAC,EAAE,IAAI,CAAC2C,YAAY,EAAE+C,EAAE,CAAC;UACjG,IAAI,CAACI,aAAY,EAAE;YACf;YACA;UACJ;UACAV,UAAU,CAACpF,EAAC,CAAC,GAAG,IAAI;UACpBkG,cAAc,GAAG,IAAI;QACzB;QACA,IAAIA,cAAc,EAAE;UAChB,IAAI,CAACC,4BAA4B,CAACnD,GAAG,EAAE0C,EAAE,CAACO,KAAK,EAAE,EAAEb,UAAU,CAAC;QAClE;MACJ;IACJ;EAAC;EAAA;AAAA;AAELrC,iBAAiB,CAAC2B,SAAS,GAAG,CAAChH,EAAE,GAAG0I,MAAM,CAACC,YAAY,MAAM,IAAI,IAAI3I,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAAC4I,YAAY,CAAC,iBAAiB,EAAE;EAAE3B,UAAU,EAAE,oBAAA4B,KAAK;IAAA,OAAIA,KAAK;EAAA;AAAC,CAAC,CAAC;AAChKxD,iBAAiB,CAAC4C,GAAG,GAAG/H,mBAAmB,CAAC,MAAM,CAAC"}]}