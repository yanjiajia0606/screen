{"remainingRequest":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js!/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/common/modelLineProjectionData.js","dependencies":[{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/common/modelLineProjectionData.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/babel.config.js","mtime":1668271197000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js","mtime":456789000000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["assertNever","Position","InjectedTextCursorStops","ModelLineProjectionData","injectionOffsets","injectionOptions","breakOffsets","breakOffsetsVisibleColumn","wrappedTextIndentLength","length","outputLineIndex","startOffset","endOffset","lineLength","getLineLength","outputOffset","Math","max","offsetInInputWithInjection","offsetInInput","i","content","inputOffset","affinity","inputOffsetInInputWithInjection","offsetInInputWithInjectionsToOutputPosition","offsetInInputWithInjections","low","high","mid","midStart","midStop","OutputPosition","outputPositionToOffsetInInputWithInjections","normalizedOffsetInUnwrappedLine","normalizeOffsetInInputWithInjectionsAroundInjections","getMinOutputOffset","getMaxOutputOffset","maxOutputLineIndex","getOutputLineCount","result","injectedText","getInjectedTextAtOffset","hasRightCursorStop","injectedTextIndex","cursorStops","hasLeftCursorStop","index","offset","options","totalInjectedTextLengthBefore","injectedTextStartOffsetInInputWithInjections","injectedTextEndOffsetInInputWithInjections","undefined","cursorStop","Right","Both","Left","InjectedText","baseLineNumber"],"sources":["/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/common/modelLineProjectionData.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { assertNever } from '../../base/common/types.js';\nimport { Position } from './core/position.js';\nimport { InjectedTextCursorStops } from './model.js';\n/**\n * *input*:\n * ```\n * xxxxxxxxxxxxxxxxxxxxxxxxxxx\n * ```\n *\n * -> Applying injections `[i...i]`, *inputWithInjections*:\n * ```\n * xxxxxx[iiiiiiiiii]xxxxxxxxxxxxxxxxx[ii]xxxx\n * ```\n *\n * -> breaking at offsets `|` in `xxxxxx[iiiiiii|iii]xxxxxxxxxxx|xxxxxx[ii]xxxx|`:\n * ```\n * xxxxxx[iiiiiii\n * iii]xxxxxxxxxxx\n * xxxxxx[ii]xxxx\n * ```\n *\n * -> applying wrappedTextIndentLength, *output*:\n * ```\n * xxxxxx[iiiiiii\n *    iii]xxxxxxxxxxx\n *    xxxxxx[ii]xxxx\n * ```\n */\nexport class ModelLineProjectionData {\n    constructor(injectionOffsets, \n    /**\n     * `injectionOptions.length` must equal `injectionOffsets.length`\n     */\n    injectionOptions, \n    /**\n     * Refers to offsets after applying injections to the source.\n     * The last break offset indicates the length of the source after applying injections.\n     */\n    breakOffsets, \n    /**\n     * Refers to offsets after applying injections\n     */\n    breakOffsetsVisibleColumn, wrappedTextIndentLength) {\n        this.injectionOffsets = injectionOffsets;\n        this.injectionOptions = injectionOptions;\n        this.breakOffsets = breakOffsets;\n        this.breakOffsetsVisibleColumn = breakOffsetsVisibleColumn;\n        this.wrappedTextIndentLength = wrappedTextIndentLength;\n    }\n    getOutputLineCount() {\n        return this.breakOffsets.length;\n    }\n    getMinOutputOffset(outputLineIndex) {\n        if (outputLineIndex > 0) {\n            return this.wrappedTextIndentLength;\n        }\n        return 0;\n    }\n    getLineLength(outputLineIndex) {\n        // These offsets refer to model text with injected text.\n        const startOffset = outputLineIndex > 0 ? this.breakOffsets[outputLineIndex - 1] : 0;\n        const endOffset = this.breakOffsets[outputLineIndex];\n        let lineLength = endOffset - startOffset;\n        if (outputLineIndex > 0) {\n            lineLength += this.wrappedTextIndentLength;\n        }\n        return lineLength;\n    }\n    getMaxOutputOffset(outputLineIndex) {\n        return this.getLineLength(outputLineIndex);\n    }\n    translateToInputOffset(outputLineIndex, outputOffset) {\n        if (outputLineIndex > 0) {\n            outputOffset = Math.max(0, outputOffset - this.wrappedTextIndentLength);\n        }\n        const offsetInInputWithInjection = outputLineIndex === 0 ? outputOffset : this.breakOffsets[outputLineIndex - 1] + outputOffset;\n        let offsetInInput = offsetInInputWithInjection;\n        if (this.injectionOffsets !== null) {\n            for (let i = 0; i < this.injectionOffsets.length; i++) {\n                if (offsetInInput > this.injectionOffsets[i]) {\n                    if (offsetInInput < this.injectionOffsets[i] + this.injectionOptions[i].content.length) {\n                        // `inputOffset` is within injected text\n                        offsetInInput = this.injectionOffsets[i];\n                    }\n                    else {\n                        offsetInInput -= this.injectionOptions[i].content.length;\n                    }\n                }\n                else {\n                    break;\n                }\n            }\n        }\n        return offsetInInput;\n    }\n    translateToOutputPosition(inputOffset, affinity = 2 /* PositionAffinity.None */) {\n        let inputOffsetInInputWithInjection = inputOffset;\n        if (this.injectionOffsets !== null) {\n            for (let i = 0; i < this.injectionOffsets.length; i++) {\n                if (inputOffset < this.injectionOffsets[i]) {\n                    break;\n                }\n                if (affinity !== 1 /* PositionAffinity.Right */ && inputOffset === this.injectionOffsets[i]) {\n                    break;\n                }\n                inputOffsetInInputWithInjection += this.injectionOptions[i].content.length;\n            }\n        }\n        return this.offsetInInputWithInjectionsToOutputPosition(inputOffsetInInputWithInjection, affinity);\n    }\n    offsetInInputWithInjectionsToOutputPosition(offsetInInputWithInjections, affinity = 2 /* PositionAffinity.None */) {\n        let low = 0;\n        let high = this.breakOffsets.length - 1;\n        let mid = 0;\n        let midStart = 0;\n        while (low <= high) {\n            mid = low + ((high - low) / 2) | 0;\n            const midStop = this.breakOffsets[mid];\n            midStart = mid > 0 ? this.breakOffsets[mid - 1] : 0;\n            if (affinity === 0 /* PositionAffinity.Left */) {\n                if (offsetInInputWithInjections <= midStart) {\n                    high = mid - 1;\n                }\n                else if (offsetInInputWithInjections > midStop) {\n                    low = mid + 1;\n                }\n                else {\n                    break;\n                }\n            }\n            else {\n                if (offsetInInputWithInjections < midStart) {\n                    high = mid - 1;\n                }\n                else if (offsetInInputWithInjections >= midStop) {\n                    low = mid + 1;\n                }\n                else {\n                    break;\n                }\n            }\n        }\n        let outputOffset = offsetInInputWithInjections - midStart;\n        if (mid > 0) {\n            outputOffset += this.wrappedTextIndentLength;\n        }\n        return new OutputPosition(mid, outputOffset);\n    }\n    normalizeOutputPosition(outputLineIndex, outputOffset, affinity) {\n        if (this.injectionOffsets !== null) {\n            const offsetInInputWithInjections = this.outputPositionToOffsetInInputWithInjections(outputLineIndex, outputOffset);\n            const normalizedOffsetInUnwrappedLine = this.normalizeOffsetInInputWithInjectionsAroundInjections(offsetInInputWithInjections, affinity);\n            if (normalizedOffsetInUnwrappedLine !== offsetInInputWithInjections) {\n                // injected text caused a change\n                return this.offsetInInputWithInjectionsToOutputPosition(normalizedOffsetInUnwrappedLine, affinity);\n            }\n        }\n        if (affinity === 0 /* PositionAffinity.Left */) {\n            if (outputLineIndex > 0 && outputOffset === this.getMinOutputOffset(outputLineIndex)) {\n                return new OutputPosition(outputLineIndex - 1, this.getMaxOutputOffset(outputLineIndex - 1));\n            }\n        }\n        else if (affinity === 1 /* PositionAffinity.Right */) {\n            const maxOutputLineIndex = this.getOutputLineCount() - 1;\n            if (outputLineIndex < maxOutputLineIndex && outputOffset === this.getMaxOutputOffset(outputLineIndex)) {\n                return new OutputPosition(outputLineIndex + 1, this.getMinOutputOffset(outputLineIndex + 1));\n            }\n        }\n        return new OutputPosition(outputLineIndex, outputOffset);\n    }\n    outputPositionToOffsetInInputWithInjections(outputLineIndex, outputOffset) {\n        if (outputLineIndex > 0) {\n            outputOffset = Math.max(0, outputOffset - this.wrappedTextIndentLength);\n        }\n        const result = (outputLineIndex > 0 ? this.breakOffsets[outputLineIndex - 1] : 0) + outputOffset;\n        return result;\n    }\n    normalizeOffsetInInputWithInjectionsAroundInjections(offsetInInputWithInjections, affinity) {\n        const injectedText = this.getInjectedTextAtOffset(offsetInInputWithInjections);\n        if (!injectedText) {\n            return offsetInInputWithInjections;\n        }\n        if (affinity === 2 /* PositionAffinity.None */) {\n            if (offsetInInputWithInjections === injectedText.offsetInInputWithInjections + injectedText.length\n                && hasRightCursorStop(this.injectionOptions[injectedText.injectedTextIndex].cursorStops)) {\n                return injectedText.offsetInInputWithInjections + injectedText.length;\n            }\n            else {\n                let result = injectedText.offsetInInputWithInjections;\n                if (hasLeftCursorStop(this.injectionOptions[injectedText.injectedTextIndex].cursorStops)) {\n                    return result;\n                }\n                let index = injectedText.injectedTextIndex - 1;\n                while (index >= 0 && this.injectionOffsets[index] === this.injectionOffsets[injectedText.injectedTextIndex]) {\n                    if (hasRightCursorStop(this.injectionOptions[index].cursorStops)) {\n                        break;\n                    }\n                    result -= this.injectionOptions[index].content.length;\n                    if (hasLeftCursorStop(this.injectionOptions[index].cursorStops)) {\n                        break;\n                    }\n                    index--;\n                }\n                return result;\n            }\n        }\n        else if (affinity === 1 /* PositionAffinity.Right */ || affinity === 4 /* PositionAffinity.RightOfInjectedText */) {\n            let result = injectedText.offsetInInputWithInjections + injectedText.length;\n            let index = injectedText.injectedTextIndex;\n            // traverse all injected text that touch each other\n            while (index + 1 < this.injectionOffsets.length && this.injectionOffsets[index + 1] === this.injectionOffsets[index]) {\n                result += this.injectionOptions[index + 1].content.length;\n                index++;\n            }\n            return result;\n        }\n        else if (affinity === 0 /* PositionAffinity.Left */ || affinity === 3 /* PositionAffinity.LeftOfInjectedText */) {\n            // affinity is left\n            let result = injectedText.offsetInInputWithInjections;\n            let index = injectedText.injectedTextIndex;\n            // traverse all injected text that touch each other\n            while (index - 1 >= 0 && this.injectionOffsets[index - 1] === this.injectionOffsets[index]) {\n                result -= this.injectionOptions[index - 1].content.length;\n                index--;\n            }\n            return result;\n        }\n        assertNever(affinity);\n    }\n    getInjectedText(outputLineIndex, outputOffset) {\n        const offset = this.outputPositionToOffsetInInputWithInjections(outputLineIndex, outputOffset);\n        const injectedText = this.getInjectedTextAtOffset(offset);\n        if (!injectedText) {\n            return null;\n        }\n        return {\n            options: this.injectionOptions[injectedText.injectedTextIndex]\n        };\n    }\n    getInjectedTextAtOffset(offsetInInputWithInjections) {\n        const injectionOffsets = this.injectionOffsets;\n        const injectionOptions = this.injectionOptions;\n        if (injectionOffsets !== null) {\n            let totalInjectedTextLengthBefore = 0;\n            for (let i = 0; i < injectionOffsets.length; i++) {\n                const length = injectionOptions[i].content.length;\n                const injectedTextStartOffsetInInputWithInjections = injectionOffsets[i] + totalInjectedTextLengthBefore;\n                const injectedTextEndOffsetInInputWithInjections = injectionOffsets[i] + totalInjectedTextLengthBefore + length;\n                if (injectedTextStartOffsetInInputWithInjections > offsetInInputWithInjections) {\n                    // Injected text starts later.\n                    break; // All later injected texts have an even larger offset.\n                }\n                if (offsetInInputWithInjections <= injectedTextEndOffsetInInputWithInjections) {\n                    // Injected text ends after or with the given position (but also starts with or before it).\n                    return {\n                        injectedTextIndex: i,\n                        offsetInInputWithInjections: injectedTextStartOffsetInInputWithInjections,\n                        length\n                    };\n                }\n                totalInjectedTextLengthBefore += length;\n            }\n        }\n        return undefined;\n    }\n}\nfunction hasRightCursorStop(cursorStop) {\n    if (cursorStop === null || cursorStop === undefined) {\n        return true;\n    }\n    return cursorStop === InjectedTextCursorStops.Right || cursorStop === InjectedTextCursorStops.Both;\n}\nfunction hasLeftCursorStop(cursorStop) {\n    if (cursorStop === null || cursorStop === undefined) {\n        return true;\n    }\n    return cursorStop === InjectedTextCursorStops.Left || cursorStop === InjectedTextCursorStops.Both;\n}\nexport class InjectedText {\n    constructor(options) {\n        this.options = options;\n    }\n}\nexport class OutputPosition {\n    constructor(outputLineIndex, outputOffset) {\n        this.outputLineIndex = outputLineIndex;\n        this.outputOffset = outputOffset;\n    }\n    toString() {\n        return `${this.outputLineIndex}:${this.outputOffset}`;\n    }\n    toPosition(baseLineNumber) {\n        return new Position(baseLineNumber + this.outputLineIndex, this.outputOffset + 1);\n    }\n}\n"],"mappings":"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"}]}