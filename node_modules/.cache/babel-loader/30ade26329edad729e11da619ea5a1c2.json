{"remainingRequest":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js!/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/common/cursor/cursorTypeOperations.js","dependencies":[{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/common/cursor/cursorTypeOperations.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/babel.config.js","mtime":1668271197000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js","mtime":456789000000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["onUnexpectedError","strings","ReplaceCommand","ReplaceCommandWithOffsetCursorState","ReplaceCommandWithoutChangingPosition","ReplaceCommandThatPreservesSelection","ShiftCommand","CompositionSurroundSelectionCommand","SurroundSelectionCommand","EditOperationResult","isQuote","getMapForWordSeparators","Range","Position","IndentAction","getIndentationAtPosition","createScopedLineTokens","getIndentActionForType","getIndentForEnter","getInheritIndentForLine","getEnterAction","TypeOperations","config","model","selections","commands","i","len","length","isUnshift","tabSize","indentSize","insertSpaces","useTabStops","autoIndent","languageConfigurationService","indentation","count","shiftIndent","unshiftIndent","text","shouldPushStackElementBefore","shouldPushStackElementAfter","pasteOnNewLine","selection","position","getPosition","isEmpty","indexOf","typeSelection","lineNumber","multicursorText","multiCursorPaste","charCodeAt","substr","lines","splitLines","distributedPaste","_distributePasteToCursors","sort","compareRangesUsingStarts","_distributedPaste","_simplePaste","action","expectedIndentAction","lastLineNumber","lineText","getLineContent","nonWhitespaceIdx","lastNonWhitespaceIndex","maxColumn","getLineMaxColumn","expectedEnterAction","appendText","Indent","Outdent","normalizeIndentation","insertsAutoWhitespace","typeText","getStartPosition","visibleColumnFromColumn","spacesCnt","startLineNumber","test","tokenization","isCheapToTokenize","goodIndent","_goodIndentForLine","possibleTypeText","startsWith","_replaceJumpToNextIndent","endLineNumber","lineMaxColumn","startColumn","endColumn","prevEditOperationType","replacePrevCharCnt","replaceNextCharCnt","positionDelta","map","_compositionType","shouldPushStackElementBetween","pos","Math","max","column","min","range","oldText","getValueInRange","keepPosition","_typeCommand","getLeadingWhitespace","substring","r","indentAction","None","IndentOutdent","normalIndent","increasedIndent","actualIndentation","ir","indent","oldEndViewColumn","getEndPosition","oldEndColumn","newLineContent","firstNonWhitespace","firstNonWhitespaceIndex","setEndPosition","afterEnter","offset","ceil","ch","currentIndentation","getLineFirstNonWhitespaceColumn","autoClosedCharacters","autoClosingOvertype","autoClosingPairs","autoClosingPairsCloseSingleChar","has","afterCharacter","charAt","chIsQuote","beforeCharacter","found","j","lenJ","autoClosedCharacter","lineAfter","nextChar","potentialStartingBraces","autoClosingPairsOpenByStart","get","potentialClosingBraces","autoClosingPairsCloseByStart","isBeforeStartingBrace","some","x","open","isBeforeClosingBrace","close","positions","candidates","autoClosingPairsOpenByEnd","result","candidate","candidateIsMatch","relevantText","pair","lastChar","autoClosingPairsCloseByEnd","includes","endsWith","chIsAlreadyTyped","autoCloseConfig","autoClosingQuotes","autoClosingBrackets","shouldAutoCloseBefore","quote","bracket","s","beforeColumn","afterColumn","_findAutoClosingPairOpen","p","containedPair","_findContainedAutoClosingPair","containedPairClose","isContainedPairPresent","lineBefore","characterAfter","isBeforeCloseBrace","_isBeforeClosingBrace","wordSeparators","characterBefore","forceTokenization","lineTokens","getLineTokens","scopedLineTokens","shouldAutoClose","firstCharOffset","neutralCharacter","findNeutralCharacter","tokenType","getTokenTypeIfInsertingCharacter","isOK","autoClosingPairClose","TypeWithAutoClosingCommand","autoSurround","_shouldSurroundChar","surroundingPairs","hasOwnProperty","isTypingAQuoteCharacter","selectionContainsOnlyWhitespace","startIndex","endIndex","selectedText","selectionText","closeCharacter","electricChars","electricAction","onElectricCharacter","e","matchOpenBracket","lastIndexOf","match","bracketPairs","findMatchingBracketUp","matchLine","matchLineIndentation","newIndentation","lineFirstNonBlankColumn","prefix","command","getTypingOperation","compositions","insertedText","composition","hasDeletion","deletedText","deletedSelectionStart","deletedSelectionEnd","push","_isAutoClosingOvertype","positionLineNumber","positionColumn","_getAutoClosingPairClose","_runAutoClosingOpenCharType","isDoingComposition","_enter","_isAutoIndentType","autoIndentFails","_runAutoIndentType","_runAutoClosingOvertype","_isSurroundSelectionType","_runSurroundSelectionType","_isTypeInterceptorElectricChar","_typeInterceptorElectricChar","opType","str","openCharacter","insertOpenCharacter","_openCharacter","_closeCharacter","closeCharacterRange","enclosingRange","helper","inverseEditOperations","getInverseEditOperations","CompositionOutcome","insertedSelectionStart","insertedSelectionEnd","typedText","previousTypingOperation","typingOperation","isTypingOperation","normalizeOperationType","type"],"sources":["/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/common/cursor/cursorTypeOperations.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { onUnexpectedError } from '../../../base/common/errors.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { ReplaceCommand, ReplaceCommandWithOffsetCursorState, ReplaceCommandWithoutChangingPosition, ReplaceCommandThatPreservesSelection } from '../commands/replaceCommand.js';\nimport { ShiftCommand } from '../commands/shiftCommand.js';\nimport { CompositionSurroundSelectionCommand, SurroundSelectionCommand } from '../commands/surroundSelectionCommand.js';\nimport { EditOperationResult, isQuote } from '../cursorCommon.js';\nimport { getMapForWordSeparators } from '../core/wordCharacterClassifier.js';\nimport { Range } from '../core/range.js';\nimport { Position } from '../core/position.js';\nimport { IndentAction } from '../languages/languageConfiguration.js';\nimport { getIndentationAtPosition } from '../languages/languageConfigurationRegistry.js';\nimport { createScopedLineTokens } from '../languages/supports.js';\nimport { getIndentActionForType, getIndentForEnter, getInheritIndentForLine } from '../languages/autoIndent.js';\nimport { getEnterAction } from '../languages/enterAction.js';\nexport class TypeOperations {\n    static indent(config, model, selections) {\n        if (model === null || selections === null) {\n            return [];\n        }\n        const commands = [];\n        for (let i = 0, len = selections.length; i < len; i++) {\n            commands[i] = new ShiftCommand(selections[i], {\n                isUnshift: false,\n                tabSize: config.tabSize,\n                indentSize: config.indentSize,\n                insertSpaces: config.insertSpaces,\n                useTabStops: config.useTabStops,\n                autoIndent: config.autoIndent\n            }, config.languageConfigurationService);\n        }\n        return commands;\n    }\n    static outdent(config, model, selections) {\n        const commands = [];\n        for (let i = 0, len = selections.length; i < len; i++) {\n            commands[i] = new ShiftCommand(selections[i], {\n                isUnshift: true,\n                tabSize: config.tabSize,\n                indentSize: config.indentSize,\n                insertSpaces: config.insertSpaces,\n                useTabStops: config.useTabStops,\n                autoIndent: config.autoIndent\n            }, config.languageConfigurationService);\n        }\n        return commands;\n    }\n    static shiftIndent(config, indentation, count) {\n        count = count || 1;\n        return ShiftCommand.shiftIndent(indentation, indentation.length + count, config.tabSize, config.indentSize, config.insertSpaces);\n    }\n    static unshiftIndent(config, indentation, count) {\n        count = count || 1;\n        return ShiftCommand.unshiftIndent(indentation, indentation.length + count, config.tabSize, config.indentSize, config.insertSpaces);\n    }\n    static _distributedPaste(config, model, selections, text) {\n        const commands = [];\n        for (let i = 0, len = selections.length; i < len; i++) {\n            commands[i] = new ReplaceCommand(selections[i], text[i]);\n        }\n        return new EditOperationResult(0 /* EditOperationType.Other */, commands, {\n            shouldPushStackElementBefore: true,\n            shouldPushStackElementAfter: true\n        });\n    }\n    static _simplePaste(config, model, selections, text, pasteOnNewLine) {\n        const commands = [];\n        for (let i = 0, len = selections.length; i < len; i++) {\n            const selection = selections[i];\n            const position = selection.getPosition();\n            if (pasteOnNewLine && !selection.isEmpty()) {\n                pasteOnNewLine = false;\n            }\n            if (pasteOnNewLine && text.indexOf('\\n') !== text.length - 1) {\n                pasteOnNewLine = false;\n            }\n            if (pasteOnNewLine) {\n                // Paste entire line at the beginning of line\n                const typeSelection = new Range(position.lineNumber, 1, position.lineNumber, 1);\n                commands[i] = new ReplaceCommandThatPreservesSelection(typeSelection, text, selection, true);\n            }\n            else {\n                commands[i] = new ReplaceCommand(selection, text);\n            }\n        }\n        return new EditOperationResult(0 /* EditOperationType.Other */, commands, {\n            shouldPushStackElementBefore: true,\n            shouldPushStackElementAfter: true\n        });\n    }\n    static _distributePasteToCursors(config, selections, text, pasteOnNewLine, multicursorText) {\n        if (pasteOnNewLine) {\n            return null;\n        }\n        if (selections.length === 1) {\n            return null;\n        }\n        if (multicursorText && multicursorText.length === selections.length) {\n            return multicursorText;\n        }\n        if (config.multiCursorPaste === 'spread') {\n            // Try to spread the pasted text in case the line count matches the cursor count\n            // Remove trailing \\n if present\n            if (text.charCodeAt(text.length - 1) === 10 /* CharCode.LineFeed */) {\n                text = text.substr(0, text.length - 1);\n            }\n            // Remove trailing \\r if present\n            if (text.charCodeAt(text.length - 1) === 13 /* CharCode.CarriageReturn */) {\n                text = text.substr(0, text.length - 1);\n            }\n            const lines = strings.splitLines(text);\n            if (lines.length === selections.length) {\n                return lines;\n            }\n        }\n        return null;\n    }\n    static paste(config, model, selections, text, pasteOnNewLine, multicursorText) {\n        const distributedPaste = this._distributePasteToCursors(config, selections, text, pasteOnNewLine, multicursorText);\n        if (distributedPaste) {\n            selections = selections.sort(Range.compareRangesUsingStarts);\n            return this._distributedPaste(config, model, selections, distributedPaste);\n        }\n        else {\n            return this._simplePaste(config, model, selections, text, pasteOnNewLine);\n        }\n    }\n    static _goodIndentForLine(config, model, lineNumber) {\n        let action = null;\n        let indentation = '';\n        const expectedIndentAction = getInheritIndentForLine(config.autoIndent, model, lineNumber, false, config.languageConfigurationService);\n        if (expectedIndentAction) {\n            action = expectedIndentAction.action;\n            indentation = expectedIndentAction.indentation;\n        }\n        else if (lineNumber > 1) {\n            let lastLineNumber;\n            for (lastLineNumber = lineNumber - 1; lastLineNumber >= 1; lastLineNumber--) {\n                const lineText = model.getLineContent(lastLineNumber);\n                const nonWhitespaceIdx = strings.lastNonWhitespaceIndex(lineText);\n                if (nonWhitespaceIdx >= 0) {\n                    break;\n                }\n            }\n            if (lastLineNumber < 1) {\n                // No previous line with content found\n                return null;\n            }\n            const maxColumn = model.getLineMaxColumn(lastLineNumber);\n            const expectedEnterAction = getEnterAction(config.autoIndent, model, new Range(lastLineNumber, maxColumn, lastLineNumber, maxColumn), config.languageConfigurationService);\n            if (expectedEnterAction) {\n                indentation = expectedEnterAction.indentation + expectedEnterAction.appendText;\n            }\n        }\n        if (action) {\n            if (action === IndentAction.Indent) {\n                indentation = TypeOperations.shiftIndent(config, indentation);\n            }\n            if (action === IndentAction.Outdent) {\n                indentation = TypeOperations.unshiftIndent(config, indentation);\n            }\n            indentation = config.normalizeIndentation(indentation);\n        }\n        if (!indentation) {\n            return null;\n        }\n        return indentation;\n    }\n    static _replaceJumpToNextIndent(config, model, selection, insertsAutoWhitespace) {\n        let typeText = '';\n        const position = selection.getStartPosition();\n        if (config.insertSpaces) {\n            const visibleColumnFromColumn = config.visibleColumnFromColumn(model, position);\n            const indentSize = config.indentSize;\n            const spacesCnt = indentSize - (visibleColumnFromColumn % indentSize);\n            for (let i = 0; i < spacesCnt; i++) {\n                typeText += ' ';\n            }\n        }\n        else {\n            typeText = '\\t';\n        }\n        return new ReplaceCommand(selection, typeText, insertsAutoWhitespace);\n    }\n    static tab(config, model, selections) {\n        const commands = [];\n        for (let i = 0, len = selections.length; i < len; i++) {\n            const selection = selections[i];\n            if (selection.isEmpty()) {\n                const lineText = model.getLineContent(selection.startLineNumber);\n                if (/^\\s*$/.test(lineText) && model.tokenization.isCheapToTokenize(selection.startLineNumber)) {\n                    let goodIndent = this._goodIndentForLine(config, model, selection.startLineNumber);\n                    goodIndent = goodIndent || '\\t';\n                    const possibleTypeText = config.normalizeIndentation(goodIndent);\n                    if (!lineText.startsWith(possibleTypeText)) {\n                        commands[i] = new ReplaceCommand(new Range(selection.startLineNumber, 1, selection.startLineNumber, lineText.length + 1), possibleTypeText, true);\n                        continue;\n                    }\n                }\n                commands[i] = this._replaceJumpToNextIndent(config, model, selection, true);\n            }\n            else {\n                if (selection.startLineNumber === selection.endLineNumber) {\n                    const lineMaxColumn = model.getLineMaxColumn(selection.startLineNumber);\n                    if (selection.startColumn !== 1 || selection.endColumn !== lineMaxColumn) {\n                        // This is a single line selection that is not the entire line\n                        commands[i] = this._replaceJumpToNextIndent(config, model, selection, false);\n                        continue;\n                    }\n                }\n                commands[i] = new ShiftCommand(selection, {\n                    isUnshift: false,\n                    tabSize: config.tabSize,\n                    indentSize: config.indentSize,\n                    insertSpaces: config.insertSpaces,\n                    useTabStops: config.useTabStops,\n                    autoIndent: config.autoIndent\n                }, config.languageConfigurationService);\n            }\n        }\n        return commands;\n    }\n    static compositionType(prevEditOperationType, config, model, selections, text, replacePrevCharCnt, replaceNextCharCnt, positionDelta) {\n        const commands = selections.map(selection => this._compositionType(model, selection, text, replacePrevCharCnt, replaceNextCharCnt, positionDelta));\n        return new EditOperationResult(4 /* EditOperationType.TypingOther */, commands, {\n            shouldPushStackElementBefore: shouldPushStackElementBetween(prevEditOperationType, 4 /* EditOperationType.TypingOther */),\n            shouldPushStackElementAfter: false\n        });\n    }\n    static _compositionType(model, selection, text, replacePrevCharCnt, replaceNextCharCnt, positionDelta) {\n        if (!selection.isEmpty()) {\n            // looks like https://github.com/microsoft/vscode/issues/2773\n            // where a cursor operation occurred before a canceled composition\n            // => ignore composition\n            return null;\n        }\n        const pos = selection.getPosition();\n        const startColumn = Math.max(1, pos.column - replacePrevCharCnt);\n        const endColumn = Math.min(model.getLineMaxColumn(pos.lineNumber), pos.column + replaceNextCharCnt);\n        const range = new Range(pos.lineNumber, startColumn, pos.lineNumber, endColumn);\n        const oldText = model.getValueInRange(range);\n        if (oldText === text && positionDelta === 0) {\n            // => ignore composition that doesn't do anything\n            return null;\n        }\n        return new ReplaceCommandWithOffsetCursorState(range, text, 0, positionDelta);\n    }\n    static _typeCommand(range, text, keepPosition) {\n        if (keepPosition) {\n            return new ReplaceCommandWithoutChangingPosition(range, text, true);\n        }\n        else {\n            return new ReplaceCommand(range, text, true);\n        }\n    }\n    static _enter(config, model, keepPosition, range) {\n        if (config.autoIndent === 0 /* EditorAutoIndentStrategy.None */) {\n            return TypeOperations._typeCommand(range, '\\n', keepPosition);\n        }\n        if (!model.tokenization.isCheapToTokenize(range.getStartPosition().lineNumber) || config.autoIndent === 1 /* EditorAutoIndentStrategy.Keep */) {\n            const lineText = model.getLineContent(range.startLineNumber);\n            const indentation = strings.getLeadingWhitespace(lineText).substring(0, range.startColumn - 1);\n            return TypeOperations._typeCommand(range, '\\n' + config.normalizeIndentation(indentation), keepPosition);\n        }\n        const r = getEnterAction(config.autoIndent, model, range, config.languageConfigurationService);\n        if (r) {\n            if (r.indentAction === IndentAction.None) {\n                // Nothing special\n                return TypeOperations._typeCommand(range, '\\n' + config.normalizeIndentation(r.indentation + r.appendText), keepPosition);\n            }\n            else if (r.indentAction === IndentAction.Indent) {\n                // Indent once\n                return TypeOperations._typeCommand(range, '\\n' + config.normalizeIndentation(r.indentation + r.appendText), keepPosition);\n            }\n            else if (r.indentAction === IndentAction.IndentOutdent) {\n                // Ultra special\n                const normalIndent = config.normalizeIndentation(r.indentation);\n                const increasedIndent = config.normalizeIndentation(r.indentation + r.appendText);\n                const typeText = '\\n' + increasedIndent + '\\n' + normalIndent;\n                if (keepPosition) {\n                    return new ReplaceCommandWithoutChangingPosition(range, typeText, true);\n                }\n                else {\n                    return new ReplaceCommandWithOffsetCursorState(range, typeText, -1, increasedIndent.length - normalIndent.length, true);\n                }\n            }\n            else if (r.indentAction === IndentAction.Outdent) {\n                const actualIndentation = TypeOperations.unshiftIndent(config, r.indentation);\n                return TypeOperations._typeCommand(range, '\\n' + config.normalizeIndentation(actualIndentation + r.appendText), keepPosition);\n            }\n        }\n        const lineText = model.getLineContent(range.startLineNumber);\n        const indentation = strings.getLeadingWhitespace(lineText).substring(0, range.startColumn - 1);\n        if (config.autoIndent >= 4 /* EditorAutoIndentStrategy.Full */) {\n            const ir = getIndentForEnter(config.autoIndent, model, range, {\n                unshiftIndent: (indent) => {\n                    return TypeOperations.unshiftIndent(config, indent);\n                },\n                shiftIndent: (indent) => {\n                    return TypeOperations.shiftIndent(config, indent);\n                },\n                normalizeIndentation: (indent) => {\n                    return config.normalizeIndentation(indent);\n                }\n            }, config.languageConfigurationService);\n            if (ir) {\n                let oldEndViewColumn = config.visibleColumnFromColumn(model, range.getEndPosition());\n                const oldEndColumn = range.endColumn;\n                const newLineContent = model.getLineContent(range.endLineNumber);\n                const firstNonWhitespace = strings.firstNonWhitespaceIndex(newLineContent);\n                if (firstNonWhitespace >= 0) {\n                    range = range.setEndPosition(range.endLineNumber, Math.max(range.endColumn, firstNonWhitespace + 1));\n                }\n                else {\n                    range = range.setEndPosition(range.endLineNumber, model.getLineMaxColumn(range.endLineNumber));\n                }\n                if (keepPosition) {\n                    return new ReplaceCommandWithoutChangingPosition(range, '\\n' + config.normalizeIndentation(ir.afterEnter), true);\n                }\n                else {\n                    let offset = 0;\n                    if (oldEndColumn <= firstNonWhitespace + 1) {\n                        if (!config.insertSpaces) {\n                            oldEndViewColumn = Math.ceil(oldEndViewColumn / config.indentSize);\n                        }\n                        offset = Math.min(oldEndViewColumn + 1 - config.normalizeIndentation(ir.afterEnter).length - 1, 0);\n                    }\n                    return new ReplaceCommandWithOffsetCursorState(range, '\\n' + config.normalizeIndentation(ir.afterEnter), 0, offset, true);\n                }\n            }\n        }\n        return TypeOperations._typeCommand(range, '\\n' + config.normalizeIndentation(indentation), keepPosition);\n    }\n    static _isAutoIndentType(config, model, selections) {\n        if (config.autoIndent < 4 /* EditorAutoIndentStrategy.Full */) {\n            return false;\n        }\n        for (let i = 0, len = selections.length; i < len; i++) {\n            if (!model.tokenization.isCheapToTokenize(selections[i].getEndPosition().lineNumber)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    static _runAutoIndentType(config, model, range, ch) {\n        const currentIndentation = getIndentationAtPosition(model, range.startLineNumber, range.startColumn);\n        const actualIndentation = getIndentActionForType(config.autoIndent, model, range, ch, {\n            shiftIndent: (indentation) => {\n                return TypeOperations.shiftIndent(config, indentation);\n            },\n            unshiftIndent: (indentation) => {\n                return TypeOperations.unshiftIndent(config, indentation);\n            },\n        }, config.languageConfigurationService);\n        if (actualIndentation === null) {\n            return null;\n        }\n        if (actualIndentation !== config.normalizeIndentation(currentIndentation)) {\n            const firstNonWhitespace = model.getLineFirstNonWhitespaceColumn(range.startLineNumber);\n            if (firstNonWhitespace === 0) {\n                return TypeOperations._typeCommand(new Range(range.startLineNumber, 1, range.endLineNumber, range.endColumn), config.normalizeIndentation(actualIndentation) + ch, false);\n            }\n            else {\n                return TypeOperations._typeCommand(new Range(range.startLineNumber, 1, range.endLineNumber, range.endColumn), config.normalizeIndentation(actualIndentation) +\n                    model.getLineContent(range.startLineNumber).substring(firstNonWhitespace - 1, range.startColumn - 1) + ch, false);\n            }\n        }\n        return null;\n    }\n    static _isAutoClosingOvertype(config, model, selections, autoClosedCharacters, ch) {\n        if (config.autoClosingOvertype === 'never') {\n            return false;\n        }\n        if (!config.autoClosingPairs.autoClosingPairsCloseSingleChar.has(ch)) {\n            return false;\n        }\n        for (let i = 0, len = selections.length; i < len; i++) {\n            const selection = selections[i];\n            if (!selection.isEmpty()) {\n                return false;\n            }\n            const position = selection.getPosition();\n            const lineText = model.getLineContent(position.lineNumber);\n            const afterCharacter = lineText.charAt(position.column - 1);\n            if (afterCharacter !== ch) {\n                return false;\n            }\n            // Do not over-type quotes after a backslash\n            const chIsQuote = isQuote(ch);\n            const beforeCharacter = position.column > 2 ? lineText.charCodeAt(position.column - 2) : 0 /* CharCode.Null */;\n            if (beforeCharacter === 92 /* CharCode.Backslash */ && chIsQuote) {\n                return false;\n            }\n            // Must over-type a closing character typed by the editor\n            if (config.autoClosingOvertype === 'auto') {\n                let found = false;\n                for (let j = 0, lenJ = autoClosedCharacters.length; j < lenJ; j++) {\n                    const autoClosedCharacter = autoClosedCharacters[j];\n                    if (position.lineNumber === autoClosedCharacter.startLineNumber && position.column === autoClosedCharacter.startColumn) {\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    static _runAutoClosingOvertype(prevEditOperationType, config, model, selections, ch) {\n        const commands = [];\n        for (let i = 0, len = selections.length; i < len; i++) {\n            const selection = selections[i];\n            const position = selection.getPosition();\n            const typeSelection = new Range(position.lineNumber, position.column, position.lineNumber, position.column + 1);\n            commands[i] = new ReplaceCommand(typeSelection, ch);\n        }\n        return new EditOperationResult(4 /* EditOperationType.TypingOther */, commands, {\n            shouldPushStackElementBefore: shouldPushStackElementBetween(prevEditOperationType, 4 /* EditOperationType.TypingOther */),\n            shouldPushStackElementAfter: false\n        });\n    }\n    static _isBeforeClosingBrace(config, lineAfter) {\n        // If the start of lineAfter can be interpretted as both a starting or ending brace, default to returning false\n        const nextChar = lineAfter.charAt(0);\n        const potentialStartingBraces = config.autoClosingPairs.autoClosingPairsOpenByStart.get(nextChar) || [];\n        const potentialClosingBraces = config.autoClosingPairs.autoClosingPairsCloseByStart.get(nextChar) || [];\n        const isBeforeStartingBrace = potentialStartingBraces.some(x => lineAfter.startsWith(x.open));\n        const isBeforeClosingBrace = potentialClosingBraces.some(x => lineAfter.startsWith(x.close));\n        return !isBeforeStartingBrace && isBeforeClosingBrace;\n    }\n    /**\n     * Determine if typing `ch` at all `positions` in the `model` results in an\n     * auto closing open sequence being typed.\n     *\n     * Auto closing open sequences can consist of multiple characters, which\n     * can lead to ambiguities. In such a case, the longest auto-closing open\n     * sequence is returned.\n     */\n    static _findAutoClosingPairOpen(config, model, positions, ch) {\n        const candidates = config.autoClosingPairs.autoClosingPairsOpenByEnd.get(ch);\n        if (!candidates) {\n            return null;\n        }\n        // Determine which auto-closing pair it is\n        let result = null;\n        for (const candidate of candidates) {\n            if (result === null || candidate.open.length > result.open.length) {\n                let candidateIsMatch = true;\n                for (const position of positions) {\n                    const relevantText = model.getValueInRange(new Range(position.lineNumber, position.column - candidate.open.length + 1, position.lineNumber, position.column));\n                    if (relevantText + ch !== candidate.open) {\n                        candidateIsMatch = false;\n                        break;\n                    }\n                }\n                if (candidateIsMatch) {\n                    result = candidate;\n                }\n            }\n        }\n        return result;\n    }\n    /**\n     * Find another auto-closing pair that is contained by the one passed in.\n     *\n     * e.g. when having [(,)] and [(*,*)] as auto-closing pairs\n     * this method will find [(,)] as a containment pair for [(*,*)]\n     */\n    static _findContainedAutoClosingPair(config, pair) {\n        if (pair.open.length <= 1) {\n            return null;\n        }\n        const lastChar = pair.close.charAt(pair.close.length - 1);\n        // get candidates with the same last character as close\n        const candidates = config.autoClosingPairs.autoClosingPairsCloseByEnd.get(lastChar) || [];\n        let result = null;\n        for (const candidate of candidates) {\n            if (candidate.open !== pair.open && pair.open.includes(candidate.open) && pair.close.endsWith(candidate.close)) {\n                if (!result || candidate.open.length > result.open.length) {\n                    result = candidate;\n                }\n            }\n        }\n        return result;\n    }\n    static _getAutoClosingPairClose(config, model, selections, ch, chIsAlreadyTyped) {\n        const chIsQuote = isQuote(ch);\n        const autoCloseConfig = (chIsQuote ? config.autoClosingQuotes : config.autoClosingBrackets);\n        const shouldAutoCloseBefore = (chIsQuote ? config.shouldAutoCloseBefore.quote : config.shouldAutoCloseBefore.bracket);\n        if (autoCloseConfig === 'never') {\n            return null;\n        }\n        for (const selection of selections) {\n            if (!selection.isEmpty()) {\n                return null;\n            }\n        }\n        // This method is called both when typing (regularly) and when composition ends\n        // This means that we need to work with a text buffer where sometimes `ch` is not\n        // there (it is being typed right now) or with a text buffer where `ch` has already been typed\n        //\n        // In order to avoid adding checks for `chIsAlreadyTyped` in all places, we will work\n        // with two conceptual positions, the position before `ch` and the position after `ch`\n        //\n        const positions = selections.map((s) => {\n            const position = s.getPosition();\n            if (chIsAlreadyTyped) {\n                return { lineNumber: position.lineNumber, beforeColumn: position.column - ch.length, afterColumn: position.column };\n            }\n            else {\n                return { lineNumber: position.lineNumber, beforeColumn: position.column, afterColumn: position.column };\n            }\n        });\n        // Find the longest auto-closing open pair in case of multiple ending in `ch`\n        // e.g. when having [f\",\"] and [\",\"], it picks [f\",\"] if the character before is f\n        const pair = this._findAutoClosingPairOpen(config, model, positions.map(p => new Position(p.lineNumber, p.beforeColumn)), ch);\n        if (!pair) {\n            return null;\n        }\n        // Sometimes, it is possible to have two auto-closing pairs that have a containment relationship\n        // e.g. when having [(,)] and [(*,*)]\n        // - when typing (, the resulting state is (|)\n        // - when typing *, the desired resulting state is (*|*), not (*|*))\n        const containedPair = this._findContainedAutoClosingPair(config, pair);\n        const containedPairClose = containedPair ? containedPair.close : '';\n        let isContainedPairPresent = true;\n        for (const position of positions) {\n            const { lineNumber, beforeColumn, afterColumn } = position;\n            const lineText = model.getLineContent(lineNumber);\n            const lineBefore = lineText.substring(0, beforeColumn - 1);\n            const lineAfter = lineText.substring(afterColumn - 1);\n            if (!lineAfter.startsWith(containedPairClose)) {\n                isContainedPairPresent = false;\n            }\n            // Only consider auto closing the pair if an allowed character follows or if another autoclosed pair closing brace follows\n            if (lineAfter.length > 0) {\n                const characterAfter = lineAfter.charAt(0);\n                const isBeforeCloseBrace = TypeOperations._isBeforeClosingBrace(config, lineAfter);\n                if (!isBeforeCloseBrace && !shouldAutoCloseBefore(characterAfter)) {\n                    return null;\n                }\n            }\n            // Do not auto-close ' or \" after a word character\n            if (pair.open.length === 1 && (ch === '\\'' || ch === '\"') && autoCloseConfig !== 'always') {\n                const wordSeparators = getMapForWordSeparators(config.wordSeparators);\n                if (lineBefore.length > 0) {\n                    const characterBefore = lineBefore.charCodeAt(lineBefore.length - 1);\n                    if (wordSeparators.get(characterBefore) === 0 /* WordCharacterClass.Regular */) {\n                        return null;\n                    }\n                }\n            }\n            if (!model.tokenization.isCheapToTokenize(lineNumber)) {\n                // Do not force tokenization\n                return null;\n            }\n            model.tokenization.forceTokenization(lineNumber);\n            const lineTokens = model.tokenization.getLineTokens(lineNumber);\n            const scopedLineTokens = createScopedLineTokens(lineTokens, beforeColumn - 1);\n            if (!pair.shouldAutoClose(scopedLineTokens, beforeColumn - scopedLineTokens.firstCharOffset)) {\n                return null;\n            }\n            // Typing for example a quote could either start a new string, in which case auto-closing is desirable\n            // or it could end a previously started string, in which case auto-closing is not desirable\n            //\n            // In certain cases, it is really not possible to look at the previous token to determine\n            // what would happen. That's why we do something really unusual, we pretend to type a different\n            // character and ask the tokenizer what the outcome of doing that is: after typing a neutral\n            // character, are we in a string (i.e. the quote would most likely end a string) or not?\n            //\n            const neutralCharacter = pair.findNeutralCharacter();\n            if (neutralCharacter) {\n                const tokenType = model.tokenization.getTokenTypeIfInsertingCharacter(lineNumber, beforeColumn, neutralCharacter);\n                if (!pair.isOK(tokenType)) {\n                    return null;\n                }\n            }\n        }\n        if (isContainedPairPresent) {\n            return pair.close.substring(0, pair.close.length - containedPairClose.length);\n        }\n        else {\n            return pair.close;\n        }\n    }\n    static _runAutoClosingOpenCharType(prevEditOperationType, config, model, selections, ch, chIsAlreadyTyped, autoClosingPairClose) {\n        const commands = [];\n        for (let i = 0, len = selections.length; i < len; i++) {\n            const selection = selections[i];\n            commands[i] = new TypeWithAutoClosingCommand(selection, ch, !chIsAlreadyTyped, autoClosingPairClose);\n        }\n        return new EditOperationResult(4 /* EditOperationType.TypingOther */, commands, {\n            shouldPushStackElementBefore: true,\n            shouldPushStackElementAfter: false\n        });\n    }\n    static _shouldSurroundChar(config, ch) {\n        if (isQuote(ch)) {\n            return (config.autoSurround === 'quotes' || config.autoSurround === 'languageDefined');\n        }\n        else {\n            // Character is a bracket\n            return (config.autoSurround === 'brackets' || config.autoSurround === 'languageDefined');\n        }\n    }\n    static _isSurroundSelectionType(config, model, selections, ch) {\n        if (!TypeOperations._shouldSurroundChar(config, ch) || !config.surroundingPairs.hasOwnProperty(ch)) {\n            return false;\n        }\n        const isTypingAQuoteCharacter = isQuote(ch);\n        for (const selection of selections) {\n            if (selection.isEmpty()) {\n                return false;\n            }\n            let selectionContainsOnlyWhitespace = true;\n            for (let lineNumber = selection.startLineNumber; lineNumber <= selection.endLineNumber; lineNumber++) {\n                const lineText = model.getLineContent(lineNumber);\n                const startIndex = (lineNumber === selection.startLineNumber ? selection.startColumn - 1 : 0);\n                const endIndex = (lineNumber === selection.endLineNumber ? selection.endColumn - 1 : lineText.length);\n                const selectedText = lineText.substring(startIndex, endIndex);\n                if (/[^ \\t]/.test(selectedText)) {\n                    // this selected text contains something other than whitespace\n                    selectionContainsOnlyWhitespace = false;\n                    break;\n                }\n            }\n            if (selectionContainsOnlyWhitespace) {\n                return false;\n            }\n            if (isTypingAQuoteCharacter && selection.startLineNumber === selection.endLineNumber && selection.startColumn + 1 === selection.endColumn) {\n                const selectionText = model.getValueInRange(selection);\n                if (isQuote(selectionText)) {\n                    // Typing a quote character on top of another quote character\n                    // => disable surround selection type\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    static _runSurroundSelectionType(prevEditOperationType, config, model, selections, ch) {\n        const commands = [];\n        for (let i = 0, len = selections.length; i < len; i++) {\n            const selection = selections[i];\n            const closeCharacter = config.surroundingPairs[ch];\n            commands[i] = new SurroundSelectionCommand(selection, ch, closeCharacter);\n        }\n        return new EditOperationResult(0 /* EditOperationType.Other */, commands, {\n            shouldPushStackElementBefore: true,\n            shouldPushStackElementAfter: true\n        });\n    }\n    static _isTypeInterceptorElectricChar(config, model, selections) {\n        if (selections.length === 1 && model.tokenization.isCheapToTokenize(selections[0].getEndPosition().lineNumber)) {\n            return true;\n        }\n        return false;\n    }\n    static _typeInterceptorElectricChar(prevEditOperationType, config, model, selection, ch) {\n        if (!config.electricChars.hasOwnProperty(ch) || !selection.isEmpty()) {\n            return null;\n        }\n        const position = selection.getPosition();\n        model.tokenization.forceTokenization(position.lineNumber);\n        const lineTokens = model.tokenization.getLineTokens(position.lineNumber);\n        let electricAction;\n        try {\n            electricAction = config.onElectricCharacter(ch, lineTokens, position.column);\n        }\n        catch (e) {\n            onUnexpectedError(e);\n            return null;\n        }\n        if (!electricAction) {\n            return null;\n        }\n        if (electricAction.matchOpenBracket) {\n            const endColumn = (lineTokens.getLineContent() + ch).lastIndexOf(electricAction.matchOpenBracket) + 1;\n            const match = model.bracketPairs.findMatchingBracketUp(electricAction.matchOpenBracket, {\n                lineNumber: position.lineNumber,\n                column: endColumn\n            }, 500 /* give at most 500ms to compute */);\n            if (match) {\n                if (match.startLineNumber === position.lineNumber) {\n                    // matched something on the same line => no change in indentation\n                    return null;\n                }\n                const matchLine = model.getLineContent(match.startLineNumber);\n                const matchLineIndentation = strings.getLeadingWhitespace(matchLine);\n                const newIndentation = config.normalizeIndentation(matchLineIndentation);\n                const lineText = model.getLineContent(position.lineNumber);\n                const lineFirstNonBlankColumn = model.getLineFirstNonWhitespaceColumn(position.lineNumber) || position.column;\n                const prefix = lineText.substring(lineFirstNonBlankColumn - 1, position.column - 1);\n                const typeText = newIndentation + prefix + ch;\n                const typeSelection = new Range(position.lineNumber, 1, position.lineNumber, position.column);\n                const command = new ReplaceCommand(typeSelection, typeText);\n                return new EditOperationResult(getTypingOperation(typeText, prevEditOperationType), [command], {\n                    shouldPushStackElementBefore: false,\n                    shouldPushStackElementAfter: true\n                });\n            }\n        }\n        return null;\n    }\n    /**\n     * This is very similar with typing, but the character is already in the text buffer!\n     */\n    static compositionEndWithInterceptors(prevEditOperationType, config, model, compositions, selections, autoClosedCharacters) {\n        if (!compositions) {\n            // could not deduce what the composition did\n            return null;\n        }\n        let insertedText = null;\n        for (const composition of compositions) {\n            if (insertedText === null) {\n                insertedText = composition.insertedText;\n            }\n            else if (insertedText !== composition.insertedText) {\n                // not all selections agree on what was typed\n                return null;\n            }\n        }\n        if (!insertedText || insertedText.length !== 1) {\n            // we're only interested in the case where a single character was inserted\n            return null;\n        }\n        const ch = insertedText;\n        let hasDeletion = false;\n        for (const composition of compositions) {\n            if (composition.deletedText.length !== 0) {\n                hasDeletion = true;\n                break;\n            }\n        }\n        if (hasDeletion) {\n            // Check if this could have been a surround selection\n            if (!TypeOperations._shouldSurroundChar(config, ch) || !config.surroundingPairs.hasOwnProperty(ch)) {\n                return null;\n            }\n            const isTypingAQuoteCharacter = isQuote(ch);\n            for (const composition of compositions) {\n                if (composition.deletedSelectionStart !== 0 || composition.deletedSelectionEnd !== composition.deletedText.length) {\n                    // more text was deleted than was selected, so this could not have been a surround selection\n                    return null;\n                }\n                if (/^[ \\t]+$/.test(composition.deletedText)) {\n                    // deleted text was only whitespace\n                    return null;\n                }\n                if (isTypingAQuoteCharacter && isQuote(composition.deletedText)) {\n                    // deleted text was a quote\n                    return null;\n                }\n            }\n            const positions = [];\n            for (const selection of selections) {\n                if (!selection.isEmpty()) {\n                    return null;\n                }\n                positions.push(selection.getPosition());\n            }\n            if (positions.length !== compositions.length) {\n                return null;\n            }\n            const commands = [];\n            for (let i = 0, len = positions.length; i < len; i++) {\n                commands.push(new CompositionSurroundSelectionCommand(positions[i], compositions[i].deletedText, ch));\n            }\n            return new EditOperationResult(4 /* EditOperationType.TypingOther */, commands, {\n                shouldPushStackElementBefore: true,\n                shouldPushStackElementAfter: false\n            });\n        }\n        if (this._isAutoClosingOvertype(config, model, selections, autoClosedCharacters, ch)) {\n            // Unfortunately, the close character is at this point \"doubled\", so we need to delete it...\n            const commands = selections.map(s => new ReplaceCommand(new Range(s.positionLineNumber, s.positionColumn, s.positionLineNumber, s.positionColumn + 1), '', false));\n            return new EditOperationResult(4 /* EditOperationType.TypingOther */, commands, {\n                shouldPushStackElementBefore: true,\n                shouldPushStackElementAfter: false\n            });\n        }\n        const autoClosingPairClose = this._getAutoClosingPairClose(config, model, selections, ch, true);\n        if (autoClosingPairClose !== null) {\n            return this._runAutoClosingOpenCharType(prevEditOperationType, config, model, selections, ch, true, autoClosingPairClose);\n        }\n        return null;\n    }\n    static typeWithInterceptors(isDoingComposition, prevEditOperationType, config, model, selections, autoClosedCharacters, ch) {\n        if (!isDoingComposition && ch === '\\n') {\n            const commands = [];\n            for (let i = 0, len = selections.length; i < len; i++) {\n                commands[i] = TypeOperations._enter(config, model, false, selections[i]);\n            }\n            return new EditOperationResult(4 /* EditOperationType.TypingOther */, commands, {\n                shouldPushStackElementBefore: true,\n                shouldPushStackElementAfter: false,\n            });\n        }\n        if (!isDoingComposition && this._isAutoIndentType(config, model, selections)) {\n            const commands = [];\n            let autoIndentFails = false;\n            for (let i = 0, len = selections.length; i < len; i++) {\n                commands[i] = this._runAutoIndentType(config, model, selections[i], ch);\n                if (!commands[i]) {\n                    autoIndentFails = true;\n                    break;\n                }\n            }\n            if (!autoIndentFails) {\n                return new EditOperationResult(4 /* EditOperationType.TypingOther */, commands, {\n                    shouldPushStackElementBefore: true,\n                    shouldPushStackElementAfter: false,\n                });\n            }\n        }\n        if (this._isAutoClosingOvertype(config, model, selections, autoClosedCharacters, ch)) {\n            return this._runAutoClosingOvertype(prevEditOperationType, config, model, selections, ch);\n        }\n        if (!isDoingComposition) {\n            const autoClosingPairClose = this._getAutoClosingPairClose(config, model, selections, ch, false);\n            if (autoClosingPairClose) {\n                return this._runAutoClosingOpenCharType(prevEditOperationType, config, model, selections, ch, false, autoClosingPairClose);\n            }\n        }\n        if (!isDoingComposition && this._isSurroundSelectionType(config, model, selections, ch)) {\n            return this._runSurroundSelectionType(prevEditOperationType, config, model, selections, ch);\n        }\n        // Electric characters make sense only when dealing with a single cursor,\n        // as multiple cursors typing brackets for example would interfer with bracket matching\n        if (!isDoingComposition && this._isTypeInterceptorElectricChar(config, model, selections)) {\n            const r = this._typeInterceptorElectricChar(prevEditOperationType, config, model, selections[0], ch);\n            if (r) {\n                return r;\n            }\n        }\n        // A simple character type\n        const commands = [];\n        for (let i = 0, len = selections.length; i < len; i++) {\n            commands[i] = new ReplaceCommand(selections[i], ch);\n        }\n        const opType = getTypingOperation(ch, prevEditOperationType);\n        return new EditOperationResult(opType, commands, {\n            shouldPushStackElementBefore: shouldPushStackElementBetween(prevEditOperationType, opType),\n            shouldPushStackElementAfter: false\n        });\n    }\n    static typeWithoutInterceptors(prevEditOperationType, config, model, selections, str) {\n        const commands = [];\n        for (let i = 0, len = selections.length; i < len; i++) {\n            commands[i] = new ReplaceCommand(selections[i], str);\n        }\n        const opType = getTypingOperation(str, prevEditOperationType);\n        return new EditOperationResult(opType, commands, {\n            shouldPushStackElementBefore: shouldPushStackElementBetween(prevEditOperationType, opType),\n            shouldPushStackElementAfter: false\n        });\n    }\n    static lineInsertBefore(config, model, selections) {\n        if (model === null || selections === null) {\n            return [];\n        }\n        const commands = [];\n        for (let i = 0, len = selections.length; i < len; i++) {\n            let lineNumber = selections[i].positionLineNumber;\n            if (lineNumber === 1) {\n                commands[i] = new ReplaceCommandWithoutChangingPosition(new Range(1, 1, 1, 1), '\\n');\n            }\n            else {\n                lineNumber--;\n                const column = model.getLineMaxColumn(lineNumber);\n                commands[i] = this._enter(config, model, false, new Range(lineNumber, column, lineNumber, column));\n            }\n        }\n        return commands;\n    }\n    static lineInsertAfter(config, model, selections) {\n        if (model === null || selections === null) {\n            return [];\n        }\n        const commands = [];\n        for (let i = 0, len = selections.length; i < len; i++) {\n            const lineNumber = selections[i].positionLineNumber;\n            const column = model.getLineMaxColumn(lineNumber);\n            commands[i] = this._enter(config, model, false, new Range(lineNumber, column, lineNumber, column));\n        }\n        return commands;\n    }\n    static lineBreakInsert(config, model, selections) {\n        const commands = [];\n        for (let i = 0, len = selections.length; i < len; i++) {\n            commands[i] = this._enter(config, model, true, selections[i]);\n        }\n        return commands;\n    }\n}\nexport class TypeWithAutoClosingCommand extends ReplaceCommandWithOffsetCursorState {\n    constructor(selection, openCharacter, insertOpenCharacter, closeCharacter) {\n        super(selection, (insertOpenCharacter ? openCharacter : '') + closeCharacter, 0, -closeCharacter.length);\n        this._openCharacter = openCharacter;\n        this._closeCharacter = closeCharacter;\n        this.closeCharacterRange = null;\n        this.enclosingRange = null;\n    }\n    computeCursorState(model, helper) {\n        const inverseEditOperations = helper.getInverseEditOperations();\n        const range = inverseEditOperations[0].range;\n        this.closeCharacterRange = new Range(range.startLineNumber, range.endColumn - this._closeCharacter.length, range.endLineNumber, range.endColumn);\n        this.enclosingRange = new Range(range.startLineNumber, range.endColumn - this._openCharacter.length - this._closeCharacter.length, range.endLineNumber, range.endColumn);\n        return super.computeCursorState(model, helper);\n    }\n}\nexport class CompositionOutcome {\n    constructor(deletedText, deletedSelectionStart, deletedSelectionEnd, insertedText, insertedSelectionStart, insertedSelectionEnd) {\n        this.deletedText = deletedText;\n        this.deletedSelectionStart = deletedSelectionStart;\n        this.deletedSelectionEnd = deletedSelectionEnd;\n        this.insertedText = insertedText;\n        this.insertedSelectionStart = insertedSelectionStart;\n        this.insertedSelectionEnd = insertedSelectionEnd;\n    }\n}\nfunction getTypingOperation(typedText, previousTypingOperation) {\n    if (typedText === ' ') {\n        return previousTypingOperation === 5 /* EditOperationType.TypingFirstSpace */\n            || previousTypingOperation === 6 /* EditOperationType.TypingConsecutiveSpace */\n            ? 6 /* EditOperationType.TypingConsecutiveSpace */\n            : 5 /* EditOperationType.TypingFirstSpace */;\n    }\n    return 4 /* EditOperationType.TypingOther */;\n}\nfunction shouldPushStackElementBetween(previousTypingOperation, typingOperation) {\n    if (isTypingOperation(previousTypingOperation) && !isTypingOperation(typingOperation)) {\n        // Always set an undo stop before non-type operations\n        return true;\n    }\n    if (previousTypingOperation === 5 /* EditOperationType.TypingFirstSpace */) {\n        // `abc |d`: No undo stop\n        // `abc  |d`: Undo stop\n        return false;\n    }\n    // Insert undo stop between different operation types\n    return normalizeOperationType(previousTypingOperation) !== normalizeOperationType(typingOperation);\n}\nfunction normalizeOperationType(type) {\n    return (type === 6 /* EditOperationType.TypingConsecutiveSpace */ || type === 5 /* EditOperationType.TypingFirstSpace */)\n        ? 'space'\n        : type;\n}\nfunction isTypingOperation(type) {\n    return type === 4 /* EditOperationType.TypingOther */\n        || type === 5 /* EditOperationType.TypingFirstSpace */\n        || type === 6 /* EditOperationType.TypingConsecutiveSpace */;\n}\n"],"mappings":"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"}]}