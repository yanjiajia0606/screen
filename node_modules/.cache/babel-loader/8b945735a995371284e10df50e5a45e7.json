{"remainingRequest":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/thread-loader/dist/cjs.js!/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js!/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/browser/viewParts/minimap/minimapCharRendererFactory.js","dependencies":[{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/browser/viewParts/minimap/minimapCharRendererFactory.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/babel.config.js","mtime":1668271197000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js","mtime":456789000000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyIGZyb20gIi9Vc2Vycy95YW5qaWFqaWEvRGVza3RvcC93b3Jrc3BhY2UvYXZ1ZS1kYXRhLW5ldy9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlci5qcyI7CmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAiL1VzZXJzL3lhbmppYWppYS9EZXNrdG9wL3dvcmtzcGFjZS9hdnVlLWRhdGEtbmV3L25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jbGFzc0NhbGxDaGVjay5qcyI7CmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSAiL1VzZXJzL3lhbmppYWppYS9EZXNrdG9wL3dvcmtzcGFjZS9hdnVlLWRhdGEtbmV3L25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzcy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmVycm9yLmNhdXNlLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXktYnVmZmVyLnNsaWNlLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnVpbnQ4LWNsYW1wZWQtYXJyYXkuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5hdC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmNvcHktd2l0aGluLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuZXZlcnkuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5maWxsLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuZmlsdGVyLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuZmluZC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmZpbmQtaW5kZXguanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5maW5kLWxhc3QuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5maW5kLWxhc3QtaW5kZXguanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5mb3ItZWFjaC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmluY2x1ZGVzLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuaW5kZXgtb2YuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5pdGVyYXRvci5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmpvaW4uanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5sYXN0LWluZGV4LW9mLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkubWFwLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkucmVkdWNlLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkucmVkdWNlLXJpZ2h0LmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkucmV2ZXJzZS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnNldC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnNsaWNlLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuc29tZS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnNvcnQuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5zdWJhcnJheS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnRvLWxvY2FsZS1zdHJpbmcuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS50by1zdHJpbmcuanMiOwovKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogKiAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLgogKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8KaW1wb3J0IHsgTWluaW1hcENoYXJSZW5kZXJlciB9IGZyb20gJy4vbWluaW1hcENoYXJSZW5kZXJlci5qcyc7CmltcG9ydCB7IGFsbENoYXJDb2RlcyB9IGZyb20gJy4vbWluaW1hcENoYXJTaGVldC5qcyc7CmltcG9ydCB7IHByZWJha2VkTWluaU1hcHMgfSBmcm9tICcuL21pbmltYXBQcmVCYWtlZC5qcyc7CmltcG9ydCB7IHRvVWludDggfSBmcm9tICcuLi8uLi8uLi8uLi9iYXNlL2NvbW1vbi91aW50LmpzJzsKLyoqCiAqIENyZWF0ZXMgY2hhcmFjdGVyIHJlbmRlcmVycy4gSXQgdGFrZXMgYSAnc2NhbGUnIHRoYXQgZGV0ZXJtaW5lcyBob3cgbGFyZ2UKICogY2hhcmFjdGVycyBzaG91bGQgYmUgZHJhd24uIFVzaW5nIHRoaXMsIGl0IGRyYXdzIGRhdGEgaW50byBhIGNhbnZhcyBhbmQKICogdGhlbiBkb3duc2FtcGxlcyB0aGUgY2hhcmFjdGVycyBhcyBuZWNlc3NhcnkgZm9yIHRoZSBjdXJyZW50IGRpc3BsYXkuCiAqIFRoaXMgbWFrZXMgcmVuZGVyaW5nIG1vcmUgZWZmaWNpZW50LCByYXRoZXIgdGhhbiBkcmF3aW5nIGEgZnVsbCAodGlueSkKICogZm9udCwgb3IgZG93bnNhbXBsaW5nIGluIHJlYWwtdGltZS4KICovCmV4cG9ydCB2YXIgTWluaW1hcENoYXJSZW5kZXJlckZhY3RvcnkgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIE1pbmltYXBDaGFyUmVuZGVyZXJGYWN0b3J5KCkgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1pbmltYXBDaGFyUmVuZGVyZXJGYWN0b3J5KTsKICB9CiAgX2NyZWF0ZUNsYXNzKE1pbmltYXBDaGFyUmVuZGVyZXJGYWN0b3J5LCBudWxsLCBbewogICAga2V5OiAiY3JlYXRlIiwKICAgIHZhbHVlOgogICAgLyoqCiAgICAgKiBDcmVhdGVzIGEgbmV3IGNoYXJhY3RlciByZW5kZXJlciBmYWN0b3J5IHdpdGggdGhlIGdpdmVuIHNjYWxlLgogICAgICovCiAgICBmdW5jdGlvbiBjcmVhdGUoc2NhbGUsIGZvbnRGYW1pbHkpIHsKICAgICAgLy8gcmVuZGVyZXJzIGFyZSBpbW11dGFibGUuIEJ5IGRlZmF1bHQgd2UnbGwgJ2NyZWF0ZScgYSBuZXcgbWluaW1hcAogICAgICAvLyBjaGFyYWN0ZXIgcmVuZGVyZXIgd2hlbmV2ZXIgd2Ugc3dpdGNoIGVkaXRvcnMsIG5vIG5lZWQgdG8gZG8gZXh0cmEgd29yay4KICAgICAgaWYgKHRoaXMubGFzdENyZWF0ZWQgJiYgc2NhbGUgPT09IHRoaXMubGFzdENyZWF0ZWQuc2NhbGUgJiYgZm9udEZhbWlseSA9PT0gdGhpcy5sYXN0Rm9udEZhbWlseSkgewogICAgICAgIHJldHVybiB0aGlzLmxhc3RDcmVhdGVkOwogICAgICB9CiAgICAgIHZhciBmYWN0b3J5OwogICAgICBpZiAocHJlYmFrZWRNaW5pTWFwc1tzY2FsZV0pIHsKICAgICAgICBmYWN0b3J5ID0gbmV3IE1pbmltYXBDaGFyUmVuZGVyZXIocHJlYmFrZWRNaW5pTWFwc1tzY2FsZV0oKSwgc2NhbGUpOwogICAgICB9IGVsc2UgewogICAgICAgIGZhY3RvcnkgPSBNaW5pbWFwQ2hhclJlbmRlcmVyRmFjdG9yeS5jcmVhdGVGcm9tU2FtcGxlRGF0YShNaW5pbWFwQ2hhclJlbmRlcmVyRmFjdG9yeS5jcmVhdGVTYW1wbGVEYXRhKGZvbnRGYW1pbHkpLmRhdGEsIHNjYWxlKTsKICAgICAgfQogICAgICB0aGlzLmxhc3RGb250RmFtaWx5ID0gZm9udEZhbWlseTsKICAgICAgdGhpcy5sYXN0Q3JlYXRlZCA9IGZhY3Rvcnk7CiAgICAgIHJldHVybiBmYWN0b3J5OwogICAgfQogICAgLyoqCiAgICAgKiBDcmVhdGVzIHRoZSBmb250IHNhbXBsZSBkYXRhLCB3cml0aW5nIHRvIGEgY2FudmFzLgogICAgICovCiAgfSwgewogICAga2V5OiAiY3JlYXRlU2FtcGxlRGF0YSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlU2FtcGxlRGF0YShmb250RmFtaWx5KSB7CiAgICAgIHZhciBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTsKICAgICAgdmFyIGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpOwogICAgICBjYW52YXMuc3R5bGUuaGVpZ2h0ID0gIiIuY29uY2F0KDE2IC8qIENvbnN0YW50cy5TQU1QTEVEX0NIQVJfSEVJR0hUICovLCAicHgiKTsKICAgICAgY2FudmFzLmhlaWdodCA9IDE2IC8qIENvbnN0YW50cy5TQU1QTEVEX0NIQVJfSEVJR0hUICovOwogICAgICBjYW52YXMud2lkdGggPSA5NiAvKiBDb25zdGFudHMuQ0hBUl9DT1VOVCAqLyAqIDEwIC8qIENvbnN0YW50cy5TQU1QTEVEX0NIQVJfV0lEVEggKi87CiAgICAgIGNhbnZhcy5zdHlsZS53aWR0aCA9IDk2IC8qIENvbnN0YW50cy5DSEFSX0NPVU5UICovICogMTAgLyogQ29uc3RhbnRzLlNBTVBMRURfQ0hBUl9XSURUSCAqLyArICdweCc7CiAgICAgIGN0eC5maWxsU3R5bGUgPSAnI2ZmZmZmZic7CiAgICAgIGN0eC5mb250ID0gImJvbGQgIi5jb25jYXQoMTYgLyogQ29uc3RhbnRzLlNBTVBMRURfQ0hBUl9IRUlHSFQgKi8sICJweCAiLCBmb250RmFtaWx5KTsKICAgICAgY3R4LnRleHRCYXNlbGluZSA9ICdtaWRkbGUnOwogICAgICB2YXIgeCA9IDA7CiAgICAgIHZhciBfaXRlcmF0b3IgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihhbGxDaGFyQ29kZXMpLAogICAgICAgIF9zdGVwOwogICAgICB0cnkgewogICAgICAgIGZvciAoX2l0ZXJhdG9yLnMoKTsgIShfc3RlcCA9IF9pdGVyYXRvci5uKCkpLmRvbmU7KSB7CiAgICAgICAgICB2YXIgY29kZSA9IF9zdGVwLnZhbHVlOwogICAgICAgICAgY3R4LmZpbGxUZXh0KFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZSksIHgsIDE2IC8qIENvbnN0YW50cy5TQU1QTEVEX0NIQVJfSEVJR0hUICovIC8gMik7CiAgICAgICAgICB4ICs9IDEwIC8qIENvbnN0YW50cy5TQU1QTEVEX0NIQVJfV0lEVEggKi87CiAgICAgICAgfQogICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICBfaXRlcmF0b3IuZShlcnIpOwogICAgICB9IGZpbmFsbHkgewogICAgICAgIF9pdGVyYXRvci5mKCk7CiAgICAgIH0KICAgICAgcmV0dXJuIGN0eC5nZXRJbWFnZURhdGEoMCwgMCwgOTYgLyogQ29uc3RhbnRzLkNIQVJfQ09VTlQgKi8gKiAxMCAvKiBDb25zdGFudHMuU0FNUExFRF9DSEFSX1dJRFRIICovLCAxNiAvKiBDb25zdGFudHMuU0FNUExFRF9DSEFSX0hFSUdIVCAqLyk7CiAgICB9CiAgICAvKioKICAgICAqIENyZWF0ZXMgYSBjaGFyYWN0ZXIgcmVuZGVyZXIgZnJvbSB0aGUgY2FudmFzIHNhbXBsZSBkYXRhLgogICAgICovCiAgfSwgewogICAga2V5OiAiY3JlYXRlRnJvbVNhbXBsZURhdGEiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZUZyb21TYW1wbGVEYXRhKHNvdXJjZSwgc2NhbGUpIHsKICAgICAgdmFyIGV4cGVjdGVkTGVuZ3RoID0gMTYgLyogQ29uc3RhbnRzLlNBTVBMRURfQ0hBUl9IRUlHSFQgKi8gKiAxMCAvKiBDb25zdGFudHMuU0FNUExFRF9DSEFSX1dJRFRIICovICogNCAvKiBDb25zdGFudHMuUkdCQV9DSEFOTkVMU19DTlQgKi8gKiA5NiAvKiBDb25zdGFudHMuQ0hBUl9DT1VOVCAqLzsKICAgICAgaWYgKHNvdXJjZS5sZW5ndGggIT09IGV4cGVjdGVkTGVuZ3RoKSB7CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmV4cGVjdGVkIHNvdXJjZSBpbiBNaW5pbWFwQ2hhclJlbmRlcmVyJyk7CiAgICAgIH0KICAgICAgdmFyIGNoYXJEYXRhID0gTWluaW1hcENoYXJSZW5kZXJlckZhY3RvcnkuX2Rvd25zYW1wbGUoc291cmNlLCBzY2FsZSk7CiAgICAgIHJldHVybiBuZXcgTWluaW1hcENoYXJSZW5kZXJlcihjaGFyRGF0YSwgc2NhbGUpOwogICAgfQogIH0sIHsKICAgIGtleTogIl9kb3duc2FtcGxlQ2hhciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX2Rvd25zYW1wbGVDaGFyKHNvdXJjZSwgc291cmNlT2Zmc2V0LCBkZXN0LCBkZXN0T2Zmc2V0LCBzY2FsZSkgewogICAgICB2YXIgd2lkdGggPSAxIC8qIENvbnN0YW50cy5CQVNFX0NIQVJfV0lEVEggKi8gKiBzY2FsZTsKICAgICAgdmFyIGhlaWdodCA9IDIgLyogQ29uc3RhbnRzLkJBU0VfQ0hBUl9IRUlHSFQgKi8gKiBzY2FsZTsKICAgICAgdmFyIHRhcmdldEluZGV4ID0gZGVzdE9mZnNldDsKICAgICAgdmFyIGJyaWdodGVzdCA9IDA7CiAgICAgIC8vIFRoaXMgaXMgZXNzZW50aWFsbHkgYW4gYWQtaG9jIHJlc2NhbGluZyBhbGdvcml0aG0uIFN0YW5kYXJkIGFwcHJvYWNoZXMKICAgICAgLy8gbGlrZSBiaWN1YmljIGludGVycG9sYXRpb24gYXJlIGF3ZXNvbWUgZm9yIHNjYWxpbmcgYmV0d2VlbiBpbWFnZSBzaXplcywKICAgICAgLy8gYnV0IGRvbid0IHdvcmsgc28gd2VsbCB3aGVuIHNjYWxpbmcgdG8gdmVyeSBzbWFsbCBwaXhlbCB2YWx1ZXMsIHdlIGVuZAogICAgICAvLyB1cCB3aXRoIGJsdXJyeSwgaW5kaXN0aW5jdCBmb3Jtcy4KICAgICAgLy8KICAgICAgLy8gVGhlIGFwcHJvYWNoIHRha2VuIGhlcmUgaXMgc2ltcGx5IG1hcHBpbmcgZWFjaCBzb3VyY2UgcGl4ZWwgdG8gdGhlIHRhcmdldAogICAgICAvLyBwaXhlbHMsIGFuZCB0YWtpbmcgdGhlIHdlaWdodGVkIHZhbHVlcyBmb3IgYWxsIHBpeGVscyBpbiBlYWNoLCBhbmQgdGhlbgogICAgICAvLyBhdmVyYWdpbmcgdGhlbSBvdXQuIEZpbmFsbHkgd2UgYXBwbHkgYW4gaW50ZW5zaXR5IGJvb3N0IGluIF9kb3duc2FtcGxlLAogICAgICAvLyBzaW5jZSB3aGVuIHNjYWxpbmcgdG8gdGhlIHNtYWxsZXN0IHBpeGVsIHNpemVzIHRoZXJlJ3MgbW9yZSBibGFjayBzcGFjZQogICAgICAvLyB3aGljaCBjYXVzZXMgY2hhcmFjdGVycyB0byBiZSBtdWNoIGxlc3MgZGlzdGluY3QuCiAgICAgIGZvciAodmFyIHkgPSAwOyB5IDwgaGVpZ2h0OyB5KyspIHsKICAgICAgICAvLyAxLiBGb3IgdGhpcyBkZXN0aW5hdGlvbiBwaXhlbCwgZ2V0IHRoZSBzb3VyY2UgcGl4ZWxzIHdlJ3JlIHNhbXBsaW5nCiAgICAgICAgLy8gZnJvbSAoeDEsIHkxKSB0byB0aGUgbmV4dCBwaXhlbCAoeDIsIHkyKQogICAgICAgIHZhciBzb3VyY2VZMSA9IHkgLyBoZWlnaHQgKiAxNiAvKiBDb25zdGFudHMuU0FNUExFRF9DSEFSX0hFSUdIVCAqLzsKICAgICAgICB2YXIgc291cmNlWTIgPSAoeSArIDEpIC8gaGVpZ2h0ICogMTYgLyogQ29uc3RhbnRzLlNBTVBMRURfQ0hBUl9IRUlHSFQgKi87CiAgICAgICAgZm9yICh2YXIgeCA9IDA7IHggPCB3aWR0aDsgeCsrKSB7CiAgICAgICAgICB2YXIgc291cmNlWDEgPSB4IC8gd2lkdGggKiAxMCAvKiBDb25zdGFudHMuU0FNUExFRF9DSEFSX1dJRFRIICovOwogICAgICAgICAgdmFyIHNvdXJjZVgyID0gKHggKyAxKSAvIHdpZHRoICogMTAgLyogQ29uc3RhbnRzLlNBTVBMRURfQ0hBUl9XSURUSCAqLzsKICAgICAgICAgIC8vIDIuIFNhbXBsZSBhbGwgb2YgdGhlbSwgc3VtbWluZyB0aGVtIHVwIGFuZCB3ZWlnaHRpbmcgdGhlbS4gU2ltaWxhcgogICAgICAgICAgLy8gdG8gYmlsaW5lYXIgaW50ZXJwb2xhdGlvbi4KICAgICAgICAgIHZhciB2YWx1ZSA9IDA7CiAgICAgICAgICB2YXIgc2FtcGxlcyA9IDA7CiAgICAgICAgICBmb3IgKHZhciBzeSA9IHNvdXJjZVkxOyBzeSA8IHNvdXJjZVkyOyBzeSsrKSB7CiAgICAgICAgICAgIHZhciBzb3VyY2VSb3cgPSBzb3VyY2VPZmZzZXQgKyBNYXRoLmZsb29yKHN5KSAqIDM4NDAgLyogQ29uc3RhbnRzLlJHQkFfU0FNUExFRF9ST1dfV0lEVEggKi87CiAgICAgICAgICAgIHZhciB5QmFsYW5jZSA9IDEgLSAoc3kgLSBNYXRoLmZsb29yKHN5KSk7CiAgICAgICAgICAgIGZvciAodmFyIHN4ID0gc291cmNlWDE7IHN4IDwgc291cmNlWDI7IHN4KyspIHsKICAgICAgICAgICAgICB2YXIgeEJhbGFuY2UgPSAxIC0gKHN4IC0gTWF0aC5mbG9vcihzeCkpOwogICAgICAgICAgICAgIHZhciBzb3VyY2VJbmRleCA9IHNvdXJjZVJvdyArIE1hdGguZmxvb3Ioc3gpICogNCAvKiBDb25zdGFudHMuUkdCQV9DSEFOTkVMU19DTlQgKi87CiAgICAgICAgICAgICAgdmFyIHdlaWdodCA9IHhCYWxhbmNlICogeUJhbGFuY2U7CiAgICAgICAgICAgICAgc2FtcGxlcyArPSB3ZWlnaHQ7CiAgICAgICAgICAgICAgdmFsdWUgKz0gc291cmNlW3NvdXJjZUluZGV4XSAqIHNvdXJjZVtzb3VyY2VJbmRleCArIDNdIC8gMjU1ICogd2VpZ2h0OwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICB2YXIgZmluYWwgPSB2YWx1ZSAvIHNhbXBsZXM7CiAgICAgICAgICBicmlnaHRlc3QgPSBNYXRoLm1heChicmlnaHRlc3QsIGZpbmFsKTsKICAgICAgICAgIGRlc3RbdGFyZ2V0SW5kZXgrK10gPSB0b1VpbnQ4KGZpbmFsKTsKICAgICAgICB9CiAgICAgIH0KICAgICAgcmV0dXJuIGJyaWdodGVzdDsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJfZG93bnNhbXBsZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX2Rvd25zYW1wbGUoZGF0YSwgc2NhbGUpIHsKICAgICAgdmFyIHBpeGVsc1BlckNoYXJhY3RlciA9IDIgLyogQ29uc3RhbnRzLkJBU0VfQ0hBUl9IRUlHSFQgKi8gKiBzY2FsZSAqIDEgLyogQ29uc3RhbnRzLkJBU0VfQ0hBUl9XSURUSCAqLyAqIHNjYWxlOwogICAgICB2YXIgcmVzdWx0TGVuID0gcGl4ZWxzUGVyQ2hhcmFjdGVyICogOTYgLyogQ29uc3RhbnRzLkNIQVJfQ09VTlQgKi87CiAgICAgIHZhciByZXN1bHQgPSBuZXcgVWludDhDbGFtcGVkQXJyYXkocmVzdWx0TGVuKTsKICAgICAgdmFyIHJlc3VsdE9mZnNldCA9IDA7CiAgICAgIHZhciBzb3VyY2VPZmZzZXQgPSAwOwogICAgICB2YXIgYnJpZ2h0ZXN0ID0gMDsKICAgICAgZm9yICh2YXIgY2hhckluZGV4ID0gMDsgY2hhckluZGV4IDwgOTYgLyogQ29uc3RhbnRzLkNIQVJfQ09VTlQgKi87IGNoYXJJbmRleCsrKSB7CiAgICAgICAgYnJpZ2h0ZXN0ID0gTWF0aC5tYXgoYnJpZ2h0ZXN0LCB0aGlzLl9kb3duc2FtcGxlQ2hhcihkYXRhLCBzb3VyY2VPZmZzZXQsIHJlc3VsdCwgcmVzdWx0T2Zmc2V0LCBzY2FsZSkpOwogICAgICAgIHJlc3VsdE9mZnNldCArPSBwaXhlbHNQZXJDaGFyYWN0ZXI7CiAgICAgICAgc291cmNlT2Zmc2V0ICs9IDEwIC8qIENvbnN0YW50cy5TQU1QTEVEX0NIQVJfV0lEVEggKi8gKiA0IC8qIENvbnN0YW50cy5SR0JBX0NIQU5ORUxTX0NOVCAqLzsKICAgICAgfQoKICAgICAgaWYgKGJyaWdodGVzdCA+IDApIHsKICAgICAgICB2YXIgYWRqdXN0ID0gMjU1IC8gYnJpZ2h0ZXN0OwogICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVzdWx0TGVuOyBpKyspIHsKICAgICAgICAgIHJlc3VsdFtpXSAqPSBhZGp1c3Q7CiAgICAgICAgfQogICAgICB9CiAgICAgIHJldHVybiByZXN1bHQ7CiAgICB9CiAgfV0pOwogIHJldHVybiBNaW5pbWFwQ2hhclJlbmRlcmVyRmFjdG9yeTsKfSgpOw=="},{"version":3,"names":["MinimapCharRenderer","allCharCodes","prebakedMiniMaps","toUint8","MinimapCharRendererFactory","scale","fontFamily","lastCreated","lastFontFamily","factory","createFromSampleData","createSampleData","data","canvas","document","createElement","ctx","getContext","style","height","width","fillStyle","font","textBaseline","x","code","fillText","String","fromCharCode","getImageData","source","expectedLength","length","Error","charData","_downsample","sourceOffset","dest","destOffset","targetIndex","brightest","y","sourceY1","sourceY2","sourceX1","sourceX2","value","samples","sy","sourceRow","Math","floor","yBalance","sx","xBalance","sourceIndex","weight","final","max","pixelsPerCharacter","resultLen","result","Uint8ClampedArray","resultOffset","charIndex","_downsampleChar","adjust","i"],"sources":["/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/browser/viewParts/minimap/minimapCharRendererFactory.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { MinimapCharRenderer } from './minimapCharRenderer.js';\nimport { allCharCodes } from './minimapCharSheet.js';\nimport { prebakedMiniMaps } from './minimapPreBaked.js';\nimport { toUint8 } from '../../../../base/common/uint.js';\n/**\n * Creates character renderers. It takes a 'scale' that determines how large\n * characters should be drawn. Using this, it draws data into a canvas and\n * then downsamples the characters as necessary for the current display.\n * This makes rendering more efficient, rather than drawing a full (tiny)\n * font, or downsampling in real-time.\n */\nexport class MinimapCharRendererFactory {\n    /**\n     * Creates a new character renderer factory with the given scale.\n     */\n    static create(scale, fontFamily) {\n        // renderers are immutable. By default we'll 'create' a new minimap\n        // character renderer whenever we switch editors, no need to do extra work.\n        if (this.lastCreated && scale === this.lastCreated.scale && fontFamily === this.lastFontFamily) {\n            return this.lastCreated;\n        }\n        let factory;\n        if (prebakedMiniMaps[scale]) {\n            factory = new MinimapCharRenderer(prebakedMiniMaps[scale](), scale);\n        }\n        else {\n            factory = MinimapCharRendererFactory.createFromSampleData(MinimapCharRendererFactory.createSampleData(fontFamily).data, scale);\n        }\n        this.lastFontFamily = fontFamily;\n        this.lastCreated = factory;\n        return factory;\n    }\n    /**\n     * Creates the font sample data, writing to a canvas.\n     */\n    static createSampleData(fontFamily) {\n        const canvas = document.createElement('canvas');\n        const ctx = canvas.getContext('2d');\n        canvas.style.height = `${16 /* Constants.SAMPLED_CHAR_HEIGHT */}px`;\n        canvas.height = 16 /* Constants.SAMPLED_CHAR_HEIGHT */;\n        canvas.width = 96 /* Constants.CHAR_COUNT */ * 10 /* Constants.SAMPLED_CHAR_WIDTH */;\n        canvas.style.width = 96 /* Constants.CHAR_COUNT */ * 10 /* Constants.SAMPLED_CHAR_WIDTH */ + 'px';\n        ctx.fillStyle = '#ffffff';\n        ctx.font = `bold ${16 /* Constants.SAMPLED_CHAR_HEIGHT */}px ${fontFamily}`;\n        ctx.textBaseline = 'middle';\n        let x = 0;\n        for (const code of allCharCodes) {\n            ctx.fillText(String.fromCharCode(code), x, 16 /* Constants.SAMPLED_CHAR_HEIGHT */ / 2);\n            x += 10 /* Constants.SAMPLED_CHAR_WIDTH */;\n        }\n        return ctx.getImageData(0, 0, 96 /* Constants.CHAR_COUNT */ * 10 /* Constants.SAMPLED_CHAR_WIDTH */, 16 /* Constants.SAMPLED_CHAR_HEIGHT */);\n    }\n    /**\n     * Creates a character renderer from the canvas sample data.\n     */\n    static createFromSampleData(source, scale) {\n        const expectedLength = 16 /* Constants.SAMPLED_CHAR_HEIGHT */ * 10 /* Constants.SAMPLED_CHAR_WIDTH */ * 4 /* Constants.RGBA_CHANNELS_CNT */ * 96 /* Constants.CHAR_COUNT */;\n        if (source.length !== expectedLength) {\n            throw new Error('Unexpected source in MinimapCharRenderer');\n        }\n        const charData = MinimapCharRendererFactory._downsample(source, scale);\n        return new MinimapCharRenderer(charData, scale);\n    }\n    static _downsampleChar(source, sourceOffset, dest, destOffset, scale) {\n        const width = 1 /* Constants.BASE_CHAR_WIDTH */ * scale;\n        const height = 2 /* Constants.BASE_CHAR_HEIGHT */ * scale;\n        let targetIndex = destOffset;\n        let brightest = 0;\n        // This is essentially an ad-hoc rescaling algorithm. Standard approaches\n        // like bicubic interpolation are awesome for scaling between image sizes,\n        // but don't work so well when scaling to very small pixel values, we end\n        // up with blurry, indistinct forms.\n        //\n        // The approach taken here is simply mapping each source pixel to the target\n        // pixels, and taking the weighted values for all pixels in each, and then\n        // averaging them out. Finally we apply an intensity boost in _downsample,\n        // since when scaling to the smallest pixel sizes there's more black space\n        // which causes characters to be much less distinct.\n        for (let y = 0; y < height; y++) {\n            // 1. For this destination pixel, get the source pixels we're sampling\n            // from (x1, y1) to the next pixel (x2, y2)\n            const sourceY1 = (y / height) * 16 /* Constants.SAMPLED_CHAR_HEIGHT */;\n            const sourceY2 = ((y + 1) / height) * 16 /* Constants.SAMPLED_CHAR_HEIGHT */;\n            for (let x = 0; x < width; x++) {\n                const sourceX1 = (x / width) * 10 /* Constants.SAMPLED_CHAR_WIDTH */;\n                const sourceX2 = ((x + 1) / width) * 10 /* Constants.SAMPLED_CHAR_WIDTH */;\n                // 2. Sample all of them, summing them up and weighting them. Similar\n                // to bilinear interpolation.\n                let value = 0;\n                let samples = 0;\n                for (let sy = sourceY1; sy < sourceY2; sy++) {\n                    const sourceRow = sourceOffset + Math.floor(sy) * 3840 /* Constants.RGBA_SAMPLED_ROW_WIDTH */;\n                    const yBalance = 1 - (sy - Math.floor(sy));\n                    for (let sx = sourceX1; sx < sourceX2; sx++) {\n                        const xBalance = 1 - (sx - Math.floor(sx));\n                        const sourceIndex = sourceRow + Math.floor(sx) * 4 /* Constants.RGBA_CHANNELS_CNT */;\n                        const weight = xBalance * yBalance;\n                        samples += weight;\n                        value += ((source[sourceIndex] * source[sourceIndex + 3]) / 255) * weight;\n                    }\n                }\n                const final = value / samples;\n                brightest = Math.max(brightest, final);\n                dest[targetIndex++] = toUint8(final);\n            }\n        }\n        return brightest;\n    }\n    static _downsample(data, scale) {\n        const pixelsPerCharacter = 2 /* Constants.BASE_CHAR_HEIGHT */ * scale * 1 /* Constants.BASE_CHAR_WIDTH */ * scale;\n        const resultLen = pixelsPerCharacter * 96 /* Constants.CHAR_COUNT */;\n        const result = new Uint8ClampedArray(resultLen);\n        let resultOffset = 0;\n        let sourceOffset = 0;\n        let brightest = 0;\n        for (let charIndex = 0; charIndex < 96 /* Constants.CHAR_COUNT */; charIndex++) {\n            brightest = Math.max(brightest, this._downsampleChar(data, sourceOffset, result, resultOffset, scale));\n            resultOffset += pixelsPerCharacter;\n            sourceOffset += 10 /* Constants.SAMPLED_CHAR_WIDTH */ * 4 /* Constants.RGBA_CHANNELS_CNT */;\n        }\n        if (brightest > 0) {\n            const adjust = 255 / brightest;\n            for (let i = 0; i < resultLen; i++) {\n                result[i] *= adjust;\n            }\n        }\n        return result;\n    }\n}\n"],"mappings":"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"}]}