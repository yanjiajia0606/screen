{"remainingRequest":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js!/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/browser/controller/textAreaInput.js","dependencies":[{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/browser/controller/textAreaInput.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/babel.config.js","mtime":1668271197000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js","mtime":456789000000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["browser","dom","StandardKeyboardEvent","RunOnceScheduler","Emitter","Disposable","Mimes","strings","TextAreaState","_debugComposition","Selection","TextAreaSyntethicEvents","Tap","CopyOptions","forceCopyWithSyntaxHighlighting","InMemoryClipboardMetadataManager","_lastState","lastCopiedValue","data","pastedText","INSTANCE","CompositionContext","_lastTypeTextLength","text","typeInput","replacePrevCharCnt","replaceNextCharCnt","positionDelta","length","TextAreaInput","_host","_textArea","_OS","_browser","_onFocus","_register","onFocus","event","_onBlur","onBlur","_onKeyDown","onKeyDown","_onKeyUp","onKeyUp","_onCut","onCut","_onPaste","onPaste","_onType","onType","_onCompositionStart","onCompositionStart","_onCompositionUpdate","onCompositionUpdate","_onCompositionEnd","onCompositionEnd","_onSelectionChangeRequest","onSelectionChangeRequest","_asyncTriggerCut","fire","_asyncFocusGainWriteScreenReaderContent","writeScreenReaderContent","_textAreaState","EMPTY","_selectionChangeListener","_hasFocus","_currentComposition","lastKeyDown","_e","e","keyCode","stopPropagation","equals","preventDefault","console","log","currentComposition","selectionStart","selectionEnd","value","substr","code","handleCompositionUpdate","isAndroid","newState","readFromTextArea","deduceAndroidCompositionInput","onInput","setIgnoreSelectionChangeTime","deduceInput","isHighSurrogate","charCodeAt","_ensureClipboardGetsEditorSelection","schedule","onCopy","clipboardData","ClipboardEventUtils","getTextData","metadata","get","hadFocus","_setHasFocus","isSafari","onSyntheticTap","previousSelectionChangeEventTime","addDisposableListener","document","isChrome","now","Date","delta1","delta2","getIgnoreSelectionChangeTime","resetSelectionChangeTime","selectionStartPosition","selectionEndPosition","newValue","getValue","newSelectionStart","getSelectionStart","newSelectionEnd","getSelectionEnd","_newSelectionStartPosition","deduceEditorPosition","newSelectionStartPosition","deduceModelPosition","_newSelectionEndPosition","newSelectionEndPosition","newSelection","lineNumber","column","dispose","refreshFocusState","hasFocus","newHasFocus","_installSelectionChangeListener","reason","textAreaState","collapseSelection","writeToTextArea","_setAndWriteTextAreaState","getScreenReaderContent","dataToCopy","getDataToCopy","storedMetadata","version","isFromEmptySelection","multicursorText","mode","set","isFirefox","replace","setTextData","html","getData","rawmetadata","JSON","parse","err","files","Array","prototype","slice","call","map","file","name","join","setData","stringify","TextAreaWrapper","_actual","createEventEmitter","_onSyntheticTap","_ignoreSelectionChangeTime","shadowRoot","getShadowRoot","activeElement","isInDOM","textArea","selectionDirection","currentIsFocused","currentSelectionStart","currentSelectionEnd","window","parent","focus","setSelectionRange","scrollState","saveParentsScrollTop","restoreParentsScrollTop"],"sources":["/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/browser/controller/textAreaInput.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as browser from '../../../base/browser/browser.js';\nimport * as dom from '../../../base/browser/dom.js';\nimport { StandardKeyboardEvent } from '../../../base/browser/keyboardEvent.js';\nimport { RunOnceScheduler } from '../../../base/common/async.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { Mimes } from '../../../base/common/mime.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { TextAreaState, _debugComposition } from './textAreaState.js';\nimport { Selection } from '../../common/core/selection.js';\nexport var TextAreaSyntethicEvents;\n(function (TextAreaSyntethicEvents) {\n    TextAreaSyntethicEvents.Tap = '-monaco-textarea-synthetic-tap';\n})(TextAreaSyntethicEvents || (TextAreaSyntethicEvents = {}));\nexport const CopyOptions = {\n    forceCopyWithSyntaxHighlighting: false\n};\n/**\n * Every time we write to the clipboard, we record a bit of extra metadata here.\n * Every time we read from the cipboard, if the text matches our last written text,\n * we can fetch the previous metadata.\n */\nexport class InMemoryClipboardMetadataManager {\n    constructor() {\n        this._lastState = null;\n    }\n    set(lastCopiedValue, data) {\n        this._lastState = { lastCopiedValue, data };\n    }\n    get(pastedText) {\n        if (this._lastState && this._lastState.lastCopiedValue === pastedText) {\n            // match!\n            return this._lastState.data;\n        }\n        this._lastState = null;\n        return null;\n    }\n}\nInMemoryClipboardMetadataManager.INSTANCE = new InMemoryClipboardMetadataManager();\nclass CompositionContext {\n    constructor() {\n        this._lastTypeTextLength = 0;\n    }\n    handleCompositionUpdate(text) {\n        text = text || '';\n        const typeInput = {\n            text: text,\n            replacePrevCharCnt: this._lastTypeTextLength,\n            replaceNextCharCnt: 0,\n            positionDelta: 0\n        };\n        this._lastTypeTextLength = text.length;\n        return typeInput;\n    }\n}\n/**\n * Writes screen reader content to the textarea and is able to analyze its input events to generate:\n *  - onCut\n *  - onPaste\n *  - onType\n *\n * Composition events are generated for presentation purposes (composition input is reflected in onType).\n */\nexport class TextAreaInput extends Disposable {\n    constructor(_host, _textArea, _OS, _browser) {\n        super();\n        this._host = _host;\n        this._textArea = _textArea;\n        this._OS = _OS;\n        this._browser = _browser;\n        this._onFocus = this._register(new Emitter());\n        this.onFocus = this._onFocus.event;\n        this._onBlur = this._register(new Emitter());\n        this.onBlur = this._onBlur.event;\n        this._onKeyDown = this._register(new Emitter());\n        this.onKeyDown = this._onKeyDown.event;\n        this._onKeyUp = this._register(new Emitter());\n        this.onKeyUp = this._onKeyUp.event;\n        this._onCut = this._register(new Emitter());\n        this.onCut = this._onCut.event;\n        this._onPaste = this._register(new Emitter());\n        this.onPaste = this._onPaste.event;\n        this._onType = this._register(new Emitter());\n        this.onType = this._onType.event;\n        this._onCompositionStart = this._register(new Emitter());\n        this.onCompositionStart = this._onCompositionStart.event;\n        this._onCompositionUpdate = this._register(new Emitter());\n        this.onCompositionUpdate = this._onCompositionUpdate.event;\n        this._onCompositionEnd = this._register(new Emitter());\n        this.onCompositionEnd = this._onCompositionEnd.event;\n        this._onSelectionChangeRequest = this._register(new Emitter());\n        this.onSelectionChangeRequest = this._onSelectionChangeRequest.event;\n        this._asyncTriggerCut = this._register(new RunOnceScheduler(() => this._onCut.fire(), 0));\n        this._asyncFocusGainWriteScreenReaderContent = this._register(new RunOnceScheduler(() => this.writeScreenReaderContent('asyncFocusGain'), 0));\n        this._textAreaState = TextAreaState.EMPTY;\n        this._selectionChangeListener = null;\n        this.writeScreenReaderContent('ctor');\n        this._hasFocus = false;\n        this._currentComposition = null;\n        let lastKeyDown = null;\n        this._register(this._textArea.onKeyDown((_e) => {\n            const e = new StandardKeyboardEvent(_e);\n            if (e.keyCode === 109 /* KeyCode.KEY_IN_COMPOSITION */\n                || (this._currentComposition && e.keyCode === 1 /* KeyCode.Backspace */)) {\n                // Stop propagation for keyDown events if the IME is processing key input\n                e.stopPropagation();\n            }\n            if (e.equals(9 /* KeyCode.Escape */)) {\n                // Prevent default always for `Esc`, otherwise it will generate a keypress\n                // See https://msdn.microsoft.com/en-us/library/ie/ms536939(v=vs.85).aspx\n                e.preventDefault();\n            }\n            lastKeyDown = e;\n            this._onKeyDown.fire(e);\n        }));\n        this._register(this._textArea.onKeyUp((_e) => {\n            const e = new StandardKeyboardEvent(_e);\n            this._onKeyUp.fire(e);\n        }));\n        this._register(this._textArea.onCompositionStart((e) => {\n            if (_debugComposition) {\n                console.log(`[compositionstart]`, e);\n            }\n            const currentComposition = new CompositionContext();\n            if (this._currentComposition) {\n                // simply reset the composition context\n                this._currentComposition = currentComposition;\n                return;\n            }\n            this._currentComposition = currentComposition;\n            if (this._OS === 2 /* OperatingSystem.Macintosh */\n                && lastKeyDown\n                && lastKeyDown.equals(109 /* KeyCode.KEY_IN_COMPOSITION */)\n                && this._textAreaState.selectionStart === this._textAreaState.selectionEnd\n                && this._textAreaState.selectionStart > 0\n                && this._textAreaState.value.substr(this._textAreaState.selectionStart - 1, 1) === e.data\n                && (lastKeyDown.code === 'ArrowRight' || lastKeyDown.code === 'ArrowLeft')) {\n                // Handling long press case on Chromium/Safari macOS + arrow key => pretend the character was selected\n                if (_debugComposition) {\n                    console.log(`[compositionstart] Handling long press case on macOS + arrow key`, e);\n                }\n                // Pretend the previous character was composed (in order to get it removed by subsequent compositionupdate events)\n                currentComposition.handleCompositionUpdate('x');\n                this._onCompositionStart.fire({ data: e.data });\n                return;\n            }\n            if (this._browser.isAndroid) {\n                // when tapping on the editor, Android enters composition mode to edit the current word\n                // so we cannot clear the textarea on Android and we must pretend the current word was selected\n                this._onCompositionStart.fire({ data: e.data });\n                return;\n            }\n            this._onCompositionStart.fire({ data: e.data });\n        }));\n        this._register(this._textArea.onCompositionUpdate((e) => {\n            if (_debugComposition) {\n                console.log(`[compositionupdate]`, e);\n            }\n            const currentComposition = this._currentComposition;\n            if (!currentComposition) {\n                // should not be possible to receive a 'compositionupdate' without a 'compositionstart'\n                return;\n            }\n            if (this._browser.isAndroid) {\n                // On Android, the data sent with the composition update event is unusable.\n                // For example, if the cursor is in the middle of a word like Mic|osoft\n                // and Microsoft is chosen from the keyboard's suggestions, the e.data will contain \"Microsoft\".\n                // This is not really usable because it doesn't tell us where the edit began and where it ended.\n                const newState = TextAreaState.readFromTextArea(this._textArea);\n                const typeInput = TextAreaState.deduceAndroidCompositionInput(this._textAreaState, newState);\n                this._textAreaState = newState;\n                this._onType.fire(typeInput);\n                this._onCompositionUpdate.fire(e);\n                return;\n            }\n            const typeInput = currentComposition.handleCompositionUpdate(e.data);\n            this._textAreaState = TextAreaState.readFromTextArea(this._textArea);\n            this._onType.fire(typeInput);\n            this._onCompositionUpdate.fire(e);\n        }));\n        this._register(this._textArea.onCompositionEnd((e) => {\n            if (_debugComposition) {\n                console.log(`[compositionend]`, e);\n            }\n            const currentComposition = this._currentComposition;\n            if (!currentComposition) {\n                // https://github.com/microsoft/monaco-editor/issues/1663\n                // On iOS 13.2, Chinese system IME randomly trigger an additional compositionend event with empty data\n                return;\n            }\n            this._currentComposition = null;\n            if (this._browser.isAndroid) {\n                // On Android, the data sent with the composition update event is unusable.\n                // For example, if the cursor is in the middle of a word like Mic|osoft\n                // and Microsoft is chosen from the keyboard's suggestions, the e.data will contain \"Microsoft\".\n                // This is not really usable because it doesn't tell us where the edit began and where it ended.\n                const newState = TextAreaState.readFromTextArea(this._textArea);\n                const typeInput = TextAreaState.deduceAndroidCompositionInput(this._textAreaState, newState);\n                this._textAreaState = newState;\n                this._onType.fire(typeInput);\n                this._onCompositionEnd.fire();\n                return;\n            }\n            const typeInput = currentComposition.handleCompositionUpdate(e.data);\n            this._textAreaState = TextAreaState.readFromTextArea(this._textArea);\n            this._onType.fire(typeInput);\n            this._onCompositionEnd.fire();\n        }));\n        this._register(this._textArea.onInput((e) => {\n            if (_debugComposition) {\n                console.log(`[input]`, e);\n            }\n            // Pretend here we touched the text area, as the `input` event will most likely\n            // result in a `selectionchange` event which we want to ignore\n            this._textArea.setIgnoreSelectionChangeTime('received input event');\n            if (this._currentComposition) {\n                return;\n            }\n            const newState = TextAreaState.readFromTextArea(this._textArea);\n            const typeInput = TextAreaState.deduceInput(this._textAreaState, newState, /*couldBeEmojiInput*/ this._OS === 2 /* OperatingSystem.Macintosh */);\n            if (typeInput.replacePrevCharCnt === 0 && typeInput.text.length === 1 && strings.isHighSurrogate(typeInput.text.charCodeAt(0))) {\n                // Ignore invalid input but keep it around for next time\n                return;\n            }\n            this._textAreaState = newState;\n            if (typeInput.text !== ''\n                || typeInput.replacePrevCharCnt !== 0\n                || typeInput.replaceNextCharCnt !== 0\n                || typeInput.positionDelta !== 0) {\n                this._onType.fire(typeInput);\n            }\n        }));\n        // --- Clipboard operations\n        this._register(this._textArea.onCut((e) => {\n            // Pretend here we touched the text area, as the `cut` event will most likely\n            // result in a `selectionchange` event which we want to ignore\n            this._textArea.setIgnoreSelectionChangeTime('received cut event');\n            this._ensureClipboardGetsEditorSelection(e);\n            this._asyncTriggerCut.schedule();\n        }));\n        this._register(this._textArea.onCopy((e) => {\n            this._ensureClipboardGetsEditorSelection(e);\n        }));\n        this._register(this._textArea.onPaste((e) => {\n            // Pretend here we touched the text area, as the `paste` event will most likely\n            // result in a `selectionchange` event which we want to ignore\n            this._textArea.setIgnoreSelectionChangeTime('received paste event');\n            e.preventDefault();\n            if (!e.clipboardData) {\n                return;\n            }\n            let [text, metadata] = ClipboardEventUtils.getTextData(e.clipboardData);\n            if (!text) {\n                return;\n            }\n            // try the in-memory store\n            metadata = metadata || InMemoryClipboardMetadataManager.INSTANCE.get(text);\n            this._onPaste.fire({\n                text: text,\n                metadata: metadata\n            });\n        }));\n        this._register(this._textArea.onFocus(() => {\n            const hadFocus = this._hasFocus;\n            this._setHasFocus(true);\n            if (this._browser.isSafari && !hadFocus && this._hasFocus) {\n                // When \"tabbing into\" the textarea, immediately after dispatching the 'focus' event,\n                // Safari will always move the selection at offset 0 in the textarea\n                this._asyncFocusGainWriteScreenReaderContent.schedule();\n            }\n        }));\n        this._register(this._textArea.onBlur(() => {\n            if (this._currentComposition) {\n                // See https://github.com/microsoft/vscode/issues/112621\n                // where compositionend is not triggered when the editor\n                // is taken off-dom during a composition\n                // Clear the flag to be able to write to the textarea\n                this._currentComposition = null;\n                // Clear the textarea to avoid an unwanted cursor type\n                this.writeScreenReaderContent('blurWithoutCompositionEnd');\n                // Fire artificial composition end\n                this._onCompositionEnd.fire();\n            }\n            this._setHasFocus(false);\n        }));\n        this._register(this._textArea.onSyntheticTap(() => {\n            if (this._browser.isAndroid && this._currentComposition) {\n                // on Android, tapping does not cancel the current composition, so the\n                // textarea is stuck showing the old composition\n                // Clear the flag to be able to write to the textarea\n                this._currentComposition = null;\n                // Clear the textarea to avoid an unwanted cursor type\n                this.writeScreenReaderContent('tapWithoutCompositionEnd');\n                // Fire artificial composition end\n                this._onCompositionEnd.fire();\n            }\n        }));\n    }\n    _installSelectionChangeListener() {\n        // See https://github.com/microsoft/vscode/issues/27216 and https://github.com/microsoft/vscode/issues/98256\n        // When using a Braille display, it is possible for users to reposition the\n        // system caret. This is reflected in Chrome as a `selectionchange` event.\n        //\n        // The `selectionchange` event appears to be emitted under numerous other circumstances,\n        // so it is quite a challenge to distinguish a `selectionchange` coming in from a user\n        // using a Braille display from all the other cases.\n        //\n        // The problems with the `selectionchange` event are:\n        //  * the event is emitted when the textarea is focused programmatically -- textarea.focus()\n        //  * the event is emitted when the selection is changed in the textarea programmatically -- textarea.setSelectionRange(...)\n        //  * the event is emitted when the value of the textarea is changed programmatically -- textarea.value = '...'\n        //  * the event is emitted when tabbing into the textarea\n        //  * the event is emitted asynchronously (sometimes with a delay as high as a few tens of ms)\n        //  * the event sometimes comes in bursts for a single logical textarea operation\n        // `selectionchange` events often come multiple times for a single logical change\n        // so throttle multiple `selectionchange` events that burst in a short period of time.\n        let previousSelectionChangeEventTime = 0;\n        return dom.addDisposableListener(document, 'selectionchange', (e) => {\n            if (!this._hasFocus) {\n                return;\n            }\n            if (this._currentComposition) {\n                return;\n            }\n            if (!this._browser.isChrome) {\n                // Support only for Chrome until testing happens on other browsers\n                return;\n            }\n            const now = Date.now();\n            const delta1 = now - previousSelectionChangeEventTime;\n            previousSelectionChangeEventTime = now;\n            if (delta1 < 5) {\n                // received another `selectionchange` event within 5ms of the previous `selectionchange` event\n                // => ignore it\n                return;\n            }\n            const delta2 = now - this._textArea.getIgnoreSelectionChangeTime();\n            this._textArea.resetSelectionChangeTime();\n            if (delta2 < 100) {\n                // received a `selectionchange` event within 100ms since we touched the textarea\n                // => ignore it, since we caused it\n                return;\n            }\n            if (!this._textAreaState.selectionStartPosition || !this._textAreaState.selectionEndPosition) {\n                // Cannot correlate a position in the textarea with a position in the editor...\n                return;\n            }\n            const newValue = this._textArea.getValue();\n            if (this._textAreaState.value !== newValue) {\n                // Cannot correlate a position in the textarea with a position in the editor...\n                return;\n            }\n            const newSelectionStart = this._textArea.getSelectionStart();\n            const newSelectionEnd = this._textArea.getSelectionEnd();\n            if (this._textAreaState.selectionStart === newSelectionStart && this._textAreaState.selectionEnd === newSelectionEnd) {\n                // Nothing to do...\n                return;\n            }\n            const _newSelectionStartPosition = this._textAreaState.deduceEditorPosition(newSelectionStart);\n            const newSelectionStartPosition = this._host.deduceModelPosition(_newSelectionStartPosition[0], _newSelectionStartPosition[1], _newSelectionStartPosition[2]);\n            const _newSelectionEndPosition = this._textAreaState.deduceEditorPosition(newSelectionEnd);\n            const newSelectionEndPosition = this._host.deduceModelPosition(_newSelectionEndPosition[0], _newSelectionEndPosition[1], _newSelectionEndPosition[2]);\n            const newSelection = new Selection(newSelectionStartPosition.lineNumber, newSelectionStartPosition.column, newSelectionEndPosition.lineNumber, newSelectionEndPosition.column);\n            this._onSelectionChangeRequest.fire(newSelection);\n        });\n    }\n    dispose() {\n        super.dispose();\n        if (this._selectionChangeListener) {\n            this._selectionChangeListener.dispose();\n            this._selectionChangeListener = null;\n        }\n    }\n    focusTextArea() {\n        // Setting this._hasFocus and writing the screen reader content\n        // will result in a focus() and setSelectionRange() in the textarea\n        this._setHasFocus(true);\n        // If the editor is off DOM, focus cannot be really set, so let's double check that we have managed to set the focus\n        this.refreshFocusState();\n    }\n    isFocused() {\n        return this._hasFocus;\n    }\n    refreshFocusState() {\n        this._setHasFocus(this._textArea.hasFocus());\n    }\n    _setHasFocus(newHasFocus) {\n        if (this._hasFocus === newHasFocus) {\n            // no change\n            return;\n        }\n        this._hasFocus = newHasFocus;\n        if (this._selectionChangeListener) {\n            this._selectionChangeListener.dispose();\n            this._selectionChangeListener = null;\n        }\n        if (this._hasFocus) {\n            this._selectionChangeListener = this._installSelectionChangeListener();\n        }\n        if (this._hasFocus) {\n            this.writeScreenReaderContent('focusgain');\n        }\n        if (this._hasFocus) {\n            this._onFocus.fire();\n        }\n        else {\n            this._onBlur.fire();\n        }\n    }\n    _setAndWriteTextAreaState(reason, textAreaState) {\n        if (!this._hasFocus) {\n            textAreaState = textAreaState.collapseSelection();\n        }\n        textAreaState.writeToTextArea(reason, this._textArea, this._hasFocus);\n        this._textAreaState = textAreaState;\n    }\n    writeScreenReaderContent(reason) {\n        if (this._currentComposition) {\n            // Do not write to the text area when doing composition\n            return;\n        }\n        this._setAndWriteTextAreaState(reason, this._host.getScreenReaderContent(this._textAreaState));\n    }\n    _ensureClipboardGetsEditorSelection(e) {\n        const dataToCopy = this._host.getDataToCopy();\n        const storedMetadata = {\n            version: 1,\n            isFromEmptySelection: dataToCopy.isFromEmptySelection,\n            multicursorText: dataToCopy.multicursorText,\n            mode: dataToCopy.mode\n        };\n        InMemoryClipboardMetadataManager.INSTANCE.set(\n        // When writing \"LINE\\r\\n\" to the clipboard and then pasting,\n        // Firefox pastes \"LINE\\n\", so let's work around this quirk\n        (this._browser.isFirefox ? dataToCopy.text.replace(/\\r\\n/g, '\\n') : dataToCopy.text), storedMetadata);\n        e.preventDefault();\n        if (e.clipboardData) {\n            ClipboardEventUtils.setTextData(e.clipboardData, dataToCopy.text, dataToCopy.html, storedMetadata);\n        }\n    }\n}\nclass ClipboardEventUtils {\n    static getTextData(clipboardData) {\n        const text = clipboardData.getData(Mimes.text);\n        let metadata = null;\n        const rawmetadata = clipboardData.getData('vscode-editor-data');\n        if (typeof rawmetadata === 'string') {\n            try {\n                metadata = JSON.parse(rawmetadata);\n                if (metadata.version !== 1) {\n                    metadata = null;\n                }\n            }\n            catch (err) {\n                // no problem!\n            }\n        }\n        if (text.length === 0 && metadata === null && clipboardData.files.length > 0) {\n            // no textual data pasted, generate text from file names\n            const files = Array.prototype.slice.call(clipboardData.files, 0);\n            return [files.map(file => file.name).join('\\n'), null];\n        }\n        return [text, metadata];\n    }\n    static setTextData(clipboardData, text, html, metadata) {\n        clipboardData.setData(Mimes.text, text);\n        if (typeof html === 'string') {\n            clipboardData.setData('text/html', html);\n        }\n        clipboardData.setData('vscode-editor-data', JSON.stringify(metadata));\n    }\n}\nexport class TextAreaWrapper extends Disposable {\n    constructor(_actual) {\n        super();\n        this._actual = _actual;\n        this.onKeyDown = this._register(dom.createEventEmitter(this._actual, 'keydown')).event;\n        this.onKeyUp = this._register(dom.createEventEmitter(this._actual, 'keyup')).event;\n        this.onCompositionStart = this._register(dom.createEventEmitter(this._actual, 'compositionstart')).event;\n        this.onCompositionUpdate = this._register(dom.createEventEmitter(this._actual, 'compositionupdate')).event;\n        this.onCompositionEnd = this._register(dom.createEventEmitter(this._actual, 'compositionend')).event;\n        this.onInput = this._register(dom.createEventEmitter(this._actual, 'input')).event;\n        this.onCut = this._register(dom.createEventEmitter(this._actual, 'cut')).event;\n        this.onCopy = this._register(dom.createEventEmitter(this._actual, 'copy')).event;\n        this.onPaste = this._register(dom.createEventEmitter(this._actual, 'paste')).event;\n        this.onFocus = this._register(dom.createEventEmitter(this._actual, 'focus')).event;\n        this.onBlur = this._register(dom.createEventEmitter(this._actual, 'blur')).event;\n        this._onSyntheticTap = this._register(new Emitter());\n        this.onSyntheticTap = this._onSyntheticTap.event;\n        this._ignoreSelectionChangeTime = 0;\n        this._register(dom.addDisposableListener(this._actual, TextAreaSyntethicEvents.Tap, () => this._onSyntheticTap.fire()));\n    }\n    hasFocus() {\n        const shadowRoot = dom.getShadowRoot(this._actual);\n        if (shadowRoot) {\n            return shadowRoot.activeElement === this._actual;\n        }\n        else if (dom.isInDOM(this._actual)) {\n            return document.activeElement === this._actual;\n        }\n        else {\n            return false;\n        }\n    }\n    setIgnoreSelectionChangeTime(reason) {\n        this._ignoreSelectionChangeTime = Date.now();\n    }\n    getIgnoreSelectionChangeTime() {\n        return this._ignoreSelectionChangeTime;\n    }\n    resetSelectionChangeTime() {\n        this._ignoreSelectionChangeTime = 0;\n    }\n    getValue() {\n        // console.log('current value: ' + this._textArea.value);\n        return this._actual.value;\n    }\n    setValue(reason, value) {\n        const textArea = this._actual;\n        if (textArea.value === value) {\n            // No change\n            return;\n        }\n        // console.log('reason: ' + reason + ', current value: ' + textArea.value + ' => new value: ' + value);\n        this.setIgnoreSelectionChangeTime('setValue');\n        textArea.value = value;\n    }\n    getSelectionStart() {\n        return this._actual.selectionDirection === 'backward' ? this._actual.selectionEnd : this._actual.selectionStart;\n    }\n    getSelectionEnd() {\n        return this._actual.selectionDirection === 'backward' ? this._actual.selectionStart : this._actual.selectionEnd;\n    }\n    setSelectionRange(reason, selectionStart, selectionEnd) {\n        const textArea = this._actual;\n        let activeElement = null;\n        const shadowRoot = dom.getShadowRoot(textArea);\n        if (shadowRoot) {\n            activeElement = shadowRoot.activeElement;\n        }\n        else {\n            activeElement = document.activeElement;\n        }\n        const currentIsFocused = (activeElement === textArea);\n        const currentSelectionStart = textArea.selectionStart;\n        const currentSelectionEnd = textArea.selectionEnd;\n        if (currentIsFocused && currentSelectionStart === selectionStart && currentSelectionEnd === selectionEnd) {\n            // No change\n            // Firefox iframe bug https://github.com/microsoft/monaco-editor/issues/643#issuecomment-367871377\n            if (browser.isFirefox && window.parent !== window) {\n                textArea.focus();\n            }\n            return;\n        }\n        // console.log('reason: ' + reason + ', setSelectionRange: ' + selectionStart + ' -> ' + selectionEnd);\n        if (currentIsFocused) {\n            // No need to focus, only need to change the selection range\n            this.setIgnoreSelectionChangeTime('setSelectionRange');\n            textArea.setSelectionRange(selectionStart, selectionEnd);\n            if (browser.isFirefox && window.parent !== window) {\n                textArea.focus();\n            }\n            return;\n        }\n        // If the focus is outside the textarea, browsers will try really hard to reveal the textarea.\n        // Here, we try to undo the browser's desperate reveal.\n        try {\n            const scrollState = dom.saveParentsScrollTop(textArea);\n            this.setIgnoreSelectionChangeTime('setSelectionRange');\n            textArea.focus();\n            textArea.setSelectionRange(selectionStart, selectionEnd);\n            dom.restoreParentsScrollTop(textArea, scrollState);\n        }\n        catch (e) {\n            // Sometimes IE throws when setting selection (e.g. textarea is off-DOM)\n        }\n    }\n}\n"],"mappings":"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"}]}