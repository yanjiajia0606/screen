{"remainingRequest":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/thread-loader/dist/cjs.js!/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js!/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/base/common/glob.js","dependencies":[{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/base/common/glob.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/babel.config.js","mtime":1668271197000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js","mtime":456789000000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","isThenable","isEqualOrParent","LRUCache","basename","extname","posix","sep","isLinux","escapeRegExpCharacters","GLOBSTAR","GLOB_SPLIT","PATH_REGEX","NO_PATH_REGEX","ALL_FORWARD_SLASHES","starsToRegExp","starCount","isLastPattern","splitGlobAware","pattern","splitChar","segments","inBraces","inBrackets","curVal","char","push","parseRegExp","regEx","every","segment","previousSegmentWasGlobStar","forEach","index","length","braceVal","bracketVal","res","choices","braceRegExp","map","choice","join","T1","T2","T3","T3_2","T4","T5","CACHE","FALSE","NULL","parsePattern","arg1","options","trim","patternKey","trimForExclusions","parsedPattern","get","wrapRelativePattern","match","test","trivia1","substr","exec","trivia2","trivia3","trivia4and5","toRegExp","set","arg2","wrappedPattern","path","base","allBasenames","allPaths","basenames","patterns","endsWith","slashBase","backslashBase","parsedPatterns","aggregateBasenameMatches","slice","split","filter","patternsLength","i","n","withBasenames","find","reduce","all","current","concat","targetPath","matchPathEnds","usingPosixSep","nativePath","replace","nativePathEnd","targetPathEnd","regExp","RegExp","lastIndex","error","hasSibling","parse","undefined","isRelativePattern","resultPattern","parsedExpression","obj","rp","expression","Object","getOwnPropertyNames","parseExpressionPattern","some","requiresSiblings","resultExpression","resultPromises","resultPromise","name","when","clausePattern","matched","basenamePatterns","aggregate","ch","charCodeAt","indexOf","aggregatedPatterns"],"sources":["/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/base/common/glob.js"],"sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { isThenable } from './async.js';\nimport { isEqualOrParent } from './extpath.js';\nimport { LRUCache } from './map.js';\nimport { basename, extname, posix, sep } from './path.js';\nimport { isLinux } from './platform.js';\nimport { escapeRegExpCharacters } from './strings.js';\nexport const GLOBSTAR = '**';\nexport const GLOB_SPLIT = '/';\nconst PATH_REGEX = '[/\\\\\\\\]'; // any slash or backslash\nconst NO_PATH_REGEX = '[^/\\\\\\\\]'; // any non-slash and non-backslash\nconst ALL_FORWARD_SLASHES = /\\//g;\nfunction starsToRegExp(starCount, isLastPattern) {\n    switch (starCount) {\n        case 0:\n            return '';\n        case 1:\n            return `${NO_PATH_REGEX}*?`; // 1 star matches any number of characters except path separator (/ and \\) - non greedy (?)\n        default:\n            // Matches:  (Path Sep OR Path Val followed by Path Sep) 0-many times except when it's the last pattern\n            //           in which case also matches (Path Sep followed by Path Val)\n            // Group is non capturing because we don't need to capture at all (?:...)\n            // Overall we use non-greedy matching because it could be that we match too much\n            return `(?:${PATH_REGEX}|${NO_PATH_REGEX}+${PATH_REGEX}${isLastPattern ? `|${PATH_REGEX}${NO_PATH_REGEX}+` : ''})*?`;\n    }\n}\nexport function splitGlobAware(pattern, splitChar) {\n    if (!pattern) {\n        return [];\n    }\n    const segments = [];\n    let inBraces = false;\n    let inBrackets = false;\n    let curVal = '';\n    for (const char of pattern) {\n        switch (char) {\n            case splitChar:\n                if (!inBraces && !inBrackets) {\n                    segments.push(curVal);\n                    curVal = '';\n                    continue;\n                }\n                break;\n            case '{':\n                inBraces = true;\n                break;\n            case '}':\n                inBraces = false;\n                break;\n            case '[':\n                inBrackets = true;\n                break;\n            case ']':\n                inBrackets = false;\n                break;\n        }\n        curVal += char;\n    }\n    // Tail\n    if (curVal) {\n        segments.push(curVal);\n    }\n    return segments;\n}\nfunction parseRegExp(pattern) {\n    if (!pattern) {\n        return '';\n    }\n    let regEx = '';\n    // Split up into segments for each slash found\n    const segments = splitGlobAware(pattern, GLOB_SPLIT);\n    // Special case where we only have globstars\n    if (segments.every(segment => segment === GLOBSTAR)) {\n        regEx = '.*';\n    }\n    // Build regex over segments\n    else {\n        let previousSegmentWasGlobStar = false;\n        segments.forEach((segment, index) => {\n            // Treat globstar specially\n            if (segment === GLOBSTAR) {\n                // if we have more than one globstar after another, just ignore it\n                if (previousSegmentWasGlobStar) {\n                    return;\n                }\n                regEx += starsToRegExp(2, index === segments.length - 1);\n            }\n            // Anything else, not globstar\n            else {\n                // States\n                let inBraces = false;\n                let braceVal = '';\n                let inBrackets = false;\n                let bracketVal = '';\n                for (const char of segment) {\n                    // Support brace expansion\n                    if (char !== '}' && inBraces) {\n                        braceVal += char;\n                        continue;\n                    }\n                    // Support brackets\n                    if (inBrackets && (char !== ']' || !bracketVal) /* ] is literally only allowed as first character in brackets to match it */) {\n                        let res;\n                        // range operator\n                        if (char === '-') {\n                            res = char;\n                        }\n                        // negation operator (only valid on first index in bracket)\n                        else if ((char === '^' || char === '!') && !bracketVal) {\n                            res = '^';\n                        }\n                        // glob split matching is not allowed within character ranges\n                        // see http://man7.org/linux/man-pages/man7/glob.7.html\n                        else if (char === GLOB_SPLIT) {\n                            res = '';\n                        }\n                        // anything else gets escaped\n                        else {\n                            res = escapeRegExpCharacters(char);\n                        }\n                        bracketVal += res;\n                        continue;\n                    }\n                    switch (char) {\n                        case '{':\n                            inBraces = true;\n                            continue;\n                        case '[':\n                            inBrackets = true;\n                            continue;\n                        case '}': {\n                            const choices = splitGlobAware(braceVal, ',');\n                            // Converts {foo,bar} => [foo|bar]\n                            const braceRegExp = `(?:${choices.map(choice => parseRegExp(choice)).join('|')})`;\n                            regEx += braceRegExp;\n                            inBraces = false;\n                            braceVal = '';\n                            break;\n                        }\n                        case ']': {\n                            regEx += ('[' + bracketVal + ']');\n                            inBrackets = false;\n                            bracketVal = '';\n                            break;\n                        }\n                        case '?':\n                            regEx += NO_PATH_REGEX; // 1 ? matches any single character except path separator (/ and \\)\n                            continue;\n                        case '*':\n                            regEx += starsToRegExp(1);\n                            continue;\n                        default:\n                            regEx += escapeRegExpCharacters(char);\n                    }\n                }\n                // Tail: Add the slash we had split on if there is more to\n                // come and the remaining pattern is not a globstar\n                // For example if pattern: some/**/*.js we want the \"/\" after\n                // some to be included in the RegEx to prevent a folder called\n                // \"something\" to match as well.\n                if (index < segments.length - 1 && // more segments to come after this\n                    (segments[index + 1] !== GLOBSTAR || // next segment is not **, or...\n                        index + 2 < segments.length // ...next segment is ** but there is more segments after that\n                    )) {\n                    regEx += PATH_REGEX;\n                }\n            }\n            // update globstar state\n            previousSegmentWasGlobStar = (segment === GLOBSTAR);\n        });\n    }\n    return regEx;\n}\n// regexes to check for trivial glob patterns that just check for String#endsWith\nconst T1 = /^\\*\\*\\/\\*\\.[\\w\\.-]+$/; // **/*.something\nconst T2 = /^\\*\\*\\/([\\w\\.-]+)\\/?$/; // **/something\nconst T3 = /^{\\*\\*\\/\\*?[\\w\\.-]+\\/?(,\\*\\*\\/\\*?[\\w\\.-]+\\/?)*}$/; // {**/*.something,**/*.else} or {**/package.json,**/project.json}\nconst T3_2 = /^{\\*\\*\\/\\*?[\\w\\.-]+(\\/(\\*\\*)?)?(,\\*\\*\\/\\*?[\\w\\.-]+(\\/(\\*\\*)?)?)*}$/; // Like T3, with optional trailing /**\nconst T4 = /^\\*\\*((\\/[\\w\\.-]+)+)\\/?$/; // **/something/else\nconst T5 = /^([\\w\\.-]+(\\/[\\w\\.-]+)*)\\/?$/; // something/else\nconst CACHE = new LRUCache(10000); // bounded to 10000 elements\nconst FALSE = function () {\n    return false;\n};\nconst NULL = function () {\n    return null;\n};\nfunction parsePattern(arg1, options) {\n    if (!arg1) {\n        return NULL;\n    }\n    // Handle relative patterns\n    let pattern;\n    if (typeof arg1 !== 'string') {\n        pattern = arg1.pattern;\n    }\n    else {\n        pattern = arg1;\n    }\n    // Whitespace trimming\n    pattern = pattern.trim();\n    // Check cache\n    const patternKey = `${pattern}_${!!options.trimForExclusions}`;\n    let parsedPattern = CACHE.get(patternKey);\n    if (parsedPattern) {\n        return wrapRelativePattern(parsedPattern, arg1);\n    }\n    // Check for Trivials\n    let match;\n    if (T1.test(pattern)) {\n        parsedPattern = trivia1(pattern.substr(4), pattern); // common pattern: **/*.txt just need endsWith check\n    }\n    else if (match = T2.exec(trimForExclusions(pattern, options))) { // common pattern: **/some.txt just need basename check\n        parsedPattern = trivia2(match[1], pattern);\n    }\n    else if ((options.trimForExclusions ? T3_2 : T3).test(pattern)) { // repetition of common patterns (see above) {**/*.txt,**/*.png}\n        parsedPattern = trivia3(pattern, options);\n    }\n    else if (match = T4.exec(trimForExclusions(pattern, options))) { // common pattern: **/something/else just need endsWith check\n        parsedPattern = trivia4and5(match[1].substr(1), pattern, true);\n    }\n    else if (match = T5.exec(trimForExclusions(pattern, options))) { // common pattern: something/else just need equals check\n        parsedPattern = trivia4and5(match[1], pattern, false);\n    }\n    // Otherwise convert to pattern\n    else {\n        parsedPattern = toRegExp(pattern);\n    }\n    // Cache\n    CACHE.set(patternKey, parsedPattern);\n    return wrapRelativePattern(parsedPattern, arg1);\n}\nfunction wrapRelativePattern(parsedPattern, arg2) {\n    if (typeof arg2 === 'string') {\n        return parsedPattern;\n    }\n    const wrappedPattern = function (path, basename) {\n        if (!isEqualOrParent(path, arg2.base, !isLinux)) {\n            // skip glob matching if `base` is not a parent of `path`\n            return null;\n        }\n        // Given we have checked `base` being a parent of `path`,\n        // we can now remove the `base` portion of the `path`\n        // and only match on the remaining path components\n        return parsedPattern(path.substr(arg2.base.length + 1), basename);\n    };\n    // Make sure to preserve associated metadata\n    wrappedPattern.allBasenames = parsedPattern.allBasenames;\n    wrappedPattern.allPaths = parsedPattern.allPaths;\n    wrappedPattern.basenames = parsedPattern.basenames;\n    wrappedPattern.patterns = parsedPattern.patterns;\n    return wrappedPattern;\n}\nfunction trimForExclusions(pattern, options) {\n    return options.trimForExclusions && pattern.endsWith('/**') ? pattern.substr(0, pattern.length - 2) : pattern; // dropping **, tailing / is dropped later\n}\n// common pattern: **/*.txt just need endsWith check\nfunction trivia1(base, pattern) {\n    return function (path, basename) {\n        return typeof path === 'string' && path.endsWith(base) ? pattern : null;\n    };\n}\n// common pattern: **/some.txt just need basename check\nfunction trivia2(base, pattern) {\n    const slashBase = `/${base}`;\n    const backslashBase = `\\\\${base}`;\n    const parsedPattern = function (path, basename) {\n        if (typeof path !== 'string') {\n            return null;\n        }\n        if (basename) {\n            return basename === base ? pattern : null;\n        }\n        return path === base || path.endsWith(slashBase) || path.endsWith(backslashBase) ? pattern : null;\n    };\n    const basenames = [base];\n    parsedPattern.basenames = basenames;\n    parsedPattern.patterns = [pattern];\n    parsedPattern.allBasenames = basenames;\n    return parsedPattern;\n}\n// repetition of common patterns (see above) {**/*.txt,**/*.png}\nfunction trivia3(pattern, options) {\n    const parsedPatterns = aggregateBasenameMatches(pattern.slice(1, -1)\n        .split(',')\n        .map(pattern => parsePattern(pattern, options))\n        .filter(pattern => pattern !== NULL), pattern);\n    const patternsLength = parsedPatterns.length;\n    if (!patternsLength) {\n        return NULL;\n    }\n    if (patternsLength === 1) {\n        return parsedPatterns[0];\n    }\n    const parsedPattern = function (path, basename) {\n        for (let i = 0, n = parsedPatterns.length; i < n; i++) {\n            if (parsedPatterns[i](path, basename)) {\n                return pattern;\n            }\n        }\n        return null;\n    };\n    const withBasenames = parsedPatterns.find(pattern => !!pattern.allBasenames);\n    if (withBasenames) {\n        parsedPattern.allBasenames = withBasenames.allBasenames;\n    }\n    const allPaths = parsedPatterns.reduce((all, current) => current.allPaths ? all.concat(current.allPaths) : all, []);\n    if (allPaths.length) {\n        parsedPattern.allPaths = allPaths;\n    }\n    return parsedPattern;\n}\n// common patterns: **/something/else just need endsWith check, something/else just needs and equals check\nfunction trivia4and5(targetPath, pattern, matchPathEnds) {\n    const usingPosixSep = sep === posix.sep;\n    const nativePath = usingPosixSep ? targetPath : targetPath.replace(ALL_FORWARD_SLASHES, sep);\n    const nativePathEnd = sep + nativePath;\n    const targetPathEnd = posix.sep + targetPath;\n    let parsedPattern;\n    if (matchPathEnds) {\n        parsedPattern = function (path, basename) {\n            return typeof path === 'string' && ((path === nativePath || path.endsWith(nativePathEnd)) || !usingPosixSep && (path === targetPath || path.endsWith(targetPathEnd))) ? pattern : null;\n        };\n    }\n    else {\n        parsedPattern = function (path, basename) {\n            return typeof path === 'string' && (path === nativePath || (!usingPosixSep && path === targetPath)) ? pattern : null;\n        };\n    }\n    parsedPattern.allPaths = [(matchPathEnds ? '*/' : './') + targetPath];\n    return parsedPattern;\n}\nfunction toRegExp(pattern) {\n    try {\n        const regExp = new RegExp(`^${parseRegExp(pattern)}$`);\n        return function (path) {\n            regExp.lastIndex = 0; // reset RegExp to its initial state to reuse it!\n            return typeof path === 'string' && regExp.test(path) ? pattern : null;\n        };\n    }\n    catch (error) {\n        return NULL;\n    }\n}\nexport function match(arg1, path, hasSibling) {\n    if (!arg1 || typeof path !== 'string') {\n        return false;\n    }\n    return parse(arg1)(path, undefined, hasSibling);\n}\nexport function parse(arg1, options = {}) {\n    if (!arg1) {\n        return FALSE;\n    }\n    // Glob with String\n    if (typeof arg1 === 'string' || isRelativePattern(arg1)) {\n        const parsedPattern = parsePattern(arg1, options);\n        if (parsedPattern === NULL) {\n            return FALSE;\n        }\n        const resultPattern = function (path, basename) {\n            return !!parsedPattern(path, basename);\n        };\n        if (parsedPattern.allBasenames) {\n            resultPattern.allBasenames = parsedPattern.allBasenames;\n        }\n        if (parsedPattern.allPaths) {\n            resultPattern.allPaths = parsedPattern.allPaths;\n        }\n        return resultPattern;\n    }\n    // Glob with Expression\n    return parsedExpression(arg1, options);\n}\nexport function isRelativePattern(obj) {\n    const rp = obj;\n    if (!rp) {\n        return false;\n    }\n    return typeof rp.base === 'string' && typeof rp.pattern === 'string';\n}\nfunction parsedExpression(expression, options) {\n    const parsedPatterns = aggregateBasenameMatches(Object.getOwnPropertyNames(expression)\n        .map(pattern => parseExpressionPattern(pattern, expression[pattern], options))\n        .filter(pattern => pattern !== NULL));\n    const patternsLength = parsedPatterns.length;\n    if (!patternsLength) {\n        return NULL;\n    }\n    if (!parsedPatterns.some(parsedPattern => !!parsedPattern.requiresSiblings)) {\n        if (patternsLength === 1) {\n            return parsedPatterns[0];\n        }\n        const resultExpression = function (path, basename) {\n            let resultPromises = undefined;\n            for (let i = 0, n = parsedPatterns.length; i < n; i++) {\n                const result = parsedPatterns[i](path, basename);\n                if (typeof result === 'string') {\n                    return result; // immediately return as soon as the first expression matches\n                }\n                // If the result is a promise, we have to keep it for\n                // later processing and await the result properly.\n                if (isThenable(result)) {\n                    if (!resultPromises) {\n                        resultPromises = [];\n                    }\n                    resultPromises.push(result);\n                }\n            }\n            // With result promises, we have to loop over each and\n            // await the result before we can return any result.\n            if (resultPromises) {\n                return (() => __awaiter(this, void 0, void 0, function* () {\n                    for (const resultPromise of resultPromises) {\n                        const result = yield resultPromise;\n                        if (typeof result === 'string') {\n                            return result;\n                        }\n                    }\n                    return null;\n                }))();\n            }\n            return null;\n        };\n        const withBasenames = parsedPatterns.find(pattern => !!pattern.allBasenames);\n        if (withBasenames) {\n            resultExpression.allBasenames = withBasenames.allBasenames;\n        }\n        const allPaths = parsedPatterns.reduce((all, current) => current.allPaths ? all.concat(current.allPaths) : all, []);\n        if (allPaths.length) {\n            resultExpression.allPaths = allPaths;\n        }\n        return resultExpression;\n    }\n    const resultExpression = function (path, base, hasSibling) {\n        let name = undefined;\n        let resultPromises = undefined;\n        for (let i = 0, n = parsedPatterns.length; i < n; i++) {\n            // Pattern matches path\n            const parsedPattern = parsedPatterns[i];\n            if (parsedPattern.requiresSiblings && hasSibling) {\n                if (!base) {\n                    base = basename(path);\n                }\n                if (!name) {\n                    name = base.substr(0, base.length - extname(path).length);\n                }\n            }\n            const result = parsedPattern(path, base, name, hasSibling);\n            if (typeof result === 'string') {\n                return result; // immediately return as soon as the first expression matches\n            }\n            // If the result is a promise, we have to keep it for\n            // later processing and await the result properly.\n            if (isThenable(result)) {\n                if (!resultPromises) {\n                    resultPromises = [];\n                }\n                resultPromises.push(result);\n            }\n        }\n        // With result promises, we have to loop over each and\n        // await the result before we can return any result.\n        if (resultPromises) {\n            return (() => __awaiter(this, void 0, void 0, function* () {\n                for (const resultPromise of resultPromises) {\n                    const result = yield resultPromise;\n                    if (typeof result === 'string') {\n                        return result;\n                    }\n                }\n                return null;\n            }))();\n        }\n        return null;\n    };\n    const withBasenames = parsedPatterns.find(pattern => !!pattern.allBasenames);\n    if (withBasenames) {\n        resultExpression.allBasenames = withBasenames.allBasenames;\n    }\n    const allPaths = parsedPatterns.reduce((all, current) => current.allPaths ? all.concat(current.allPaths) : all, []);\n    if (allPaths.length) {\n        resultExpression.allPaths = allPaths;\n    }\n    return resultExpression;\n}\nfunction parseExpressionPattern(pattern, value, options) {\n    if (value === false) {\n        return NULL; // pattern is disabled\n    }\n    const parsedPattern = parsePattern(pattern, options);\n    if (parsedPattern === NULL) {\n        return NULL;\n    }\n    // Expression Pattern is <boolean>\n    if (typeof value === 'boolean') {\n        return parsedPattern;\n    }\n    // Expression Pattern is <SiblingClause>\n    if (value) {\n        const when = value.when;\n        if (typeof when === 'string') {\n            const result = (path, basename, name, hasSibling) => {\n                if (!hasSibling || !parsedPattern(path, basename)) {\n                    return null;\n                }\n                const clausePattern = when.replace('$(basename)', name);\n                const matched = hasSibling(clausePattern);\n                return isThenable(matched) ?\n                    matched.then(match => match ? pattern : null) :\n                    matched ? pattern : null;\n            };\n            result.requiresSiblings = true;\n            return result;\n        }\n    }\n    // Expression is anything\n    return parsedPattern;\n}\nfunction aggregateBasenameMatches(parsedPatterns, result) {\n    const basenamePatterns = parsedPatterns.filter(parsedPattern => !!parsedPattern.basenames);\n    if (basenamePatterns.length < 2) {\n        return parsedPatterns;\n    }\n    const basenames = basenamePatterns.reduce((all, current) => {\n        const basenames = current.basenames;\n        return basenames ? all.concat(basenames) : all;\n    }, []);\n    let patterns;\n    if (result) {\n        patterns = [];\n        for (let i = 0, n = basenames.length; i < n; i++) {\n            patterns.push(result);\n        }\n    }\n    else {\n        patterns = basenamePatterns.reduce((all, current) => {\n            const patterns = current.patterns;\n            return patterns ? all.concat(patterns) : all;\n        }, []);\n    }\n    const aggregate = function (path, basename) {\n        if (typeof path !== 'string') {\n            return null;\n        }\n        if (!basename) {\n            let i;\n            for (i = path.length; i > 0; i--) {\n                const ch = path.charCodeAt(i - 1);\n                if (ch === 47 /* CharCode.Slash */ || ch === 92 /* CharCode.Backslash */) {\n                    break;\n                }\n            }\n            basename = path.substr(i);\n        }\n        const index = basenames.indexOf(basename);\n        return index !== -1 ? patterns[index] : null;\n    };\n    aggregate.basenames = basenames;\n    aggregate.patterns = patterns;\n    aggregate.allBasenames = basenames;\n    const aggregatedPatterns = parsedPatterns.filter(parsedPattern => !parsedPattern.basenames);\n    aggregatedPatterns.push(aggregate);\n    return aggregatedPatterns;\n}\n"],"mappings":"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"}]}