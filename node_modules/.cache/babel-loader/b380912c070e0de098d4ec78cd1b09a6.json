{"remainingRequest":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/thread-loader/dist/cjs.js!/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js!/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/browser/coreCommands.js","dependencies":[{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/browser/coreCommands.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/babel.config.js","mtime":1668271197000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js","mtime":456789000000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["nls","isFirefox","types","status","Command","EditorCommand","registerEditorCommand","UndoCommand","RedoCommand","SelectAllCommand","ICodeEditorService","ColumnSelection","CursorState","DeleteOperations","CursorMove","CursorMove_","CursorMoveCommands","TypeOperations","Position","Range","EditorContextKeys","ContextKeyExpr","KeybindingsRegistry","CORE_WEIGHT","CoreEditorCommand","accessor","editor","args","viewModel","_getViewModel","runCoreEditorCommand","EditorScroll_","isEditorScrollArgs","arg","isObject","scrollArg","isString","to","isUndefined","by","value","isNumber","revealCursor","isBoolean","description","name","constraint","schema","RawDirection","Up","Down","RawUnit","Line","WrappedLine","Page","HalfPage","Editor","parse","direction","unit","Math","floor","select","RevealLine_","isRevealLineArgs","reveaLineArg","lineNumber","at","RawAtArgument","Top","Center","Bottom","EditorOrNativeTextInputCommand","target","addImplementation","focusedEditor","get","getFocusedCodeEditor","hasTextFocus","_runEditorCommand","activeElement","document","indexOf","tagName","toLowerCase","runDOMCommand","activeEditor","getActiveCodeEditor","focus","result","runEditorCommand","CoreNavigationCommands","BaseMoveToCommand","opts","_minimalReveal","minimalReveal","_inSelectionMode","inSelectionMode","model","pushStackElement","cursorStateChanged","setCursorStates","source","moveTo","getPrimaryCursorState","position","viewPosition","revealPrimaryCursor","MoveTo","id","precondition","undefined","MoveToSelect","ColumnSelectCommand","_getColumnSelectResult","getCursorColumnSelectData","viewStates","map","viewState","fromViewState","setCursorColumnSelectData","isReal","fromViewLineNumber","fromLineNumber","fromViewVisualColumn","fromVisualColumn","toViewLineNumber","toLineNumber","toViewVisualColumn","toVisualColumn","reversed","revealTopMostCursor","revealBottomMostCursor","ColumnSelect","primary","prevColumnSelectData","validatedPosition","validatePosition","validatedViewPosition","coordinatesConverter","validateViewPosition","column","doColumnSelect","mouseColumn","columnSelect","cursorConfig","CursorColumnSelectLeft","kbOpts","weight","kbExpr","textInputFocus","linux","columnSelectLeft","CursorColumnSelectRight","columnSelectRight","ColumnSelectUpCommand","_isPaged","isPaged","columnSelectUp","CursorColumnSelectUp","CursorColumnSelectPageUp","ColumnSelectDownCommand","columnSelectDown","CursorColumnSelectDown","CursorColumnSelectPageDown","CursorMoveImpl","parsed","_runCursorMove","_move","getCursorStates","cursors","simpleMove","viewportMove","CursorMoveBasedCommand","_staticArgs","dynamicArgs","pageSize","CursorLeft","mac","secondary","CursorLeftSelect","CursorRight","CursorRightSelect","CursorUp","CursorUpSelect","CursorPageUp","CursorPageUpSelect","CursorDown","CursorDownSelect","CursorPageDown","CursorPageDownSelect","CreateCursor","newState","wholeLine","line","states","length","newModelPosition","modelState","newViewPosition","i","len","state","selection","containsPosition","splice","push","LastCursorMoveToSelect","lastAddedCursorIndex","getLastAddedCursorIndex","newStates","slice","HomeCommand","moveToBeginningOfLine","CursorHome","CursorHomeSelect","LineStartCommand","_exec","cursor","fromModelState","move","CursorLineStart","CursorLineStartSelect","EndCommand","moveToEndOfLine","sticky","CursorEnd","type","properties","localize","default","CursorEndSelect","LineEndCommand","maxColumn","getLineMaxColumn","CursorLineEnd","CursorLineEndSelect","TopCommand","moveToBeginningOfBuffer","CursorTop","CursorTopSelect","BottomCommand","moveToEndOfBuffer","CursorBottom","CursorBottomSelect","EditorScrollImpl","_runEditorScroll","desiredScrollTop","_computeDesiredScrollTop","desiredVisibleViewRange","getCompletelyVisibleViewRangeAtScrollTop","findPositionInViewportIfOutside","viewLayout","setScrollPosition","scrollTop","visibleViewRange","getCompletelyVisibleViewRange","visibleModelRange","convertViewRangeToModelRange","desiredTopModelLineNumber","max","startLineNumber","min","getLineCount","convertModelPositionToViewPosition","getVerticalOffsetForLineNumber","noOfLines","round","deltaLines","getCurrentScrollTop","lineHeight","EditorScroll","ScrollLineUp","ScrollPageUp","win","ScrollEditorTop","ScrollLineDown","ScrollPageDown","ScrollEditorBottom","WordCommand","word","WordSelect","WordSelectDrag","LastCursorWordSelect","lastAddedState","hasSelection","LineCommand","LineSelect","LineSelectDrag","LastCursorLineCommand","LastCursorLineSelect","LastCursorLineSelectDrag","CancelSelection","hasNonEmptySelection","cancelSelection","RemoveSecondaryCursors","hasMultipleSelections","RevealLine","revealLineArg","lineNumberArg","parseInt","lineCount","range","revealAt","viewRange","convertModelRangeToViewRange","revealRange","SelectAll","execCommand","selectAll","SetSelection","fromModelSelection","columnSelectionCondition","and","columnSelection","registerColumnSelection","keybinding","registerKeybindingRule","when","registerCommand","command","register","CoreEditingCommands","CoreEditingCommand","runCoreEditingCommand","LineBreakInsert","writable","pushUndoStop","executeCommands","lineBreakInsert","s","Outdent","editorTextFocus","tabDoesNotMoveFocus","outdent","Tab","tab","DeleteLeft","deleteLeft","getPrevEditOperationType","getCursorAutoClosedCharacters","shouldPushStackElementBefore","commands","setPrevEditOperationType","DeleteRight","deleteRight","Undo","hasModel","getOption","getModel","undo","Redo","redo","EditorHandlerCommand","handlerId","_handlerId","trigger","registerOverwritableCommand"],"sources":["/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/browser/coreCommands.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../nls.js';\nimport { isFirefox } from '../../base/browser/browser.js';\nimport * as types from '../../base/common/types.js';\nimport { status } from '../../base/browser/ui/aria/aria.js';\nimport { Command, EditorCommand, registerEditorCommand, UndoCommand, RedoCommand, SelectAllCommand } from './editorExtensions.js';\nimport { ICodeEditorService } from './services/codeEditorService.js';\nimport { ColumnSelection } from '../common/cursor/cursorColumnSelection.js';\nimport { CursorState } from '../common/cursorCommon.js';\nimport { DeleteOperations } from '../common/cursor/cursorDeleteOperations.js';\nimport { CursorMove as CursorMove_, CursorMoveCommands } from '../common/cursor/cursorMoveCommands.js';\nimport { TypeOperations } from '../common/cursor/cursorTypeOperations.js';\nimport { Position } from '../common/core/position.js';\nimport { Range } from '../common/core/range.js';\nimport { EditorContextKeys } from '../common/editorContextKeys.js';\nimport { ContextKeyExpr } from '../../platform/contextkey/common/contextkey.js';\nimport { KeybindingsRegistry } from '../../platform/keybinding/common/keybindingsRegistry.js';\nconst CORE_WEIGHT = 0 /* KeybindingWeight.EditorCore */;\nexport class CoreEditorCommand extends EditorCommand {\n    runEditorCommand(accessor, editor, args) {\n        const viewModel = editor._getViewModel();\n        if (!viewModel) {\n            // the editor has no view => has no cursors\n            return;\n        }\n        this.runCoreEditorCommand(viewModel, args || {});\n    }\n}\nexport var EditorScroll_;\n(function (EditorScroll_) {\n    const isEditorScrollArgs = function (arg) {\n        if (!types.isObject(arg)) {\n            return false;\n        }\n        const scrollArg = arg;\n        if (!types.isString(scrollArg.to)) {\n            return false;\n        }\n        if (!types.isUndefined(scrollArg.by) && !types.isString(scrollArg.by)) {\n            return false;\n        }\n        if (!types.isUndefined(scrollArg.value) && !types.isNumber(scrollArg.value)) {\n            return false;\n        }\n        if (!types.isUndefined(scrollArg.revealCursor) && !types.isBoolean(scrollArg.revealCursor)) {\n            return false;\n        }\n        return true;\n    };\n    EditorScroll_.description = {\n        description: 'Scroll editor in the given direction',\n        args: [\n            {\n                name: 'Editor scroll argument object',\n                description: `Property-value pairs that can be passed through this argument:\n\t\t\t\t\t* 'to': A mandatory direction value.\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t\t'up', 'down'\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t* 'by': Unit to move. Default is computed based on 'to' value.\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t\t'line', 'wrappedLine', 'page', 'halfPage', 'editor'\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t* 'value': Number of units to move. Default is '1'.\n\t\t\t\t\t* 'revealCursor': If 'true' reveals the cursor if it is outside view port.\n\t\t\t\t`,\n                constraint: isEditorScrollArgs,\n                schema: {\n                    'type': 'object',\n                    'required': ['to'],\n                    'properties': {\n                        'to': {\n                            'type': 'string',\n                            'enum': ['up', 'down']\n                        },\n                        'by': {\n                            'type': 'string',\n                            'enum': ['line', 'wrappedLine', 'page', 'halfPage', 'editor']\n                        },\n                        'value': {\n                            'type': 'number',\n                            'default': 1\n                        },\n                        'revealCursor': {\n                            'type': 'boolean',\n                        }\n                    }\n                }\n            }\n        ]\n    };\n    /**\n     * Directions in the view for editor scroll command.\n     */\n    EditorScroll_.RawDirection = {\n        Up: 'up',\n        Down: 'down',\n    };\n    /**\n     * Units for editor scroll 'by' argument\n     */\n    EditorScroll_.RawUnit = {\n        Line: 'line',\n        WrappedLine: 'wrappedLine',\n        Page: 'page',\n        HalfPage: 'halfPage',\n        Editor: 'editor'\n    };\n    function parse(args) {\n        let direction;\n        switch (args.to) {\n            case EditorScroll_.RawDirection.Up:\n                direction = 1 /* Direction.Up */;\n                break;\n            case EditorScroll_.RawDirection.Down:\n                direction = 2 /* Direction.Down */;\n                break;\n            default:\n                // Illegal arguments\n                return null;\n        }\n        let unit;\n        switch (args.by) {\n            case EditorScroll_.RawUnit.Line:\n                unit = 1 /* Unit.Line */;\n                break;\n            case EditorScroll_.RawUnit.WrappedLine:\n                unit = 2 /* Unit.WrappedLine */;\n                break;\n            case EditorScroll_.RawUnit.Page:\n                unit = 3 /* Unit.Page */;\n                break;\n            case EditorScroll_.RawUnit.HalfPage:\n                unit = 4 /* Unit.HalfPage */;\n                break;\n            case EditorScroll_.RawUnit.Editor:\n                unit = 5 /* Unit.Editor */;\n                break;\n            default:\n                unit = 2 /* Unit.WrappedLine */;\n        }\n        const value = Math.floor(args.value || 1);\n        const revealCursor = !!args.revealCursor;\n        return {\n            direction: direction,\n            unit: unit,\n            value: value,\n            revealCursor: revealCursor,\n            select: (!!args.select)\n        };\n    }\n    EditorScroll_.parse = parse;\n})(EditorScroll_ || (EditorScroll_ = {}));\nexport var RevealLine_;\n(function (RevealLine_) {\n    const isRevealLineArgs = function (arg) {\n        if (!types.isObject(arg)) {\n            return false;\n        }\n        const reveaLineArg = arg;\n        if (!types.isNumber(reveaLineArg.lineNumber) && !types.isString(reveaLineArg.lineNumber)) {\n            return false;\n        }\n        if (!types.isUndefined(reveaLineArg.at) && !types.isString(reveaLineArg.at)) {\n            return false;\n        }\n        return true;\n    };\n    RevealLine_.description = {\n        description: 'Reveal the given line at the given logical position',\n        args: [\n            {\n                name: 'Reveal line argument object',\n                description: `Property-value pairs that can be passed through this argument:\n\t\t\t\t\t* 'lineNumber': A mandatory line number value.\n\t\t\t\t\t* 'at': Logical position at which line has to be revealed.\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t\t'top', 'center', 'bottom'\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t`,\n                constraint: isRevealLineArgs,\n                schema: {\n                    'type': 'object',\n                    'required': ['lineNumber'],\n                    'properties': {\n                        'lineNumber': {\n                            'type': ['number', 'string'],\n                        },\n                        'at': {\n                            'type': 'string',\n                            'enum': ['top', 'center', 'bottom']\n                        }\n                    }\n                }\n            }\n        ]\n    };\n    /**\n     * Values for reveal line 'at' argument\n     */\n    RevealLine_.RawAtArgument = {\n        Top: 'top',\n        Center: 'center',\n        Bottom: 'bottom'\n    };\n})(RevealLine_ || (RevealLine_ = {}));\nclass EditorOrNativeTextInputCommand {\n    constructor(target) {\n        // 1. handle case when focus is in editor.\n        target.addImplementation(10000, 'code-editor', (accessor, args) => {\n            // Only if editor text focus (i.e. not if editor has widget focus).\n            const focusedEditor = accessor.get(ICodeEditorService).getFocusedCodeEditor();\n            if (focusedEditor && focusedEditor.hasTextFocus()) {\n                return this._runEditorCommand(accessor, focusedEditor, args);\n            }\n            return false;\n        });\n        // 2. handle case when focus is in some other `input` / `textarea`.\n        target.addImplementation(1000, 'generic-dom-input-textarea', (accessor, args) => {\n            // Only if focused on an element that allows for entering text\n            const activeElement = document.activeElement;\n            if (activeElement && ['input', 'textarea'].indexOf(activeElement.tagName.toLowerCase()) >= 0) {\n                this.runDOMCommand();\n                return true;\n            }\n            return false;\n        });\n        // 3. (default) handle case when focus is somewhere else.\n        target.addImplementation(0, 'generic-dom', (accessor, args) => {\n            // Redirecting to active editor\n            const activeEditor = accessor.get(ICodeEditorService).getActiveCodeEditor();\n            if (activeEditor) {\n                activeEditor.focus();\n                return this._runEditorCommand(accessor, activeEditor, args);\n            }\n            return false;\n        });\n    }\n    _runEditorCommand(accessor, editor, args) {\n        const result = this.runEditorCommand(accessor, editor, args);\n        if (result) {\n            return result;\n        }\n        return true;\n    }\n}\nexport var CoreNavigationCommands;\n(function (CoreNavigationCommands) {\n    class BaseMoveToCommand extends CoreEditorCommand {\n        constructor(opts) {\n            super(opts);\n            this._minimalReveal = opts.minimalReveal;\n            this._inSelectionMode = opts.inSelectionMode;\n        }\n        runCoreEditorCommand(viewModel, args) {\n            viewModel.model.pushStackElement();\n            const cursorStateChanged = viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, [\n                CursorMoveCommands.moveTo(viewModel, viewModel.getPrimaryCursorState(), this._inSelectionMode, args.position, args.viewPosition)\n            ]);\n            if (cursorStateChanged) {\n                viewModel.revealPrimaryCursor(args.source, true, this._minimalReveal);\n            }\n        }\n    }\n    CoreNavigationCommands.MoveTo = registerEditorCommand(new BaseMoveToCommand({\n        id: '_moveTo',\n        minimalReveal: true,\n        inSelectionMode: false,\n        precondition: undefined\n    }));\n    CoreNavigationCommands.MoveToSelect = registerEditorCommand(new BaseMoveToCommand({\n        id: '_moveToSelect',\n        minimalReveal: false,\n        inSelectionMode: true,\n        precondition: undefined\n    }));\n    class ColumnSelectCommand extends CoreEditorCommand {\n        runCoreEditorCommand(viewModel, args) {\n            viewModel.model.pushStackElement();\n            const result = this._getColumnSelectResult(viewModel, viewModel.getPrimaryCursorState(), viewModel.getCursorColumnSelectData(), args);\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, result.viewStates.map((viewState) => CursorState.fromViewState(viewState)));\n            viewModel.setCursorColumnSelectData({\n                isReal: true,\n                fromViewLineNumber: result.fromLineNumber,\n                fromViewVisualColumn: result.fromVisualColumn,\n                toViewLineNumber: result.toLineNumber,\n                toViewVisualColumn: result.toVisualColumn\n            });\n            if (result.reversed) {\n                viewModel.revealTopMostCursor(args.source);\n            }\n            else {\n                viewModel.revealBottomMostCursor(args.source);\n            }\n        }\n    }\n    CoreNavigationCommands.ColumnSelect = registerEditorCommand(new class extends ColumnSelectCommand {\n        constructor() {\n            super({\n                id: 'columnSelect',\n                precondition: undefined\n            });\n        }\n        _getColumnSelectResult(viewModel, primary, prevColumnSelectData, args) {\n            // validate `args`\n            const validatedPosition = viewModel.model.validatePosition(args.position);\n            const validatedViewPosition = viewModel.coordinatesConverter.validateViewPosition(new Position(args.viewPosition.lineNumber, args.viewPosition.column), validatedPosition);\n            const fromViewLineNumber = args.doColumnSelect ? prevColumnSelectData.fromViewLineNumber : validatedViewPosition.lineNumber;\n            const fromViewVisualColumn = args.doColumnSelect ? prevColumnSelectData.fromViewVisualColumn : args.mouseColumn - 1;\n            return ColumnSelection.columnSelect(viewModel.cursorConfig, viewModel, fromViewLineNumber, fromViewVisualColumn, validatedViewPosition.lineNumber, args.mouseColumn - 1);\n        }\n    });\n    CoreNavigationCommands.CursorColumnSelectLeft = registerEditorCommand(new class extends ColumnSelectCommand {\n        constructor() {\n            super({\n                id: 'cursorColumnSelectLeft',\n                precondition: undefined,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                    primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 512 /* KeyMod.Alt */ | 15 /* KeyCode.LeftArrow */,\n                    linux: { primary: 0 }\n                }\n            });\n        }\n        _getColumnSelectResult(viewModel, primary, prevColumnSelectData, args) {\n            return ColumnSelection.columnSelectLeft(viewModel.cursorConfig, viewModel, prevColumnSelectData);\n        }\n    });\n    CoreNavigationCommands.CursorColumnSelectRight = registerEditorCommand(new class extends ColumnSelectCommand {\n        constructor() {\n            super({\n                id: 'cursorColumnSelectRight',\n                precondition: undefined,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                    primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 512 /* KeyMod.Alt */ | 17 /* KeyCode.RightArrow */,\n                    linux: { primary: 0 }\n                }\n            });\n        }\n        _getColumnSelectResult(viewModel, primary, prevColumnSelectData, args) {\n            return ColumnSelection.columnSelectRight(viewModel.cursorConfig, viewModel, prevColumnSelectData);\n        }\n    });\n    class ColumnSelectUpCommand extends ColumnSelectCommand {\n        constructor(opts) {\n            super(opts);\n            this._isPaged = opts.isPaged;\n        }\n        _getColumnSelectResult(viewModel, primary, prevColumnSelectData, args) {\n            return ColumnSelection.columnSelectUp(viewModel.cursorConfig, viewModel, prevColumnSelectData, this._isPaged);\n        }\n    }\n    CoreNavigationCommands.CursorColumnSelectUp = registerEditorCommand(new ColumnSelectUpCommand({\n        isPaged: false,\n        id: 'cursorColumnSelectUp',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 512 /* KeyMod.Alt */ | 16 /* KeyCode.UpArrow */,\n            linux: { primary: 0 }\n        }\n    }));\n    CoreNavigationCommands.CursorColumnSelectPageUp = registerEditorCommand(new ColumnSelectUpCommand({\n        isPaged: true,\n        id: 'cursorColumnSelectPageUp',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 512 /* KeyMod.Alt */ | 11 /* KeyCode.PageUp */,\n            linux: { primary: 0 }\n        }\n    }));\n    class ColumnSelectDownCommand extends ColumnSelectCommand {\n        constructor(opts) {\n            super(opts);\n            this._isPaged = opts.isPaged;\n        }\n        _getColumnSelectResult(viewModel, primary, prevColumnSelectData, args) {\n            return ColumnSelection.columnSelectDown(viewModel.cursorConfig, viewModel, prevColumnSelectData, this._isPaged);\n        }\n    }\n    CoreNavigationCommands.CursorColumnSelectDown = registerEditorCommand(new ColumnSelectDownCommand({\n        isPaged: false,\n        id: 'cursorColumnSelectDown',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 512 /* KeyMod.Alt */ | 18 /* KeyCode.DownArrow */,\n            linux: { primary: 0 }\n        }\n    }));\n    CoreNavigationCommands.CursorColumnSelectPageDown = registerEditorCommand(new ColumnSelectDownCommand({\n        isPaged: true,\n        id: 'cursorColumnSelectPageDown',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 512 /* KeyMod.Alt */ | 12 /* KeyCode.PageDown */,\n            linux: { primary: 0 }\n        }\n    }));\n    class CursorMoveImpl extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'cursorMove',\n                precondition: undefined,\n                description: CursorMove_.description\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            const parsed = CursorMove_.parse(args);\n            if (!parsed) {\n                // illegal arguments\n                return;\n            }\n            this._runCursorMove(viewModel, args.source, parsed);\n        }\n        _runCursorMove(viewModel, source, args) {\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(source, 3 /* CursorChangeReason.Explicit */, CursorMoveImpl._move(viewModel, viewModel.getCursorStates(), args));\n            viewModel.revealPrimaryCursor(source, true);\n        }\n        static _move(viewModel, cursors, args) {\n            const inSelectionMode = args.select;\n            const value = args.value;\n            switch (args.direction) {\n                case 0 /* CursorMove_.Direction.Left */:\n                case 1 /* CursorMove_.Direction.Right */:\n                case 2 /* CursorMove_.Direction.Up */:\n                case 3 /* CursorMove_.Direction.Down */:\n                case 4 /* CursorMove_.Direction.PrevBlankLine */:\n                case 5 /* CursorMove_.Direction.NextBlankLine */:\n                case 6 /* CursorMove_.Direction.WrappedLineStart */:\n                case 7 /* CursorMove_.Direction.WrappedLineFirstNonWhitespaceCharacter */:\n                case 8 /* CursorMove_.Direction.WrappedLineColumnCenter */:\n                case 9 /* CursorMove_.Direction.WrappedLineEnd */:\n                case 10 /* CursorMove_.Direction.WrappedLineLastNonWhitespaceCharacter */:\n                    return CursorMoveCommands.simpleMove(viewModel, cursors, args.direction, inSelectionMode, value, args.unit);\n                case 11 /* CursorMove_.Direction.ViewPortTop */:\n                case 13 /* CursorMove_.Direction.ViewPortBottom */:\n                case 12 /* CursorMove_.Direction.ViewPortCenter */:\n                case 14 /* CursorMove_.Direction.ViewPortIfOutside */:\n                    return CursorMoveCommands.viewportMove(viewModel, cursors, args.direction, inSelectionMode, value);\n                default:\n                    return null;\n            }\n        }\n    }\n    CoreNavigationCommands.CursorMoveImpl = CursorMoveImpl;\n    CoreNavigationCommands.CursorMove = registerEditorCommand(new CursorMoveImpl());\n    class CursorMoveBasedCommand extends CoreEditorCommand {\n        constructor(opts) {\n            super(opts);\n            this._staticArgs = opts.args;\n        }\n        runCoreEditorCommand(viewModel, dynamicArgs) {\n            let args = this._staticArgs;\n            if (this._staticArgs.value === -1 /* Constants.PAGE_SIZE_MARKER */) {\n                // -1 is a marker for page size\n                args = {\n                    direction: this._staticArgs.direction,\n                    unit: this._staticArgs.unit,\n                    select: this._staticArgs.select,\n                    value: dynamicArgs.pageSize || viewModel.cursorConfig.pageSize\n                };\n            }\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(dynamicArgs.source, 3 /* CursorChangeReason.Explicit */, CursorMoveCommands.simpleMove(viewModel, viewModel.getCursorStates(), args.direction, args.select, args.value, args.unit));\n            viewModel.revealPrimaryCursor(dynamicArgs.source, true);\n        }\n    }\n    CoreNavigationCommands.CursorLeft = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 0 /* CursorMove_.Direction.Left */,\n            unit: 0 /* CursorMove_.Unit.None */,\n            select: false,\n            value: 1\n        },\n        id: 'cursorLeft',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 15 /* KeyCode.LeftArrow */,\n            mac: { primary: 15 /* KeyCode.LeftArrow */, secondary: [256 /* KeyMod.WinCtrl */ | 32 /* KeyCode.KeyB */] }\n        }\n    }));\n    CoreNavigationCommands.CursorLeftSelect = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 0 /* CursorMove_.Direction.Left */,\n            unit: 0 /* CursorMove_.Unit.None */,\n            select: true,\n            value: 1\n        },\n        id: 'cursorLeftSelect',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 1024 /* KeyMod.Shift */ | 15 /* KeyCode.LeftArrow */\n        }\n    }));\n    CoreNavigationCommands.CursorRight = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 1 /* CursorMove_.Direction.Right */,\n            unit: 0 /* CursorMove_.Unit.None */,\n            select: false,\n            value: 1\n        },\n        id: 'cursorRight',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 17 /* KeyCode.RightArrow */,\n            mac: { primary: 17 /* KeyCode.RightArrow */, secondary: [256 /* KeyMod.WinCtrl */ | 36 /* KeyCode.KeyF */] }\n        }\n    }));\n    CoreNavigationCommands.CursorRightSelect = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 1 /* CursorMove_.Direction.Right */,\n            unit: 0 /* CursorMove_.Unit.None */,\n            select: true,\n            value: 1\n        },\n        id: 'cursorRightSelect',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 1024 /* KeyMod.Shift */ | 17 /* KeyCode.RightArrow */\n        }\n    }));\n    CoreNavigationCommands.CursorUp = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 2 /* CursorMove_.Direction.Up */,\n            unit: 2 /* CursorMove_.Unit.WrappedLine */,\n            select: false,\n            value: 1\n        },\n        id: 'cursorUp',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 16 /* KeyCode.UpArrow */,\n            mac: { primary: 16 /* KeyCode.UpArrow */, secondary: [256 /* KeyMod.WinCtrl */ | 46 /* KeyCode.KeyP */] }\n        }\n    }));\n    CoreNavigationCommands.CursorUpSelect = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 2 /* CursorMove_.Direction.Up */,\n            unit: 2 /* CursorMove_.Unit.WrappedLine */,\n            select: true,\n            value: 1\n        },\n        id: 'cursorUpSelect',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 1024 /* KeyMod.Shift */ | 16 /* KeyCode.UpArrow */,\n            secondary: [2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 16 /* KeyCode.UpArrow */],\n            mac: { primary: 1024 /* KeyMod.Shift */ | 16 /* KeyCode.UpArrow */ },\n            linux: { primary: 1024 /* KeyMod.Shift */ | 16 /* KeyCode.UpArrow */ }\n        }\n    }));\n    CoreNavigationCommands.CursorPageUp = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 2 /* CursorMove_.Direction.Up */,\n            unit: 2 /* CursorMove_.Unit.WrappedLine */,\n            select: false,\n            value: -1 /* Constants.PAGE_SIZE_MARKER */\n        },\n        id: 'cursorPageUp',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 11 /* KeyCode.PageUp */\n        }\n    }));\n    CoreNavigationCommands.CursorPageUpSelect = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 2 /* CursorMove_.Direction.Up */,\n            unit: 2 /* CursorMove_.Unit.WrappedLine */,\n            select: true,\n            value: -1 /* Constants.PAGE_SIZE_MARKER */\n        },\n        id: 'cursorPageUpSelect',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 1024 /* KeyMod.Shift */ | 11 /* KeyCode.PageUp */\n        }\n    }));\n    CoreNavigationCommands.CursorDown = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 3 /* CursorMove_.Direction.Down */,\n            unit: 2 /* CursorMove_.Unit.WrappedLine */,\n            select: false,\n            value: 1\n        },\n        id: 'cursorDown',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 18 /* KeyCode.DownArrow */,\n            mac: { primary: 18 /* KeyCode.DownArrow */, secondary: [256 /* KeyMod.WinCtrl */ | 44 /* KeyCode.KeyN */] }\n        }\n    }));\n    CoreNavigationCommands.CursorDownSelect = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 3 /* CursorMove_.Direction.Down */,\n            unit: 2 /* CursorMove_.Unit.WrappedLine */,\n            select: true,\n            value: 1\n        },\n        id: 'cursorDownSelect',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 1024 /* KeyMod.Shift */ | 18 /* KeyCode.DownArrow */,\n            secondary: [2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 18 /* KeyCode.DownArrow */],\n            mac: { primary: 1024 /* KeyMod.Shift */ | 18 /* KeyCode.DownArrow */ },\n            linux: { primary: 1024 /* KeyMod.Shift */ | 18 /* KeyCode.DownArrow */ }\n        }\n    }));\n    CoreNavigationCommands.CursorPageDown = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 3 /* CursorMove_.Direction.Down */,\n            unit: 2 /* CursorMove_.Unit.WrappedLine */,\n            select: false,\n            value: -1 /* Constants.PAGE_SIZE_MARKER */\n        },\n        id: 'cursorPageDown',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 12 /* KeyCode.PageDown */\n        }\n    }));\n    CoreNavigationCommands.CursorPageDownSelect = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 3 /* CursorMove_.Direction.Down */,\n            unit: 2 /* CursorMove_.Unit.WrappedLine */,\n            select: true,\n            value: -1 /* Constants.PAGE_SIZE_MARKER */\n        },\n        id: 'cursorPageDownSelect',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 1024 /* KeyMod.Shift */ | 12 /* KeyCode.PageDown */\n        }\n    }));\n    CoreNavigationCommands.CreateCursor = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'createCursor',\n                precondition: undefined\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            let newState;\n            if (args.wholeLine) {\n                newState = CursorMoveCommands.line(viewModel, viewModel.getPrimaryCursorState(), false, args.position, args.viewPosition);\n            }\n            else {\n                newState = CursorMoveCommands.moveTo(viewModel, viewModel.getPrimaryCursorState(), false, args.position, args.viewPosition);\n            }\n            const states = viewModel.getCursorStates();\n            // Check if we should remove a cursor (sort of like a toggle)\n            if (states.length > 1) {\n                const newModelPosition = (newState.modelState ? newState.modelState.position : null);\n                const newViewPosition = (newState.viewState ? newState.viewState.position : null);\n                for (let i = 0, len = states.length; i < len; i++) {\n                    const state = states[i];\n                    if (newModelPosition && !state.modelState.selection.containsPosition(newModelPosition)) {\n                        continue;\n                    }\n                    if (newViewPosition && !state.viewState.selection.containsPosition(newViewPosition)) {\n                        continue;\n                    }\n                    // => Remove the cursor\n                    states.splice(i, 1);\n                    viewModel.model.pushStackElement();\n                    viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, states);\n                    return;\n                }\n            }\n            // => Add the new cursor\n            states.push(newState);\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, states);\n        }\n    });\n    CoreNavigationCommands.LastCursorMoveToSelect = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: '_lastCursorMoveToSelect',\n                precondition: undefined\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            const lastAddedCursorIndex = viewModel.getLastAddedCursorIndex();\n            const states = viewModel.getCursorStates();\n            const newStates = states.slice(0);\n            newStates[lastAddedCursorIndex] = CursorMoveCommands.moveTo(viewModel, states[lastAddedCursorIndex], true, args.position, args.viewPosition);\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, newStates);\n        }\n    });\n    class HomeCommand extends CoreEditorCommand {\n        constructor(opts) {\n            super(opts);\n            this._inSelectionMode = opts.inSelectionMode;\n        }\n        runCoreEditorCommand(viewModel, args) {\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, CursorMoveCommands.moveToBeginningOfLine(viewModel, viewModel.getCursorStates(), this._inSelectionMode));\n            viewModel.revealPrimaryCursor(args.source, true);\n        }\n    }\n    CoreNavigationCommands.CursorHome = registerEditorCommand(new HomeCommand({\n        inSelectionMode: false,\n        id: 'cursorHome',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 14 /* KeyCode.Home */,\n            mac: { primary: 14 /* KeyCode.Home */, secondary: [2048 /* KeyMod.CtrlCmd */ | 15 /* KeyCode.LeftArrow */] }\n        }\n    }));\n    CoreNavigationCommands.CursorHomeSelect = registerEditorCommand(new HomeCommand({\n        inSelectionMode: true,\n        id: 'cursorHomeSelect',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 1024 /* KeyMod.Shift */ | 14 /* KeyCode.Home */,\n            mac: { primary: 1024 /* KeyMod.Shift */ | 14 /* KeyCode.Home */, secondary: [2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 15 /* KeyCode.LeftArrow */] }\n        }\n    }));\n    class LineStartCommand extends CoreEditorCommand {\n        constructor(opts) {\n            super(opts);\n            this._inSelectionMode = opts.inSelectionMode;\n        }\n        runCoreEditorCommand(viewModel, args) {\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, this._exec(viewModel.getCursorStates()));\n            viewModel.revealPrimaryCursor(args.source, true);\n        }\n        _exec(cursors) {\n            const result = [];\n            for (let i = 0, len = cursors.length; i < len; i++) {\n                const cursor = cursors[i];\n                const lineNumber = cursor.modelState.position.lineNumber;\n                result[i] = CursorState.fromModelState(cursor.modelState.move(this._inSelectionMode, lineNumber, 1, 0));\n            }\n            return result;\n        }\n    }\n    CoreNavigationCommands.CursorLineStart = registerEditorCommand(new LineStartCommand({\n        inSelectionMode: false,\n        id: 'cursorLineStart',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 0,\n            mac: { primary: 256 /* KeyMod.WinCtrl */ | 31 /* KeyCode.KeyA */ }\n        }\n    }));\n    CoreNavigationCommands.CursorLineStartSelect = registerEditorCommand(new LineStartCommand({\n        inSelectionMode: true,\n        id: 'cursorLineStartSelect',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 0,\n            mac: { primary: 256 /* KeyMod.WinCtrl */ | 1024 /* KeyMod.Shift */ | 31 /* KeyCode.KeyA */ }\n        }\n    }));\n    class EndCommand extends CoreEditorCommand {\n        constructor(opts) {\n            super(opts);\n            this._inSelectionMode = opts.inSelectionMode;\n        }\n        runCoreEditorCommand(viewModel, args) {\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, CursorMoveCommands.moveToEndOfLine(viewModel, viewModel.getCursorStates(), this._inSelectionMode, args.sticky || false));\n            viewModel.revealPrimaryCursor(args.source, true);\n        }\n    }\n    CoreNavigationCommands.CursorEnd = registerEditorCommand(new EndCommand({\n        inSelectionMode: false,\n        id: 'cursorEnd',\n        precondition: undefined,\n        kbOpts: {\n            args: { sticky: false },\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 13 /* KeyCode.End */,\n            mac: { primary: 13 /* KeyCode.End */, secondary: [2048 /* KeyMod.CtrlCmd */ | 17 /* KeyCode.RightArrow */] }\n        },\n        description: {\n            description: `Go to End`,\n            args: [{\n                    name: 'args',\n                    schema: {\n                        type: 'object',\n                        properties: {\n                            'sticky': {\n                                description: nls.localize('stickydesc', \"Stick to the end even when going to longer lines\"),\n                                type: 'boolean',\n                                default: false\n                            }\n                        }\n                    }\n                }]\n        }\n    }));\n    CoreNavigationCommands.CursorEndSelect = registerEditorCommand(new EndCommand({\n        inSelectionMode: true,\n        id: 'cursorEndSelect',\n        precondition: undefined,\n        kbOpts: {\n            args: { sticky: false },\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 1024 /* KeyMod.Shift */ | 13 /* KeyCode.End */,\n            mac: { primary: 1024 /* KeyMod.Shift */ | 13 /* KeyCode.End */, secondary: [2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 17 /* KeyCode.RightArrow */] }\n        },\n        description: {\n            description: `Select to End`,\n            args: [{\n                    name: 'args',\n                    schema: {\n                        type: 'object',\n                        properties: {\n                            'sticky': {\n                                description: nls.localize('stickydesc', \"Stick to the end even when going to longer lines\"),\n                                type: 'boolean',\n                                default: false\n                            }\n                        }\n                    }\n                }]\n        }\n    }));\n    class LineEndCommand extends CoreEditorCommand {\n        constructor(opts) {\n            super(opts);\n            this._inSelectionMode = opts.inSelectionMode;\n        }\n        runCoreEditorCommand(viewModel, args) {\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, this._exec(viewModel, viewModel.getCursorStates()));\n            viewModel.revealPrimaryCursor(args.source, true);\n        }\n        _exec(viewModel, cursors) {\n            const result = [];\n            for (let i = 0, len = cursors.length; i < len; i++) {\n                const cursor = cursors[i];\n                const lineNumber = cursor.modelState.position.lineNumber;\n                const maxColumn = viewModel.model.getLineMaxColumn(lineNumber);\n                result[i] = CursorState.fromModelState(cursor.modelState.move(this._inSelectionMode, lineNumber, maxColumn, 0));\n            }\n            return result;\n        }\n    }\n    CoreNavigationCommands.CursorLineEnd = registerEditorCommand(new LineEndCommand({\n        inSelectionMode: false,\n        id: 'cursorLineEnd',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 0,\n            mac: { primary: 256 /* KeyMod.WinCtrl */ | 35 /* KeyCode.KeyE */ }\n        }\n    }));\n    CoreNavigationCommands.CursorLineEndSelect = registerEditorCommand(new LineEndCommand({\n        inSelectionMode: true,\n        id: 'cursorLineEndSelect',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 0,\n            mac: { primary: 256 /* KeyMod.WinCtrl */ | 1024 /* KeyMod.Shift */ | 35 /* KeyCode.KeyE */ }\n        }\n    }));\n    class TopCommand extends CoreEditorCommand {\n        constructor(opts) {\n            super(opts);\n            this._inSelectionMode = opts.inSelectionMode;\n        }\n        runCoreEditorCommand(viewModel, args) {\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, CursorMoveCommands.moveToBeginningOfBuffer(viewModel, viewModel.getCursorStates(), this._inSelectionMode));\n            viewModel.revealPrimaryCursor(args.source, true);\n        }\n    }\n    CoreNavigationCommands.CursorTop = registerEditorCommand(new TopCommand({\n        inSelectionMode: false,\n        id: 'cursorTop',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 2048 /* KeyMod.CtrlCmd */ | 14 /* KeyCode.Home */,\n            mac: { primary: 2048 /* KeyMod.CtrlCmd */ | 16 /* KeyCode.UpArrow */ }\n        }\n    }));\n    CoreNavigationCommands.CursorTopSelect = registerEditorCommand(new TopCommand({\n        inSelectionMode: true,\n        id: 'cursorTopSelect',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 14 /* KeyCode.Home */,\n            mac: { primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 16 /* KeyCode.UpArrow */ }\n        }\n    }));\n    class BottomCommand extends CoreEditorCommand {\n        constructor(opts) {\n            super(opts);\n            this._inSelectionMode = opts.inSelectionMode;\n        }\n        runCoreEditorCommand(viewModel, args) {\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, CursorMoveCommands.moveToEndOfBuffer(viewModel, viewModel.getCursorStates(), this._inSelectionMode));\n            viewModel.revealPrimaryCursor(args.source, true);\n        }\n    }\n    CoreNavigationCommands.CursorBottom = registerEditorCommand(new BottomCommand({\n        inSelectionMode: false,\n        id: 'cursorBottom',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 2048 /* KeyMod.CtrlCmd */ | 13 /* KeyCode.End */,\n            mac: { primary: 2048 /* KeyMod.CtrlCmd */ | 18 /* KeyCode.DownArrow */ }\n        }\n    }));\n    CoreNavigationCommands.CursorBottomSelect = registerEditorCommand(new BottomCommand({\n        inSelectionMode: true,\n        id: 'cursorBottomSelect',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 13 /* KeyCode.End */,\n            mac: { primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 18 /* KeyCode.DownArrow */ }\n        }\n    }));\n    class EditorScrollImpl extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'editorScroll',\n                precondition: undefined,\n                description: EditorScroll_.description\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            const parsed = EditorScroll_.parse(args);\n            if (!parsed) {\n                // illegal arguments\n                return;\n            }\n            this._runEditorScroll(viewModel, args.source, parsed);\n        }\n        _runEditorScroll(viewModel, source, args) {\n            const desiredScrollTop = this._computeDesiredScrollTop(viewModel, args);\n            if (args.revealCursor) {\n                // must ensure cursor is in new visible range\n                const desiredVisibleViewRange = viewModel.getCompletelyVisibleViewRangeAtScrollTop(desiredScrollTop);\n                viewModel.setCursorStates(source, 3 /* CursorChangeReason.Explicit */, [\n                    CursorMoveCommands.findPositionInViewportIfOutside(viewModel, viewModel.getPrimaryCursorState(), desiredVisibleViewRange, args.select)\n                ]);\n            }\n            viewModel.viewLayout.setScrollPosition({ scrollTop: desiredScrollTop }, 0 /* ScrollType.Smooth */);\n        }\n        _computeDesiredScrollTop(viewModel, args) {\n            if (args.unit === 1 /* EditorScroll_.Unit.Line */) {\n                // scrolling by model lines\n                const visibleViewRange = viewModel.getCompletelyVisibleViewRange();\n                const visibleModelRange = viewModel.coordinatesConverter.convertViewRangeToModelRange(visibleViewRange);\n                let desiredTopModelLineNumber;\n                if (args.direction === 1 /* EditorScroll_.Direction.Up */) {\n                    // must go x model lines up\n                    desiredTopModelLineNumber = Math.max(1, visibleModelRange.startLineNumber - args.value);\n                }\n                else {\n                    // must go x model lines down\n                    desiredTopModelLineNumber = Math.min(viewModel.model.getLineCount(), visibleModelRange.startLineNumber + args.value);\n                }\n                const viewPosition = viewModel.coordinatesConverter.convertModelPositionToViewPosition(new Position(desiredTopModelLineNumber, 1));\n                return viewModel.viewLayout.getVerticalOffsetForLineNumber(viewPosition.lineNumber);\n            }\n            if (args.unit === 5 /* EditorScroll_.Unit.Editor */) {\n                let desiredTopModelLineNumber = 0;\n                if (args.direction === 2 /* EditorScroll_.Direction.Down */) {\n                    desiredTopModelLineNumber = viewModel.model.getLineCount() - viewModel.cursorConfig.pageSize;\n                }\n                return viewModel.viewLayout.getVerticalOffsetForLineNumber(desiredTopModelLineNumber);\n            }\n            let noOfLines;\n            if (args.unit === 3 /* EditorScroll_.Unit.Page */) {\n                noOfLines = viewModel.cursorConfig.pageSize * args.value;\n            }\n            else if (args.unit === 4 /* EditorScroll_.Unit.HalfPage */) {\n                noOfLines = Math.round(viewModel.cursorConfig.pageSize / 2) * args.value;\n            }\n            else {\n                noOfLines = args.value;\n            }\n            const deltaLines = (args.direction === 1 /* EditorScroll_.Direction.Up */ ? -1 : 1) * noOfLines;\n            return viewModel.viewLayout.getCurrentScrollTop() + deltaLines * viewModel.cursorConfig.lineHeight;\n        }\n    }\n    CoreNavigationCommands.EditorScrollImpl = EditorScrollImpl;\n    CoreNavigationCommands.EditorScroll = registerEditorCommand(new EditorScrollImpl());\n    CoreNavigationCommands.ScrollLineUp = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'scrollLineUp',\n                precondition: undefined,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                    primary: 2048 /* KeyMod.CtrlCmd */ | 16 /* KeyCode.UpArrow */,\n                    mac: { primary: 256 /* KeyMod.WinCtrl */ | 11 /* KeyCode.PageUp */ }\n                }\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            CoreNavigationCommands.EditorScroll._runEditorScroll(viewModel, args.source, {\n                direction: 1 /* EditorScroll_.Direction.Up */,\n                unit: 2 /* EditorScroll_.Unit.WrappedLine */,\n                value: 1,\n                revealCursor: false,\n                select: false\n            });\n        }\n    });\n    CoreNavigationCommands.ScrollPageUp = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'scrollPageUp',\n                precondition: undefined,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                    primary: 2048 /* KeyMod.CtrlCmd */ | 11 /* KeyCode.PageUp */,\n                    win: { primary: 512 /* KeyMod.Alt */ | 11 /* KeyCode.PageUp */ },\n                    linux: { primary: 512 /* KeyMod.Alt */ | 11 /* KeyCode.PageUp */ }\n                }\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            CoreNavigationCommands.EditorScroll._runEditorScroll(viewModel, args.source, {\n                direction: 1 /* EditorScroll_.Direction.Up */,\n                unit: 3 /* EditorScroll_.Unit.Page */,\n                value: 1,\n                revealCursor: false,\n                select: false\n            });\n        }\n    });\n    CoreNavigationCommands.ScrollEditorTop = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'scrollEditorTop',\n                precondition: undefined,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                }\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            CoreNavigationCommands.EditorScroll._runEditorScroll(viewModel, args.source, {\n                direction: 1 /* EditorScroll_.Direction.Up */,\n                unit: 5 /* EditorScroll_.Unit.Editor */,\n                value: 1,\n                revealCursor: false,\n                select: false\n            });\n        }\n    });\n    CoreNavigationCommands.ScrollLineDown = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'scrollLineDown',\n                precondition: undefined,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                    primary: 2048 /* KeyMod.CtrlCmd */ | 18 /* KeyCode.DownArrow */,\n                    mac: { primary: 256 /* KeyMod.WinCtrl */ | 12 /* KeyCode.PageDown */ }\n                }\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            CoreNavigationCommands.EditorScroll._runEditorScroll(viewModel, args.source, {\n                direction: 2 /* EditorScroll_.Direction.Down */,\n                unit: 2 /* EditorScroll_.Unit.WrappedLine */,\n                value: 1,\n                revealCursor: false,\n                select: false\n            });\n        }\n    });\n    CoreNavigationCommands.ScrollPageDown = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'scrollPageDown',\n                precondition: undefined,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                    primary: 2048 /* KeyMod.CtrlCmd */ | 12 /* KeyCode.PageDown */,\n                    win: { primary: 512 /* KeyMod.Alt */ | 12 /* KeyCode.PageDown */ },\n                    linux: { primary: 512 /* KeyMod.Alt */ | 12 /* KeyCode.PageDown */ }\n                }\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            CoreNavigationCommands.EditorScroll._runEditorScroll(viewModel, args.source, {\n                direction: 2 /* EditorScroll_.Direction.Down */,\n                unit: 3 /* EditorScroll_.Unit.Page */,\n                value: 1,\n                revealCursor: false,\n                select: false\n            });\n        }\n    });\n    CoreNavigationCommands.ScrollEditorBottom = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'scrollEditorBottom',\n                precondition: undefined,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                }\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            CoreNavigationCommands.EditorScroll._runEditorScroll(viewModel, args.source, {\n                direction: 2 /* EditorScroll_.Direction.Down */,\n                unit: 5 /* EditorScroll_.Unit.Editor */,\n                value: 1,\n                revealCursor: false,\n                select: false\n            });\n        }\n    });\n    class WordCommand extends CoreEditorCommand {\n        constructor(opts) {\n            super(opts);\n            this._inSelectionMode = opts.inSelectionMode;\n        }\n        runCoreEditorCommand(viewModel, args) {\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, [\n                CursorMoveCommands.word(viewModel, viewModel.getPrimaryCursorState(), this._inSelectionMode, args.position)\n            ]);\n            viewModel.revealPrimaryCursor(args.source, true);\n        }\n    }\n    CoreNavigationCommands.WordSelect = registerEditorCommand(new WordCommand({\n        inSelectionMode: false,\n        id: '_wordSelect',\n        precondition: undefined\n    }));\n    CoreNavigationCommands.WordSelectDrag = registerEditorCommand(new WordCommand({\n        inSelectionMode: true,\n        id: '_wordSelectDrag',\n        precondition: undefined\n    }));\n    CoreNavigationCommands.LastCursorWordSelect = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'lastCursorWordSelect',\n                precondition: undefined\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            const lastAddedCursorIndex = viewModel.getLastAddedCursorIndex();\n            const states = viewModel.getCursorStates();\n            const newStates = states.slice(0);\n            const lastAddedState = states[lastAddedCursorIndex];\n            newStates[lastAddedCursorIndex] = CursorMoveCommands.word(viewModel, lastAddedState, lastAddedState.modelState.hasSelection(), args.position);\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, newStates);\n        }\n    });\n    class LineCommand extends CoreEditorCommand {\n        constructor(opts) {\n            super(opts);\n            this._inSelectionMode = opts.inSelectionMode;\n        }\n        runCoreEditorCommand(viewModel, args) {\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, [\n                CursorMoveCommands.line(viewModel, viewModel.getPrimaryCursorState(), this._inSelectionMode, args.position, args.viewPosition)\n            ]);\n            viewModel.revealPrimaryCursor(args.source, false);\n        }\n    }\n    CoreNavigationCommands.LineSelect = registerEditorCommand(new LineCommand({\n        inSelectionMode: false,\n        id: '_lineSelect',\n        precondition: undefined\n    }));\n    CoreNavigationCommands.LineSelectDrag = registerEditorCommand(new LineCommand({\n        inSelectionMode: true,\n        id: '_lineSelectDrag',\n        precondition: undefined\n    }));\n    class LastCursorLineCommand extends CoreEditorCommand {\n        constructor(opts) {\n            super(opts);\n            this._inSelectionMode = opts.inSelectionMode;\n        }\n        runCoreEditorCommand(viewModel, args) {\n            const lastAddedCursorIndex = viewModel.getLastAddedCursorIndex();\n            const states = viewModel.getCursorStates();\n            const newStates = states.slice(0);\n            newStates[lastAddedCursorIndex] = CursorMoveCommands.line(viewModel, states[lastAddedCursorIndex], this._inSelectionMode, args.position, args.viewPosition);\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, newStates);\n        }\n    }\n    CoreNavigationCommands.LastCursorLineSelect = registerEditorCommand(new LastCursorLineCommand({\n        inSelectionMode: false,\n        id: 'lastCursorLineSelect',\n        precondition: undefined\n    }));\n    CoreNavigationCommands.LastCursorLineSelectDrag = registerEditorCommand(new LastCursorLineCommand({\n        inSelectionMode: true,\n        id: 'lastCursorLineSelectDrag',\n        precondition: undefined\n    }));\n    CoreNavigationCommands.CancelSelection = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'cancelSelection',\n                precondition: EditorContextKeys.hasNonEmptySelection,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                    primary: 9 /* KeyCode.Escape */,\n                    secondary: [1024 /* KeyMod.Shift */ | 9 /* KeyCode.Escape */]\n                }\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, [\n                CursorMoveCommands.cancelSelection(viewModel, viewModel.getPrimaryCursorState())\n            ]);\n            viewModel.revealPrimaryCursor(args.source, true);\n        }\n    });\n    CoreNavigationCommands.RemoveSecondaryCursors = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'removeSecondaryCursors',\n                precondition: EditorContextKeys.hasMultipleSelections,\n                kbOpts: {\n                    weight: CORE_WEIGHT + 1,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                    primary: 9 /* KeyCode.Escape */,\n                    secondary: [1024 /* KeyMod.Shift */ | 9 /* KeyCode.Escape */]\n                }\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, [\n                viewModel.getPrimaryCursorState()\n            ]);\n            viewModel.revealPrimaryCursor(args.source, true);\n            status(nls.localize('removedCursor', \"Removed secondary cursors\"));\n        }\n    });\n    CoreNavigationCommands.RevealLine = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'revealLine',\n                precondition: undefined,\n                description: RevealLine_.description\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            const revealLineArg = args;\n            const lineNumberArg = revealLineArg.lineNumber || 0;\n            let lineNumber = typeof lineNumberArg === 'number' ? (lineNumberArg + 1) : (parseInt(lineNumberArg) + 1);\n            if (lineNumber < 1) {\n                lineNumber = 1;\n            }\n            const lineCount = viewModel.model.getLineCount();\n            if (lineNumber > lineCount) {\n                lineNumber = lineCount;\n            }\n            const range = new Range(lineNumber, 1, lineNumber, viewModel.model.getLineMaxColumn(lineNumber));\n            let revealAt = 0 /* VerticalRevealType.Simple */;\n            if (revealLineArg.at) {\n                switch (revealLineArg.at) {\n                    case RevealLine_.RawAtArgument.Top:\n                        revealAt = 3 /* VerticalRevealType.Top */;\n                        break;\n                    case RevealLine_.RawAtArgument.Center:\n                        revealAt = 1 /* VerticalRevealType.Center */;\n                        break;\n                    case RevealLine_.RawAtArgument.Bottom:\n                        revealAt = 4 /* VerticalRevealType.Bottom */;\n                        break;\n                    default:\n                        break;\n                }\n            }\n            const viewRange = viewModel.coordinatesConverter.convertModelRangeToViewRange(range);\n            viewModel.revealRange(args.source, false, viewRange, revealAt, 0 /* ScrollType.Smooth */);\n        }\n    });\n    CoreNavigationCommands.SelectAll = new class extends EditorOrNativeTextInputCommand {\n        constructor() {\n            super(SelectAllCommand);\n        }\n        runDOMCommand() {\n            if (isFirefox) {\n                document.activeElement.focus();\n                document.activeElement.select();\n            }\n            document.execCommand('selectAll');\n        }\n        runEditorCommand(accessor, editor, args) {\n            const viewModel = editor._getViewModel();\n            if (!viewModel) {\n                // the editor has no view => has no cursors\n                return;\n            }\n            this.runCoreEditorCommand(viewModel, args);\n        }\n        runCoreEditorCommand(viewModel, args) {\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates('keyboard', 3 /* CursorChangeReason.Explicit */, [\n                CursorMoveCommands.selectAll(viewModel, viewModel.getPrimaryCursorState())\n            ]);\n        }\n    }();\n    CoreNavigationCommands.SetSelection = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'setSelection',\n                precondition: undefined\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, [\n                CursorState.fromModelSelection(args.selection)\n            ]);\n        }\n    });\n})(CoreNavigationCommands || (CoreNavigationCommands = {}));\nconst columnSelectionCondition = ContextKeyExpr.and(EditorContextKeys.textInputFocus, EditorContextKeys.columnSelection);\nfunction registerColumnSelection(id, keybinding) {\n    KeybindingsRegistry.registerKeybindingRule({\n        id: id,\n        primary: keybinding,\n        when: columnSelectionCondition,\n        weight: CORE_WEIGHT + 1\n    });\n}\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectLeft.id, 1024 /* KeyMod.Shift */ | 15 /* KeyCode.LeftArrow */);\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectRight.id, 1024 /* KeyMod.Shift */ | 17 /* KeyCode.RightArrow */);\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectUp.id, 1024 /* KeyMod.Shift */ | 16 /* KeyCode.UpArrow */);\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectPageUp.id, 1024 /* KeyMod.Shift */ | 11 /* KeyCode.PageUp */);\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectDown.id, 1024 /* KeyMod.Shift */ | 18 /* KeyCode.DownArrow */);\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectPageDown.id, 1024 /* KeyMod.Shift */ | 12 /* KeyCode.PageDown */);\nfunction registerCommand(command) {\n    command.register();\n    return command;\n}\nexport var CoreEditingCommands;\n(function (CoreEditingCommands) {\n    class CoreEditingCommand extends EditorCommand {\n        runEditorCommand(accessor, editor, args) {\n            const viewModel = editor._getViewModel();\n            if (!viewModel) {\n                // the editor has no view => has no cursors\n                return;\n            }\n            this.runCoreEditingCommand(editor, viewModel, args || {});\n        }\n    }\n    CoreEditingCommands.CoreEditingCommand = CoreEditingCommand;\n    CoreEditingCommands.LineBreakInsert = registerEditorCommand(new class extends CoreEditingCommand {\n        constructor() {\n            super({\n                id: 'lineBreakInsert',\n                precondition: EditorContextKeys.writable,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                    primary: 0,\n                    mac: { primary: 256 /* KeyMod.WinCtrl */ | 45 /* KeyCode.KeyO */ }\n                }\n            });\n        }\n        runCoreEditingCommand(editor, viewModel, args) {\n            editor.pushUndoStop();\n            editor.executeCommands(this.id, TypeOperations.lineBreakInsert(viewModel.cursorConfig, viewModel.model, viewModel.getCursorStates().map(s => s.modelState.selection)));\n        }\n    });\n    CoreEditingCommands.Outdent = registerEditorCommand(new class extends CoreEditingCommand {\n        constructor() {\n            super({\n                id: 'outdent',\n                precondition: EditorContextKeys.writable,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: ContextKeyExpr.and(EditorContextKeys.editorTextFocus, EditorContextKeys.tabDoesNotMoveFocus),\n                    primary: 1024 /* KeyMod.Shift */ | 2 /* KeyCode.Tab */\n                }\n            });\n        }\n        runCoreEditingCommand(editor, viewModel, args) {\n            editor.pushUndoStop();\n            editor.executeCommands(this.id, TypeOperations.outdent(viewModel.cursorConfig, viewModel.model, viewModel.getCursorStates().map(s => s.modelState.selection)));\n            editor.pushUndoStop();\n        }\n    });\n    CoreEditingCommands.Tab = registerEditorCommand(new class extends CoreEditingCommand {\n        constructor() {\n            super({\n                id: 'tab',\n                precondition: EditorContextKeys.writable,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: ContextKeyExpr.and(EditorContextKeys.editorTextFocus, EditorContextKeys.tabDoesNotMoveFocus),\n                    primary: 2 /* KeyCode.Tab */\n                }\n            });\n        }\n        runCoreEditingCommand(editor, viewModel, args) {\n            editor.pushUndoStop();\n            editor.executeCommands(this.id, TypeOperations.tab(viewModel.cursorConfig, viewModel.model, viewModel.getCursorStates().map(s => s.modelState.selection)));\n            editor.pushUndoStop();\n        }\n    });\n    CoreEditingCommands.DeleteLeft = registerEditorCommand(new class extends CoreEditingCommand {\n        constructor() {\n            super({\n                id: 'deleteLeft',\n                precondition: undefined,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                    primary: 1 /* KeyCode.Backspace */,\n                    secondary: [1024 /* KeyMod.Shift */ | 1 /* KeyCode.Backspace */],\n                    mac: { primary: 1 /* KeyCode.Backspace */, secondary: [1024 /* KeyMod.Shift */ | 1 /* KeyCode.Backspace */, 256 /* KeyMod.WinCtrl */ | 38 /* KeyCode.KeyH */, 256 /* KeyMod.WinCtrl */ | 1 /* KeyCode.Backspace */] }\n                }\n            });\n        }\n        runCoreEditingCommand(editor, viewModel, args) {\n            const [shouldPushStackElementBefore, commands] = DeleteOperations.deleteLeft(viewModel.getPrevEditOperationType(), viewModel.cursorConfig, viewModel.model, viewModel.getCursorStates().map(s => s.modelState.selection), viewModel.getCursorAutoClosedCharacters());\n            if (shouldPushStackElementBefore) {\n                editor.pushUndoStop();\n            }\n            editor.executeCommands(this.id, commands);\n            viewModel.setPrevEditOperationType(2 /* EditOperationType.DeletingLeft */);\n        }\n    });\n    CoreEditingCommands.DeleteRight = registerEditorCommand(new class extends CoreEditingCommand {\n        constructor() {\n            super({\n                id: 'deleteRight',\n                precondition: undefined,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                    primary: 20 /* KeyCode.Delete */,\n                    mac: { primary: 20 /* KeyCode.Delete */, secondary: [256 /* KeyMod.WinCtrl */ | 34 /* KeyCode.KeyD */, 256 /* KeyMod.WinCtrl */ | 20 /* KeyCode.Delete */] }\n                }\n            });\n        }\n        runCoreEditingCommand(editor, viewModel, args) {\n            const [shouldPushStackElementBefore, commands] = DeleteOperations.deleteRight(viewModel.getPrevEditOperationType(), viewModel.cursorConfig, viewModel.model, viewModel.getCursorStates().map(s => s.modelState.selection));\n            if (shouldPushStackElementBefore) {\n                editor.pushUndoStop();\n            }\n            editor.executeCommands(this.id, commands);\n            viewModel.setPrevEditOperationType(3 /* EditOperationType.DeletingRight */);\n        }\n    });\n    CoreEditingCommands.Undo = new class extends EditorOrNativeTextInputCommand {\n        constructor() {\n            super(UndoCommand);\n        }\n        runDOMCommand() {\n            document.execCommand('undo');\n        }\n        runEditorCommand(accessor, editor, args) {\n            if (!editor.hasModel() || editor.getOption(83 /* EditorOption.readOnly */) === true) {\n                return;\n            }\n            return editor.getModel().undo();\n        }\n    }();\n    CoreEditingCommands.Redo = new class extends EditorOrNativeTextInputCommand {\n        constructor() {\n            super(RedoCommand);\n        }\n        runDOMCommand() {\n            document.execCommand('redo');\n        }\n        runEditorCommand(accessor, editor, args) {\n            if (!editor.hasModel() || editor.getOption(83 /* EditorOption.readOnly */) === true) {\n                return;\n            }\n            return editor.getModel().redo();\n        }\n    }();\n})(CoreEditingCommands || (CoreEditingCommands = {}));\n/**\n * A command that will invoke a command on the focused editor.\n */\nclass EditorHandlerCommand extends Command {\n    constructor(id, handlerId, description) {\n        super({\n            id: id,\n            precondition: undefined,\n            description: description\n        });\n        this._handlerId = handlerId;\n    }\n    runCommand(accessor, args) {\n        const editor = accessor.get(ICodeEditorService).getFocusedCodeEditor();\n        if (!editor) {\n            return;\n        }\n        editor.trigger('keyboard', this._handlerId, args);\n    }\n}\nfunction registerOverwritableCommand(handlerId, description) {\n    registerCommand(new EditorHandlerCommand('default:' + handlerId, handlerId));\n    registerCommand(new EditorHandlerCommand(handlerId, handlerId, description));\n}\nregisterOverwritableCommand(\"type\" /* Handler.Type */, {\n    description: `Type`,\n    args: [{\n            name: 'args',\n            schema: {\n                'type': 'object',\n                'required': ['text'],\n                'properties': {\n                    'text': {\n                        'type': 'string'\n                    }\n                },\n            }\n        }]\n});\nregisterOverwritableCommand(\"replacePreviousChar\" /* Handler.ReplacePreviousChar */);\nregisterOverwritableCommand(\"compositionType\" /* Handler.CompositionType */);\nregisterOverwritableCommand(\"compositionStart\" /* Handler.CompositionStart */);\nregisterOverwritableCommand(\"compositionEnd\" /* Handler.CompositionEnd */);\nregisterOverwritableCommand(\"paste\" /* Handler.Paste */);\nregisterOverwritableCommand(\"cut\" /* Handler.Cut */);\n"],"mappings":"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"}]}