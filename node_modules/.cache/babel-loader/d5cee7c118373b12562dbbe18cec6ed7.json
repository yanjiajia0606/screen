{"remainingRequest":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/thread-loader/dist/cjs.js!/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js!/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/common/languages/supports/richEditBrackets.js","dependencies":[{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/common/languages/supports/richEditBrackets.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/babel.config.js","mtime":1668271197000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js","mtime":456789000000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["strings","stringBuilder","Range","RichEditBracket","languageId","index","open","close","forwardRegex","reversedRegex","_richEditBracketBrand","undefined","_openSet","_toSet","_closeSet","text","has","arr","result","Set","element","add","groupFuzzyBrackets","brackets","N","length","map","b","toLowerCase","group","i","areOverlapping","a","aOpen","aClose","bOpen","bClose","mergeGroups","g1","g2","newG","Math","min","oldG","max","j","g","currentOpen","currentClose","push","RichEditBrackets","_brackets","_richEditBracketsBrand","getRegexForBracketPair","getReversedRegexForBracketPair","getRegexForBrackets","getReversedRegexForBrackets","textIsBracket","textIsOpenBracket","maxBracketLength","bracket","collectSuperstrings","str","currentIndex","dest","len","indexOf","lengthcmp","unique","seen","pieces","concat","sort","reverse","createBracketOrRegExp","toReversedString","prepareBracketForRegExp","insertWordBoundaries","test","escapeRegExpCharacters","regexStr","join","createRegExp","hasTextDecoder","Uint16Array","offset","charCodeAt","getPlatformTextDecoder","decode","resultLen","charAt","lastInput","lastOutput","BracketsUtils","reversedBracketRegex","lineNumber","reversedText","m","match","matchOffset","matchLength","absoluteMatchOffset","lineText","startOffset","endOffset","reversedLineText","reversedSubstr","substring","_findPrevBracketInText","bracketRegex","substr","findNextBracketInText"],"sources":["/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/common/languages/supports/richEditBrackets.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../../base/common/strings.js';\nimport * as stringBuilder from '../../core/stringBuilder.js';\nimport { Range } from '../../core/range.js';\n/**\n * Represents a grouping of colliding bracket pairs.\n *\n * Most of the times this contains a single bracket pair,\n * but sometimes this contains multiple bracket pairs in cases\n * where the same string appears as a closing bracket for multiple\n * bracket pairs, or the same string appears an opening bracket for\n * multiple bracket pairs.\n *\n * e.g. of a group containing a single pair:\n *   open: ['{'], close: ['}']\n *\n * e.g. of a group containing multiple pairs:\n *   open: ['if', 'for'], close: ['end', 'end']\n */\nexport class RichEditBracket {\n    constructor(languageId, index, open, close, forwardRegex, reversedRegex) {\n        this._richEditBracketBrand = undefined;\n        this.languageId = languageId;\n        this.index = index;\n        this.open = open;\n        this.close = close;\n        this.forwardRegex = forwardRegex;\n        this.reversedRegex = reversedRegex;\n        this._openSet = RichEditBracket._toSet(this.open);\n        this._closeSet = RichEditBracket._toSet(this.close);\n    }\n    /**\n     * Check if the provided `text` is an open bracket in this group.\n     */\n    isOpen(text) {\n        return this._openSet.has(text);\n    }\n    /**\n     * Check if the provided `text` is a close bracket in this group.\n     */\n    isClose(text) {\n        return this._closeSet.has(text);\n    }\n    static _toSet(arr) {\n        const result = new Set();\n        for (const element of arr) {\n            result.add(element);\n        }\n        return result;\n    }\n}\n/**\n * Groups together brackets that have equal open or close sequences.\n *\n * For example, if the following brackets are defined:\n *   ['IF','END']\n *   ['for','end']\n *   ['{','}']\n *\n * Then the grouped brackets would be:\n *   { open: ['if', 'for'], close: ['end', 'end'] }\n *   { open: ['{'], close: ['}'] }\n *\n */\nfunction groupFuzzyBrackets(brackets) {\n    const N = brackets.length;\n    brackets = brackets.map(b => [b[0].toLowerCase(), b[1].toLowerCase()]);\n    const group = [];\n    for (let i = 0; i < N; i++) {\n        group[i] = i;\n    }\n    const areOverlapping = (a, b) => {\n        const [aOpen, aClose] = a;\n        const [bOpen, bClose] = b;\n        return (aOpen === bOpen || aOpen === bClose || aClose === bOpen || aClose === bClose);\n    };\n    const mergeGroups = (g1, g2) => {\n        const newG = Math.min(g1, g2);\n        const oldG = Math.max(g1, g2);\n        for (let i = 0; i < N; i++) {\n            if (group[i] === oldG) {\n                group[i] = newG;\n            }\n        }\n    };\n    // group together brackets that have the same open or the same close sequence\n    for (let i = 0; i < N; i++) {\n        const a = brackets[i];\n        for (let j = i + 1; j < N; j++) {\n            const b = brackets[j];\n            if (areOverlapping(a, b)) {\n                mergeGroups(group[i], group[j]);\n            }\n        }\n    }\n    const result = [];\n    for (let g = 0; g < N; g++) {\n        const currentOpen = [];\n        const currentClose = [];\n        for (let i = 0; i < N; i++) {\n            if (group[i] === g) {\n                const [open, close] = brackets[i];\n                currentOpen.push(open);\n                currentClose.push(close);\n            }\n        }\n        if (currentOpen.length > 0) {\n            result.push({\n                open: currentOpen,\n                close: currentClose\n            });\n        }\n    }\n    return result;\n}\nexport class RichEditBrackets {\n    constructor(languageId, _brackets) {\n        this._richEditBracketsBrand = undefined;\n        const brackets = groupFuzzyBrackets(_brackets);\n        this.brackets = brackets.map((b, index) => {\n            return new RichEditBracket(languageId, index, b.open, b.close, getRegexForBracketPair(b.open, b.close, brackets, index), getReversedRegexForBracketPair(b.open, b.close, brackets, index));\n        });\n        this.forwardRegex = getRegexForBrackets(this.brackets);\n        this.reversedRegex = getReversedRegexForBrackets(this.brackets);\n        this.textIsBracket = {};\n        this.textIsOpenBracket = {};\n        this.maxBracketLength = 0;\n        for (const bracket of this.brackets) {\n            for (const open of bracket.open) {\n                this.textIsBracket[open] = bracket;\n                this.textIsOpenBracket[open] = true;\n                this.maxBracketLength = Math.max(this.maxBracketLength, open.length);\n            }\n            for (const close of bracket.close) {\n                this.textIsBracket[close] = bracket;\n                this.textIsOpenBracket[close] = false;\n                this.maxBracketLength = Math.max(this.maxBracketLength, close.length);\n            }\n        }\n    }\n}\nfunction collectSuperstrings(str, brackets, currentIndex, dest) {\n    for (let i = 0, len = brackets.length; i < len; i++) {\n        if (i === currentIndex) {\n            continue;\n        }\n        const bracket = brackets[i];\n        for (const open of bracket.open) {\n            if (open.indexOf(str) >= 0) {\n                dest.push(open);\n            }\n        }\n        for (const close of bracket.close) {\n            if (close.indexOf(str) >= 0) {\n                dest.push(close);\n            }\n        }\n    }\n}\nfunction lengthcmp(a, b) {\n    return a.length - b.length;\n}\nfunction unique(arr) {\n    if (arr.length <= 1) {\n        return arr;\n    }\n    const result = [];\n    const seen = new Set();\n    for (const element of arr) {\n        if (seen.has(element)) {\n            continue;\n        }\n        result.push(element);\n        seen.add(element);\n    }\n    return result;\n}\n/**\n * Create a regular expression that can be used to search forward in a piece of text\n * for a group of bracket pairs. But this regex must be built in a way in which\n * it is aware of the other bracket pairs defined for the language.\n *\n * For example, if a language contains the following bracket pairs:\n *   ['begin', 'end']\n *   ['if', 'end if']\n * The two bracket pairs do not collide because no open or close brackets are equal.\n * So the function getRegexForBracketPair is called twice, once with\n * the ['begin'], ['end'] group consisting of one bracket pair, and once with\n * the ['if'], ['end if'] group consiting of the other bracket pair.\n *\n * But there could be a situation where an occurrence of 'end if' is mistaken\n * for an occurrence of 'end'.\n *\n * Therefore, for the bracket pair ['begin', 'end'], the regex will also\n * target 'end if'. The regex will be something like:\n *   /(\\bend if\\b)|(\\bend\\b)|(\\bif\\b)/\n *\n * The regex also searches for \"superstrings\" (other brackets that might be mistaken with the current bracket).\n *\n */\nfunction getRegexForBracketPair(open, close, brackets, currentIndex) {\n    // search in all brackets for other brackets that are a superstring of these brackets\n    let pieces = [];\n    pieces = pieces.concat(open);\n    pieces = pieces.concat(close);\n    for (let i = 0, len = pieces.length; i < len; i++) {\n        collectSuperstrings(pieces[i], brackets, currentIndex, pieces);\n    }\n    pieces = unique(pieces);\n    pieces.sort(lengthcmp);\n    pieces.reverse();\n    return createBracketOrRegExp(pieces);\n}\n/**\n * Matching a regular expression in JS can only be done \"forwards\". So JS offers natively only\n * methods to find the first match of a regex in a string. But sometimes, it is useful to\n * find the last match of a regex in a string. For such a situation, a nice solution is to\n * simply reverse the string and then search for a reversed regex.\n *\n * This function also has the fine details of `getRegexForBracketPair`. For the same example\n * given above, the regex produced here would look like:\n *   /(\\bfi dne\\b)|(\\bdne\\b)|(\\bfi\\b)/\n */\nfunction getReversedRegexForBracketPair(open, close, brackets, currentIndex) {\n    // search in all brackets for other brackets that are a superstring of these brackets\n    let pieces = [];\n    pieces = pieces.concat(open);\n    pieces = pieces.concat(close);\n    for (let i = 0, len = pieces.length; i < len; i++) {\n        collectSuperstrings(pieces[i], brackets, currentIndex, pieces);\n    }\n    pieces = unique(pieces);\n    pieces.sort(lengthcmp);\n    pieces.reverse();\n    return createBracketOrRegExp(pieces.map(toReversedString));\n}\n/**\n * Creates a regular expression that targets all bracket pairs.\n *\n * e.g. for the bracket pairs:\n *  ['{','}']\n *  ['begin,'end']\n *  ['for','end']\n * the regex would look like:\n *  /(\\{)|(\\})|(\\bbegin\\b)|(\\bend\\b)|(\\bfor\\b)/\n */\nfunction getRegexForBrackets(brackets) {\n    let pieces = [];\n    for (const bracket of brackets) {\n        for (const open of bracket.open) {\n            pieces.push(open);\n        }\n        for (const close of bracket.close) {\n            pieces.push(close);\n        }\n    }\n    pieces = unique(pieces);\n    return createBracketOrRegExp(pieces);\n}\n/**\n * Matching a regular expression in JS can only be done \"forwards\". So JS offers natively only\n * methods to find the first match of a regex in a string. But sometimes, it is useful to\n * find the last match of a regex in a string. For such a situation, a nice solution is to\n * simply reverse the string and then search for a reversed regex.\n *\n * e.g. for the bracket pairs:\n *  ['{','}']\n *  ['begin,'end']\n *  ['for','end']\n * the regex would look like:\n *  /(\\{)|(\\})|(\\bnigeb\\b)|(\\bdne\\b)|(\\brof\\b)/\n */\nfunction getReversedRegexForBrackets(brackets) {\n    let pieces = [];\n    for (const bracket of brackets) {\n        for (const open of bracket.open) {\n            pieces.push(open);\n        }\n        for (const close of bracket.close) {\n            pieces.push(close);\n        }\n    }\n    pieces = unique(pieces);\n    return createBracketOrRegExp(pieces.map(toReversedString));\n}\nfunction prepareBracketForRegExp(str) {\n    // This bracket pair uses letters like e.g. \"begin\" - \"end\"\n    const insertWordBoundaries = (/^[\\w ]+$/.test(str));\n    str = strings.escapeRegExpCharacters(str);\n    return (insertWordBoundaries ? `\\\\b${str}\\\\b` : str);\n}\nfunction createBracketOrRegExp(pieces) {\n    const regexStr = `(${pieces.map(prepareBracketForRegExp).join(')|(')})`;\n    return strings.createRegExp(regexStr, true);\n}\nconst toReversedString = (function () {\n    function reverse(str) {\n        if (stringBuilder.hasTextDecoder) {\n            // create a Uint16Array and then use a TextDecoder to create a string\n            const arr = new Uint16Array(str.length);\n            let offset = 0;\n            for (let i = str.length - 1; i >= 0; i--) {\n                arr[offset++] = str.charCodeAt(i);\n            }\n            return stringBuilder.getPlatformTextDecoder().decode(arr);\n        }\n        else {\n            const result = [];\n            let resultLen = 0;\n            for (let i = str.length - 1; i >= 0; i--) {\n                result[resultLen++] = str.charAt(i);\n            }\n            return result.join('');\n        }\n    }\n    let lastInput = null;\n    let lastOutput = null;\n    return function toReversedString(str) {\n        if (lastInput !== str) {\n            lastInput = str;\n            lastOutput = reverse(lastInput);\n        }\n        return lastOutput;\n    };\n})();\nexport class BracketsUtils {\n    static _findPrevBracketInText(reversedBracketRegex, lineNumber, reversedText, offset) {\n        const m = reversedText.match(reversedBracketRegex);\n        if (!m) {\n            return null;\n        }\n        const matchOffset = reversedText.length - (m.index || 0);\n        const matchLength = m[0].length;\n        const absoluteMatchOffset = offset + matchOffset;\n        return new Range(lineNumber, absoluteMatchOffset - matchLength + 1, lineNumber, absoluteMatchOffset + 1);\n    }\n    static findPrevBracketInRange(reversedBracketRegex, lineNumber, lineText, startOffset, endOffset) {\n        // Because JS does not support backwards regex search, we search forwards in a reversed string with a reversed regex ;)\n        const reversedLineText = toReversedString(lineText);\n        const reversedSubstr = reversedLineText.substring(lineText.length - endOffset, lineText.length - startOffset);\n        return this._findPrevBracketInText(reversedBracketRegex, lineNumber, reversedSubstr, startOffset);\n    }\n    static findNextBracketInText(bracketRegex, lineNumber, text, offset) {\n        const m = text.match(bracketRegex);\n        if (!m) {\n            return null;\n        }\n        const matchOffset = m.index || 0;\n        const matchLength = m[0].length;\n        if (matchLength === 0) {\n            return null;\n        }\n        const absoluteMatchOffset = offset + matchOffset;\n        return new Range(lineNumber, absoluteMatchOffset + 1, lineNumber, absoluteMatchOffset + 1 + matchLength);\n    }\n    static findNextBracketInRange(bracketRegex, lineNumber, lineText, startOffset, endOffset) {\n        const substr = lineText.substring(startOffset, endOffset);\n        return this.findNextBracketInText(bracketRegex, lineNumber, substr, startOffset);\n    }\n}\n"],"mappings":"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"}]}