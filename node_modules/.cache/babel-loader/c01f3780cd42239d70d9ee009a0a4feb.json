{"remainingRequest":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js!/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/standalone/common/monarch/monarchLexer.js","dependencies":[{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/standalone/common/monarch/monarchLexer.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/babel.config.js","mtime":1668271197000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js","mtime":456789000000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyIGZyb20gIi9Vc2Vycy95YW5qaWFqaWEvRGVza3RvcC93b3Jrc3BhY2UvYXZ1ZS1kYXRhLW5ldy9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlci5qcyI7CmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAiL1VzZXJzL3lhbmppYWppYS9EZXNrdG9wL3dvcmtzcGFjZS9hdnVlLWRhdGEtbmV3L25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jbGFzc0NhbGxDaGVjay5qcyI7CmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSAiL1VzZXJzL3lhbmppYWppYS9EZXNrdG9wL3dvcmtzcGFjZS9hdnVlLWRhdGEtbmV3L25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzcy5qcyI7CmltcG9ydCBfdHlwZW9mIGZyb20gIi9Vc2Vycy95YW5qaWFqaWEvRGVza3RvcC93b3Jrc3BhY2UvYXZ1ZS1kYXRhLW5ldy9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdHlwZW9mLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmcuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5yZWZsZWN0LnRvLXN0cmluZy10YWcuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5wdXNoLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0LmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmV4ZWMuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcubWF0Y2guanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS1idWZmZXIuc2xpY2UuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS51aW50MzItYXJyYXkuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5hdC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmNvcHktd2l0aGluLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuZXZlcnkuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5maWxsLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuZmlsdGVyLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuZmluZC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmZpbmQtaW5kZXguanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5maW5kLWxhc3QuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5maW5kLWxhc3QtaW5kZXguanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5mb3ItZWFjaC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmluY2x1ZGVzLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuaW5kZXgtb2YuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5pdGVyYXRvci5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmpvaW4uanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5sYXN0LWluZGV4LW9mLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkubWFwLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkucmVkdWNlLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkucmVkdWNlLXJpZ2h0LmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkucmV2ZXJzZS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnNldC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnNsaWNlLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuc29tZS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnNvcnQuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5zdWJhcnJheS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnRvLWxvY2FsZS1zdHJpbmcuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS50by1zdHJpbmcuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuaXRlcmF0b3IuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLml0ZXJhdG9yLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmNvbnN0cnVjdG9yLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmRvdC1hbGwuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAuc3RpY2t5LmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLnRvLXN0cmluZy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5zZWFyY2guanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5mdW5jdGlvbi5uYW1lLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLnRlc3QuanMiOwovKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogKiAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLgogKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8KdmFyIF9fZGVjb3JhdGUgPSB0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHsKICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsCiAgICByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywKICAgIGQ7CiAgaWYgKCh0eXBlb2YgUmVmbGVjdCA9PT0gInVuZGVmaW5lZCIgPyAidW5kZWZpbmVkIiA6IF90eXBlb2YoUmVmbGVjdCkpID09PSAib2JqZWN0IiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gImZ1bmN0aW9uIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO2Vsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHsKICAgIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7CiAgfQogIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7Cn07CnZhciBfX3BhcmFtID0gdGhpcyAmJiB0aGlzLl9fcGFyYW0gfHwgZnVuY3Rpb24gKHBhcmFtSW5kZXgsIGRlY29yYXRvcikgewogIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHsKICAgIGRlY29yYXRvcih0YXJnZXQsIGtleSwgcGFyYW1JbmRleCk7CiAgfTsKfTsKaW1wb3J0ICogYXMgbGFuZ3VhZ2VzIGZyb20gJy4uLy4uLy4uL2NvbW1vbi9sYW5ndWFnZXMuanMnOwppbXBvcnQgeyBOdWxsU3RhdGUsIG51bGxUb2tlbml6ZUVuY29kZWQsIG51bGxUb2tlbml6ZSB9IGZyb20gJy4uLy4uLy4uL2NvbW1vbi9sYW5ndWFnZXMvbnVsbFRva2VuaXplLmpzJzsKaW1wb3J0ICogYXMgbW9uYXJjaENvbW1vbiBmcm9tICcuL21vbmFyY2hDb21tb24uanMnOwppbXBvcnQgeyBJQ29uZmlndXJhdGlvblNlcnZpY2UgfSBmcm9tICcuLi8uLi8uLi8uLi9wbGF0Zm9ybS9jb25maWd1cmF0aW9uL2NvbW1vbi9jb25maWd1cmF0aW9uLmpzJzsKdmFyIENBQ0hFX1NUQUNLX0RFUFRIID0gNTsKLyoqCiAqIFJldXNlIHRoZSBzYW1lIHN0YWNrIGVsZW1lbnRzIHVwIHRvIGEgY2VydGFpbiBkZXB0aC4KICovCnZhciBNb25hcmNoU3RhY2tFbGVtZW50RmFjdG9yeSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgZnVuY3Rpb24gTW9uYXJjaFN0YWNrRWxlbWVudEZhY3RvcnkobWF4Q2FjaGVEZXB0aCkgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1vbmFyY2hTdGFja0VsZW1lbnRGYWN0b3J5KTsKICAgIHRoaXMuX21heENhY2hlRGVwdGggPSBtYXhDYWNoZURlcHRoOwogICAgdGhpcy5fZW50cmllcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7CiAgfQogIF9jcmVhdGVDbGFzcyhNb25hcmNoU3RhY2tFbGVtZW50RmFjdG9yeSwgW3sKICAgIGtleTogImNyZWF0ZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlKHBhcmVudCwgc3RhdGUpIHsKICAgICAgaWYgKHBhcmVudCAhPT0gbnVsbCAmJiBwYXJlbnQuZGVwdGggPj0gdGhpcy5fbWF4Q2FjaGVEZXB0aCkgewogICAgICAgIC8vIG5vIGNhY2hpbmcgYWJvdmUgYSBjZXJ0YWluIGRlcHRoCiAgICAgICAgcmV0dXJuIG5ldyBNb25hcmNoU3RhY2tFbGVtZW50KHBhcmVudCwgc3RhdGUpOwogICAgICB9CiAgICAgIHZhciBzdGFja0VsZW1lbnRJZCA9IE1vbmFyY2hTdGFja0VsZW1lbnQuZ2V0U3RhY2tFbGVtZW50SWQocGFyZW50KTsKICAgICAgaWYgKHN0YWNrRWxlbWVudElkLmxlbmd0aCA+IDApIHsKICAgICAgICBzdGFja0VsZW1lbnRJZCArPSAnfCc7CiAgICAgIH0KICAgICAgc3RhY2tFbGVtZW50SWQgKz0gc3RhdGU7CiAgICAgIHZhciByZXN1bHQgPSB0aGlzLl9lbnRyaWVzW3N0YWNrRWxlbWVudElkXTsKICAgICAgaWYgKHJlc3VsdCkgewogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH0KICAgICAgcmVzdWx0ID0gbmV3IE1vbmFyY2hTdGFja0VsZW1lbnQocGFyZW50LCBzdGF0ZSk7CiAgICAgIHRoaXMuX2VudHJpZXNbc3RhY2tFbGVtZW50SWRdID0gcmVzdWx0OwogICAgICByZXR1cm4gcmVzdWx0OwogICAgfQogIH1dLCBbewogICAga2V5OiAiY3JlYXRlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGUocGFyZW50LCBzdGF0ZSkgewogICAgICByZXR1cm4gdGhpcy5fSU5TVEFOQ0UuY3JlYXRlKHBhcmVudCwgc3RhdGUpOwogICAgfQogIH1dKTsKICByZXR1cm4gTW9uYXJjaFN0YWNrRWxlbWVudEZhY3Rvcnk7Cn0oKTsKTW9uYXJjaFN0YWNrRWxlbWVudEZhY3RvcnkuX0lOU1RBTkNFID0gbmV3IE1vbmFyY2hTdGFja0VsZW1lbnRGYWN0b3J5KENBQ0hFX1NUQUNLX0RFUFRIKTsKdmFyIE1vbmFyY2hTdGFja0VsZW1lbnQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIE1vbmFyY2hTdGFja0VsZW1lbnQocGFyZW50LCBzdGF0ZSkgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1vbmFyY2hTdGFja0VsZW1lbnQpOwogICAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7CiAgICB0aGlzLnN0YXRlID0gc3RhdGU7CiAgICB0aGlzLmRlcHRoID0gKHRoaXMucGFyZW50ID8gdGhpcy5wYXJlbnQuZGVwdGggOiAwKSArIDE7CiAgfQogIF9jcmVhdGVDbGFzcyhNb25hcmNoU3RhY2tFbGVtZW50LCBbewogICAga2V5OiAiZXF1YWxzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBlcXVhbHMob3RoZXIpIHsKICAgICAgcmV0dXJuIE1vbmFyY2hTdGFja0VsZW1lbnQuX2VxdWFscyh0aGlzLCBvdGhlcik7CiAgICB9CiAgfSwgewogICAga2V5OiAicHVzaCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcHVzaChzdGF0ZSkgewogICAgICByZXR1cm4gTW9uYXJjaFN0YWNrRWxlbWVudEZhY3RvcnkuY3JlYXRlKHRoaXMsIHN0YXRlKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJwb3AiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBvcCgpIHsKICAgICAgcmV0dXJuIHRoaXMucGFyZW50OwogICAgfQogIH0sIHsKICAgIGtleTogInBvcGFsbCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcG9wYWxsKCkgewogICAgICB2YXIgcmVzdWx0ID0gdGhpczsKICAgICAgd2hpbGUgKHJlc3VsdC5wYXJlbnQpIHsKICAgICAgICByZXN1bHQgPSByZXN1bHQucGFyZW50OwogICAgICB9CiAgICAgIHJldHVybiByZXN1bHQ7CiAgICB9CiAgfSwgewogICAga2V5OiAic3dpdGNoVG8iLAogICAgdmFsdWU6IGZ1bmN0aW9uIHN3aXRjaFRvKHN0YXRlKSB7CiAgICAgIHJldHVybiBNb25hcmNoU3RhY2tFbGVtZW50RmFjdG9yeS5jcmVhdGUodGhpcy5wYXJlbnQsIHN0YXRlKTsKICAgIH0KICB9XSwgW3sKICAgIGtleTogImdldFN0YWNrRWxlbWVudElkIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRTdGFja0VsZW1lbnRJZChlbGVtZW50KSB7CiAgICAgIHZhciByZXN1bHQgPSAnJzsKICAgICAgd2hpbGUgKGVsZW1lbnQgIT09IG51bGwpIHsKICAgICAgICBpZiAocmVzdWx0Lmxlbmd0aCA+IDApIHsKICAgICAgICAgIHJlc3VsdCArPSAnfCc7CiAgICAgICAgfQogICAgICAgIHJlc3VsdCArPSBlbGVtZW50LnN0YXRlOwogICAgICAgIGVsZW1lbnQgPSBlbGVtZW50LnBhcmVudDsKICAgICAgfQogICAgICByZXR1cm4gcmVzdWx0OwogICAgfQogIH0sIHsKICAgIGtleTogIl9lcXVhbHMiLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9lcXVhbHMoYSwgYikgewogICAgICB3aGlsZSAoYSAhPT0gbnVsbCAmJiBiICE9PSBudWxsKSB7CiAgICAgICAgaWYgKGEgPT09IGIpIHsKICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KICAgICAgICBpZiAoYS5zdGF0ZSAhPT0gYi5zdGF0ZSkgewogICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgICAgICBhID0gYS5wYXJlbnQ7CiAgICAgICAgYiA9IGIucGFyZW50OwogICAgICB9CiAgICAgIGlmIChhID09PSBudWxsICYmIGIgPT09IG51bGwpIHsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfQogICAgICByZXR1cm4gZmFsc2U7CiAgICB9CiAgfV0pOwogIHJldHVybiBNb25hcmNoU3RhY2tFbGVtZW50Owp9KCk7CnZhciBFbWJlZGRlZExhbmd1YWdlRGF0YSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgZnVuY3Rpb24gRW1iZWRkZWRMYW5ndWFnZURhdGEobGFuZ3VhZ2VJZCwgc3RhdGUpIHsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBFbWJlZGRlZExhbmd1YWdlRGF0YSk7CiAgICB0aGlzLmxhbmd1YWdlSWQgPSBsYW5ndWFnZUlkOwogICAgdGhpcy5zdGF0ZSA9IHN0YXRlOwogIH0KICBfY3JlYXRlQ2xhc3MoRW1iZWRkZWRMYW5ndWFnZURhdGEsIFt7CiAgICBrZXk6ICJlcXVhbHMiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGVxdWFscyhvdGhlcikgewogICAgICByZXR1cm4gdGhpcy5sYW5ndWFnZUlkID09PSBvdGhlci5sYW5ndWFnZUlkICYmIHRoaXMuc3RhdGUuZXF1YWxzKG90aGVyLnN0YXRlKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJjbG9uZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gY2xvbmUoKSB7CiAgICAgIHZhciBzdGF0ZUNsb25lID0gdGhpcy5zdGF0ZS5jbG9uZSgpOwogICAgICAvLyBzYXZlIGFuIG9iamVjdAogICAgICBpZiAoc3RhdGVDbG9uZSA9PT0gdGhpcy5zdGF0ZSkgewogICAgICAgIHJldHVybiB0aGlzOwogICAgICB9CiAgICAgIHJldHVybiBuZXcgRW1iZWRkZWRMYW5ndWFnZURhdGEodGhpcy5sYW5ndWFnZUlkLCB0aGlzLnN0YXRlKTsKICAgIH0KICB9XSk7CiAgcmV0dXJuIEVtYmVkZGVkTGFuZ3VhZ2VEYXRhOwp9KCk7Ci8qKgogKiBSZXVzZSB0aGUgc2FtZSBsaW5lIHN0YXRlcyB1cCB0byBhIGNlcnRhaW4gZGVwdGguCiAqLwp2YXIgTW9uYXJjaExpbmVTdGF0ZUZhY3RvcnkgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIE1vbmFyY2hMaW5lU3RhdGVGYWN0b3J5KG1heENhY2hlRGVwdGgpIHsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNb25hcmNoTGluZVN0YXRlRmFjdG9yeSk7CiAgICB0aGlzLl9tYXhDYWNoZURlcHRoID0gbWF4Q2FjaGVEZXB0aDsKICAgIHRoaXMuX2VudHJpZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpOwogIH0KICBfY3JlYXRlQ2xhc3MoTW9uYXJjaExpbmVTdGF0ZUZhY3RvcnksIFt7CiAgICBrZXk6ICJjcmVhdGUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZShzdGFjaywgZW1iZWRkZWRMYW5ndWFnZURhdGEpIHsKICAgICAgaWYgKGVtYmVkZGVkTGFuZ3VhZ2VEYXRhICE9PSBudWxsKSB7CiAgICAgICAgLy8gbm8gY2FjaGluZyB3aGVuIGVtYmVkZGluZwogICAgICAgIHJldHVybiBuZXcgTW9uYXJjaExpbmVTdGF0ZShzdGFjaywgZW1iZWRkZWRMYW5ndWFnZURhdGEpOwogICAgICB9CiAgICAgIGlmIChzdGFjayAhPT0gbnVsbCAmJiBzdGFjay5kZXB0aCA+PSB0aGlzLl9tYXhDYWNoZURlcHRoKSB7CiAgICAgICAgLy8gbm8gY2FjaGluZyBhYm92ZSBhIGNlcnRhaW4gZGVwdGgKICAgICAgICByZXR1cm4gbmV3IE1vbmFyY2hMaW5lU3RhdGUoc3RhY2ssIGVtYmVkZGVkTGFuZ3VhZ2VEYXRhKTsKICAgICAgfQogICAgICB2YXIgc3RhY2tFbGVtZW50SWQgPSBNb25hcmNoU3RhY2tFbGVtZW50LmdldFN0YWNrRWxlbWVudElkKHN0YWNrKTsKICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuX2VudHJpZXNbc3RhY2tFbGVtZW50SWRdOwogICAgICBpZiAocmVzdWx0KSB7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfQogICAgICByZXN1bHQgPSBuZXcgTW9uYXJjaExpbmVTdGF0ZShzdGFjaywgbnVsbCk7CiAgICAgIHRoaXMuX2VudHJpZXNbc3RhY2tFbGVtZW50SWRdID0gcmVzdWx0OwogICAgICByZXR1cm4gcmVzdWx0OwogICAgfQogIH1dLCBbewogICAga2V5OiAiY3JlYXRlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGUoc3RhY2ssIGVtYmVkZGVkTGFuZ3VhZ2VEYXRhKSB7CiAgICAgIHJldHVybiB0aGlzLl9JTlNUQU5DRS5jcmVhdGUoc3RhY2ssIGVtYmVkZGVkTGFuZ3VhZ2VEYXRhKTsKICAgIH0KICB9XSk7CiAgcmV0dXJuIE1vbmFyY2hMaW5lU3RhdGVGYWN0b3J5Owp9KCk7Ck1vbmFyY2hMaW5lU3RhdGVGYWN0b3J5Ll9JTlNUQU5DRSA9IG5ldyBNb25hcmNoTGluZVN0YXRlRmFjdG9yeShDQUNIRV9TVEFDS19ERVBUSCk7CnZhciBNb25hcmNoTGluZVN0YXRlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBNb25hcmNoTGluZVN0YXRlKHN0YWNrLCBlbWJlZGRlZExhbmd1YWdlRGF0YSkgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1vbmFyY2hMaW5lU3RhdGUpOwogICAgdGhpcy5zdGFjayA9IHN0YWNrOwogICAgdGhpcy5lbWJlZGRlZExhbmd1YWdlRGF0YSA9IGVtYmVkZGVkTGFuZ3VhZ2VEYXRhOwogIH0KICBfY3JlYXRlQ2xhc3MoTW9uYXJjaExpbmVTdGF0ZSwgW3sKICAgIGtleTogImNsb25lIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBjbG9uZSgpIHsKICAgICAgdmFyIGVtYmVkZGVkbGFuZ3VhZ2VEYXRhQ2xvbmUgPSB0aGlzLmVtYmVkZGVkTGFuZ3VhZ2VEYXRhID8gdGhpcy5lbWJlZGRlZExhbmd1YWdlRGF0YS5jbG9uZSgpIDogbnVsbDsKICAgICAgLy8gc2F2ZSBhbiBvYmplY3QKICAgICAgaWYgKGVtYmVkZGVkbGFuZ3VhZ2VEYXRhQ2xvbmUgPT09IHRoaXMuZW1iZWRkZWRMYW5ndWFnZURhdGEpIHsKICAgICAgICByZXR1cm4gdGhpczsKICAgICAgfQogICAgICByZXR1cm4gTW9uYXJjaExpbmVTdGF0ZUZhY3RvcnkuY3JlYXRlKHRoaXMuc3RhY2ssIHRoaXMuZW1iZWRkZWRMYW5ndWFnZURhdGEpOwogICAgfQogIH0sIHsKICAgIGtleTogImVxdWFscyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZXF1YWxzKG90aGVyKSB7CiAgICAgIGlmICghKG90aGVyIGluc3RhbmNlb2YgTW9uYXJjaExpbmVTdGF0ZSkpIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KICAgICAgaWYgKCF0aGlzLnN0YWNrLmVxdWFscyhvdGhlci5zdGFjaykpIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KICAgICAgaWYgKHRoaXMuZW1iZWRkZWRMYW5ndWFnZURhdGEgPT09IG51bGwgJiYgb3RoZXIuZW1iZWRkZWRMYW5ndWFnZURhdGEgPT09IG51bGwpIHsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfQogICAgICBpZiAodGhpcy5lbWJlZGRlZExhbmd1YWdlRGF0YSA9PT0gbnVsbCB8fCBvdGhlci5lbWJlZGRlZExhbmd1YWdlRGF0YSA9PT0gbnVsbCkgewogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfQogICAgICByZXR1cm4gdGhpcy5lbWJlZGRlZExhbmd1YWdlRGF0YS5lcXVhbHMob3RoZXIuZW1iZWRkZWRMYW5ndWFnZURhdGEpOwogICAgfQogIH1dKTsKICByZXR1cm4gTW9uYXJjaExpbmVTdGF0ZTsKfSgpOwp2YXIgTW9uYXJjaENsYXNzaWNUb2tlbnNDb2xsZWN0b3IgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIE1vbmFyY2hDbGFzc2ljVG9rZW5zQ29sbGVjdG9yKCkgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1vbmFyY2hDbGFzc2ljVG9rZW5zQ29sbGVjdG9yKTsKICAgIHRoaXMuX3Rva2VucyA9IFtdOwogICAgdGhpcy5fbGFuZ3VhZ2VJZCA9IG51bGw7CiAgICB0aGlzLl9sYXN0VG9rZW5UeXBlID0gbnVsbDsKICAgIHRoaXMuX2xhc3RUb2tlbkxhbmd1YWdlID0gbnVsbDsKICB9CiAgX2NyZWF0ZUNsYXNzKE1vbmFyY2hDbGFzc2ljVG9rZW5zQ29sbGVjdG9yLCBbewogICAga2V5OiAiZW50ZXJMYW5ndWFnZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZW50ZXJMYW5ndWFnZShsYW5ndWFnZUlkKSB7CiAgICAgIHRoaXMuX2xhbmd1YWdlSWQgPSBsYW5ndWFnZUlkOwogICAgfQogIH0sIHsKICAgIGtleTogImVtaXQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGVtaXQoc3RhcnRPZmZzZXQsIHR5cGUpIHsKICAgICAgaWYgKHRoaXMuX2xhc3RUb2tlblR5cGUgPT09IHR5cGUgJiYgdGhpcy5fbGFzdFRva2VuTGFuZ3VhZ2UgPT09IHRoaXMuX2xhbmd1YWdlSWQpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgICAgdGhpcy5fbGFzdFRva2VuVHlwZSA9IHR5cGU7CiAgICAgIHRoaXMuX2xhc3RUb2tlbkxhbmd1YWdlID0gdGhpcy5fbGFuZ3VhZ2VJZDsKICAgICAgdGhpcy5fdG9rZW5zLnB1c2gobmV3IGxhbmd1YWdlcy5Ub2tlbihzdGFydE9mZnNldCwgdHlwZSwgdGhpcy5fbGFuZ3VhZ2VJZCkpOwogICAgfQogIH0sIHsKICAgIGtleTogIm5lc3RlZExhbmd1YWdlVG9rZW5pemUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIG5lc3RlZExhbmd1YWdlVG9rZW5pemUoZW1iZWRkZWRMYW5ndWFnZUxpbmUsIGhhc0VPTCwgZW1iZWRkZWRMYW5ndWFnZURhdGEsIG9mZnNldERlbHRhKSB7CiAgICAgIHZhciBuZXN0ZWRMYW5ndWFnZUlkID0gZW1iZWRkZWRMYW5ndWFnZURhdGEubGFuZ3VhZ2VJZDsKICAgICAgdmFyIGVtYmVkZGVkTW9kZVN0YXRlID0gZW1iZWRkZWRMYW5ndWFnZURhdGEuc3RhdGU7CiAgICAgIHZhciBuZXN0ZWRMYW5ndWFnZVRva2VuaXphdGlvblN1cHBvcnQgPSBsYW5ndWFnZXMuVG9rZW5pemF0aW9uUmVnaXN0cnkuZ2V0KG5lc3RlZExhbmd1YWdlSWQpOwogICAgICBpZiAoIW5lc3RlZExhbmd1YWdlVG9rZW5pemF0aW9uU3VwcG9ydCkgewogICAgICAgIHRoaXMuZW50ZXJMYW5ndWFnZShuZXN0ZWRMYW5ndWFnZUlkKTsKICAgICAgICB0aGlzLmVtaXQob2Zmc2V0RGVsdGEsICcnKTsKICAgICAgICByZXR1cm4gZW1iZWRkZWRNb2RlU3RhdGU7CiAgICAgIH0KICAgICAgdmFyIG5lc3RlZFJlc3VsdCA9IG5lc3RlZExhbmd1YWdlVG9rZW5pemF0aW9uU3VwcG9ydC50b2tlbml6ZShlbWJlZGRlZExhbmd1YWdlTGluZSwgaGFzRU9MLCBlbWJlZGRlZE1vZGVTdGF0ZSk7CiAgICAgIGlmIChvZmZzZXREZWx0YSAhPT0gMCkgewogICAgICAgIHZhciBfaXRlcmF0b3IgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihuZXN0ZWRSZXN1bHQudG9rZW5zKSwKICAgICAgICAgIF9zdGVwOwogICAgICAgIHRyeSB7CiAgICAgICAgICBmb3IgKF9pdGVyYXRvci5zKCk7ICEoX3N0ZXAgPSBfaXRlcmF0b3IubigpKS5kb25lOykgewogICAgICAgICAgICB2YXIgdG9rZW4gPSBfc3RlcC52YWx1ZTsKICAgICAgICAgICAgdGhpcy5fdG9rZW5zLnB1c2gobmV3IGxhbmd1YWdlcy5Ub2tlbih0b2tlbi5vZmZzZXQgKyBvZmZzZXREZWx0YSwgdG9rZW4udHlwZSwgdG9rZW4ubGFuZ3VhZ2UpKTsKICAgICAgICAgIH0KICAgICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICAgIF9pdGVyYXRvci5lKGVycik7CiAgICAgICAgfSBmaW5hbGx5IHsKICAgICAgICAgIF9pdGVyYXRvci5mKCk7CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMuX3Rva2VucyA9IHRoaXMuX3Rva2Vucy5jb25jYXQobmVzdGVkUmVzdWx0LnRva2Vucyk7CiAgICAgIH0KICAgICAgdGhpcy5fbGFzdFRva2VuVHlwZSA9IG51bGw7CiAgICAgIHRoaXMuX2xhc3RUb2tlbkxhbmd1YWdlID0gbnVsbDsKICAgICAgdGhpcy5fbGFuZ3VhZ2VJZCA9IG51bGw7CiAgICAgIHJldHVybiBuZXN0ZWRSZXN1bHQuZW5kU3RhdGU7CiAgICB9CiAgfSwgewogICAga2V5OiAiZmluYWxpemUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGZpbmFsaXplKGVuZFN0YXRlKSB7CiAgICAgIHJldHVybiBuZXcgbGFuZ3VhZ2VzLlRva2VuaXphdGlvblJlc3VsdCh0aGlzLl90b2tlbnMsIGVuZFN0YXRlKTsKICAgIH0KICB9XSk7CiAgcmV0dXJuIE1vbmFyY2hDbGFzc2ljVG9rZW5zQ29sbGVjdG9yOwp9KCk7CnZhciBNb25hcmNoTW9kZXJuVG9rZW5zQ29sbGVjdG9yID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBNb25hcmNoTW9kZXJuVG9rZW5zQ29sbGVjdG9yKGxhbmd1YWdlU2VydmljZSwgdGhlbWUpIHsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNb25hcmNoTW9kZXJuVG9rZW5zQ29sbGVjdG9yKTsKICAgIHRoaXMuX2xhbmd1YWdlU2VydmljZSA9IGxhbmd1YWdlU2VydmljZTsKICAgIHRoaXMuX3RoZW1lID0gdGhlbWU7CiAgICB0aGlzLl9wcmVwZW5kVG9rZW5zID0gbnVsbDsKICAgIHRoaXMuX3Rva2VucyA9IFtdOwogICAgdGhpcy5fY3VycmVudExhbmd1YWdlSWQgPSAwIC8qIExhbmd1YWdlSWQuTnVsbCAqLzsKICAgIHRoaXMuX2xhc3RUb2tlbk1ldGFkYXRhID0gMDsKICB9CiAgX2NyZWF0ZUNsYXNzKE1vbmFyY2hNb2Rlcm5Ub2tlbnNDb2xsZWN0b3IsIFt7CiAgICBrZXk6ICJlbnRlckxhbmd1YWdlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBlbnRlckxhbmd1YWdlKGxhbmd1YWdlSWQpIHsKICAgICAgdGhpcy5fY3VycmVudExhbmd1YWdlSWQgPSB0aGlzLl9sYW5ndWFnZVNlcnZpY2UubGFuZ3VhZ2VJZENvZGVjLmVuY29kZUxhbmd1YWdlSWQobGFuZ3VhZ2VJZCk7CiAgICB9CiAgfSwgewogICAga2V5OiAiZW1pdCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZW1pdChzdGFydE9mZnNldCwgdHlwZSkgewogICAgICB2YXIgbWV0YWRhdGEgPSB0aGlzLl90aGVtZS5tYXRjaCh0aGlzLl9jdXJyZW50TGFuZ3VhZ2VJZCwgdHlwZSk7CiAgICAgIGlmICh0aGlzLl9sYXN0VG9rZW5NZXRhZGF0YSA9PT0gbWV0YWRhdGEpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgICAgdGhpcy5fbGFzdFRva2VuTWV0YWRhdGEgPSBtZXRhZGF0YTsKICAgICAgdGhpcy5fdG9rZW5zLnB1c2goc3RhcnRPZmZzZXQpOwogICAgICB0aGlzLl90b2tlbnMucHVzaChtZXRhZGF0YSk7CiAgICB9CiAgfSwgewogICAga2V5OiAibmVzdGVkTGFuZ3VhZ2VUb2tlbml6ZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gbmVzdGVkTGFuZ3VhZ2VUb2tlbml6ZShlbWJlZGRlZExhbmd1YWdlTGluZSwgaGFzRU9MLCBlbWJlZGRlZExhbmd1YWdlRGF0YSwgb2Zmc2V0RGVsdGEpIHsKICAgICAgdmFyIG5lc3RlZExhbmd1YWdlSWQgPSBlbWJlZGRlZExhbmd1YWdlRGF0YS5sYW5ndWFnZUlkOwogICAgICB2YXIgZW1iZWRkZWRNb2RlU3RhdGUgPSBlbWJlZGRlZExhbmd1YWdlRGF0YS5zdGF0ZTsKICAgICAgdmFyIG5lc3RlZExhbmd1YWdlVG9rZW5pemF0aW9uU3VwcG9ydCA9IGxhbmd1YWdlcy5Ub2tlbml6YXRpb25SZWdpc3RyeS5nZXQobmVzdGVkTGFuZ3VhZ2VJZCk7CiAgICAgIGlmICghbmVzdGVkTGFuZ3VhZ2VUb2tlbml6YXRpb25TdXBwb3J0KSB7CiAgICAgICAgdGhpcy5lbnRlckxhbmd1YWdlKG5lc3RlZExhbmd1YWdlSWQpOwogICAgICAgIHRoaXMuZW1pdChvZmZzZXREZWx0YSwgJycpOwogICAgICAgIHJldHVybiBlbWJlZGRlZE1vZGVTdGF0ZTsKICAgICAgfQogICAgICB2YXIgbmVzdGVkUmVzdWx0ID0gbmVzdGVkTGFuZ3VhZ2VUb2tlbml6YXRpb25TdXBwb3J0LnRva2VuaXplRW5jb2RlZChlbWJlZGRlZExhbmd1YWdlTGluZSwgaGFzRU9MLCBlbWJlZGRlZE1vZGVTdGF0ZSk7CiAgICAgIGlmIChvZmZzZXREZWx0YSAhPT0gMCkgewogICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBuZXN0ZWRSZXN1bHQudG9rZW5zLmxlbmd0aDsgaSA8IGxlbjsgaSArPSAyKSB7CiAgICAgICAgICBuZXN0ZWRSZXN1bHQudG9rZW5zW2ldICs9IG9mZnNldERlbHRhOwogICAgICAgIH0KICAgICAgfQogICAgICB0aGlzLl9wcmVwZW5kVG9rZW5zID0gTW9uYXJjaE1vZGVyblRva2Vuc0NvbGxlY3Rvci5fbWVyZ2UodGhpcy5fcHJlcGVuZFRva2VucywgdGhpcy5fdG9rZW5zLCBuZXN0ZWRSZXN1bHQudG9rZW5zKTsKICAgICAgdGhpcy5fdG9rZW5zID0gW107CiAgICAgIHRoaXMuX2N1cnJlbnRMYW5ndWFnZUlkID0gMDsKICAgICAgdGhpcy5fbGFzdFRva2VuTWV0YWRhdGEgPSAwOwogICAgICByZXR1cm4gbmVzdGVkUmVzdWx0LmVuZFN0YXRlOwogICAgfQogIH0sIHsKICAgIGtleTogImZpbmFsaXplIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBmaW5hbGl6ZShlbmRTdGF0ZSkgewogICAgICByZXR1cm4gbmV3IGxhbmd1YWdlcy5FbmNvZGVkVG9rZW5pemF0aW9uUmVzdWx0KE1vbmFyY2hNb2Rlcm5Ub2tlbnNDb2xsZWN0b3IuX21lcmdlKHRoaXMuX3ByZXBlbmRUb2tlbnMsIHRoaXMuX3Rva2VucywgbnVsbCksIGVuZFN0YXRlKTsKICAgIH0KICB9XSwgW3sKICAgIGtleTogIl9tZXJnZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX21lcmdlKGEsIGIsIGMpIHsKICAgICAgdmFyIGFMZW4gPSBhICE9PSBudWxsID8gYS5sZW5ndGggOiAwOwogICAgICB2YXIgYkxlbiA9IGIubGVuZ3RoOwogICAgICB2YXIgY0xlbiA9IGMgIT09IG51bGwgPyBjLmxlbmd0aCA6IDA7CiAgICAgIGlmIChhTGVuID09PSAwICYmIGJMZW4gPT09IDAgJiYgY0xlbiA9PT0gMCkgewogICAgICAgIHJldHVybiBuZXcgVWludDMyQXJyYXkoMCk7CiAgICAgIH0KICAgICAgaWYgKGFMZW4gPT09IDAgJiYgYkxlbiA9PT0gMCkgewogICAgICAgIHJldHVybiBjOwogICAgICB9CiAgICAgIGlmIChiTGVuID09PSAwICYmIGNMZW4gPT09IDApIHsKICAgICAgICByZXR1cm4gYTsKICAgICAgfQogICAgICB2YXIgcmVzdWx0ID0gbmV3IFVpbnQzMkFycmF5KGFMZW4gKyBiTGVuICsgY0xlbik7CiAgICAgIGlmIChhICE9PSBudWxsKSB7CiAgICAgICAgcmVzdWx0LnNldChhKTsKICAgICAgfQogICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJMZW47IGkrKykgewogICAgICAgIHJlc3VsdFthTGVuICsgaV0gPSBiW2ldOwogICAgICB9CiAgICAgIGlmIChjICE9PSBudWxsKSB7CiAgICAgICAgcmVzdWx0LnNldChjLCBhTGVuICsgYkxlbik7CiAgICAgIH0KICAgICAgcmV0dXJuIHJlc3VsdDsKICAgIH0KICB9XSk7CiAgcmV0dXJuIE1vbmFyY2hNb2Rlcm5Ub2tlbnNDb2xsZWN0b3I7Cn0oKTsKdmFyIE1vbmFyY2hUb2tlbml6ZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIE1vbmFyY2hUb2tlbml6ZXIobGFuZ3VhZ2VTZXJ2aWNlLCBzdGFuZGFsb25lVGhlbWVTZXJ2aWNlLCBsYW5ndWFnZUlkLCBsZXhlciwgX2NvbmZpZ3VyYXRpb25TZXJ2aWNlKSB7CiAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1vbmFyY2hUb2tlbml6ZXIpOwogICAgdGhpcy5fY29uZmlndXJhdGlvblNlcnZpY2UgPSBfY29uZmlndXJhdGlvblNlcnZpY2U7CiAgICB0aGlzLl9sYW5ndWFnZVNlcnZpY2UgPSBsYW5ndWFnZVNlcnZpY2U7CiAgICB0aGlzLl9zdGFuZGFsb25lVGhlbWVTZXJ2aWNlID0gc3RhbmRhbG9uZVRoZW1lU2VydmljZTsKICAgIHRoaXMuX2xhbmd1YWdlSWQgPSBsYW5ndWFnZUlkOwogICAgdGhpcy5fbGV4ZXIgPSBsZXhlcjsKICAgIHRoaXMuX2VtYmVkZGVkTGFuZ3VhZ2VzID0gT2JqZWN0LmNyZWF0ZShudWxsKTsKICAgIHRoaXMuZW1iZWRkZWRMb2FkZWQgPSBQcm9taXNlLnJlc29sdmUodW5kZWZpbmVkKTsKICAgIC8vIFNldCB1cCBsaXN0ZW5pbmcgZm9yIGVtYmVkZGVkIG1vZGVzCiAgICB2YXIgZW1pdHRpbmcgPSBmYWxzZTsKICAgIHRoaXMuX3Rva2VuaXphdGlvblJlZ2lzdHJ5TGlzdGVuZXIgPSBsYW5ndWFnZXMuVG9rZW5pemF0aW9uUmVnaXN0cnkub25EaWRDaGFuZ2UoZnVuY3Rpb24gKGUpIHsKICAgICAgaWYgKGVtaXR0aW5nKSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CiAgICAgIHZhciBpc09uZU9mTXlFbWJlZGRlZE1vZGVzID0gZmFsc2U7CiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBlLmNoYW5nZWRMYW5ndWFnZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHsKICAgICAgICB2YXIgbGFuZ3VhZ2UgPSBlLmNoYW5nZWRMYW5ndWFnZXNbaV07CiAgICAgICAgaWYgKF90aGlzLl9lbWJlZGRlZExhbmd1YWdlc1tsYW5ndWFnZV0pIHsKICAgICAgICAgIGlzT25lT2ZNeUVtYmVkZGVkTW9kZXMgPSB0cnVlOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgICB9CiAgICAgIGlmIChpc09uZU9mTXlFbWJlZGRlZE1vZGVzKSB7CiAgICAgICAgZW1pdHRpbmcgPSB0cnVlOwogICAgICAgIGxhbmd1YWdlcy5Ub2tlbml6YXRpb25SZWdpc3RyeS5maXJlKFtfdGhpcy5fbGFuZ3VhZ2VJZF0pOwogICAgICAgIGVtaXR0aW5nID0gZmFsc2U7CiAgICAgIH0KICAgIH0pOwogICAgdGhpcy5fbWF4VG9rZW5pemF0aW9uTGluZUxlbmd0aCA9IHRoaXMuX2NvbmZpZ3VyYXRpb25TZXJ2aWNlLmdldFZhbHVlKCdlZGl0b3IubWF4VG9rZW5pemF0aW9uTGluZUxlbmd0aCcsIHsKICAgICAgb3ZlcnJpZGVJZGVudGlmaWVyOiB0aGlzLl9sYW5ndWFnZUlkCiAgICB9KTsKICAgIHRoaXMuX2NvbmZpZ3VyYXRpb25TZXJ2aWNlLm9uRGlkQ2hhbmdlQ29uZmlndXJhdGlvbihmdW5jdGlvbiAoZSkgewogICAgICBpZiAoZS5hZmZlY3RzQ29uZmlndXJhdGlvbignZWRpdG9yLm1heFRva2VuaXphdGlvbkxpbmVMZW5ndGgnKSkgewogICAgICAgIF90aGlzLl9tYXhUb2tlbml6YXRpb25MaW5lTGVuZ3RoID0gX3RoaXMuX2NvbmZpZ3VyYXRpb25TZXJ2aWNlLmdldFZhbHVlKCdlZGl0b3IubWF4VG9rZW5pemF0aW9uTGluZUxlbmd0aCcsIHsKICAgICAgICAgIG92ZXJyaWRlSWRlbnRpZmllcjogX3RoaXMuX2xhbmd1YWdlSWQKICAgICAgICB9KTsKICAgICAgfQogICAgfSk7CiAgfQogIF9jcmVhdGVDbGFzcyhNb25hcmNoVG9rZW5pemVyLCBbewogICAga2V5OiAiZGlzcG9zZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZGlzcG9zZSgpIHsKICAgICAgdGhpcy5fdG9rZW5pemF0aW9uUmVnaXN0cnlMaXN0ZW5lci5kaXNwb3NlKCk7CiAgICB9CiAgfSwgewogICAga2V5OiAiZ2V0TG9hZFN0YXR1cyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0TG9hZFN0YXR1cygpIHsKICAgICAgdmFyIHByb21pc2VzID0gW107CiAgICAgIGZvciAodmFyIG5lc3RlZExhbmd1YWdlSWQgaW4gdGhpcy5fZW1iZWRkZWRMYW5ndWFnZXMpIHsKICAgICAgICB2YXIgdG9rZW5pemF0aW9uU3VwcG9ydCA9IGxhbmd1YWdlcy5Ub2tlbml6YXRpb25SZWdpc3RyeS5nZXQobmVzdGVkTGFuZ3VhZ2VJZCk7CiAgICAgICAgaWYgKHRva2VuaXphdGlvblN1cHBvcnQpIHsKICAgICAgICAgIC8vIFRoZSBuZXN0ZWQgbGFuZ3VhZ2UgaXMgYWxyZWFkeSBsb2FkZWQKICAgICAgICAgIGlmICh0b2tlbml6YXRpb25TdXBwb3J0IGluc3RhbmNlb2YgTW9uYXJjaFRva2VuaXplcikgewogICAgICAgICAgICB2YXIgbmVzdGVkTW9kZVN0YXR1cyA9IHRva2VuaXphdGlvblN1cHBvcnQuZ2V0TG9hZFN0YXR1cygpOwogICAgICAgICAgICBpZiAobmVzdGVkTW9kZVN0YXR1cy5sb2FkZWQgPT09IGZhbHNlKSB7CiAgICAgICAgICAgICAgcHJvbWlzZXMucHVzaChuZXN0ZWRNb2RlU3RhdHVzLnByb21pc2UpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBjb250aW51ZTsKICAgICAgICB9CiAgICAgICAgaWYgKCFsYW5ndWFnZXMuVG9rZW5pemF0aW9uUmVnaXN0cnkuaXNSZXNvbHZlZChuZXN0ZWRMYW5ndWFnZUlkKSkgewogICAgICAgICAgLy8gVGhlIG5lc3RlZCBsYW5ndWFnZSBpcyBpbiB0aGUgcHJvY2VzcyBvZiBiZWluZyBsb2FkZWQKICAgICAgICAgIHByb21pc2VzLnB1c2gobGFuZ3VhZ2VzLlRva2VuaXphdGlvblJlZ2lzdHJ5LmdldE9yQ3JlYXRlKG5lc3RlZExhbmd1YWdlSWQpKTsKICAgICAgICB9CiAgICAgIH0KICAgICAgaWYgKHByb21pc2VzLmxlbmd0aCA9PT0gMCkgewogICAgICAgIHJldHVybiB7CiAgICAgICAgICBsb2FkZWQ6IHRydWUKICAgICAgICB9OwogICAgICB9CiAgICAgIHJldHVybiB7CiAgICAgICAgbG9hZGVkOiBmYWxzZSwKICAgICAgICBwcm9taXNlOiBQcm9taXNlLmFsbChwcm9taXNlcykudGhlbihmdW5jdGlvbiAoXykgewogICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDsKICAgICAgICB9KQogICAgICB9OwogICAgfQogIH0sIHsKICAgIGtleTogImdldEluaXRpYWxTdGF0ZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0SW5pdGlhbFN0YXRlKCkgewogICAgICB2YXIgcm9vdFN0YXRlID0gTW9uYXJjaFN0YWNrRWxlbWVudEZhY3RvcnkuY3JlYXRlKG51bGwsIHRoaXMuX2xleGVyLnN0YXJ0KTsKICAgICAgcmV0dXJuIE1vbmFyY2hMaW5lU3RhdGVGYWN0b3J5LmNyZWF0ZShyb290U3RhdGUsIG51bGwpOwogICAgfQogIH0sIHsKICAgIGtleTogInRva2VuaXplIiwKICAgIHZhbHVlOiBmdW5jdGlvbiB0b2tlbml6ZShsaW5lLCBoYXNFT0wsIGxpbmVTdGF0ZSkgewogICAgICBpZiAobGluZS5sZW5ndGggPj0gdGhpcy5fbWF4VG9rZW5pemF0aW9uTGluZUxlbmd0aCkgewogICAgICAgIHJldHVybiBudWxsVG9rZW5pemUodGhpcy5fbGFuZ3VhZ2VJZCwgbGluZVN0YXRlKTsKICAgICAgfQogICAgICB2YXIgdG9rZW5zQ29sbGVjdG9yID0gbmV3IE1vbmFyY2hDbGFzc2ljVG9rZW5zQ29sbGVjdG9yKCk7CiAgICAgIHZhciBlbmRMaW5lU3RhdGUgPSB0aGlzLl90b2tlbml6ZShsaW5lLCBoYXNFT0wsIGxpbmVTdGF0ZSwgdG9rZW5zQ29sbGVjdG9yKTsKICAgICAgcmV0dXJuIHRva2Vuc0NvbGxlY3Rvci5maW5hbGl6ZShlbmRMaW5lU3RhdGUpOwogICAgfQogIH0sIHsKICAgIGtleTogInRva2VuaXplRW5jb2RlZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gdG9rZW5pemVFbmNvZGVkKGxpbmUsIGhhc0VPTCwgbGluZVN0YXRlKSB7CiAgICAgIGlmIChsaW5lLmxlbmd0aCA+PSB0aGlzLl9tYXhUb2tlbml6YXRpb25MaW5lTGVuZ3RoKSB7CiAgICAgICAgcmV0dXJuIG51bGxUb2tlbml6ZUVuY29kZWQodGhpcy5fbGFuZ3VhZ2VTZXJ2aWNlLmxhbmd1YWdlSWRDb2RlYy5lbmNvZGVMYW5ndWFnZUlkKHRoaXMuX2xhbmd1YWdlSWQpLCBsaW5lU3RhdGUpOwogICAgICB9CiAgICAgIHZhciB0b2tlbnNDb2xsZWN0b3IgPSBuZXcgTW9uYXJjaE1vZGVyblRva2Vuc0NvbGxlY3Rvcih0aGlzLl9sYW5ndWFnZVNlcnZpY2UsIHRoaXMuX3N0YW5kYWxvbmVUaGVtZVNlcnZpY2UuZ2V0Q29sb3JUaGVtZSgpLnRva2VuVGhlbWUpOwogICAgICB2YXIgZW5kTGluZVN0YXRlID0gdGhpcy5fdG9rZW5pemUobGluZSwgaGFzRU9MLCBsaW5lU3RhdGUsIHRva2Vuc0NvbGxlY3Rvcik7CiAgICAgIHJldHVybiB0b2tlbnNDb2xsZWN0b3IuZmluYWxpemUoZW5kTGluZVN0YXRlKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJfdG9rZW5pemUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIF90b2tlbml6ZShsaW5lLCBoYXNFT0wsIGxpbmVTdGF0ZSwgY29sbGVjdG9yKSB7CiAgICAgIGlmIChsaW5lU3RhdGUuZW1iZWRkZWRMYW5ndWFnZURhdGEpIHsKICAgICAgICByZXR1cm4gdGhpcy5fbmVzdGVkVG9rZW5pemUobGluZSwgaGFzRU9MLCBsaW5lU3RhdGUsIDAsIGNvbGxlY3Rvcik7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIHRoaXMuX215VG9rZW5pemUobGluZSwgaGFzRU9MLCBsaW5lU3RhdGUsIDAsIGNvbGxlY3Rvcik7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJfZmluZExlYXZpbmdOZXN0ZWRMYW5ndWFnZU9mZnNldCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX2ZpbmRMZWF2aW5nTmVzdGVkTGFuZ3VhZ2VPZmZzZXQobGluZSwgc3RhdGUpIHsKICAgICAgdmFyIHJ1bGVzID0gdGhpcy5fbGV4ZXIudG9rZW5pemVyW3N0YXRlLnN0YWNrLnN0YXRlXTsKICAgICAgaWYgKCFydWxlcykgewogICAgICAgIHJ1bGVzID0gbW9uYXJjaENvbW1vbi5maW5kUnVsZXModGhpcy5fbGV4ZXIsIHN0YXRlLnN0YWNrLnN0YXRlKTsgLy8gZG8gcGFyZW50IG1hdGNoaW5nCiAgICAgICAgaWYgKCFydWxlcykgewogICAgICAgICAgdGhyb3cgbW9uYXJjaENvbW1vbi5jcmVhdGVFcnJvcih0aGlzLl9sZXhlciwgJ3Rva2VuaXplciBzdGF0ZSBpcyBub3QgZGVmaW5lZDogJyArIHN0YXRlLnN0YWNrLnN0YXRlKTsKICAgICAgICB9CiAgICAgIH0KICAgICAgdmFyIHBvcE9mZnNldCA9IC0xOwogICAgICB2YXIgaGFzRW1iZWRkZWRQb3BSdWxlID0gZmFsc2U7CiAgICAgIHZhciBfaXRlcmF0b3IyID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIocnVsZXMpLAogICAgICAgIF9zdGVwMjsKICAgICAgdHJ5IHsKICAgICAgICBmb3IgKF9pdGVyYXRvcjIucygpOyAhKF9zdGVwMiA9IF9pdGVyYXRvcjIubigpKS5kb25lOykgewogICAgICAgICAgdmFyIHJ1bGUgPSBfc3RlcDIudmFsdWU7CiAgICAgICAgICBpZiAoIW1vbmFyY2hDb21tb24uaXNJQWN0aW9uKHJ1bGUuYWN0aW9uKSB8fCBydWxlLmFjdGlvbi5uZXh0RW1iZWRkZWQgIT09ICdAcG9wJykgewogICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgIH0KICAgICAgICAgIGhhc0VtYmVkZGVkUG9wUnVsZSA9IHRydWU7CiAgICAgICAgICB2YXIgcmVnZXggPSBydWxlLnJlZ2V4OwogICAgICAgICAgdmFyIHJlZ2V4U291cmNlID0gcnVsZS5yZWdleC5zb3VyY2U7CiAgICAgICAgICBpZiAocmVnZXhTb3VyY2Uuc3Vic3RyKDAsIDQpID09PSAnXig/OicgJiYgcmVnZXhTb3VyY2Uuc3Vic3RyKHJlZ2V4U291cmNlLmxlbmd0aCAtIDEsIDEpID09PSAnKScpIHsKICAgICAgICAgICAgdmFyIGZsYWdzID0gKHJlZ2V4Lmlnbm9yZUNhc2UgPyAnaScgOiAnJykgKyAocmVnZXgudW5pY29kZSA/ICd1JyA6ICcnKTsKICAgICAgICAgICAgcmVnZXggPSBuZXcgUmVnRXhwKHJlZ2V4U291cmNlLnN1YnN0cig0LCByZWdleFNvdXJjZS5sZW5ndGggLSA1KSwgZmxhZ3MpOwogICAgICAgICAgfQogICAgICAgICAgdmFyIHJlc3VsdCA9IGxpbmUuc2VhcmNoKHJlZ2V4KTsKICAgICAgICAgIGlmIChyZXN1bHQgPT09IC0xIHx8IHJlc3VsdCAhPT0gMCAmJiBydWxlLm1hdGNoT25seUF0TGluZVN0YXJ0KSB7CiAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgfQogICAgICAgICAgaWYgKHBvcE9mZnNldCA9PT0gLTEgfHwgcmVzdWx0IDwgcG9wT2Zmc2V0KSB7CiAgICAgICAgICAgIHBvcE9mZnNldCA9IHJlc3VsdDsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgIF9pdGVyYXRvcjIuZShlcnIpOwogICAgICB9IGZpbmFsbHkgewogICAgICAgIF9pdGVyYXRvcjIuZigpOwogICAgICB9CiAgICAgIGlmICghaGFzRW1iZWRkZWRQb3BSdWxlKSB7CiAgICAgICAgdGhyb3cgbW9uYXJjaENvbW1vbi5jcmVhdGVFcnJvcih0aGlzLl9sZXhlciwgJ25vIHJ1bGUgY29udGFpbmluZyBuZXh0RW1iZWRkZWQ6ICJAcG9wIiBpbiB0b2tlbml6ZXIgZW1iZWRkZWQgc3RhdGU6ICcgKyBzdGF0ZS5zdGFjay5zdGF0ZSk7CiAgICAgIH0KICAgICAgcmV0dXJuIHBvcE9mZnNldDsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJfbmVzdGVkVG9rZW5pemUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9uZXN0ZWRUb2tlbml6ZShsaW5lLCBoYXNFT0wsIGxpbmVTdGF0ZSwgb2Zmc2V0RGVsdGEsIHRva2Vuc0NvbGxlY3RvcikgewogICAgICB2YXIgcG9wT2Zmc2V0ID0gdGhpcy5fZmluZExlYXZpbmdOZXN0ZWRMYW5ndWFnZU9mZnNldChsaW5lLCBsaW5lU3RhdGUpOwogICAgICBpZiAocG9wT2Zmc2V0ID09PSAtMSkgewogICAgICAgIC8vIHRva2VuaXphdGlvbiB3aWxsIG5vdCBsZWF2ZSBuZXN0ZWQgbGFuZ3VhZ2UKICAgICAgICB2YXIgbmVzdGVkRW5kU3RhdGUgPSB0b2tlbnNDb2xsZWN0b3IubmVzdGVkTGFuZ3VhZ2VUb2tlbml6ZShsaW5lLCBoYXNFT0wsIGxpbmVTdGF0ZS5lbWJlZGRlZExhbmd1YWdlRGF0YSwgb2Zmc2V0RGVsdGEpOwogICAgICAgIHJldHVybiBNb25hcmNoTGluZVN0YXRlRmFjdG9yeS5jcmVhdGUobGluZVN0YXRlLnN0YWNrLCBuZXcgRW1iZWRkZWRMYW5ndWFnZURhdGEobGluZVN0YXRlLmVtYmVkZGVkTGFuZ3VhZ2VEYXRhLmxhbmd1YWdlSWQsIG5lc3RlZEVuZFN0YXRlKSk7CiAgICAgIH0KICAgICAgdmFyIG5lc3RlZExhbmd1YWdlTGluZSA9IGxpbmUuc3Vic3RyaW5nKDAsIHBvcE9mZnNldCk7CiAgICAgIGlmIChuZXN0ZWRMYW5ndWFnZUxpbmUubGVuZ3RoID4gMCkgewogICAgICAgIC8vIHRva2VuaXplIHdpdGggdGhlIG5lc3RlZCBsYW5ndWFnZQogICAgICAgIHRva2Vuc0NvbGxlY3Rvci5uZXN0ZWRMYW5ndWFnZVRva2VuaXplKG5lc3RlZExhbmd1YWdlTGluZSwgZmFsc2UsIGxpbmVTdGF0ZS5lbWJlZGRlZExhbmd1YWdlRGF0YSwgb2Zmc2V0RGVsdGEpOwogICAgICB9CiAgICAgIHZhciByZXN0T2ZUaGVMaW5lID0gbGluZS5zdWJzdHJpbmcocG9wT2Zmc2V0KTsKICAgICAgcmV0dXJuIHRoaXMuX215VG9rZW5pemUocmVzdE9mVGhlTGluZSwgaGFzRU9MLCBsaW5lU3RhdGUsIG9mZnNldERlbHRhICsgcG9wT2Zmc2V0LCB0b2tlbnNDb2xsZWN0b3IpOwogICAgfQogIH0sIHsKICAgIGtleTogIl9zYWZlUnVsZU5hbWUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9zYWZlUnVsZU5hbWUocnVsZSkgewogICAgICBpZiAocnVsZSkgewogICAgICAgIHJldHVybiBydWxlLm5hbWU7CiAgICAgIH0KICAgICAgcmV0dXJuICcodW5rbm93biknOwogICAgfQogIH0sIHsKICAgIGtleTogIl9teVRva2VuaXplIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBfbXlUb2tlbml6ZShsaW5lV2l0aG91dExGLCBoYXNFT0wsIGxpbmVTdGF0ZSwgb2Zmc2V0RGVsdGEsIHRva2Vuc0NvbGxlY3RvcikgewogICAgICB2YXIgX3RoaXMyID0gdGhpczsKICAgICAgdG9rZW5zQ29sbGVjdG9yLmVudGVyTGFuZ3VhZ2UodGhpcy5fbGFuZ3VhZ2VJZCk7CiAgICAgIHZhciBsaW5lV2l0aG91dExGTGVuZ3RoID0gbGluZVdpdGhvdXRMRi5sZW5ndGg7CiAgICAgIHZhciBsaW5lID0gaGFzRU9MICYmIHRoaXMuX2xleGVyLmluY2x1ZGVMRiA/IGxpbmVXaXRob3V0TEYgKyAnXG4nIDogbGluZVdpdGhvdXRMRjsKICAgICAgdmFyIGxpbmVMZW5ndGggPSBsaW5lLmxlbmd0aDsKICAgICAgdmFyIGVtYmVkZGVkTGFuZ3VhZ2VEYXRhID0gbGluZVN0YXRlLmVtYmVkZGVkTGFuZ3VhZ2VEYXRhOwogICAgICB2YXIgc3RhY2sgPSBsaW5lU3RhdGUuc3RhY2s7CiAgICAgIHZhciBwb3MgPSAwOwogICAgICB2YXIgZ3JvdXBNYXRjaGluZyA9IG51bGw7CiAgICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vbWljcm9zb2Z0L21vbmFjby1lZGl0b3IvaXNzdWVzLzEyMzUKICAgICAgLy8gRXZhbHVhdGUgcnVsZXMgYXQgbGVhc3Qgb25jZSBmb3IgYW4gZW1wdHkgbGluZQogICAgICB2YXIgZm9yY2VFdmFsdWF0aW9uID0gdHJ1ZTsKICAgICAgd2hpbGUgKGZvcmNlRXZhbHVhdGlvbiB8fCBwb3MgPCBsaW5lTGVuZ3RoKSB7CiAgICAgICAgdmFyIHBvczAgPSBwb3M7CiAgICAgICAgdmFyIHN0YWNrTGVuMCA9IHN0YWNrLmRlcHRoOwogICAgICAgIHZhciBncm91cExlbjAgPSBncm91cE1hdGNoaW5nID8gZ3JvdXBNYXRjaGluZy5ncm91cHMubGVuZ3RoIDogMDsKICAgICAgICB2YXIgc3RhdGUgPSBzdGFjay5zdGF0ZTsKICAgICAgICB2YXIgbWF0Y2hlcyA9IG51bGw7CiAgICAgICAgdmFyIG1hdGNoZWQgPSBudWxsOwogICAgICAgIHZhciBhY3Rpb24gPSBudWxsOwogICAgICAgIHZhciBydWxlID0gbnVsbDsKICAgICAgICB2YXIgZW50ZXJpbmdFbWJlZGRlZExhbmd1YWdlID0gbnVsbDsKICAgICAgICAvLyBjaGVjayBpZiB3ZSBuZWVkIHRvIHByb2Nlc3MgZ3JvdXAgbWF0Y2hlcyBmaXJzdAogICAgICAgIGlmIChncm91cE1hdGNoaW5nKSB7CiAgICAgICAgICBtYXRjaGVzID0gZ3JvdXBNYXRjaGluZy5tYXRjaGVzOwogICAgICAgICAgdmFyIGdyb3VwRW50cnkgPSBncm91cE1hdGNoaW5nLmdyb3Vwcy5zaGlmdCgpOwogICAgICAgICAgbWF0Y2hlZCA9IGdyb3VwRW50cnkubWF0Y2hlZDsKICAgICAgICAgIGFjdGlvbiA9IGdyb3VwRW50cnkuYWN0aW9uOwogICAgICAgICAgcnVsZSA9IGdyb3VwTWF0Y2hpbmcucnVsZTsKICAgICAgICAgIC8vIGNsZWFudXAgaWYgbmVjZXNzYXJ5CiAgICAgICAgICBpZiAoZ3JvdXBNYXRjaGluZy5ncm91cHMubGVuZ3RoID09PSAwKSB7CiAgICAgICAgICAgIGdyb3VwTWF0Y2hpbmcgPSBudWxsOwogICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAvLyBvdGhlcndpc2Ugd2UgbWF0Y2ggb24gdGhlIHRva2VuIHN0cmVhbQogICAgICAgICAgaWYgKCFmb3JjZUV2YWx1YXRpb24gJiYgcG9zID49IGxpbmVMZW5ndGgpIHsKICAgICAgICAgICAgLy8gbm90aGluZyB0byBkbwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIH0KICAgICAgICAgIGZvcmNlRXZhbHVhdGlvbiA9IGZhbHNlOwogICAgICAgICAgLy8gZ2V0IHRoZSBydWxlcyBmb3IgdGhpcyBzdGF0ZQogICAgICAgICAgdmFyIHJ1bGVzID0gdGhpcy5fbGV4ZXIudG9rZW5pemVyW3N0YXRlXTsKICAgICAgICAgIGlmICghcnVsZXMpIHsKICAgICAgICAgICAgcnVsZXMgPSBtb25hcmNoQ29tbW9uLmZpbmRSdWxlcyh0aGlzLl9sZXhlciwgc3RhdGUpOyAvLyBkbyBwYXJlbnQgbWF0Y2hpbmcKICAgICAgICAgICAgaWYgKCFydWxlcykgewogICAgICAgICAgICAgIHRocm93IG1vbmFyY2hDb21tb24uY3JlYXRlRXJyb3IodGhpcy5fbGV4ZXIsICd0b2tlbml6ZXIgc3RhdGUgaXMgbm90IGRlZmluZWQ6ICcgKyBzdGF0ZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIC8vIHRyeSBlYWNoIHJ1bGUgdW50aWwgd2UgbWF0Y2gKICAgICAgICAgIHZhciByZXN0T2ZMaW5lID0gbGluZS5zdWJzdHIocG9zKTsKICAgICAgICAgIHZhciBfaXRlcmF0b3IzID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIocnVsZXMpLAogICAgICAgICAgICBfc3RlcDM7CiAgICAgICAgICB0cnkgewogICAgICAgICAgICBmb3IgKF9pdGVyYXRvcjMucygpOyAhKF9zdGVwMyA9IF9pdGVyYXRvcjMubigpKS5kb25lOykgewogICAgICAgICAgICAgIHZhciBfcnVsZSA9IF9zdGVwMy52YWx1ZTsKICAgICAgICAgICAgICBpZiAocG9zID09PSAwIHx8ICFfcnVsZS5tYXRjaE9ubHlBdExpbmVTdGFydCkgewogICAgICAgICAgICAgICAgbWF0Y2hlcyA9IHJlc3RPZkxpbmUubWF0Y2goX3J1bGUucmVnZXgpOwogICAgICAgICAgICAgICAgaWYgKG1hdGNoZXMpIHsKICAgICAgICAgICAgICAgICAgbWF0Y2hlZCA9IG1hdGNoZXNbMF07CiAgICAgICAgICAgICAgICAgIGFjdGlvbiA9IF9ydWxlLmFjdGlvbjsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICAgICAgX2l0ZXJhdG9yMy5lKGVycik7CiAgICAgICAgICB9IGZpbmFsbHkgewogICAgICAgICAgICBfaXRlcmF0b3IzLmYoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgLy8gV2UgbWF0Y2hlZCAncnVsZScgd2l0aCAnbWF0Y2hlcycgYW5kICdhY3Rpb24nCiAgICAgICAgaWYgKCFtYXRjaGVzKSB7CiAgICAgICAgICBtYXRjaGVzID0gWycnXTsKICAgICAgICAgIG1hdGNoZWQgPSAnJzsKICAgICAgICB9CiAgICAgICAgaWYgKCFhY3Rpb24pIHsKICAgICAgICAgIC8vIGJhZDogd2UgZGlkbid0IG1hdGNoIGFueXRoaW5nLCBhbmQgdGhlcmUgaXMgbm8gYWN0aW9uIHRvIHRha2UKICAgICAgICAgIC8vIHdlIG5lZWQgdG8gYWR2YW5jZSB0aGUgc3RyZWFtIG9yIHdlIGdldCBwcm9ncmVzcyB0cm91YmxlCiAgICAgICAgICBpZiAocG9zIDwgbGluZUxlbmd0aCkgewogICAgICAgICAgICBtYXRjaGVzID0gW2xpbmUuY2hhckF0KHBvcyldOwogICAgICAgICAgICBtYXRjaGVkID0gbWF0Y2hlc1swXTsKICAgICAgICAgIH0KICAgICAgICAgIGFjdGlvbiA9IHRoaXMuX2xleGVyLmRlZmF1bHRUb2tlbjsKICAgICAgICB9CiAgICAgICAgaWYgKG1hdGNoZWQgPT09IG51bGwpIHsKICAgICAgICAgIC8vIHNob3VsZCBuZXZlciBoYXBwZW4sIG5lZWRlZCBmb3Igc3RyaWN0IG51bGwgY2hlY2tpbmcKICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KICAgICAgICAvLyBhZHZhbmNlIHN0cmVhbQogICAgICAgIHBvcyArPSBtYXRjaGVkLmxlbmd0aDsKICAgICAgICAvLyBtYXliZSBjYWxsIGFjdGlvbiBmdW5jdGlvbiAodXNlZCBmb3IgJ2Nhc2VzJykKICAgICAgICB3aGlsZSAobW9uYXJjaENvbW1vbi5pc0Z1enp5QWN0aW9uKGFjdGlvbikgJiYgbW9uYXJjaENvbW1vbi5pc0lBY3Rpb24oYWN0aW9uKSAmJiBhY3Rpb24udGVzdCkgewogICAgICAgICAgYWN0aW9uID0gYWN0aW9uLnRlc3QobWF0Y2hlZCwgbWF0Y2hlcywgc3RhdGUsIHBvcyA9PT0gbGluZUxlbmd0aCk7CiAgICAgICAgfQogICAgICAgIHZhciByZXN1bHQgPSBudWxsOwogICAgICAgIC8vIHNldCB0aGUgcmVzdWx0OiBlaXRoZXIgYSBzdHJpbmcgb3IgYW4gYXJyYXkgb2YgYWN0aW9ucwogICAgICAgIGlmICh0eXBlb2YgYWN0aW9uID09PSAnc3RyaW5nJyB8fCBBcnJheS5pc0FycmF5KGFjdGlvbikpIHsKICAgICAgICAgIHJlc3VsdCA9IGFjdGlvbjsKICAgICAgICB9IGVsc2UgaWYgKGFjdGlvbi5ncm91cCkgewogICAgICAgICAgcmVzdWx0ID0gYWN0aW9uLmdyb3VwOwogICAgICAgIH0gZWxzZSBpZiAoYWN0aW9uLnRva2VuICE9PSBudWxsICYmIGFjdGlvbi50b2tlbiAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAvLyBkbyAkbiByZXBsYWNlbWVudHM/CiAgICAgICAgICBpZiAoYWN0aW9uLnRva2VuU3Vic3QpIHsKICAgICAgICAgICAgcmVzdWx0ID0gbW9uYXJjaENvbW1vbi5zdWJzdGl0dXRlTWF0Y2hlcyh0aGlzLl9sZXhlciwgYWN0aW9uLnRva2VuLCBtYXRjaGVkLCBtYXRjaGVzLCBzdGF0ZSk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXN1bHQgPSBhY3Rpb24udG9rZW47CiAgICAgICAgICB9CiAgICAgICAgICAvLyBlbnRlciBlbWJlZGRlZCBsYW5ndWFnZT8KICAgICAgICAgIGlmIChhY3Rpb24ubmV4dEVtYmVkZGVkKSB7CiAgICAgICAgICAgIGlmIChhY3Rpb24ubmV4dEVtYmVkZGVkID09PSAnQHBvcCcpIHsKICAgICAgICAgICAgICBpZiAoIWVtYmVkZGVkTGFuZ3VhZ2VEYXRhKSB7CiAgICAgICAgICAgICAgICB0aHJvdyBtb25hcmNoQ29tbW9uLmNyZWF0ZUVycm9yKHRoaXMuX2xleGVyLCAnY2Fubm90IHBvcCBlbWJlZGRlZCBsYW5ndWFnZSBpZiBub3QgaW5zaWRlIG9uZScpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBlbWJlZGRlZExhbmd1YWdlRGF0YSA9IG51bGw7CiAgICAgICAgICAgIH0gZWxzZSBpZiAoZW1iZWRkZWRMYW5ndWFnZURhdGEpIHsKICAgICAgICAgICAgICB0aHJvdyBtb25hcmNoQ29tbW9uLmNyZWF0ZUVycm9yKHRoaXMuX2xleGVyLCAnY2Fubm90IGVudGVyIGVtYmVkZGVkIGxhbmd1YWdlIGZyb20gd2l0aGluIGFuIGVtYmVkZGVkIGxhbmd1YWdlJyk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgZW50ZXJpbmdFbWJlZGRlZExhbmd1YWdlID0gbW9uYXJjaENvbW1vbi5zdWJzdGl0dXRlTWF0Y2hlcyh0aGlzLl9sZXhlciwgYWN0aW9uLm5leHRFbWJlZGRlZCwgbWF0Y2hlZCwgbWF0Y2hlcywgc3RhdGUpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICAvLyBzdGF0ZSB0cmFuc2Zvcm1hdGlvbnMKICAgICAgICAgIGlmIChhY3Rpb24uZ29CYWNrKSB7CiAgICAgICAgICAgIC8vIGJhY2sgdXAgdGhlIHN0cmVhbS4uCiAgICAgICAgICAgIHBvcyA9IE1hdGgubWF4KDAsIHBvcyAtIGFjdGlvbi5nb0JhY2spOwogICAgICAgICAgfQogICAgICAgICAgaWYgKGFjdGlvbi5zd2l0Y2hUbyAmJiB0eXBlb2YgYWN0aW9uLnN3aXRjaFRvID09PSAnc3RyaW5nJykgewogICAgICAgICAgICB2YXIgbmV4dFN0YXRlID0gbW9uYXJjaENvbW1vbi5zdWJzdGl0dXRlTWF0Y2hlcyh0aGlzLl9sZXhlciwgYWN0aW9uLnN3aXRjaFRvLCBtYXRjaGVkLCBtYXRjaGVzLCBzdGF0ZSk7IC8vIHN3aXRjaCBzdGF0ZSB3aXRob3V0IGEgcHVzaC4uLgogICAgICAgICAgICBpZiAobmV4dFN0YXRlWzBdID09PSAnQCcpIHsKICAgICAgICAgICAgICBuZXh0U3RhdGUgPSBuZXh0U3RhdGUuc3Vic3RyKDEpOyAvLyBwZWVsIG9mZiBzdGFydGluZyAnQCcKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKCFtb25hcmNoQ29tbW9uLmZpbmRSdWxlcyh0aGlzLl9sZXhlciwgbmV4dFN0YXRlKSkgewogICAgICAgICAgICAgIHRocm93IG1vbmFyY2hDb21tb24uY3JlYXRlRXJyb3IodGhpcy5fbGV4ZXIsICd0cnlpbmcgdG8gc3dpdGNoIHRvIGEgc3RhdGUgXCcnICsgbmV4dFN0YXRlICsgJ1wnIHRoYXQgaXMgdW5kZWZpbmVkIGluIHJ1bGU6ICcgKyB0aGlzLl9zYWZlUnVsZU5hbWUocnVsZSkpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHN0YWNrID0gc3RhY2suc3dpdGNoVG8obmV4dFN0YXRlKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSBlbHNlIGlmIChhY3Rpb24udHJhbnNmb3JtICYmIHR5cGVvZiBhY3Rpb24udHJhbnNmb3JtID09PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgICAgIHRocm93IG1vbmFyY2hDb21tb24uY3JlYXRlRXJyb3IodGhpcy5fbGV4ZXIsICdhY3Rpb24udHJhbnNmb3JtIG5vdCBzdXBwb3J0ZWQnKTsKICAgICAgICAgIH0gZWxzZSBpZiAoYWN0aW9uLm5leHQpIHsKICAgICAgICAgICAgaWYgKGFjdGlvbi5uZXh0ID09PSAnQHB1c2gnKSB7CiAgICAgICAgICAgICAgaWYgKHN0YWNrLmRlcHRoID49IHRoaXMuX2xleGVyLm1heFN0YWNrKSB7CiAgICAgICAgICAgICAgICB0aHJvdyBtb25hcmNoQ29tbW9uLmNyZWF0ZUVycm9yKHRoaXMuX2xleGVyLCAnbWF4aW11bSB0b2tlbml6ZXIgc3RhY2sgc2l6ZSByZWFjaGVkOiBbJyArIHN0YWNrLnN0YXRlICsgJywnICsgc3RhY2sucGFyZW50LnN0YXRlICsgJywuLi5dJyk7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHN0YWNrID0gc3RhY2sucHVzaChzdGF0ZSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGVsc2UgaWYgKGFjdGlvbi5uZXh0ID09PSAnQHBvcCcpIHsKICAgICAgICAgICAgICBpZiAoc3RhY2suZGVwdGggPD0gMSkgewogICAgICAgICAgICAgICAgdGhyb3cgbW9uYXJjaENvbW1vbi5jcmVhdGVFcnJvcih0aGlzLl9sZXhlciwgJ3RyeWluZyB0byBwb3AgYW4gZW1wdHkgc3RhY2sgaW4gcnVsZTogJyArIHRoaXMuX3NhZmVSdWxlTmFtZShydWxlKSk7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHN0YWNrID0gc3RhY2sucG9wKCk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGVsc2UgaWYgKGFjdGlvbi5uZXh0ID09PSAnQHBvcGFsbCcpIHsKICAgICAgICAgICAgICBzdGFjayA9IHN0YWNrLnBvcGFsbCgpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHZhciBfbmV4dFN0YXRlID0gbW9uYXJjaENvbW1vbi5zdWJzdGl0dXRlTWF0Y2hlcyh0aGlzLl9sZXhlciwgYWN0aW9uLm5leHQsIG1hdGNoZWQsIG1hdGNoZXMsIHN0YXRlKTsKICAgICAgICAgICAgICBpZiAoX25leHRTdGF0ZVswXSA9PT0gJ0AnKSB7CiAgICAgICAgICAgICAgICBfbmV4dFN0YXRlID0gX25leHRTdGF0ZS5zdWJzdHIoMSk7IC8vIHBlZWwgb2ZmIHN0YXJ0aW5nICdAJwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgaWYgKCFtb25hcmNoQ29tbW9uLmZpbmRSdWxlcyh0aGlzLl9sZXhlciwgX25leHRTdGF0ZSkpIHsKICAgICAgICAgICAgICAgIHRocm93IG1vbmFyY2hDb21tb24uY3JlYXRlRXJyb3IodGhpcy5fbGV4ZXIsICd0cnlpbmcgdG8gc2V0IGEgbmV4dCBzdGF0ZSBcJycgKyBfbmV4dFN0YXRlICsgJ1wnIHRoYXQgaXMgdW5kZWZpbmVkIGluIHJ1bGU6ICcgKyB0aGlzLl9zYWZlUnVsZU5hbWUocnVsZSkpOwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBzdGFjayA9IHN0YWNrLnB1c2goX25leHRTdGF0ZSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoYWN0aW9uLmxvZyAmJiB0eXBlb2YgYWN0aW9uLmxvZyA9PT0gJ3N0cmluZycpIHsKICAgICAgICAgICAgbW9uYXJjaENvbW1vbi5sb2codGhpcy5fbGV4ZXIsIHRoaXMuX2xleGVyLmxhbmd1YWdlSWQgKyAnOiAnICsgbW9uYXJjaENvbW1vbi5zdWJzdGl0dXRlTWF0Y2hlcyh0aGlzLl9sZXhlciwgYWN0aW9uLmxvZywgbWF0Y2hlZCwgbWF0Y2hlcywgc3RhdGUpKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgLy8gY2hlY2sgcmVzdWx0CiAgICAgICAgaWYgKHJlc3VsdCA9PT0gbnVsbCkgewogICAgICAgICAgdGhyb3cgbW9uYXJjaENvbW1vbi5jcmVhdGVFcnJvcih0aGlzLl9sZXhlciwgJ2xleGVyIHJ1bGUgaGFzIG5vIHdlbGwtZGVmaW5lZCBhY3Rpb24gaW4gcnVsZTogJyArIHRoaXMuX3NhZmVSdWxlTmFtZShydWxlKSk7CiAgICAgICAgfQogICAgICAgIHZhciBjb21wdXRlTmV3U3RhdGVGb3JFbWJlZGRlZExhbmd1YWdlID0gZnVuY3Rpb24gY29tcHV0ZU5ld1N0YXRlRm9yRW1iZWRkZWRMYW5ndWFnZShlbnRlcmluZ0VtYmVkZGVkTGFuZ3VhZ2UpIHsKICAgICAgICAgIC8vIHN1cHBvcnQgbGFuZ3VhZ2UgbmFtZXMsIG1pbWUgdHlwZXMsIGFuZCBsYW5ndWFnZSBpZHMKICAgICAgICAgIHZhciBsYW5ndWFnZUlkID0gX3RoaXMyLl9sYW5ndWFnZVNlcnZpY2UuZ2V0TGFuZ3VhZ2VJZEJ5TGFuZ3VhZ2VOYW1lKGVudGVyaW5nRW1iZWRkZWRMYW5ndWFnZSkgfHwgX3RoaXMyLl9sYW5ndWFnZVNlcnZpY2UuZ2V0TGFuZ3VhZ2VJZEJ5TWltZVR5cGUoZW50ZXJpbmdFbWJlZGRlZExhbmd1YWdlKSB8fCBlbnRlcmluZ0VtYmVkZGVkTGFuZ3VhZ2U7CiAgICAgICAgICB2YXIgZW1iZWRkZWRMYW5ndWFnZURhdGEgPSBfdGhpczIuX2dldE5lc3RlZEVtYmVkZGVkTGFuZ3VhZ2VEYXRhKGxhbmd1YWdlSWQpOwogICAgICAgICAgaWYgKHBvcyA8IGxpbmVMZW5ndGgpIHsKICAgICAgICAgICAgLy8gdGhlcmUgaXMgY29udGVudCBmcm9tIHRoZSBlbWJlZGRlZCBsYW5ndWFnZSBvbiB0aGlzIGxpbmUKICAgICAgICAgICAgdmFyIF9yZXN0T2ZMaW5lID0gbGluZVdpdGhvdXRMRi5zdWJzdHIocG9zKTsKICAgICAgICAgICAgcmV0dXJuIF90aGlzMi5fbmVzdGVkVG9rZW5pemUoX3Jlc3RPZkxpbmUsIGhhc0VPTCwgTW9uYXJjaExpbmVTdGF0ZUZhY3RvcnkuY3JlYXRlKHN0YWNrLCBlbWJlZGRlZExhbmd1YWdlRGF0YSksIG9mZnNldERlbHRhICsgcG9zLCB0b2tlbnNDb2xsZWN0b3IpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuIE1vbmFyY2hMaW5lU3RhdGVGYWN0b3J5LmNyZWF0ZShzdGFjaywgZW1iZWRkZWRMYW5ndWFnZURhdGEpOwogICAgICAgICAgfQogICAgICAgIH07CiAgICAgICAgLy8gaXMgdGhlIHJlc3VsdCBhIGdyb3VwIG1hdGNoPwogICAgICAgIGlmIChBcnJheS5pc0FycmF5KHJlc3VsdCkpIHsKICAgICAgICAgIGlmIChncm91cE1hdGNoaW5nICYmIGdyb3VwTWF0Y2hpbmcuZ3JvdXBzLmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgdGhyb3cgbW9uYXJjaENvbW1vbi5jcmVhdGVFcnJvcih0aGlzLl9sZXhlciwgJ2dyb3VwcyBjYW5ub3QgYmUgbmVzdGVkOiAnICsgdGhpcy5fc2FmZVJ1bGVOYW1lKHJ1bGUpKTsKICAgICAgICAgIH0KICAgICAgICAgIGlmIChtYXRjaGVzLmxlbmd0aCAhPT0gcmVzdWx0Lmxlbmd0aCArIDEpIHsKICAgICAgICAgICAgdGhyb3cgbW9uYXJjaENvbW1vbi5jcmVhdGVFcnJvcih0aGlzLl9sZXhlciwgJ21hdGNoZWQgbnVtYmVyIG9mIGdyb3VwcyBkb2VzIG5vdCBtYXRjaCB0aGUgbnVtYmVyIG9mIGFjdGlvbnMgaW4gcnVsZTogJyArIHRoaXMuX3NhZmVSdWxlTmFtZShydWxlKSk7CiAgICAgICAgICB9CiAgICAgICAgICB2YXIgdG90YWxMZW4gPSAwOwogICAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBtYXRjaGVzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIHRvdGFsTGVuICs9IG1hdGNoZXNbaV0ubGVuZ3RoOwogICAgICAgICAgfQogICAgICAgICAgaWYgKHRvdGFsTGVuICE9PSBtYXRjaGVkLmxlbmd0aCkgewogICAgICAgICAgICB0aHJvdyBtb25hcmNoQ29tbW9uLmNyZWF0ZUVycm9yKHRoaXMuX2xleGVyLCAnd2l0aCBncm91cHMsIGFsbCBjaGFyYWN0ZXJzIHNob3VsZCBiZSBtYXRjaGVkIGluIGNvbnNlY3V0aXZlIGdyb3VwcyBpbiBydWxlOiAnICsgdGhpcy5fc2FmZVJ1bGVOYW1lKHJ1bGUpKTsKICAgICAgICAgIH0KICAgICAgICAgIGdyb3VwTWF0Y2hpbmcgPSB7CiAgICAgICAgICAgIHJ1bGU6IHJ1bGUsCiAgICAgICAgICAgIG1hdGNoZXM6IG1hdGNoZXMsCiAgICAgICAgICAgIGdyb3VwczogW10KICAgICAgICAgIH07CiAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgcmVzdWx0Lmxlbmd0aDsgX2krKykgewogICAgICAgICAgICBncm91cE1hdGNoaW5nLmdyb3Vwc1tfaV0gPSB7CiAgICAgICAgICAgICAgYWN0aW9uOiByZXN1bHRbX2ldLAogICAgICAgICAgICAgIG1hdGNoZWQ6IG1hdGNoZXNbX2kgKyAxXQogICAgICAgICAgICB9OwogICAgICAgICAgfQogICAgICAgICAgcG9zIC09IG1hdGNoZWQubGVuZ3RoOwogICAgICAgICAgLy8gY2FsbCByZWN1cnNpdmVseSB0byBpbml0aWF0ZSBmaXJzdCByZXN1bHQgbWF0Y2gKICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAvLyByZWd1bGFyIHJlc3VsdAogICAgICAgICAgLy8gY2hlY2sgZm9yICdAcmVtYXRjaCcKICAgICAgICAgIGlmIChyZXN1bHQgPT09ICdAcmVtYXRjaCcpIHsKICAgICAgICAgICAgcG9zIC09IG1hdGNoZWQubGVuZ3RoOwogICAgICAgICAgICBtYXRjaGVkID0gJyc7IC8vIGJldHRlciBzZXQgdGhlIG5leHQgc3RhdGUgdG9vLi4KICAgICAgICAgICAgbWF0Y2hlcyA9IG51bGw7CiAgICAgICAgICAgIHJlc3VsdCA9ICcnOwogICAgICAgICAgICAvLyBFdmVuIHRob3VnaCBgQHJlbWF0Y2hgIHdhcyBzcGVjaWZpZWQsIGlmIGBuZXh0RW1iZWRkZWRgIGFsc28gc3BlY2lmaWVkLAogICAgICAgICAgICAvLyBhIHN0YXRlIHRyYW5zaXRpb24gc2hvdWxkIG9jY3VyLgogICAgICAgICAgICBpZiAoZW50ZXJpbmdFbWJlZGRlZExhbmd1YWdlICE9PSBudWxsKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGNvbXB1dGVOZXdTdGF0ZUZvckVtYmVkZGVkTGFuZ3VhZ2UoZW50ZXJpbmdFbWJlZGRlZExhbmd1YWdlKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgLy8gY2hlY2sgcHJvZ3Jlc3MKICAgICAgICAgIGlmIChtYXRjaGVkLmxlbmd0aCA9PT0gMCkgewogICAgICAgICAgICBpZiAobGluZUxlbmd0aCA9PT0gMCB8fCBzdGFja0xlbjAgIT09IHN0YWNrLmRlcHRoIHx8IHN0YXRlICE9PSBzdGFjay5zdGF0ZSB8fCAoIWdyb3VwTWF0Y2hpbmcgPyAwIDogZ3JvdXBNYXRjaGluZy5ncm91cHMubGVuZ3RoKSAhPT0gZ3JvdXBMZW4wKSB7CiAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgdGhyb3cgbW9uYXJjaENvbW1vbi5jcmVhdGVFcnJvcih0aGlzLl9sZXhlciwgJ25vIHByb2dyZXNzIGluIHRva2VuaXplciBpbiBydWxlOiAnICsgdGhpcy5fc2FmZVJ1bGVOYW1lKHJ1bGUpKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgLy8gcmV0dXJuIHRoZSByZXN1bHQgKGFuZCBjaGVjayBmb3IgYnJhY2UgbWF0Y2hpbmcpCiAgICAgICAgICAvLyB0b2RvOiBmb3IgZWZmaWNpZW5jeSB3ZSBjb3VsZCBwcmUtc2FuaXRpemUgdG9rZW5Qb3N0Zml4IGFuZCBzdWJzdGl0dXRpb25zCiAgICAgICAgICB2YXIgdG9rZW5UeXBlID0gbnVsbDsKICAgICAgICAgIGlmIChtb25hcmNoQ29tbW9uLmlzU3RyaW5nKHJlc3VsdCkgJiYgcmVzdWx0LmluZGV4T2YoJ0BicmFja2V0cycpID09PSAwKSB7CiAgICAgICAgICAgIHZhciByZXN0ID0gcmVzdWx0LnN1YnN0cignQGJyYWNrZXRzJy5sZW5ndGgpOwogICAgICAgICAgICB2YXIgYnJhY2tldCA9IGZpbmRCcmFja2V0KHRoaXMuX2xleGVyLCBtYXRjaGVkKTsKICAgICAgICAgICAgaWYgKCFicmFja2V0KSB7CiAgICAgICAgICAgICAgdGhyb3cgbW9uYXJjaENvbW1vbi5jcmVhdGVFcnJvcih0aGlzLl9sZXhlciwgJ0BicmFja2V0cyB0b2tlbiByZXR1cm5lZCBidXQgbm8gYnJhY2tldCBkZWZpbmVkIGFzOiAnICsgbWF0Y2hlZCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdG9rZW5UeXBlID0gbW9uYXJjaENvbW1vbi5zYW5pdGl6ZShicmFja2V0LnRva2VuICsgcmVzdCk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB2YXIgdG9rZW4gPSByZXN1bHQgPT09ICcnID8gJycgOiByZXN1bHQgKyB0aGlzLl9sZXhlci50b2tlblBvc3RmaXg7CiAgICAgICAgICAgIHRva2VuVHlwZSA9IG1vbmFyY2hDb21tb24uc2FuaXRpemUodG9rZW4pOwogICAgICAgICAgfQogICAgICAgICAgaWYgKHBvczAgPCBsaW5lV2l0aG91dExGTGVuZ3RoKSB7CiAgICAgICAgICAgIHRva2Vuc0NvbGxlY3Rvci5lbWl0KHBvczAgKyBvZmZzZXREZWx0YSwgdG9rZW5UeXBlKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgaWYgKGVudGVyaW5nRW1iZWRkZWRMYW5ndWFnZSAhPT0gbnVsbCkgewogICAgICAgICAgcmV0dXJuIGNvbXB1dGVOZXdTdGF0ZUZvckVtYmVkZGVkTGFuZ3VhZ2UoZW50ZXJpbmdFbWJlZGRlZExhbmd1YWdlKTsKICAgICAgICB9CiAgICAgIH0KICAgICAgcmV0dXJuIE1vbmFyY2hMaW5lU3RhdGVGYWN0b3J5LmNyZWF0ZShzdGFjaywgZW1iZWRkZWRMYW5ndWFnZURhdGEpOwogICAgfQogIH0sIHsKICAgIGtleTogIl9nZXROZXN0ZWRFbWJlZGRlZExhbmd1YWdlRGF0YSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX2dldE5lc3RlZEVtYmVkZGVkTGFuZ3VhZ2VEYXRhKGxhbmd1YWdlSWQpIHsKICAgICAgaWYgKCF0aGlzLl9sYW5ndWFnZVNlcnZpY2UuaXNSZWdpc3RlcmVkTGFuZ3VhZ2VJZChsYW5ndWFnZUlkKSkgewogICAgICAgIHJldHVybiBuZXcgRW1iZWRkZWRMYW5ndWFnZURhdGEobGFuZ3VhZ2VJZCwgTnVsbFN0YXRlKTsKICAgICAgfQogICAgICBpZiAobGFuZ3VhZ2VJZCAhPT0gdGhpcy5fbGFuZ3VhZ2VJZCkgewogICAgICAgIC8vIEZpcmUgbGFuZ3VhZ2UgbG9hZGluZyBldmVudAogICAgICAgIGxhbmd1YWdlcy5Ub2tlbml6YXRpb25SZWdpc3RyeS5nZXRPckNyZWF0ZShsYW5ndWFnZUlkKTsKICAgICAgICB0aGlzLl9lbWJlZGRlZExhbmd1YWdlc1tsYW5ndWFnZUlkXSA9IHRydWU7CiAgICAgIH0KICAgICAgdmFyIHRva2VuaXphdGlvblN1cHBvcnQgPSBsYW5ndWFnZXMuVG9rZW5pemF0aW9uUmVnaXN0cnkuZ2V0KGxhbmd1YWdlSWQpOwogICAgICBpZiAodG9rZW5pemF0aW9uU3VwcG9ydCkgewogICAgICAgIHJldHVybiBuZXcgRW1iZWRkZWRMYW5ndWFnZURhdGEobGFuZ3VhZ2VJZCwgdG9rZW5pemF0aW9uU3VwcG9ydC5nZXRJbml0aWFsU3RhdGUoKSk7CiAgICAgIH0KICAgICAgcmV0dXJuIG5ldyBFbWJlZGRlZExhbmd1YWdlRGF0YShsYW5ndWFnZUlkLCBOdWxsU3RhdGUpOwogICAgfQogIH1dKTsKICByZXR1cm4gTW9uYXJjaFRva2VuaXplcjsKfSgpOwpNb25hcmNoVG9rZW5pemVyID0gX19kZWNvcmF0ZShbX19wYXJhbSg0LCBJQ29uZmlndXJhdGlvblNlcnZpY2UpXSwgTW9uYXJjaFRva2VuaXplcik7CmV4cG9ydCB7IE1vbmFyY2hUb2tlbml6ZXIgfTsKLyoqCiAqIFNlYXJjaGVzIGZvciBhIGJyYWNrZXQgaW4gdGhlICdicmFja2V0cycgYXR0cmlidXRlIHRoYXQgbWF0Y2hlcyB0aGUgaW5wdXQuCiAqLwpmdW5jdGlvbiBmaW5kQnJhY2tldChsZXhlciwgbWF0Y2hlZCkgewogIGlmICghbWF0Y2hlZCkgewogICAgcmV0dXJuIG51bGw7CiAgfQogIG1hdGNoZWQgPSBtb25hcmNoQ29tbW9uLmZpeENhc2UobGV4ZXIsIG1hdGNoZWQpOwogIHZhciBicmFja2V0cyA9IGxleGVyLmJyYWNrZXRzOwogIHZhciBfaXRlcmF0b3I0ID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoYnJhY2tldHMpLAogICAgX3N0ZXA0OwogIHRyeSB7CiAgICBmb3IgKF9pdGVyYXRvcjQucygpOyAhKF9zdGVwNCA9IF9pdGVyYXRvcjQubigpKS5kb25lOykgewogICAgICB2YXIgYnJhY2tldCA9IF9zdGVwNC52YWx1ZTsKICAgICAgaWYgKGJyYWNrZXQub3BlbiA9PT0gbWF0Y2hlZCkgewogICAgICAgIHJldHVybiB7CiAgICAgICAgICB0b2tlbjogYnJhY2tldC50b2tlbiwKICAgICAgICAgIGJyYWNrZXRUeXBlOiAxIC8qIG1vbmFyY2hDb21tb24uTW9uYXJjaEJyYWNrZXQuT3BlbiAqLwogICAgICAgIH07CiAgICAgIH0gZWxzZSBpZiAoYnJhY2tldC5jbG9zZSA9PT0gbWF0Y2hlZCkgewogICAgICAgIHJldHVybiB7CiAgICAgICAgICB0b2tlbjogYnJhY2tldC50b2tlbiwKICAgICAgICAgIGJyYWNrZXRUeXBlOiAtMSAvKiBtb25hcmNoQ29tbW9uLk1vbmFyY2hCcmFja2V0LkNsb3NlICovCiAgICAgICAgfTsKICAgICAgfQogICAgfQogIH0gY2F0Y2ggKGVycikgewogICAgX2l0ZXJhdG9yNC5lKGVycik7CiAgfSBmaW5hbGx5IHsKICAgIF9pdGVyYXRvcjQuZigpOwogIH0KICByZXR1cm4gbnVsbDsKfQ=="},{"version":3,"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","languages","NullState","nullTokenizeEncoded","nullTokenize","monarchCommon","IConfigurationService","CACHE_STACK_DEPTH","MonarchStackElementFactory","maxCacheDepth","_maxCacheDepth","_entries","create","parent","state","depth","MonarchStackElement","stackElementId","getStackElementId","result","_INSTANCE","other","_equals","element","a","b","EmbeddedLanguageData","languageId","equals","stateClone","clone","MonarchLineStateFactory","stack","embeddedLanguageData","MonarchLineState","embeddedlanguageDataClone","MonarchClassicTokensCollector","_tokens","_languageId","_lastTokenType","_lastTokenLanguage","startOffset","type","push","Token","embeddedLanguageLine","hasEOL","offsetDelta","nestedLanguageId","embeddedModeState","nestedLanguageTokenizationSupport","TokenizationRegistry","get","enterLanguage","emit","nestedResult","tokenize","tokens","token","offset","language","concat","endState","TokenizationResult","MonarchModernTokensCollector","languageService","theme","_languageService","_theme","_prependTokens","_currentLanguageId","_lastTokenMetadata","languageIdCodec","encodeLanguageId","metadata","match","tokenizeEncoded","len","_merge","EncodedTokenizationResult","aLen","bLen","cLen","Uint32Array","set","MonarchTokenizer","standaloneThemeService","lexer","_configurationService","_standaloneThemeService","_lexer","_embeddedLanguages","embeddedLoaded","Promise","resolve","undefined","emitting","_tokenizationRegistryListener","onDidChange","e","isOneOfMyEmbeddedModes","changedLanguages","fire","_maxTokenizationLineLength","getValue","overrideIdentifier","onDidChangeConfiguration","affectsConfiguration","dispose","promises","tokenizationSupport","nestedModeStatus","getLoadStatus","loaded","promise","isResolved","getOrCreate","all","then","_","rootState","start","line","lineState","tokensCollector","endLineState","_tokenize","finalize","getColorTheme","tokenTheme","collector","_nestedTokenize","_myTokenize","rules","tokenizer","findRules","createError","popOffset","hasEmbeddedPopRule","rule","isIAction","action","nextEmbedded","regex","regexSource","source","substr","flags","ignoreCase","unicode","RegExp","search","matchOnlyAtLineStart","_findLeavingNestedLanguageOffset","nestedEndState","nestedLanguageTokenize","nestedLanguageLine","substring","restOfTheLine","name","lineWithoutLF","lineWithoutLFLength","includeLF","lineLength","pos","groupMatching","forceEvaluation","pos0","stackLen0","groupLen0","groups","matches","matched","enteringEmbeddedLanguage","groupEntry","shift","restOfLine","charAt","defaultToken","isFuzzyAction","test","Array","isArray","group","tokenSubst","substituteMatches","goBack","Math","max","switchTo","nextState","_safeRuleName","transform","next","maxStack","pop","popall","log","computeNewStateForEmbeddedLanguage","getLanguageIdByLanguageName","getLanguageIdByMimeType","_getNestedEmbeddedLanguageData","totalLen","tokenType","isString","indexOf","rest","bracket","findBracket","sanitize","tokenPostfix","isRegisteredLanguageId","getInitialState","fixCase","brackets","open","bracketType","close"],"sources":["/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/standalone/common/monarch/monarchLexer.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport * as languages from '../../../common/languages.js';\nimport { NullState, nullTokenizeEncoded, nullTokenize } from '../../../common/languages/nullTokenize.js';\nimport * as monarchCommon from './monarchCommon.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nconst CACHE_STACK_DEPTH = 5;\n/**\n * Reuse the same stack elements up to a certain depth.\n */\nclass MonarchStackElementFactory {\n    constructor(maxCacheDepth) {\n        this._maxCacheDepth = maxCacheDepth;\n        this._entries = Object.create(null);\n    }\n    static create(parent, state) {\n        return this._INSTANCE.create(parent, state);\n    }\n    create(parent, state) {\n        if (parent !== null && parent.depth >= this._maxCacheDepth) {\n            // no caching above a certain depth\n            return new MonarchStackElement(parent, state);\n        }\n        let stackElementId = MonarchStackElement.getStackElementId(parent);\n        if (stackElementId.length > 0) {\n            stackElementId += '|';\n        }\n        stackElementId += state;\n        let result = this._entries[stackElementId];\n        if (result) {\n            return result;\n        }\n        result = new MonarchStackElement(parent, state);\n        this._entries[stackElementId] = result;\n        return result;\n    }\n}\nMonarchStackElementFactory._INSTANCE = new MonarchStackElementFactory(CACHE_STACK_DEPTH);\nclass MonarchStackElement {\n    constructor(parent, state) {\n        this.parent = parent;\n        this.state = state;\n        this.depth = (this.parent ? this.parent.depth : 0) + 1;\n    }\n    static getStackElementId(element) {\n        let result = '';\n        while (element !== null) {\n            if (result.length > 0) {\n                result += '|';\n            }\n            result += element.state;\n            element = element.parent;\n        }\n        return result;\n    }\n    static _equals(a, b) {\n        while (a !== null && b !== null) {\n            if (a === b) {\n                return true;\n            }\n            if (a.state !== b.state) {\n                return false;\n            }\n            a = a.parent;\n            b = b.parent;\n        }\n        if (a === null && b === null) {\n            return true;\n        }\n        return false;\n    }\n    equals(other) {\n        return MonarchStackElement._equals(this, other);\n    }\n    push(state) {\n        return MonarchStackElementFactory.create(this, state);\n    }\n    pop() {\n        return this.parent;\n    }\n    popall() {\n        let result = this;\n        while (result.parent) {\n            result = result.parent;\n        }\n        return result;\n    }\n    switchTo(state) {\n        return MonarchStackElementFactory.create(this.parent, state);\n    }\n}\nclass EmbeddedLanguageData {\n    constructor(languageId, state) {\n        this.languageId = languageId;\n        this.state = state;\n    }\n    equals(other) {\n        return (this.languageId === other.languageId\n            && this.state.equals(other.state));\n    }\n    clone() {\n        const stateClone = this.state.clone();\n        // save an object\n        if (stateClone === this.state) {\n            return this;\n        }\n        return new EmbeddedLanguageData(this.languageId, this.state);\n    }\n}\n/**\n * Reuse the same line states up to a certain depth.\n */\nclass MonarchLineStateFactory {\n    constructor(maxCacheDepth) {\n        this._maxCacheDepth = maxCacheDepth;\n        this._entries = Object.create(null);\n    }\n    static create(stack, embeddedLanguageData) {\n        return this._INSTANCE.create(stack, embeddedLanguageData);\n    }\n    create(stack, embeddedLanguageData) {\n        if (embeddedLanguageData !== null) {\n            // no caching when embedding\n            return new MonarchLineState(stack, embeddedLanguageData);\n        }\n        if (stack !== null && stack.depth >= this._maxCacheDepth) {\n            // no caching above a certain depth\n            return new MonarchLineState(stack, embeddedLanguageData);\n        }\n        const stackElementId = MonarchStackElement.getStackElementId(stack);\n        let result = this._entries[stackElementId];\n        if (result) {\n            return result;\n        }\n        result = new MonarchLineState(stack, null);\n        this._entries[stackElementId] = result;\n        return result;\n    }\n}\nMonarchLineStateFactory._INSTANCE = new MonarchLineStateFactory(CACHE_STACK_DEPTH);\nclass MonarchLineState {\n    constructor(stack, embeddedLanguageData) {\n        this.stack = stack;\n        this.embeddedLanguageData = embeddedLanguageData;\n    }\n    clone() {\n        const embeddedlanguageDataClone = this.embeddedLanguageData ? this.embeddedLanguageData.clone() : null;\n        // save an object\n        if (embeddedlanguageDataClone === this.embeddedLanguageData) {\n            return this;\n        }\n        return MonarchLineStateFactory.create(this.stack, this.embeddedLanguageData);\n    }\n    equals(other) {\n        if (!(other instanceof MonarchLineState)) {\n            return false;\n        }\n        if (!this.stack.equals(other.stack)) {\n            return false;\n        }\n        if (this.embeddedLanguageData === null && other.embeddedLanguageData === null) {\n            return true;\n        }\n        if (this.embeddedLanguageData === null || other.embeddedLanguageData === null) {\n            return false;\n        }\n        return this.embeddedLanguageData.equals(other.embeddedLanguageData);\n    }\n}\nclass MonarchClassicTokensCollector {\n    constructor() {\n        this._tokens = [];\n        this._languageId = null;\n        this._lastTokenType = null;\n        this._lastTokenLanguage = null;\n    }\n    enterLanguage(languageId) {\n        this._languageId = languageId;\n    }\n    emit(startOffset, type) {\n        if (this._lastTokenType === type && this._lastTokenLanguage === this._languageId) {\n            return;\n        }\n        this._lastTokenType = type;\n        this._lastTokenLanguage = this._languageId;\n        this._tokens.push(new languages.Token(startOffset, type, this._languageId));\n    }\n    nestedLanguageTokenize(embeddedLanguageLine, hasEOL, embeddedLanguageData, offsetDelta) {\n        const nestedLanguageId = embeddedLanguageData.languageId;\n        const embeddedModeState = embeddedLanguageData.state;\n        const nestedLanguageTokenizationSupport = languages.TokenizationRegistry.get(nestedLanguageId);\n        if (!nestedLanguageTokenizationSupport) {\n            this.enterLanguage(nestedLanguageId);\n            this.emit(offsetDelta, '');\n            return embeddedModeState;\n        }\n        const nestedResult = nestedLanguageTokenizationSupport.tokenize(embeddedLanguageLine, hasEOL, embeddedModeState);\n        if (offsetDelta !== 0) {\n            for (const token of nestedResult.tokens) {\n                this._tokens.push(new languages.Token(token.offset + offsetDelta, token.type, token.language));\n            }\n        }\n        else {\n            this._tokens = this._tokens.concat(nestedResult.tokens);\n        }\n        this._lastTokenType = null;\n        this._lastTokenLanguage = null;\n        this._languageId = null;\n        return nestedResult.endState;\n    }\n    finalize(endState) {\n        return new languages.TokenizationResult(this._tokens, endState);\n    }\n}\nclass MonarchModernTokensCollector {\n    constructor(languageService, theme) {\n        this._languageService = languageService;\n        this._theme = theme;\n        this._prependTokens = null;\n        this._tokens = [];\n        this._currentLanguageId = 0 /* LanguageId.Null */;\n        this._lastTokenMetadata = 0;\n    }\n    enterLanguage(languageId) {\n        this._currentLanguageId = this._languageService.languageIdCodec.encodeLanguageId(languageId);\n    }\n    emit(startOffset, type) {\n        const metadata = this._theme.match(this._currentLanguageId, type);\n        if (this._lastTokenMetadata === metadata) {\n            return;\n        }\n        this._lastTokenMetadata = metadata;\n        this._tokens.push(startOffset);\n        this._tokens.push(metadata);\n    }\n    static _merge(a, b, c) {\n        const aLen = (a !== null ? a.length : 0);\n        const bLen = b.length;\n        const cLen = (c !== null ? c.length : 0);\n        if (aLen === 0 && bLen === 0 && cLen === 0) {\n            return new Uint32Array(0);\n        }\n        if (aLen === 0 && bLen === 0) {\n            return c;\n        }\n        if (bLen === 0 && cLen === 0) {\n            return a;\n        }\n        const result = new Uint32Array(aLen + bLen + cLen);\n        if (a !== null) {\n            result.set(a);\n        }\n        for (let i = 0; i < bLen; i++) {\n            result[aLen + i] = b[i];\n        }\n        if (c !== null) {\n            result.set(c, aLen + bLen);\n        }\n        return result;\n    }\n    nestedLanguageTokenize(embeddedLanguageLine, hasEOL, embeddedLanguageData, offsetDelta) {\n        const nestedLanguageId = embeddedLanguageData.languageId;\n        const embeddedModeState = embeddedLanguageData.state;\n        const nestedLanguageTokenizationSupport = languages.TokenizationRegistry.get(nestedLanguageId);\n        if (!nestedLanguageTokenizationSupport) {\n            this.enterLanguage(nestedLanguageId);\n            this.emit(offsetDelta, '');\n            return embeddedModeState;\n        }\n        const nestedResult = nestedLanguageTokenizationSupport.tokenizeEncoded(embeddedLanguageLine, hasEOL, embeddedModeState);\n        if (offsetDelta !== 0) {\n            for (let i = 0, len = nestedResult.tokens.length; i < len; i += 2) {\n                nestedResult.tokens[i] += offsetDelta;\n            }\n        }\n        this._prependTokens = MonarchModernTokensCollector._merge(this._prependTokens, this._tokens, nestedResult.tokens);\n        this._tokens = [];\n        this._currentLanguageId = 0;\n        this._lastTokenMetadata = 0;\n        return nestedResult.endState;\n    }\n    finalize(endState) {\n        return new languages.EncodedTokenizationResult(MonarchModernTokensCollector._merge(this._prependTokens, this._tokens, null), endState);\n    }\n}\nlet MonarchTokenizer = class MonarchTokenizer {\n    constructor(languageService, standaloneThemeService, languageId, lexer, _configurationService) {\n        this._configurationService = _configurationService;\n        this._languageService = languageService;\n        this._standaloneThemeService = standaloneThemeService;\n        this._languageId = languageId;\n        this._lexer = lexer;\n        this._embeddedLanguages = Object.create(null);\n        this.embeddedLoaded = Promise.resolve(undefined);\n        // Set up listening for embedded modes\n        let emitting = false;\n        this._tokenizationRegistryListener = languages.TokenizationRegistry.onDidChange((e) => {\n            if (emitting) {\n                return;\n            }\n            let isOneOfMyEmbeddedModes = false;\n            for (let i = 0, len = e.changedLanguages.length; i < len; i++) {\n                const language = e.changedLanguages[i];\n                if (this._embeddedLanguages[language]) {\n                    isOneOfMyEmbeddedModes = true;\n                    break;\n                }\n            }\n            if (isOneOfMyEmbeddedModes) {\n                emitting = true;\n                languages.TokenizationRegistry.fire([this._languageId]);\n                emitting = false;\n            }\n        });\n        this._maxTokenizationLineLength = this._configurationService.getValue('editor.maxTokenizationLineLength', {\n            overrideIdentifier: this._languageId\n        });\n        this._configurationService.onDidChangeConfiguration(e => {\n            if (e.affectsConfiguration('editor.maxTokenizationLineLength')) {\n                this._maxTokenizationLineLength = this._configurationService.getValue('editor.maxTokenizationLineLength', {\n                    overrideIdentifier: this._languageId\n                });\n            }\n        });\n    }\n    dispose() {\n        this._tokenizationRegistryListener.dispose();\n    }\n    getLoadStatus() {\n        const promises = [];\n        for (const nestedLanguageId in this._embeddedLanguages) {\n            const tokenizationSupport = languages.TokenizationRegistry.get(nestedLanguageId);\n            if (tokenizationSupport) {\n                // The nested language is already loaded\n                if (tokenizationSupport instanceof MonarchTokenizer) {\n                    const nestedModeStatus = tokenizationSupport.getLoadStatus();\n                    if (nestedModeStatus.loaded === false) {\n                        promises.push(nestedModeStatus.promise);\n                    }\n                }\n                continue;\n            }\n            if (!languages.TokenizationRegistry.isResolved(nestedLanguageId)) {\n                // The nested language is in the process of being loaded\n                promises.push(languages.TokenizationRegistry.getOrCreate(nestedLanguageId));\n            }\n        }\n        if (promises.length === 0) {\n            return {\n                loaded: true\n            };\n        }\n        return {\n            loaded: false,\n            promise: Promise.all(promises).then(_ => undefined)\n        };\n    }\n    getInitialState() {\n        const rootState = MonarchStackElementFactory.create(null, this._lexer.start);\n        return MonarchLineStateFactory.create(rootState, null);\n    }\n    tokenize(line, hasEOL, lineState) {\n        if (line.length >= this._maxTokenizationLineLength) {\n            return nullTokenize(this._languageId, lineState);\n        }\n        const tokensCollector = new MonarchClassicTokensCollector();\n        const endLineState = this._tokenize(line, hasEOL, lineState, tokensCollector);\n        return tokensCollector.finalize(endLineState);\n    }\n    tokenizeEncoded(line, hasEOL, lineState) {\n        if (line.length >= this._maxTokenizationLineLength) {\n            return nullTokenizeEncoded(this._languageService.languageIdCodec.encodeLanguageId(this._languageId), lineState);\n        }\n        const tokensCollector = new MonarchModernTokensCollector(this._languageService, this._standaloneThemeService.getColorTheme().tokenTheme);\n        const endLineState = this._tokenize(line, hasEOL, lineState, tokensCollector);\n        return tokensCollector.finalize(endLineState);\n    }\n    _tokenize(line, hasEOL, lineState, collector) {\n        if (lineState.embeddedLanguageData) {\n            return this._nestedTokenize(line, hasEOL, lineState, 0, collector);\n        }\n        else {\n            return this._myTokenize(line, hasEOL, lineState, 0, collector);\n        }\n    }\n    _findLeavingNestedLanguageOffset(line, state) {\n        let rules = this._lexer.tokenizer[state.stack.state];\n        if (!rules) {\n            rules = monarchCommon.findRules(this._lexer, state.stack.state); // do parent matching\n            if (!rules) {\n                throw monarchCommon.createError(this._lexer, 'tokenizer state is not defined: ' + state.stack.state);\n            }\n        }\n        let popOffset = -1;\n        let hasEmbeddedPopRule = false;\n        for (const rule of rules) {\n            if (!monarchCommon.isIAction(rule.action) || rule.action.nextEmbedded !== '@pop') {\n                continue;\n            }\n            hasEmbeddedPopRule = true;\n            let regex = rule.regex;\n            const regexSource = rule.regex.source;\n            if (regexSource.substr(0, 4) === '^(?:' && regexSource.substr(regexSource.length - 1, 1) === ')') {\n                const flags = (regex.ignoreCase ? 'i' : '') + (regex.unicode ? 'u' : '');\n                regex = new RegExp(regexSource.substr(4, regexSource.length - 5), flags);\n            }\n            const result = line.search(regex);\n            if (result === -1 || (result !== 0 && rule.matchOnlyAtLineStart)) {\n                continue;\n            }\n            if (popOffset === -1 || result < popOffset) {\n                popOffset = result;\n            }\n        }\n        if (!hasEmbeddedPopRule) {\n            throw monarchCommon.createError(this._lexer, 'no rule containing nextEmbedded: \"@pop\" in tokenizer embedded state: ' + state.stack.state);\n        }\n        return popOffset;\n    }\n    _nestedTokenize(line, hasEOL, lineState, offsetDelta, tokensCollector) {\n        const popOffset = this._findLeavingNestedLanguageOffset(line, lineState);\n        if (popOffset === -1) {\n            // tokenization will not leave nested language\n            const nestedEndState = tokensCollector.nestedLanguageTokenize(line, hasEOL, lineState.embeddedLanguageData, offsetDelta);\n            return MonarchLineStateFactory.create(lineState.stack, new EmbeddedLanguageData(lineState.embeddedLanguageData.languageId, nestedEndState));\n        }\n        const nestedLanguageLine = line.substring(0, popOffset);\n        if (nestedLanguageLine.length > 0) {\n            // tokenize with the nested language\n            tokensCollector.nestedLanguageTokenize(nestedLanguageLine, false, lineState.embeddedLanguageData, offsetDelta);\n        }\n        const restOfTheLine = line.substring(popOffset);\n        return this._myTokenize(restOfTheLine, hasEOL, lineState, offsetDelta + popOffset, tokensCollector);\n    }\n    _safeRuleName(rule) {\n        if (rule) {\n            return rule.name;\n        }\n        return '(unknown)';\n    }\n    _myTokenize(lineWithoutLF, hasEOL, lineState, offsetDelta, tokensCollector) {\n        tokensCollector.enterLanguage(this._languageId);\n        const lineWithoutLFLength = lineWithoutLF.length;\n        const line = (hasEOL && this._lexer.includeLF ? lineWithoutLF + '\\n' : lineWithoutLF);\n        const lineLength = line.length;\n        let embeddedLanguageData = lineState.embeddedLanguageData;\n        let stack = lineState.stack;\n        let pos = 0;\n        let groupMatching = null;\n        // See https://github.com/microsoft/monaco-editor/issues/1235\n        // Evaluate rules at least once for an empty line\n        let forceEvaluation = true;\n        while (forceEvaluation || pos < lineLength) {\n            const pos0 = pos;\n            const stackLen0 = stack.depth;\n            const groupLen0 = groupMatching ? groupMatching.groups.length : 0;\n            const state = stack.state;\n            let matches = null;\n            let matched = null;\n            let action = null;\n            let rule = null;\n            let enteringEmbeddedLanguage = null;\n            // check if we need to process group matches first\n            if (groupMatching) {\n                matches = groupMatching.matches;\n                const groupEntry = groupMatching.groups.shift();\n                matched = groupEntry.matched;\n                action = groupEntry.action;\n                rule = groupMatching.rule;\n                // cleanup if necessary\n                if (groupMatching.groups.length === 0) {\n                    groupMatching = null;\n                }\n            }\n            else {\n                // otherwise we match on the token stream\n                if (!forceEvaluation && pos >= lineLength) {\n                    // nothing to do\n                    break;\n                }\n                forceEvaluation = false;\n                // get the rules for this state\n                let rules = this._lexer.tokenizer[state];\n                if (!rules) {\n                    rules = monarchCommon.findRules(this._lexer, state); // do parent matching\n                    if (!rules) {\n                        throw monarchCommon.createError(this._lexer, 'tokenizer state is not defined: ' + state);\n                    }\n                }\n                // try each rule until we match\n                const restOfLine = line.substr(pos);\n                for (const rule of rules) {\n                    if (pos === 0 || !rule.matchOnlyAtLineStart) {\n                        matches = restOfLine.match(rule.regex);\n                        if (matches) {\n                            matched = matches[0];\n                            action = rule.action;\n                            break;\n                        }\n                    }\n                }\n            }\n            // We matched 'rule' with 'matches' and 'action'\n            if (!matches) {\n                matches = [''];\n                matched = '';\n            }\n            if (!action) {\n                // bad: we didn't match anything, and there is no action to take\n                // we need to advance the stream or we get progress trouble\n                if (pos < lineLength) {\n                    matches = [line.charAt(pos)];\n                    matched = matches[0];\n                }\n                action = this._lexer.defaultToken;\n            }\n            if (matched === null) {\n                // should never happen, needed for strict null checking\n                break;\n            }\n            // advance stream\n            pos += matched.length;\n            // maybe call action function (used for 'cases')\n            while (monarchCommon.isFuzzyAction(action) && monarchCommon.isIAction(action) && action.test) {\n                action = action.test(matched, matches, state, pos === lineLength);\n            }\n            let result = null;\n            // set the result: either a string or an array of actions\n            if (typeof action === 'string' || Array.isArray(action)) {\n                result = action;\n            }\n            else if (action.group) {\n                result = action.group;\n            }\n            else if (action.token !== null && action.token !== undefined) {\n                // do $n replacements?\n                if (action.tokenSubst) {\n                    result = monarchCommon.substituteMatches(this._lexer, action.token, matched, matches, state);\n                }\n                else {\n                    result = action.token;\n                }\n                // enter embedded language?\n                if (action.nextEmbedded) {\n                    if (action.nextEmbedded === '@pop') {\n                        if (!embeddedLanguageData) {\n                            throw monarchCommon.createError(this._lexer, 'cannot pop embedded language if not inside one');\n                        }\n                        embeddedLanguageData = null;\n                    }\n                    else if (embeddedLanguageData) {\n                        throw monarchCommon.createError(this._lexer, 'cannot enter embedded language from within an embedded language');\n                    }\n                    else {\n                        enteringEmbeddedLanguage = monarchCommon.substituteMatches(this._lexer, action.nextEmbedded, matched, matches, state);\n                    }\n                }\n                // state transformations\n                if (action.goBack) { // back up the stream..\n                    pos = Math.max(0, pos - action.goBack);\n                }\n                if (action.switchTo && typeof action.switchTo === 'string') {\n                    let nextState = monarchCommon.substituteMatches(this._lexer, action.switchTo, matched, matches, state); // switch state without a push...\n                    if (nextState[0] === '@') {\n                        nextState = nextState.substr(1); // peel off starting '@'\n                    }\n                    if (!monarchCommon.findRules(this._lexer, nextState)) {\n                        throw monarchCommon.createError(this._lexer, 'trying to switch to a state \\'' + nextState + '\\' that is undefined in rule: ' + this._safeRuleName(rule));\n                    }\n                    else {\n                        stack = stack.switchTo(nextState);\n                    }\n                }\n                else if (action.transform && typeof action.transform === 'function') {\n                    throw monarchCommon.createError(this._lexer, 'action.transform not supported');\n                }\n                else if (action.next) {\n                    if (action.next === '@push') {\n                        if (stack.depth >= this._lexer.maxStack) {\n                            throw monarchCommon.createError(this._lexer, 'maximum tokenizer stack size reached: [' +\n                                stack.state + ',' + stack.parent.state + ',...]');\n                        }\n                        else {\n                            stack = stack.push(state);\n                        }\n                    }\n                    else if (action.next === '@pop') {\n                        if (stack.depth <= 1) {\n                            throw monarchCommon.createError(this._lexer, 'trying to pop an empty stack in rule: ' + this._safeRuleName(rule));\n                        }\n                        else {\n                            stack = stack.pop();\n                        }\n                    }\n                    else if (action.next === '@popall') {\n                        stack = stack.popall();\n                    }\n                    else {\n                        let nextState = monarchCommon.substituteMatches(this._lexer, action.next, matched, matches, state);\n                        if (nextState[0] === '@') {\n                            nextState = nextState.substr(1); // peel off starting '@'\n                        }\n                        if (!monarchCommon.findRules(this._lexer, nextState)) {\n                            throw monarchCommon.createError(this._lexer, 'trying to set a next state \\'' + nextState + '\\' that is undefined in rule: ' + this._safeRuleName(rule));\n                        }\n                        else {\n                            stack = stack.push(nextState);\n                        }\n                    }\n                }\n                if (action.log && typeof (action.log) === 'string') {\n                    monarchCommon.log(this._lexer, this._lexer.languageId + ': ' + monarchCommon.substituteMatches(this._lexer, action.log, matched, matches, state));\n                }\n            }\n            // check result\n            if (result === null) {\n                throw monarchCommon.createError(this._lexer, 'lexer rule has no well-defined action in rule: ' + this._safeRuleName(rule));\n            }\n            const computeNewStateForEmbeddedLanguage = (enteringEmbeddedLanguage) => {\n                // support language names, mime types, and language ids\n                const languageId = (this._languageService.getLanguageIdByLanguageName(enteringEmbeddedLanguage)\n                    || this._languageService.getLanguageIdByMimeType(enteringEmbeddedLanguage)\n                    || enteringEmbeddedLanguage);\n                const embeddedLanguageData = this._getNestedEmbeddedLanguageData(languageId);\n                if (pos < lineLength) {\n                    // there is content from the embedded language on this line\n                    const restOfLine = lineWithoutLF.substr(pos);\n                    return this._nestedTokenize(restOfLine, hasEOL, MonarchLineStateFactory.create(stack, embeddedLanguageData), offsetDelta + pos, tokensCollector);\n                }\n                else {\n                    return MonarchLineStateFactory.create(stack, embeddedLanguageData);\n                }\n            };\n            // is the result a group match?\n            if (Array.isArray(result)) {\n                if (groupMatching && groupMatching.groups.length > 0) {\n                    throw monarchCommon.createError(this._lexer, 'groups cannot be nested: ' + this._safeRuleName(rule));\n                }\n                if (matches.length !== result.length + 1) {\n                    throw monarchCommon.createError(this._lexer, 'matched number of groups does not match the number of actions in rule: ' + this._safeRuleName(rule));\n                }\n                let totalLen = 0;\n                for (let i = 1; i < matches.length; i++) {\n                    totalLen += matches[i].length;\n                }\n                if (totalLen !== matched.length) {\n                    throw monarchCommon.createError(this._lexer, 'with groups, all characters should be matched in consecutive groups in rule: ' + this._safeRuleName(rule));\n                }\n                groupMatching = {\n                    rule: rule,\n                    matches: matches,\n                    groups: []\n                };\n                for (let i = 0; i < result.length; i++) {\n                    groupMatching.groups[i] = {\n                        action: result[i],\n                        matched: matches[i + 1]\n                    };\n                }\n                pos -= matched.length;\n                // call recursively to initiate first result match\n                continue;\n            }\n            else {\n                // regular result\n                // check for '@rematch'\n                if (result === '@rematch') {\n                    pos -= matched.length;\n                    matched = ''; // better set the next state too..\n                    matches = null;\n                    result = '';\n                    // Even though `@rematch` was specified, if `nextEmbedded` also specified,\n                    // a state transition should occur.\n                    if (enteringEmbeddedLanguage !== null) {\n                        return computeNewStateForEmbeddedLanguage(enteringEmbeddedLanguage);\n                    }\n                }\n                // check progress\n                if (matched.length === 0) {\n                    if (lineLength === 0 || stackLen0 !== stack.depth || state !== stack.state || (!groupMatching ? 0 : groupMatching.groups.length) !== groupLen0) {\n                        continue;\n                    }\n                    else {\n                        throw monarchCommon.createError(this._lexer, 'no progress in tokenizer in rule: ' + this._safeRuleName(rule));\n                    }\n                }\n                // return the result (and check for brace matching)\n                // todo: for efficiency we could pre-sanitize tokenPostfix and substitutions\n                let tokenType = null;\n                if (monarchCommon.isString(result) && result.indexOf('@brackets') === 0) {\n                    const rest = result.substr('@brackets'.length);\n                    const bracket = findBracket(this._lexer, matched);\n                    if (!bracket) {\n                        throw monarchCommon.createError(this._lexer, '@brackets token returned but no bracket defined as: ' + matched);\n                    }\n                    tokenType = monarchCommon.sanitize(bracket.token + rest);\n                }\n                else {\n                    const token = (result === '' ? '' : result + this._lexer.tokenPostfix);\n                    tokenType = monarchCommon.sanitize(token);\n                }\n                if (pos0 < lineWithoutLFLength) {\n                    tokensCollector.emit(pos0 + offsetDelta, tokenType);\n                }\n            }\n            if (enteringEmbeddedLanguage !== null) {\n                return computeNewStateForEmbeddedLanguage(enteringEmbeddedLanguage);\n            }\n        }\n        return MonarchLineStateFactory.create(stack, embeddedLanguageData);\n    }\n    _getNestedEmbeddedLanguageData(languageId) {\n        if (!this._languageService.isRegisteredLanguageId(languageId)) {\n            return new EmbeddedLanguageData(languageId, NullState);\n        }\n        if (languageId !== this._languageId) {\n            // Fire language loading event\n            languages.TokenizationRegistry.getOrCreate(languageId);\n            this._embeddedLanguages[languageId] = true;\n        }\n        const tokenizationSupport = languages.TokenizationRegistry.get(languageId);\n        if (tokenizationSupport) {\n            return new EmbeddedLanguageData(languageId, tokenizationSupport.getInitialState());\n        }\n        return new EmbeddedLanguageData(languageId, NullState);\n    }\n};\nMonarchTokenizer = __decorate([\n    __param(4, IConfigurationService)\n], MonarchTokenizer);\nexport { MonarchTokenizer };\n/**\n * Searches for a bracket in the 'brackets' attribute that matches the input.\n */\nfunction findBracket(lexer, matched) {\n    if (!matched) {\n        return null;\n    }\n    matched = monarchCommon.fixCase(lexer, matched);\n    const brackets = lexer.brackets;\n    for (const bracket of brackets) {\n        if (bracket.open === matched) {\n            return { token: bracket.token, bracketType: 1 /* monarchCommon.MonarchBracket.Open */ };\n        }\n        else if (bracket.close === matched) {\n            return { token: bracket.token, bracketType: -1 /* monarchCommon.MonarchBracket.Close */ };\n        }\n    }\n    return null;\n}\n"],"mappings":"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"}]}