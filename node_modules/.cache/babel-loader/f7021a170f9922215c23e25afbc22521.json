{"remainingRequest":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js!/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/common/model/guidesTextModelPart.js","dependencies":[{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/common/model/guidesTextModelPart.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/babel.config.js","mtime":1668271197000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js","mtime":456789000000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyIGZyb20gIi9Vc2Vycy95YW5qaWFqaWEvRGVza3RvcC93b3Jrc3BhY2UvYXZ1ZS1kYXRhLW5ldy9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlci5qcyI7CmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAiL1VzZXJzL3lhbmppYWppYS9EZXNrdG9wL3dvcmtzcGFjZS9hdnVlLWRhdGEtbmV3L25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jbGFzc0NhbGxDaGVjay5qcyI7CmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSAiL1VzZXJzL3lhbmppYWppYS9EZXNrdG9wL3dvcmtzcGFjZS9hdnVlLWRhdGEtbmV3L25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzcy5qcyI7CmltcG9ydCBfaW5oZXJpdHMgZnJvbSAiL1VzZXJzL3lhbmppYWppYS9EZXNrdG9wL3dvcmtzcGFjZS9hdnVlLWRhdGEtbmV3L25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0cy5qcyI7CmltcG9ydCBfY3JlYXRlU3VwZXIgZnJvbSAiL1VzZXJzL3lhbmppYWppYS9EZXNrdG9wL3dvcmtzcGFjZS9hdnVlLWRhdGEtbmV3L25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVTdXBlci5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmVycm9yLmNhdXNlLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkucHVzaC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZpbHRlci5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmcuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5zb3J0LmpzIjsKLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICogIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLgogKiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi4KICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovCmltcG9ydCB7IGZpbmRMYXN0IH0gZnJvbSAnLi4vLi4vLi4vYmFzZS9jb21tb24vYXJyYXlzLmpzJzsKaW1wb3J0ICogYXMgc3RyaW5ncyBmcm9tICcuLi8uLi8uLi9iYXNlL2NvbW1vbi9zdHJpbmdzLmpzJzsKaW1wb3J0IHsgQ3Vyc29yQ29sdW1ucyB9IGZyb20gJy4uL2NvcmUvY3Vyc29yQ29sdW1ucy5qcyc7CmltcG9ydCB7IFJhbmdlIH0gZnJvbSAnLi4vY29yZS9yYW5nZS5qcyc7CmltcG9ydCB7IFRleHRNb2RlbFBhcnQgfSBmcm9tICcuL3RleHRNb2RlbFBhcnQuanMnOwppbXBvcnQgeyBjb21wdXRlSW5kZW50TGV2ZWwgfSBmcm9tICcuL3V0aWxzLmpzJzsKaW1wb3J0IHsgSG9yaXpvbnRhbEd1aWRlc1N0YXRlLCBJbmRlbnRHdWlkZSwgSW5kZW50R3VpZGVIb3Jpem9udGFsTGluZSB9IGZyb20gJy4uL3RleHRNb2RlbEd1aWRlcy5qcyc7CmV4cG9ydCB2YXIgR3VpZGVzVGV4dE1vZGVsUGFydCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1RleHRNb2RlbFBhcnQpIHsKICBfaW5oZXJpdHMoR3VpZGVzVGV4dE1vZGVsUGFydCwgX1RleHRNb2RlbFBhcnQpOwogIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoR3VpZGVzVGV4dE1vZGVsUGFydCk7CiAgZnVuY3Rpb24gR3VpZGVzVGV4dE1vZGVsUGFydCh0ZXh0TW9kZWwsIGxhbmd1YWdlQ29uZmlndXJhdGlvblNlcnZpY2UpIHsKICAgIHZhciBfdGhpczsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBHdWlkZXNUZXh0TW9kZWxQYXJ0KTsKICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcyk7CiAgICBfdGhpcy50ZXh0TW9kZWwgPSB0ZXh0TW9kZWw7CiAgICBfdGhpcy5sYW5ndWFnZUNvbmZpZ3VyYXRpb25TZXJ2aWNlID0gbGFuZ3VhZ2VDb25maWd1cmF0aW9uU2VydmljZTsKICAgIHJldHVybiBfdGhpczsKICB9CiAgX2NyZWF0ZUNsYXNzKEd1aWRlc1RleHRNb2RlbFBhcnQsIFt7CiAgICBrZXk6ICJnZXRMYW5ndWFnZUNvbmZpZ3VyYXRpb24iLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldExhbmd1YWdlQ29uZmlndXJhdGlvbihsYW5ndWFnZUlkKSB7CiAgICAgIHJldHVybiB0aGlzLmxhbmd1YWdlQ29uZmlndXJhdGlvblNlcnZpY2UuZ2V0TGFuZ3VhZ2VDb25maWd1cmF0aW9uKGxhbmd1YWdlSWQpOwogICAgfQogIH0sIHsKICAgIGtleTogIl9jb21wdXRlSW5kZW50TGV2ZWwiLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9jb21wdXRlSW5kZW50TGV2ZWwobGluZUluZGV4KSB7CiAgICAgIHJldHVybiBjb21wdXRlSW5kZW50TGV2ZWwodGhpcy50ZXh0TW9kZWwuZ2V0TGluZUNvbnRlbnQobGluZUluZGV4ICsgMSksIHRoaXMudGV4dE1vZGVsLmdldE9wdGlvbnMoKS50YWJTaXplKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJnZXRBY3RpdmVJbmRlbnRHdWlkZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0QWN0aXZlSW5kZW50R3VpZGUobGluZU51bWJlciwgbWluTGluZU51bWJlciwgbWF4TGluZU51bWJlcikgewogICAgICB2YXIgX3RoaXMyID0gdGhpczsKICAgICAgdGhpcy5hc3NlcnROb3REaXNwb3NlZCgpOwogICAgICB2YXIgbGluZUNvdW50ID0gdGhpcy50ZXh0TW9kZWwuZ2V0TGluZUNvdW50KCk7CiAgICAgIGlmIChsaW5lTnVtYmVyIDwgMSB8fCBsaW5lTnVtYmVyID4gbGluZUNvdW50KSB7CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbGxlZ2FsIHZhbHVlIGZvciBsaW5lTnVtYmVyJyk7CiAgICAgIH0KICAgICAgdmFyIGZvbGRpbmdSdWxlcyA9IHRoaXMuZ2V0TGFuZ3VhZ2VDb25maWd1cmF0aW9uKHRoaXMudGV4dE1vZGVsLmdldExhbmd1YWdlSWQoKSkuZm9sZGluZ1J1bGVzOwogICAgICB2YXIgb2ZmU2lkZSA9IEJvb2xlYW4oZm9sZGluZ1J1bGVzICYmIGZvbGRpbmdSdWxlcy5vZmZTaWRlKTsKICAgICAgdmFyIHVwX2Fib3ZlQ29udGVudExpbmVJbmRleCA9IC0yOyAvKiAtMiBpcyBhIG1hcmtlciBmb3Igbm90IGhhdmluZyBjb21wdXRlZCBpdCAqLwogICAgICB2YXIgdXBfYWJvdmVDb250ZW50TGluZUluZGVudCA9IC0xOwogICAgICB2YXIgdXBfYmVsb3dDb250ZW50TGluZUluZGV4ID0gLTI7IC8qIC0yIGlzIGEgbWFya2VyIGZvciBub3QgaGF2aW5nIGNvbXB1dGVkIGl0ICovCiAgICAgIHZhciB1cF9iZWxvd0NvbnRlbnRMaW5lSW5kZW50ID0gLTE7CiAgICAgIHZhciB1cF9yZXNvbHZlSW5kZW50cyA9IGZ1bmN0aW9uIHVwX3Jlc29sdmVJbmRlbnRzKGxpbmVOdW1iZXIpIHsKICAgICAgICBpZiAodXBfYWJvdmVDb250ZW50TGluZUluZGV4ICE9PSAtMSAmJiAodXBfYWJvdmVDb250ZW50TGluZUluZGV4ID09PSAtMiB8fCB1cF9hYm92ZUNvbnRlbnRMaW5lSW5kZXggPiBsaW5lTnVtYmVyIC0gMSkpIHsKICAgICAgICAgIHVwX2Fib3ZlQ29udGVudExpbmVJbmRleCA9IC0xOwogICAgICAgICAgdXBfYWJvdmVDb250ZW50TGluZUluZGVudCA9IC0xOwogICAgICAgICAgLy8gbXVzdCBmaW5kIHByZXZpb3VzIGxpbmUgd2l0aCBjb250ZW50CiAgICAgICAgICBmb3IgKHZhciBsaW5lSW5kZXggPSBsaW5lTnVtYmVyIC0gMjsgbGluZUluZGV4ID49IDA7IGxpbmVJbmRleC0tKSB7CiAgICAgICAgICAgIHZhciBfaW5kZW50ID0gX3RoaXMyLl9jb21wdXRlSW5kZW50TGV2ZWwobGluZUluZGV4KTsKICAgICAgICAgICAgaWYgKF9pbmRlbnQgPj0gMCkgewogICAgICAgICAgICAgIHVwX2Fib3ZlQ29udGVudExpbmVJbmRleCA9IGxpbmVJbmRleDsKICAgICAgICAgICAgICB1cF9hYm92ZUNvbnRlbnRMaW5lSW5kZW50ID0gX2luZGVudDsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBpZiAodXBfYmVsb3dDb250ZW50TGluZUluZGV4ID09PSAtMikgewogICAgICAgICAgdXBfYmVsb3dDb250ZW50TGluZUluZGV4ID0gLTE7CiAgICAgICAgICB1cF9iZWxvd0NvbnRlbnRMaW5lSW5kZW50ID0gLTE7CiAgICAgICAgICAvLyBtdXN0IGZpbmQgbmV4dCBsaW5lIHdpdGggY29udGVudAogICAgICAgICAgZm9yICh2YXIgX2xpbmVJbmRleCA9IGxpbmVOdW1iZXI7IF9saW5lSW5kZXggPCBsaW5lQ291bnQ7IF9saW5lSW5kZXgrKykgewogICAgICAgICAgICB2YXIgX2luZGVudDIgPSBfdGhpczIuX2NvbXB1dGVJbmRlbnRMZXZlbChfbGluZUluZGV4KTsKICAgICAgICAgICAgaWYgKF9pbmRlbnQyID49IDApIHsKICAgICAgICAgICAgICB1cF9iZWxvd0NvbnRlbnRMaW5lSW5kZXggPSBfbGluZUluZGV4OwogICAgICAgICAgICAgIHVwX2JlbG93Q29udGVudExpbmVJbmRlbnQgPSBfaW5kZW50MjsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfTsKICAgICAgdmFyIGRvd25fYWJvdmVDb250ZW50TGluZUluZGV4ID0gLTI7IC8qIC0yIGlzIGEgbWFya2VyIGZvciBub3QgaGF2aW5nIGNvbXB1dGVkIGl0ICovCiAgICAgIHZhciBkb3duX2Fib3ZlQ29udGVudExpbmVJbmRlbnQgPSAtMTsKICAgICAgdmFyIGRvd25fYmVsb3dDb250ZW50TGluZUluZGV4ID0gLTI7IC8qIC0yIGlzIGEgbWFya2VyIGZvciBub3QgaGF2aW5nIGNvbXB1dGVkIGl0ICovCiAgICAgIHZhciBkb3duX2JlbG93Q29udGVudExpbmVJbmRlbnQgPSAtMTsKICAgICAgdmFyIGRvd25fcmVzb2x2ZUluZGVudHMgPSBmdW5jdGlvbiBkb3duX3Jlc29sdmVJbmRlbnRzKGxpbmVOdW1iZXIpIHsKICAgICAgICBpZiAoZG93bl9hYm92ZUNvbnRlbnRMaW5lSW5kZXggPT09IC0yKSB7CiAgICAgICAgICBkb3duX2Fib3ZlQ29udGVudExpbmVJbmRleCA9IC0xOwogICAgICAgICAgZG93bl9hYm92ZUNvbnRlbnRMaW5lSW5kZW50ID0gLTE7CiAgICAgICAgICAvLyBtdXN0IGZpbmQgcHJldmlvdXMgbGluZSB3aXRoIGNvbnRlbnQKICAgICAgICAgIGZvciAodmFyIGxpbmVJbmRleCA9IGxpbmVOdW1iZXIgLSAyOyBsaW5lSW5kZXggPj0gMDsgbGluZUluZGV4LS0pIHsKICAgICAgICAgICAgdmFyIF9pbmRlbnQzID0gX3RoaXMyLl9jb21wdXRlSW5kZW50TGV2ZWwobGluZUluZGV4KTsKICAgICAgICAgICAgaWYgKF9pbmRlbnQzID49IDApIHsKICAgICAgICAgICAgICBkb3duX2Fib3ZlQ29udGVudExpbmVJbmRleCA9IGxpbmVJbmRleDsKICAgICAgICAgICAgICBkb3duX2Fib3ZlQ29udGVudExpbmVJbmRlbnQgPSBfaW5kZW50MzsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBpZiAoZG93bl9iZWxvd0NvbnRlbnRMaW5lSW5kZXggIT09IC0xICYmIChkb3duX2JlbG93Q29udGVudExpbmVJbmRleCA9PT0gLTIgfHwgZG93bl9iZWxvd0NvbnRlbnRMaW5lSW5kZXggPCBsaW5lTnVtYmVyIC0gMSkpIHsKICAgICAgICAgIGRvd25fYmVsb3dDb250ZW50TGluZUluZGV4ID0gLTE7CiAgICAgICAgICBkb3duX2JlbG93Q29udGVudExpbmVJbmRlbnQgPSAtMTsKICAgICAgICAgIC8vIG11c3QgZmluZCBuZXh0IGxpbmUgd2l0aCBjb250ZW50CiAgICAgICAgICBmb3IgKHZhciBfbGluZUluZGV4MiA9IGxpbmVOdW1iZXI7IF9saW5lSW5kZXgyIDwgbGluZUNvdW50OyBfbGluZUluZGV4MisrKSB7CiAgICAgICAgICAgIHZhciBfaW5kZW50NCA9IF90aGlzMi5fY29tcHV0ZUluZGVudExldmVsKF9saW5lSW5kZXgyKTsKICAgICAgICAgICAgaWYgKF9pbmRlbnQ0ID49IDApIHsKICAgICAgICAgICAgICBkb3duX2JlbG93Q29udGVudExpbmVJbmRleCA9IF9saW5lSW5kZXgyOwogICAgICAgICAgICAgIGRvd25fYmVsb3dDb250ZW50TGluZUluZGVudCA9IF9pbmRlbnQ0OwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9OwogICAgICB2YXIgc3RhcnRMaW5lTnVtYmVyID0gMDsKICAgICAgdmFyIGdvVXAgPSB0cnVlOwogICAgICB2YXIgZW5kTGluZU51bWJlciA9IDA7CiAgICAgIHZhciBnb0Rvd24gPSB0cnVlOwogICAgICB2YXIgaW5kZW50ID0gMDsKICAgICAgdmFyIGluaXRpYWxJbmRlbnQgPSAwOwogICAgICBmb3IgKHZhciBkaXN0YW5jZSA9IDA7IGdvVXAgfHwgZ29Eb3duOyBkaXN0YW5jZSsrKSB7CiAgICAgICAgdmFyIHVwTGluZU51bWJlciA9IGxpbmVOdW1iZXIgLSBkaXN0YW5jZTsKICAgICAgICB2YXIgZG93bkxpbmVOdW1iZXIgPSBsaW5lTnVtYmVyICsgZGlzdGFuY2U7CiAgICAgICAgaWYgKGRpc3RhbmNlID4gMSAmJiAodXBMaW5lTnVtYmVyIDwgMSB8fCB1cExpbmVOdW1iZXIgPCBtaW5MaW5lTnVtYmVyKSkgewogICAgICAgICAgZ29VcCA9IGZhbHNlOwogICAgICAgIH0KICAgICAgICBpZiAoZGlzdGFuY2UgPiAxICYmIChkb3duTGluZU51bWJlciA+IGxpbmVDb3VudCB8fCBkb3duTGluZU51bWJlciA+IG1heExpbmVOdW1iZXIpKSB7CiAgICAgICAgICBnb0Rvd24gPSBmYWxzZTsKICAgICAgICB9CiAgICAgICAgaWYgKGRpc3RhbmNlID4gNTAwMDApIHsKICAgICAgICAgIC8vIHN0b3AgcHJvY2Vzc2luZwogICAgICAgICAgZ29VcCA9IGZhbHNlOwogICAgICAgICAgZ29Eb3duID0gZmFsc2U7CiAgICAgICAgfQogICAgICAgIHZhciB1cExpbmVJbmRlbnRMZXZlbCA9IC0xOwogICAgICAgIGlmIChnb1VwICYmIHVwTGluZU51bWJlciA+PSAxKSB7CiAgICAgICAgICAvLyBjb21wdXRlIGluZGVudCBsZXZlbCBnb2luZyB1cAogICAgICAgICAgdmFyIGN1cnJlbnRJbmRlbnQgPSB0aGlzLl9jb21wdXRlSW5kZW50TGV2ZWwodXBMaW5lTnVtYmVyIC0gMSk7CiAgICAgICAgICBpZiAoY3VycmVudEluZGVudCA+PSAwKSB7CiAgICAgICAgICAgIC8vIFRoaXMgbGluZSBoYXMgY29udGVudCAoYmVzaWRlcyB3aGl0ZXNwYWNlKQogICAgICAgICAgICAvLyBVc2UgdGhlIGxpbmUncyBpbmRlbnQKICAgICAgICAgICAgdXBfYmVsb3dDb250ZW50TGluZUluZGV4ID0gdXBMaW5lTnVtYmVyIC0gMTsKICAgICAgICAgICAgdXBfYmVsb3dDb250ZW50TGluZUluZGVudCA9IGN1cnJlbnRJbmRlbnQ7CiAgICAgICAgICAgIHVwTGluZUluZGVudExldmVsID0gTWF0aC5jZWlsKGN1cnJlbnRJbmRlbnQgLyB0aGlzLnRleHRNb2RlbC5nZXRPcHRpb25zKCkuaW5kZW50U2l6ZSk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB1cF9yZXNvbHZlSW5kZW50cyh1cExpbmVOdW1iZXIpOwogICAgICAgICAgICB1cExpbmVJbmRlbnRMZXZlbCA9IHRoaXMuX2dldEluZGVudExldmVsRm9yV2hpdGVzcGFjZUxpbmUob2ZmU2lkZSwgdXBfYWJvdmVDb250ZW50TGluZUluZGVudCwgdXBfYmVsb3dDb250ZW50TGluZUluZGVudCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHZhciBkb3duTGluZUluZGVudExldmVsID0gLTE7CiAgICAgICAgaWYgKGdvRG93biAmJiBkb3duTGluZU51bWJlciA8PSBsaW5lQ291bnQpIHsKICAgICAgICAgIC8vIGNvbXB1dGUgaW5kZW50IGxldmVsIGdvaW5nIGRvd24KICAgICAgICAgIHZhciBfY3VycmVudEluZGVudCA9IHRoaXMuX2NvbXB1dGVJbmRlbnRMZXZlbChkb3duTGluZU51bWJlciAtIDEpOwogICAgICAgICAgaWYgKF9jdXJyZW50SW5kZW50ID49IDApIHsKICAgICAgICAgICAgLy8gVGhpcyBsaW5lIGhhcyBjb250ZW50IChiZXNpZGVzIHdoaXRlc3BhY2UpCiAgICAgICAgICAgIC8vIFVzZSB0aGUgbGluZSdzIGluZGVudAogICAgICAgICAgICBkb3duX2Fib3ZlQ29udGVudExpbmVJbmRleCA9IGRvd25MaW5lTnVtYmVyIC0gMTsKICAgICAgICAgICAgZG93bl9hYm92ZUNvbnRlbnRMaW5lSW5kZW50ID0gX2N1cnJlbnRJbmRlbnQ7CiAgICAgICAgICAgIGRvd25MaW5lSW5kZW50TGV2ZWwgPSBNYXRoLmNlaWwoX2N1cnJlbnRJbmRlbnQgLyB0aGlzLnRleHRNb2RlbC5nZXRPcHRpb25zKCkuaW5kZW50U2l6ZSk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBkb3duX3Jlc29sdmVJbmRlbnRzKGRvd25MaW5lTnVtYmVyKTsKICAgICAgICAgICAgZG93bkxpbmVJbmRlbnRMZXZlbCA9IHRoaXMuX2dldEluZGVudExldmVsRm9yV2hpdGVzcGFjZUxpbmUob2ZmU2lkZSwgZG93bl9hYm92ZUNvbnRlbnRMaW5lSW5kZW50LCBkb3duX2JlbG93Q29udGVudExpbmVJbmRlbnQpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBpZiAoZGlzdGFuY2UgPT09IDApIHsKICAgICAgICAgIGluaXRpYWxJbmRlbnQgPSB1cExpbmVJbmRlbnRMZXZlbDsKICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgIH0KICAgICAgICBpZiAoZGlzdGFuY2UgPT09IDEpIHsKICAgICAgICAgIGlmIChkb3duTGluZU51bWJlciA8PSBsaW5lQ291bnQgJiYgZG93bkxpbmVJbmRlbnRMZXZlbCA+PSAwICYmIGluaXRpYWxJbmRlbnQgKyAxID09PSBkb3duTGluZUluZGVudExldmVsKSB7CiAgICAgICAgICAgIC8vIFRoaXMgaXMgdGhlIGJlZ2lubmluZyBvZiBhIHNjb3BlLCB3ZSBoYXZlIHNwZWNpYWwgaGFuZGxpbmcgaGVyZSwgc2luY2Ugd2Ugd2FudCB0aGUKICAgICAgICAgICAgLy8gY2hpbGQgc2NvcGUgaW5kZW50IHRvIGJlIGFjdGl2ZSwgbm90IHRoZSBwYXJlbnQgc2NvcGUKICAgICAgICAgICAgZ29VcCA9IGZhbHNlOwogICAgICAgICAgICBzdGFydExpbmVOdW1iZXIgPSBkb3duTGluZU51bWJlcjsKICAgICAgICAgICAgZW5kTGluZU51bWJlciA9IGRvd25MaW5lTnVtYmVyOwogICAgICAgICAgICBpbmRlbnQgPSBkb3duTGluZUluZGVudExldmVsOwogICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgIH0KICAgICAgICAgIGlmICh1cExpbmVOdW1iZXIgPj0gMSAmJiB1cExpbmVJbmRlbnRMZXZlbCA+PSAwICYmIHVwTGluZUluZGVudExldmVsIC0gMSA9PT0gaW5pdGlhbEluZGVudCkgewogICAgICAgICAgICAvLyBUaGlzIGlzIHRoZSBlbmQgb2YgYSBzY29wZSwganVzdCBsaWtlIGFib3ZlCiAgICAgICAgICAgIGdvRG93biA9IGZhbHNlOwogICAgICAgICAgICBzdGFydExpbmVOdW1iZXIgPSB1cExpbmVOdW1iZXI7CiAgICAgICAgICAgIGVuZExpbmVOdW1iZXIgPSB1cExpbmVOdW1iZXI7CiAgICAgICAgICAgIGluZGVudCA9IHVwTGluZUluZGVudExldmVsOwogICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgIH0KICAgICAgICAgIHN0YXJ0TGluZU51bWJlciA9IGxpbmVOdW1iZXI7CiAgICAgICAgICBlbmRMaW5lTnVtYmVyID0gbGluZU51bWJlcjsKICAgICAgICAgIGluZGVudCA9IGluaXRpYWxJbmRlbnQ7CiAgICAgICAgICBpZiAoaW5kZW50ID09PSAwKSB7CiAgICAgICAgICAgIC8vIE5vIG5lZWQgdG8gY29udGludWUKICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICBzdGFydExpbmVOdW1iZXI6IHN0YXJ0TGluZU51bWJlciwKICAgICAgICAgICAgICBlbmRMaW5lTnVtYmVyOiBlbmRMaW5lTnVtYmVyLAogICAgICAgICAgICAgIGluZGVudDogaW5kZW50CiAgICAgICAgICAgIH07CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGlmIChnb1VwKSB7CiAgICAgICAgICBpZiAodXBMaW5lSW5kZW50TGV2ZWwgPj0gaW5kZW50KSB7CiAgICAgICAgICAgIHN0YXJ0TGluZU51bWJlciA9IHVwTGluZU51bWJlcjsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGdvVXAgPSBmYWxzZTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgaWYgKGdvRG93bikgewogICAgICAgICAgaWYgKGRvd25MaW5lSW5kZW50TGV2ZWwgPj0gaW5kZW50KSB7CiAgICAgICAgICAgIGVuZExpbmVOdW1iZXIgPSBkb3duTGluZU51bWJlcjsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGdvRG93biA9IGZhbHNlOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgICByZXR1cm4gewogICAgICAgIHN0YXJ0TGluZU51bWJlcjogc3RhcnRMaW5lTnVtYmVyLAogICAgICAgIGVuZExpbmVOdW1iZXI6IGVuZExpbmVOdW1iZXIsCiAgICAgICAgaW5kZW50OiBpbmRlbnQKICAgICAgfTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJnZXRMaW5lc0JyYWNrZXRHdWlkZXMiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldExpbmVzQnJhY2tldEd1aWRlcyhzdGFydExpbmVOdW1iZXIsIGVuZExpbmVOdW1iZXIsIGFjdGl2ZVBvc2l0aW9uLCBvcHRpb25zKSB7CiAgICAgIHZhciBfYTsKICAgICAgdmFyIHJlc3VsdCA9IFtdOwogICAgICBmb3IgKHZhciBsaW5lTnVtYmVyID0gc3RhcnRMaW5lTnVtYmVyOyBsaW5lTnVtYmVyIDw9IGVuZExpbmVOdW1iZXI7IGxpbmVOdW1iZXIrKykgewogICAgICAgIHJlc3VsdC5wdXNoKFtdKTsKICAgICAgfQogICAgICAvLyBJZiByZXF1ZXN0ZWQsIHRoaXMgY291bGQgYmUgbWFkZSBjb25maWd1cmFibGUuCiAgICAgIHZhciBpbmNsdWRlU2luZ2xlTGluZVBhaXJzID0gdHJ1ZTsKICAgICAgdmFyIGJyYWNrZXRQYWlycyA9IHRoaXMudGV4dE1vZGVsLmJyYWNrZXRQYWlycy5nZXRCcmFja2V0UGFpcnNJblJhbmdlV2l0aE1pbkluZGVudGF0aW9uKG5ldyBSYW5nZShzdGFydExpbmVOdW1iZXIsIDEsIGVuZExpbmVOdW1iZXIsIHRoaXMudGV4dE1vZGVsLmdldExpbmVNYXhDb2x1bW4oZW5kTGluZU51bWJlcikpKTsKICAgICAgdmFyIGFjdGl2ZUJyYWNrZXRQYWlyUmFuZ2UgPSB1bmRlZmluZWQ7CiAgICAgIGlmIChhY3RpdmVQb3NpdGlvbiAmJiBicmFja2V0UGFpcnMubGVuZ3RoID4gMCkgewogICAgICAgIHZhciBicmFja2V0c0NvbnRhaW5pbmdBY3RpdmVQb3NpdGlvbiA9IChzdGFydExpbmVOdW1iZXIgPD0gYWN0aXZlUG9zaXRpb24ubGluZU51bWJlciAmJiBhY3RpdmVQb3NpdGlvbi5saW5lTnVtYmVyIDw9IGVuZExpbmVOdW1iZXIKICAgICAgICAvLyBXZSBkb24ndCBuZWVkIHRvIHF1ZXJ5IHRoZSBicmFja2V0cyBhZ2FpbiBpZiB0aGUgY3Vyc29yIGlzIGluIHRoZSB2aWV3cG9ydAogICAgICAgID8gYnJhY2tldFBhaXJzIDogdGhpcy50ZXh0TW9kZWwuYnJhY2tldFBhaXJzLmdldEJyYWNrZXRQYWlyc0luUmFuZ2UoUmFuZ2UuZnJvbVBvc2l0aW9ucyhhY3RpdmVQb3NpdGlvbikpKS5maWx0ZXIoZnVuY3Rpb24gKGJwKSB7CiAgICAgICAgICByZXR1cm4gUmFuZ2Uuc3RyaWN0Q29udGFpbnNQb3NpdGlvbihicC5yYW5nZSwgYWN0aXZlUG9zaXRpb24pOwogICAgICAgIH0pOwogICAgICAgIGFjdGl2ZUJyYWNrZXRQYWlyUmFuZ2UgPSAoX2EgPSBmaW5kTGFzdChicmFja2V0c0NvbnRhaW5pbmdBY3RpdmVQb3NpdGlvbiwgZnVuY3Rpb24gKGkpIHsKICAgICAgICAgIHJldHVybiBpbmNsdWRlU2luZ2xlTGluZVBhaXJzIHx8IGkucmFuZ2Uuc3RhcnRMaW5lTnVtYmVyICE9PSBpLnJhbmdlLmVuZExpbmVOdW1iZXI7CiAgICAgICAgfSkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5yYW5nZTsKICAgICAgfQogICAgICB2YXIgaW5kZXBlbmRlbnRDb2xvclBvb2xQZXJCcmFja2V0VHlwZSA9IHRoaXMudGV4dE1vZGVsLmdldE9wdGlvbnMoKS5icmFja2V0UGFpckNvbG9yaXphdGlvbk9wdGlvbnMuaW5kZXBlbmRlbnRDb2xvclBvb2xQZXJCcmFja2V0VHlwZTsKICAgICAgdmFyIGNvbG9yUHJvdmlkZXIgPSBuZXcgQnJhY2tldFBhaXJHdWlkZXNDbGFzc05hbWVzKCk7CiAgICAgIHZhciBfaXRlcmF0b3IgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihicmFja2V0UGFpcnMpLAogICAgICAgIF9zdGVwOwogICAgICB0cnkgewogICAgICAgIGZvciAoX2l0ZXJhdG9yLnMoKTsgIShfc3RlcCA9IF9pdGVyYXRvci5uKCkpLmRvbmU7KSB7CiAgICAgICAgICB2YXIgcGFpciA9IF9zdGVwLnZhbHVlOwogICAgICAgICAgLyoKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIHwKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICB8CiAgICAgICAgICAgICAgICAgIC0tLS19CiAgICAgICAgICAgICAgIF9fX197CiAgICAgICAgICAgICAgfHRlc3QKICAgICAgICAgICAgICAtLS0tfQogICAgICAgICAgICAgICByZW5kZXJIb3Jpem9udGFsRW5kTGluZUF0VGhlQm90dG9tOgogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIHwKICAgICAgICAgICAgICAgICAgfHh9CiAgICAgICAgICAgICAgICAgIC0tCiAgICAgICAgICAgICAgcmVuZGVySG9yaXpvbnRhbEVuZExpbmVBdFRoZUJvdHRvbToKICAgICAgICAgICAgICBfX19fewogICAgICAgICAgICAgIHx0ZXN0CiAgICAgICAgICAgICAgfCB4IH0KICAgICAgICAgICAgICAtLS0tCiAgICAgICAgICAqLwogICAgICAgICAgaWYgKCFwYWlyLmNsb3NpbmdCcmFja2V0UmFuZ2UpIHsKICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICB9CiAgICAgICAgICB2YXIgaXNBY3RpdmUgPSBhY3RpdmVCcmFja2V0UGFpclJhbmdlICYmIHBhaXIucmFuZ2UuZXF1YWxzUmFuZ2UoYWN0aXZlQnJhY2tldFBhaXJSYW5nZSk7CiAgICAgICAgICBpZiAoIWlzQWN0aXZlICYmICFvcHRpb25zLmluY2x1ZGVJbmFjdGl2ZSkgewogICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgIH0KICAgICAgICAgIHZhciBjbGFzc05hbWUgPSBjb2xvclByb3ZpZGVyLmdldElubGluZUNsYXNzTmFtZShwYWlyLm5lc3RpbmdMZXZlbCwgcGFpci5uZXN0aW5nTGV2ZWxPZkVxdWFsQnJhY2tldFR5cGUsIGluZGVwZW5kZW50Q29sb3JQb29sUGVyQnJhY2tldFR5cGUpICsgKG9wdGlvbnMuaGlnaGxpZ2h0QWN0aXZlICYmIGlzQWN0aXZlID8gJyAnICsgY29sb3JQcm92aWRlci5hY3RpdmVDbGFzc05hbWUgOiAnJyk7CiAgICAgICAgICB2YXIgc3RhcnQgPSBwYWlyLm9wZW5pbmdCcmFja2V0UmFuZ2UuZ2V0U3RhcnRQb3NpdGlvbigpOwogICAgICAgICAgdmFyIGVuZCA9IHBhaXIuY2xvc2luZ0JyYWNrZXRSYW5nZS5nZXRTdGFydFBvc2l0aW9uKCk7CiAgICAgICAgICB2YXIgaG9yaXpvbnRhbEd1aWRlcyA9IG9wdGlvbnMuaG9yaXpvbnRhbEd1aWRlcyA9PT0gSG9yaXpvbnRhbEd1aWRlc1N0YXRlLkVuYWJsZWQgfHwgb3B0aW9ucy5ob3Jpem9udGFsR3VpZGVzID09PSBIb3Jpem9udGFsR3VpZGVzU3RhdGUuRW5hYmxlZEZvckFjdGl2ZSAmJiBpc0FjdGl2ZTsKICAgICAgICAgIGlmIChwYWlyLnJhbmdlLnN0YXJ0TGluZU51bWJlciA9PT0gcGFpci5yYW5nZS5lbmRMaW5lTnVtYmVyKSB7CiAgICAgICAgICAgIGlmIChpbmNsdWRlU2luZ2xlTGluZVBhaXJzICYmIGhvcml6b250YWxHdWlkZXMpIHsKICAgICAgICAgICAgICByZXN1bHRbcGFpci5yYW5nZS5zdGFydExpbmVOdW1iZXIgLSBzdGFydExpbmVOdW1iZXJdLnB1c2gobmV3IEluZGVudEd1aWRlKC0xLCBwYWlyLm9wZW5pbmdCcmFja2V0UmFuZ2UuZ2V0RW5kUG9zaXRpb24oKS5jb2x1bW4sIGNsYXNzTmFtZSwgbmV3IEluZGVudEd1aWRlSG9yaXpvbnRhbExpbmUoZmFsc2UsIGVuZC5jb2x1bW4pLCAtMSwgLTEpKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgIH0KICAgICAgICAgIHZhciBlbmRWaXNpYmxlQ29sdW1uID0gdGhpcy5nZXRWaXNpYmxlQ29sdW1uRnJvbVBvc2l0aW9uKGVuZCk7CiAgICAgICAgICB2YXIgc3RhcnRWaXNpYmxlQ29sdW1uID0gdGhpcy5nZXRWaXNpYmxlQ29sdW1uRnJvbVBvc2l0aW9uKHBhaXIub3BlbmluZ0JyYWNrZXRSYW5nZS5nZXRTdGFydFBvc2l0aW9uKCkpOwogICAgICAgICAgdmFyIGd1aWRlVmlzaWJsZUNvbHVtbiA9IE1hdGgubWluKHN0YXJ0VmlzaWJsZUNvbHVtbiwgZW5kVmlzaWJsZUNvbHVtbiwgcGFpci5taW5WaXNpYmxlQ29sdW1uSW5kZW50YXRpb24gKyAxKTsKICAgICAgICAgIHZhciByZW5kZXJIb3Jpem9udGFsRW5kTGluZUF0VGhlQm90dG9tID0gZmFsc2U7CiAgICAgICAgICB2YXIgZmlyc3ROb25Xc0luZGV4ID0gc3RyaW5ncy5maXJzdE5vbldoaXRlc3BhY2VJbmRleCh0aGlzLnRleHRNb2RlbC5nZXRMaW5lQ29udGVudChwYWlyLmNsb3NpbmdCcmFja2V0UmFuZ2Uuc3RhcnRMaW5lTnVtYmVyKSk7CiAgICAgICAgICB2YXIgaGFzVGV4dEJlZm9yZUNsb3NpbmdCcmFja2V0ID0gZmlyc3ROb25Xc0luZGV4IDwgcGFpci5jbG9zaW5nQnJhY2tldFJhbmdlLnN0YXJ0Q29sdW1uIC0gMTsKICAgICAgICAgIGlmIChoYXNUZXh0QmVmb3JlQ2xvc2luZ0JyYWNrZXQpIHsKICAgICAgICAgICAgcmVuZGVySG9yaXpvbnRhbEVuZExpbmVBdFRoZUJvdHRvbSA9IHRydWU7CiAgICAgICAgICB9CiAgICAgICAgICB2YXIgdmlzaWJsZUd1aWRlU3RhcnRMaW5lTnVtYmVyID0gTWF0aC5tYXgoc3RhcnQubGluZU51bWJlciwgc3RhcnRMaW5lTnVtYmVyKTsKICAgICAgICAgIHZhciB2aXNpYmxlR3VpZGVFbmRMaW5lTnVtYmVyID0gTWF0aC5taW4oZW5kLmxpbmVOdW1iZXIsIGVuZExpbmVOdW1iZXIpOwogICAgICAgICAgdmFyIG9mZnNldCA9IHJlbmRlckhvcml6b250YWxFbmRMaW5lQXRUaGVCb3R0b20gPyAxIDogMDsKICAgICAgICAgIGZvciAodmFyIGwgPSB2aXNpYmxlR3VpZGVTdGFydExpbmVOdW1iZXI7IGwgPCB2aXNpYmxlR3VpZGVFbmRMaW5lTnVtYmVyICsgb2Zmc2V0OyBsKyspIHsKICAgICAgICAgICAgcmVzdWx0W2wgLSBzdGFydExpbmVOdW1iZXJdLnB1c2gobmV3IEluZGVudEd1aWRlKGd1aWRlVmlzaWJsZUNvbHVtbiwgLTEsIGNsYXNzTmFtZSwgbnVsbCwgbCA9PT0gc3RhcnQubGluZU51bWJlciA/IHN0YXJ0LmNvbHVtbiA6IC0xLCBsID09PSBlbmQubGluZU51bWJlciA/IGVuZC5jb2x1bW4gOiAtMSkpOwogICAgICAgICAgfQogICAgICAgICAgaWYgKGhvcml6b250YWxHdWlkZXMpIHsKICAgICAgICAgICAgaWYgKHN0YXJ0LmxpbmVOdW1iZXIgPj0gc3RhcnRMaW5lTnVtYmVyICYmIHN0YXJ0VmlzaWJsZUNvbHVtbiA+IGd1aWRlVmlzaWJsZUNvbHVtbikgewogICAgICAgICAgICAgIHJlc3VsdFtzdGFydC5saW5lTnVtYmVyIC0gc3RhcnRMaW5lTnVtYmVyXS5wdXNoKG5ldyBJbmRlbnRHdWlkZShndWlkZVZpc2libGVDb2x1bW4sIC0xLCBjbGFzc05hbWUsIG5ldyBJbmRlbnRHdWlkZUhvcml6b250YWxMaW5lKGZhbHNlLCBzdGFydC5jb2x1bW4pLCAtMSwgLTEpKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoZW5kLmxpbmVOdW1iZXIgPD0gZW5kTGluZU51bWJlciAmJiBlbmRWaXNpYmxlQ29sdW1uID4gZ3VpZGVWaXNpYmxlQ29sdW1uKSB7CiAgICAgICAgICAgICAgcmVzdWx0W2VuZC5saW5lTnVtYmVyIC0gc3RhcnRMaW5lTnVtYmVyXS5wdXNoKG5ldyBJbmRlbnRHdWlkZShndWlkZVZpc2libGVDb2x1bW4sIC0xLCBjbGFzc05hbWUsIG5ldyBJbmRlbnRHdWlkZUhvcml6b250YWxMaW5lKCFyZW5kZXJIb3Jpem9udGFsRW5kTGluZUF0VGhlQm90dG9tLCBlbmQuY29sdW1uKSwgLTEsIC0xKSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgIF9pdGVyYXRvci5lKGVycik7CiAgICAgIH0gZmluYWxseSB7CiAgICAgICAgX2l0ZXJhdG9yLmYoKTsKICAgICAgfQogICAgICBmb3IgKHZhciBfaSA9IDAsIF9yZXN1bHQgPSByZXN1bHQ7IF9pIDwgX3Jlc3VsdC5sZW5ndGg7IF9pKyspIHsKICAgICAgICB2YXIgZ3VpZGVzID0gX3Jlc3VsdFtfaV07CiAgICAgICAgZ3VpZGVzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsKICAgICAgICAgIHJldHVybiBhLnZpc2libGVDb2x1bW4gLSBiLnZpc2libGVDb2x1bW47CiAgICAgICAgfSk7CiAgICAgIH0KICAgICAgcmV0dXJuIHJlc3VsdDsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJnZXRWaXNpYmxlQ29sdW1uRnJvbVBvc2l0aW9uIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRWaXNpYmxlQ29sdW1uRnJvbVBvc2l0aW9uKHBvc2l0aW9uKSB7CiAgICAgIHJldHVybiBDdXJzb3JDb2x1bW5zLnZpc2libGVDb2x1bW5Gcm9tQ29sdW1uKHRoaXMudGV4dE1vZGVsLmdldExpbmVDb250ZW50KHBvc2l0aW9uLmxpbmVOdW1iZXIpLCBwb3NpdGlvbi5jb2x1bW4sIHRoaXMudGV4dE1vZGVsLmdldE9wdGlvbnMoKS50YWJTaXplKSArIDE7CiAgICB9CiAgfSwgewogICAga2V5OiAiZ2V0TGluZXNJbmRlbnRHdWlkZXMiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldExpbmVzSW5kZW50R3VpZGVzKHN0YXJ0TGluZU51bWJlciwgZW5kTGluZU51bWJlcikgewogICAgICB0aGlzLmFzc2VydE5vdERpc3Bvc2VkKCk7CiAgICAgIHZhciBsaW5lQ291bnQgPSB0aGlzLnRleHRNb2RlbC5nZXRMaW5lQ291bnQoKTsKICAgICAgaWYgKHN0YXJ0TGluZU51bWJlciA8IDEgfHwgc3RhcnRMaW5lTnVtYmVyID4gbGluZUNvdW50KSB7CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbGxlZ2FsIHZhbHVlIGZvciBzdGFydExpbmVOdW1iZXInKTsKICAgICAgfQogICAgICBpZiAoZW5kTGluZU51bWJlciA8IDEgfHwgZW5kTGluZU51bWJlciA+IGxpbmVDb3VudCkgewogICAgICAgIHRocm93IG5ldyBFcnJvcignSWxsZWdhbCB2YWx1ZSBmb3IgZW5kTGluZU51bWJlcicpOwogICAgICB9CiAgICAgIHZhciBvcHRpb25zID0gdGhpcy50ZXh0TW9kZWwuZ2V0T3B0aW9ucygpOwogICAgICB2YXIgZm9sZGluZ1J1bGVzID0gdGhpcy5nZXRMYW5ndWFnZUNvbmZpZ3VyYXRpb24odGhpcy50ZXh0TW9kZWwuZ2V0TGFuZ3VhZ2VJZCgpKS5mb2xkaW5nUnVsZXM7CiAgICAgIHZhciBvZmZTaWRlID0gQm9vbGVhbihmb2xkaW5nUnVsZXMgJiYgZm9sZGluZ1J1bGVzLm9mZlNpZGUpOwogICAgICB2YXIgcmVzdWx0ID0gbmV3IEFycmF5KGVuZExpbmVOdW1iZXIgLSBzdGFydExpbmVOdW1iZXIgKyAxKTsKICAgICAgdmFyIGFib3ZlQ29udGVudExpbmVJbmRleCA9IC0yOyAvKiAtMiBpcyBhIG1hcmtlciBmb3Igbm90IGhhdmluZyBjb21wdXRlZCBpdCAqLwogICAgICB2YXIgYWJvdmVDb250ZW50TGluZUluZGVudCA9IC0xOwogICAgICB2YXIgYmVsb3dDb250ZW50TGluZUluZGV4ID0gLTI7IC8qIC0yIGlzIGEgbWFya2VyIGZvciBub3QgaGF2aW5nIGNvbXB1dGVkIGl0ICovCiAgICAgIHZhciBiZWxvd0NvbnRlbnRMaW5lSW5kZW50ID0gLTE7CiAgICAgIGZvciAodmFyIGxpbmVOdW1iZXIgPSBzdGFydExpbmVOdW1iZXI7IGxpbmVOdW1iZXIgPD0gZW5kTGluZU51bWJlcjsgbGluZU51bWJlcisrKSB7CiAgICAgICAgdmFyIHJlc3VsdEluZGV4ID0gbGluZU51bWJlciAtIHN0YXJ0TGluZU51bWJlcjsKICAgICAgICB2YXIgY3VycmVudEluZGVudCA9IHRoaXMuX2NvbXB1dGVJbmRlbnRMZXZlbChsaW5lTnVtYmVyIC0gMSk7CiAgICAgICAgaWYgKGN1cnJlbnRJbmRlbnQgPj0gMCkgewogICAgICAgICAgLy8gVGhpcyBsaW5lIGhhcyBjb250ZW50IChiZXNpZGVzIHdoaXRlc3BhY2UpCiAgICAgICAgICAvLyBVc2UgdGhlIGxpbmUncyBpbmRlbnQKICAgICAgICAgIGFib3ZlQ29udGVudExpbmVJbmRleCA9IGxpbmVOdW1iZXIgLSAxOwogICAgICAgICAgYWJvdmVDb250ZW50TGluZUluZGVudCA9IGN1cnJlbnRJbmRlbnQ7CiAgICAgICAgICByZXN1bHRbcmVzdWx0SW5kZXhdID0gTWF0aC5jZWlsKGN1cnJlbnRJbmRlbnQgLyBvcHRpb25zLmluZGVudFNpemUpOwogICAgICAgICAgY29udGludWU7CiAgICAgICAgfQogICAgICAgIGlmIChhYm92ZUNvbnRlbnRMaW5lSW5kZXggPT09IC0yKSB7CiAgICAgICAgICBhYm92ZUNvbnRlbnRMaW5lSW5kZXggPSAtMTsKICAgICAgICAgIGFib3ZlQ29udGVudExpbmVJbmRlbnQgPSAtMTsKICAgICAgICAgIC8vIG11c3QgZmluZCBwcmV2aW91cyBsaW5lIHdpdGggY29udGVudAogICAgICAgICAgZm9yICh2YXIgbGluZUluZGV4ID0gbGluZU51bWJlciAtIDI7IGxpbmVJbmRleCA+PSAwOyBsaW5lSW5kZXgtLSkgewogICAgICAgICAgICB2YXIgaW5kZW50ID0gdGhpcy5fY29tcHV0ZUluZGVudExldmVsKGxpbmVJbmRleCk7CiAgICAgICAgICAgIGlmIChpbmRlbnQgPj0gMCkgewogICAgICAgICAgICAgIGFib3ZlQ29udGVudExpbmVJbmRleCA9IGxpbmVJbmRleDsKICAgICAgICAgICAgICBhYm92ZUNvbnRlbnRMaW5lSW5kZW50ID0gaW5kZW50OwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGlmIChiZWxvd0NvbnRlbnRMaW5lSW5kZXggIT09IC0xICYmIChiZWxvd0NvbnRlbnRMaW5lSW5kZXggPT09IC0yIHx8IGJlbG93Q29udGVudExpbmVJbmRleCA8IGxpbmVOdW1iZXIgLSAxKSkgewogICAgICAgICAgYmVsb3dDb250ZW50TGluZUluZGV4ID0gLTE7CiAgICAgICAgICBiZWxvd0NvbnRlbnRMaW5lSW5kZW50ID0gLTE7CiAgICAgICAgICAvLyBtdXN0IGZpbmQgbmV4dCBsaW5lIHdpdGggY29udGVudAogICAgICAgICAgZm9yICh2YXIgX2xpbmVJbmRleDMgPSBsaW5lTnVtYmVyOyBfbGluZUluZGV4MyA8IGxpbmVDb3VudDsgX2xpbmVJbmRleDMrKykgewogICAgICAgICAgICB2YXIgX2luZGVudDUgPSB0aGlzLl9jb21wdXRlSW5kZW50TGV2ZWwoX2xpbmVJbmRleDMpOwogICAgICAgICAgICBpZiAoX2luZGVudDUgPj0gMCkgewogICAgICAgICAgICAgIGJlbG93Q29udGVudExpbmVJbmRleCA9IF9saW5lSW5kZXgzOwogICAgICAgICAgICAgIGJlbG93Q29udGVudExpbmVJbmRlbnQgPSBfaW5kZW50NTsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXN1bHRbcmVzdWx0SW5kZXhdID0gdGhpcy5fZ2V0SW5kZW50TGV2ZWxGb3JXaGl0ZXNwYWNlTGluZShvZmZTaWRlLCBhYm92ZUNvbnRlbnRMaW5lSW5kZW50LCBiZWxvd0NvbnRlbnRMaW5lSW5kZW50KTsKICAgICAgfQogICAgICByZXR1cm4gcmVzdWx0OwogICAgfQogIH0sIHsKICAgIGtleTogIl9nZXRJbmRlbnRMZXZlbEZvcldoaXRlc3BhY2VMaW5lIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0SW5kZW50TGV2ZWxGb3JXaGl0ZXNwYWNlTGluZShvZmZTaWRlLCBhYm92ZUNvbnRlbnRMaW5lSW5kZW50LCBiZWxvd0NvbnRlbnRMaW5lSW5kZW50KSB7CiAgICAgIHZhciBvcHRpb25zID0gdGhpcy50ZXh0TW9kZWwuZ2V0T3B0aW9ucygpOwogICAgICBpZiAoYWJvdmVDb250ZW50TGluZUluZGVudCA9PT0gLTEgfHwgYmVsb3dDb250ZW50TGluZUluZGVudCA9PT0gLTEpIHsKICAgICAgICAvLyBBdCB0aGUgdG9wIG9yIGJvdHRvbSBvZiB0aGUgZmlsZQogICAgICAgIHJldHVybiAwOwogICAgICB9IGVsc2UgaWYgKGFib3ZlQ29udGVudExpbmVJbmRlbnQgPCBiZWxvd0NvbnRlbnRMaW5lSW5kZW50KSB7CiAgICAgICAgLy8gd2UgYXJlIGluc2lkZSB0aGUgcmVnaW9uIGFib3ZlCiAgICAgICAgcmV0dXJuIDEgKyBNYXRoLmZsb29yKGFib3ZlQ29udGVudExpbmVJbmRlbnQgLyBvcHRpb25zLmluZGVudFNpemUpOwogICAgICB9IGVsc2UgaWYgKGFib3ZlQ29udGVudExpbmVJbmRlbnQgPT09IGJlbG93Q29udGVudExpbmVJbmRlbnQpIHsKICAgICAgICAvLyB3ZSBhcmUgaW4gYmV0d2VlbiB0d28gcmVnaW9ucwogICAgICAgIHJldHVybiBNYXRoLmNlaWwoYmVsb3dDb250ZW50TGluZUluZGVudCAvIG9wdGlvbnMuaW5kZW50U2l6ZSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgaWYgKG9mZlNpZGUpIHsKICAgICAgICAgIC8vIHNhbWUgbGV2ZWwgYXMgcmVnaW9uIGJlbG93CiAgICAgICAgICByZXR1cm4gTWF0aC5jZWlsKGJlbG93Q29udGVudExpbmVJbmRlbnQgLyBvcHRpb25zLmluZGVudFNpemUpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAvLyB3ZSBhcmUgaW5zaWRlIHRoZSByZWdpb24gdGhhdCBlbmRzIGJlbG93CiAgICAgICAgICByZXR1cm4gMSArIE1hdGguZmxvb3IoYmVsb3dDb250ZW50TGluZUluZGVudCAvIG9wdGlvbnMuaW5kZW50U2l6ZSk7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfV0pOwogIHJldHVybiBHdWlkZXNUZXh0TW9kZWxQYXJ0Owp9KFRleHRNb2RlbFBhcnQpOwpleHBvcnQgdmFyIEJyYWNrZXRQYWlyR3VpZGVzQ2xhc3NOYW1lcyA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgZnVuY3Rpb24gQnJhY2tldFBhaXJHdWlkZXNDbGFzc05hbWVzKCkgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEJyYWNrZXRQYWlyR3VpZGVzQ2xhc3NOYW1lcyk7CiAgICB0aGlzLmFjdGl2ZUNsYXNzTmFtZSA9ICdpbmRlbnQtYWN0aXZlJzsKICB9CiAgX2NyZWF0ZUNsYXNzKEJyYWNrZXRQYWlyR3VpZGVzQ2xhc3NOYW1lcywgW3sKICAgIGtleTogImdldElubGluZUNsYXNzTmFtZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0SW5saW5lQ2xhc3NOYW1lKG5lc3RpbmdMZXZlbCwgbmVzdGluZ0xldmVsT2ZFcXVhbEJyYWNrZXRUeXBlLCBpbmRlcGVuZGVudENvbG9yUG9vbFBlckJyYWNrZXRUeXBlKSB7CiAgICAgIHJldHVybiB0aGlzLmdldElubGluZUNsYXNzTmFtZU9mTGV2ZWwoaW5kZXBlbmRlbnRDb2xvclBvb2xQZXJCcmFja2V0VHlwZSA/IG5lc3RpbmdMZXZlbE9mRXF1YWxCcmFja2V0VHlwZSA6IG5lc3RpbmdMZXZlbCk7CiAgICB9CiAgfSwgewogICAga2V5OiAiZ2V0SW5saW5lQ2xhc3NOYW1lT2ZMZXZlbCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0SW5saW5lQ2xhc3NOYW1lT2ZMZXZlbChsZXZlbCkgewogICAgICAvLyBUbyBzdXBwb3J0IGEgZHluYW1pYyBhbW91bnQgb2YgY29sb3JzIHVwIHRvIDYgY29sb3JzLAogICAgICAvLyB3ZSB1c2UgYSBudW1iZXIgdGhhdCBpcyBhIGxjbSBvZiBhbGwgbnVtYmVycyBmcm9tIDEgdG8gNi4KICAgICAgcmV0dXJuICJicmFja2V0LWluZGVudC1ndWlkZSBsdmwtIi5jb25jYXQobGV2ZWwgJSAzMCk7CiAgICB9CiAgfV0pOwogIHJldHVybiBCcmFja2V0UGFpckd1aWRlc0NsYXNzTmFtZXM7Cn0oKTs="},{"version":3,"names":["findLast","strings","CursorColumns","Range","TextModelPart","computeIndentLevel","HorizontalGuidesState","IndentGuide","IndentGuideHorizontalLine","GuidesTextModelPart","textModel","languageConfigurationService","languageId","getLanguageConfiguration","lineIndex","getLineContent","getOptions","tabSize","lineNumber","minLineNumber","maxLineNumber","assertNotDisposed","lineCount","getLineCount","Error","foldingRules","getLanguageId","offSide","Boolean","up_aboveContentLineIndex","up_aboveContentLineIndent","up_belowContentLineIndex","up_belowContentLineIndent","up_resolveIndents","indent","_computeIndentLevel","down_aboveContentLineIndex","down_aboveContentLineIndent","down_belowContentLineIndex","down_belowContentLineIndent","down_resolveIndents","startLineNumber","goUp","endLineNumber","goDown","initialIndent","distance","upLineNumber","downLineNumber","upLineIndentLevel","currentIndent","Math","ceil","indentSize","_getIndentLevelForWhitespaceLine","downLineIndentLevel","activePosition","options","_a","result","push","includeSingleLinePairs","bracketPairs","getBracketPairsInRangeWithMinIndentation","getLineMaxColumn","activeBracketPairRange","undefined","length","bracketsContainingActivePosition","getBracketPairsInRange","fromPositions","filter","bp","strictContainsPosition","range","i","independentColorPoolPerBracketType","bracketPairColorizationOptions","colorProvider","BracketPairGuidesClassNames","pair","closingBracketRange","isActive","equalsRange","includeInactive","className","getInlineClassName","nestingLevel","nestingLevelOfEqualBracketType","highlightActive","activeClassName","start","openingBracketRange","getStartPosition","end","horizontalGuides","Enabled","EnabledForActive","getEndPosition","column","endVisibleColumn","getVisibleColumnFromPosition","startVisibleColumn","guideVisibleColumn","min","minVisibleColumnIndentation","renderHorizontalEndLineAtTheBottom","firstNonWsIndex","firstNonWhitespaceIndex","hasTextBeforeClosingBracket","startColumn","visibleGuideStartLineNumber","max","visibleGuideEndLineNumber","offset","l","guides","sort","a","b","visibleColumn","position","visibleColumnFromColumn","Array","aboveContentLineIndex","aboveContentLineIndent","belowContentLineIndex","belowContentLineIndent","resultIndex","floor","getInlineClassNameOfLevel","level"],"sources":["/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/common/model/guidesTextModelPart.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { findLast } from '../../../base/common/arrays.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { CursorColumns } from '../core/cursorColumns.js';\nimport { Range } from '../core/range.js';\nimport { TextModelPart } from './textModelPart.js';\nimport { computeIndentLevel } from './utils.js';\nimport { HorizontalGuidesState, IndentGuide, IndentGuideHorizontalLine } from '../textModelGuides.js';\nexport class GuidesTextModelPart extends TextModelPart {\n    constructor(textModel, languageConfigurationService) {\n        super();\n        this.textModel = textModel;\n        this.languageConfigurationService = languageConfigurationService;\n    }\n    getLanguageConfiguration(languageId) {\n        return this.languageConfigurationService.getLanguageConfiguration(languageId);\n    }\n    _computeIndentLevel(lineIndex) {\n        return computeIndentLevel(this.textModel.getLineContent(lineIndex + 1), this.textModel.getOptions().tabSize);\n    }\n    getActiveIndentGuide(lineNumber, minLineNumber, maxLineNumber) {\n        this.assertNotDisposed();\n        const lineCount = this.textModel.getLineCount();\n        if (lineNumber < 1 || lineNumber > lineCount) {\n            throw new Error('Illegal value for lineNumber');\n        }\n        const foldingRules = this.getLanguageConfiguration(this.textModel.getLanguageId()).foldingRules;\n        const offSide = Boolean(foldingRules && foldingRules.offSide);\n        let up_aboveContentLineIndex = -2; /* -2 is a marker for not having computed it */\n        let up_aboveContentLineIndent = -1;\n        let up_belowContentLineIndex = -2; /* -2 is a marker for not having computed it */\n        let up_belowContentLineIndent = -1;\n        const up_resolveIndents = (lineNumber) => {\n            if (up_aboveContentLineIndex !== -1 &&\n                (up_aboveContentLineIndex === -2 ||\n                    up_aboveContentLineIndex > lineNumber - 1)) {\n                up_aboveContentLineIndex = -1;\n                up_aboveContentLineIndent = -1;\n                // must find previous line with content\n                for (let lineIndex = lineNumber - 2; lineIndex >= 0; lineIndex--) {\n                    const indent = this._computeIndentLevel(lineIndex);\n                    if (indent >= 0) {\n                        up_aboveContentLineIndex = lineIndex;\n                        up_aboveContentLineIndent = indent;\n                        break;\n                    }\n                }\n            }\n            if (up_belowContentLineIndex === -2) {\n                up_belowContentLineIndex = -1;\n                up_belowContentLineIndent = -1;\n                // must find next line with content\n                for (let lineIndex = lineNumber; lineIndex < lineCount; lineIndex++) {\n                    const indent = this._computeIndentLevel(lineIndex);\n                    if (indent >= 0) {\n                        up_belowContentLineIndex = lineIndex;\n                        up_belowContentLineIndent = indent;\n                        break;\n                    }\n                }\n            }\n        };\n        let down_aboveContentLineIndex = -2; /* -2 is a marker for not having computed it */\n        let down_aboveContentLineIndent = -1;\n        let down_belowContentLineIndex = -2; /* -2 is a marker for not having computed it */\n        let down_belowContentLineIndent = -1;\n        const down_resolveIndents = (lineNumber) => {\n            if (down_aboveContentLineIndex === -2) {\n                down_aboveContentLineIndex = -1;\n                down_aboveContentLineIndent = -1;\n                // must find previous line with content\n                for (let lineIndex = lineNumber - 2; lineIndex >= 0; lineIndex--) {\n                    const indent = this._computeIndentLevel(lineIndex);\n                    if (indent >= 0) {\n                        down_aboveContentLineIndex = lineIndex;\n                        down_aboveContentLineIndent = indent;\n                        break;\n                    }\n                }\n            }\n            if (down_belowContentLineIndex !== -1 &&\n                (down_belowContentLineIndex === -2 ||\n                    down_belowContentLineIndex < lineNumber - 1)) {\n                down_belowContentLineIndex = -1;\n                down_belowContentLineIndent = -1;\n                // must find next line with content\n                for (let lineIndex = lineNumber; lineIndex < lineCount; lineIndex++) {\n                    const indent = this._computeIndentLevel(lineIndex);\n                    if (indent >= 0) {\n                        down_belowContentLineIndex = lineIndex;\n                        down_belowContentLineIndent = indent;\n                        break;\n                    }\n                }\n            }\n        };\n        let startLineNumber = 0;\n        let goUp = true;\n        let endLineNumber = 0;\n        let goDown = true;\n        let indent = 0;\n        let initialIndent = 0;\n        for (let distance = 0; goUp || goDown; distance++) {\n            const upLineNumber = lineNumber - distance;\n            const downLineNumber = lineNumber + distance;\n            if (distance > 1 && (upLineNumber < 1 || upLineNumber < minLineNumber)) {\n                goUp = false;\n            }\n            if (distance > 1 &&\n                (downLineNumber > lineCount || downLineNumber > maxLineNumber)) {\n                goDown = false;\n            }\n            if (distance > 50000) {\n                // stop processing\n                goUp = false;\n                goDown = false;\n            }\n            let upLineIndentLevel = -1;\n            if (goUp && upLineNumber >= 1) {\n                // compute indent level going up\n                const currentIndent = this._computeIndentLevel(upLineNumber - 1);\n                if (currentIndent >= 0) {\n                    // This line has content (besides whitespace)\n                    // Use the line's indent\n                    up_belowContentLineIndex = upLineNumber - 1;\n                    up_belowContentLineIndent = currentIndent;\n                    upLineIndentLevel = Math.ceil(currentIndent / this.textModel.getOptions().indentSize);\n                }\n                else {\n                    up_resolveIndents(upLineNumber);\n                    upLineIndentLevel = this._getIndentLevelForWhitespaceLine(offSide, up_aboveContentLineIndent, up_belowContentLineIndent);\n                }\n            }\n            let downLineIndentLevel = -1;\n            if (goDown && downLineNumber <= lineCount) {\n                // compute indent level going down\n                const currentIndent = this._computeIndentLevel(downLineNumber - 1);\n                if (currentIndent >= 0) {\n                    // This line has content (besides whitespace)\n                    // Use the line's indent\n                    down_aboveContentLineIndex = downLineNumber - 1;\n                    down_aboveContentLineIndent = currentIndent;\n                    downLineIndentLevel = Math.ceil(currentIndent / this.textModel.getOptions().indentSize);\n                }\n                else {\n                    down_resolveIndents(downLineNumber);\n                    downLineIndentLevel = this._getIndentLevelForWhitespaceLine(offSide, down_aboveContentLineIndent, down_belowContentLineIndent);\n                }\n            }\n            if (distance === 0) {\n                initialIndent = upLineIndentLevel;\n                continue;\n            }\n            if (distance === 1) {\n                if (downLineNumber <= lineCount &&\n                    downLineIndentLevel >= 0 &&\n                    initialIndent + 1 === downLineIndentLevel) {\n                    // This is the beginning of a scope, we have special handling here, since we want the\n                    // child scope indent to be active, not the parent scope\n                    goUp = false;\n                    startLineNumber = downLineNumber;\n                    endLineNumber = downLineNumber;\n                    indent = downLineIndentLevel;\n                    continue;\n                }\n                if (upLineNumber >= 1 &&\n                    upLineIndentLevel >= 0 &&\n                    upLineIndentLevel - 1 === initialIndent) {\n                    // This is the end of a scope, just like above\n                    goDown = false;\n                    startLineNumber = upLineNumber;\n                    endLineNumber = upLineNumber;\n                    indent = upLineIndentLevel;\n                    continue;\n                }\n                startLineNumber = lineNumber;\n                endLineNumber = lineNumber;\n                indent = initialIndent;\n                if (indent === 0) {\n                    // No need to continue\n                    return { startLineNumber, endLineNumber, indent };\n                }\n            }\n            if (goUp) {\n                if (upLineIndentLevel >= indent) {\n                    startLineNumber = upLineNumber;\n                }\n                else {\n                    goUp = false;\n                }\n            }\n            if (goDown) {\n                if (downLineIndentLevel >= indent) {\n                    endLineNumber = downLineNumber;\n                }\n                else {\n                    goDown = false;\n                }\n            }\n        }\n        return { startLineNumber, endLineNumber, indent };\n    }\n    getLinesBracketGuides(startLineNumber, endLineNumber, activePosition, options) {\n        var _a;\n        const result = [];\n        for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n            result.push([]);\n        }\n        // If requested, this could be made configurable.\n        const includeSingleLinePairs = true;\n        const bracketPairs = this.textModel.bracketPairs.getBracketPairsInRangeWithMinIndentation(new Range(startLineNumber, 1, endLineNumber, this.textModel.getLineMaxColumn(endLineNumber)));\n        let activeBracketPairRange = undefined;\n        if (activePosition && bracketPairs.length > 0) {\n            const bracketsContainingActivePosition = (startLineNumber <= activePosition.lineNumber &&\n                activePosition.lineNumber <= endLineNumber\n                // We don't need to query the brackets again if the cursor is in the viewport\n                ? bracketPairs\n                : this.textModel.bracketPairs.getBracketPairsInRange(Range.fromPositions(activePosition))).filter((bp) => Range.strictContainsPosition(bp.range, activePosition));\n            activeBracketPairRange = (_a = findLast(bracketsContainingActivePosition, (i) => includeSingleLinePairs || i.range.startLineNumber !== i.range.endLineNumber)) === null || _a === void 0 ? void 0 : _a.range;\n        }\n        const independentColorPoolPerBracketType = this.textModel.getOptions().bracketPairColorizationOptions.independentColorPoolPerBracketType;\n        const colorProvider = new BracketPairGuidesClassNames();\n        for (const pair of bracketPairs) {\n            /*\n\n\n                    {\n                    |\n                    }\n\n                    {\n                    |\n                    ----}\n\n                ____{\n                |test\n                ----}\n\n                renderHorizontalEndLineAtTheBottom:\n                    {\n                    |\n                    |x}\n                    --\n                renderHorizontalEndLineAtTheBottom:\n                ____{\n                |test\n                | x }\n                ----\n            */\n            if (!pair.closingBracketRange) {\n                continue;\n            }\n            const isActive = activeBracketPairRange && pair.range.equalsRange(activeBracketPairRange);\n            if (!isActive && !options.includeInactive) {\n                continue;\n            }\n            const className = colorProvider.getInlineClassName(pair.nestingLevel, pair.nestingLevelOfEqualBracketType, independentColorPoolPerBracketType) +\n                (options.highlightActive && isActive\n                    ? ' ' + colorProvider.activeClassName\n                    : '');\n            const start = pair.openingBracketRange.getStartPosition();\n            const end = pair.closingBracketRange.getStartPosition();\n            const horizontalGuides = options.horizontalGuides === HorizontalGuidesState.Enabled || (options.horizontalGuides === HorizontalGuidesState.EnabledForActive && isActive);\n            if (pair.range.startLineNumber === pair.range.endLineNumber) {\n                if (includeSingleLinePairs && horizontalGuides) {\n                    result[pair.range.startLineNumber - startLineNumber].push(new IndentGuide(-1, pair.openingBracketRange.getEndPosition().column, className, new IndentGuideHorizontalLine(false, end.column), -1, -1));\n                }\n                continue;\n            }\n            const endVisibleColumn = this.getVisibleColumnFromPosition(end);\n            const startVisibleColumn = this.getVisibleColumnFromPosition(pair.openingBracketRange.getStartPosition());\n            const guideVisibleColumn = Math.min(startVisibleColumn, endVisibleColumn, pair.minVisibleColumnIndentation + 1);\n            let renderHorizontalEndLineAtTheBottom = false;\n            const firstNonWsIndex = strings.firstNonWhitespaceIndex(this.textModel.getLineContent(pair.closingBracketRange.startLineNumber));\n            const hasTextBeforeClosingBracket = firstNonWsIndex < pair.closingBracketRange.startColumn - 1;\n            if (hasTextBeforeClosingBracket) {\n                renderHorizontalEndLineAtTheBottom = true;\n            }\n            const visibleGuideStartLineNumber = Math.max(start.lineNumber, startLineNumber);\n            const visibleGuideEndLineNumber = Math.min(end.lineNumber, endLineNumber);\n            const offset = renderHorizontalEndLineAtTheBottom ? 1 : 0;\n            for (let l = visibleGuideStartLineNumber; l < visibleGuideEndLineNumber + offset; l++) {\n                result[l - startLineNumber].push(new IndentGuide(guideVisibleColumn, -1, className, null, l === start.lineNumber ? start.column : -1, l === end.lineNumber ? end.column : -1));\n            }\n            if (horizontalGuides) {\n                if (start.lineNumber >= startLineNumber && startVisibleColumn > guideVisibleColumn) {\n                    result[start.lineNumber - startLineNumber].push(new IndentGuide(guideVisibleColumn, -1, className, new IndentGuideHorizontalLine(false, start.column), -1, -1));\n                }\n                if (end.lineNumber <= endLineNumber && endVisibleColumn > guideVisibleColumn) {\n                    result[end.lineNumber - startLineNumber].push(new IndentGuide(guideVisibleColumn, -1, className, new IndentGuideHorizontalLine(!renderHorizontalEndLineAtTheBottom, end.column), -1, -1));\n                }\n            }\n        }\n        for (const guides of result) {\n            guides.sort((a, b) => a.visibleColumn - b.visibleColumn);\n        }\n        return result;\n    }\n    getVisibleColumnFromPosition(position) {\n        return (CursorColumns.visibleColumnFromColumn(this.textModel.getLineContent(position.lineNumber), position.column, this.textModel.getOptions().tabSize) + 1);\n    }\n    getLinesIndentGuides(startLineNumber, endLineNumber) {\n        this.assertNotDisposed();\n        const lineCount = this.textModel.getLineCount();\n        if (startLineNumber < 1 || startLineNumber > lineCount) {\n            throw new Error('Illegal value for startLineNumber');\n        }\n        if (endLineNumber < 1 || endLineNumber > lineCount) {\n            throw new Error('Illegal value for endLineNumber');\n        }\n        const options = this.textModel.getOptions();\n        const foldingRules = this.getLanguageConfiguration(this.textModel.getLanguageId()).foldingRules;\n        const offSide = Boolean(foldingRules && foldingRules.offSide);\n        const result = new Array(endLineNumber - startLineNumber + 1);\n        let aboveContentLineIndex = -2; /* -2 is a marker for not having computed it */\n        let aboveContentLineIndent = -1;\n        let belowContentLineIndex = -2; /* -2 is a marker for not having computed it */\n        let belowContentLineIndent = -1;\n        for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n            const resultIndex = lineNumber - startLineNumber;\n            const currentIndent = this._computeIndentLevel(lineNumber - 1);\n            if (currentIndent >= 0) {\n                // This line has content (besides whitespace)\n                // Use the line's indent\n                aboveContentLineIndex = lineNumber - 1;\n                aboveContentLineIndent = currentIndent;\n                result[resultIndex] = Math.ceil(currentIndent / options.indentSize);\n                continue;\n            }\n            if (aboveContentLineIndex === -2) {\n                aboveContentLineIndex = -1;\n                aboveContentLineIndent = -1;\n                // must find previous line with content\n                for (let lineIndex = lineNumber - 2; lineIndex >= 0; lineIndex--) {\n                    const indent = this._computeIndentLevel(lineIndex);\n                    if (indent >= 0) {\n                        aboveContentLineIndex = lineIndex;\n                        aboveContentLineIndent = indent;\n                        break;\n                    }\n                }\n            }\n            if (belowContentLineIndex !== -1 &&\n                (belowContentLineIndex === -2 || belowContentLineIndex < lineNumber - 1)) {\n                belowContentLineIndex = -1;\n                belowContentLineIndent = -1;\n                // must find next line with content\n                for (let lineIndex = lineNumber; lineIndex < lineCount; lineIndex++) {\n                    const indent = this._computeIndentLevel(lineIndex);\n                    if (indent >= 0) {\n                        belowContentLineIndex = lineIndex;\n                        belowContentLineIndent = indent;\n                        break;\n                    }\n                }\n            }\n            result[resultIndex] = this._getIndentLevelForWhitespaceLine(offSide, aboveContentLineIndent, belowContentLineIndent);\n        }\n        return result;\n    }\n    _getIndentLevelForWhitespaceLine(offSide, aboveContentLineIndent, belowContentLineIndent) {\n        const options = this.textModel.getOptions();\n        if (aboveContentLineIndent === -1 || belowContentLineIndent === -1) {\n            // At the top or bottom of the file\n            return 0;\n        }\n        else if (aboveContentLineIndent < belowContentLineIndent) {\n            // we are inside the region above\n            return 1 + Math.floor(aboveContentLineIndent / options.indentSize);\n        }\n        else if (aboveContentLineIndent === belowContentLineIndent) {\n            // we are in between two regions\n            return Math.ceil(belowContentLineIndent / options.indentSize);\n        }\n        else {\n            if (offSide) {\n                // same level as region below\n                return Math.ceil(belowContentLineIndent / options.indentSize);\n            }\n            else {\n                // we are inside the region that ends below\n                return 1 + Math.floor(belowContentLineIndent / options.indentSize);\n            }\n        }\n    }\n}\nexport class BracketPairGuidesClassNames {\n    constructor() {\n        this.activeClassName = 'indent-active';\n    }\n    getInlineClassName(nestingLevel, nestingLevelOfEqualBracketType, independentColorPoolPerBracketType) {\n        return this.getInlineClassNameOfLevel(independentColorPoolPerBracketType ? nestingLevelOfEqualBracketType : nestingLevel);\n    }\n    getInlineClassNameOfLevel(level) {\n        // To support a dynamic amount of colors up to 6 colors,\n        // we use a number that is a lcm of all numbers from 1 to 6.\n        return `bracket-indent-guide lvl-${level % 30}`;\n    }\n}\n"],"mappings":"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"}]}