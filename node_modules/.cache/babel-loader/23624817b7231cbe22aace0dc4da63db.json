{"remainingRequest":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/thread-loader/dist/cjs.js!/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js!/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/common/model/bracketPairsTextModelPart/bracketPairsImpl.js","dependencies":[{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/common/model/bracketPairsTextModelPart/bracketPairsImpl.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/babel.config.js","mtime":1668271197000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js","mtime":456789000000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["Emitter","Disposable","DisposableStore","MutableDisposable","Range","BracketPairsTree","ignoreBracketsInToken","BracketsUtils","compareBy","findLast","findLastMaxBy","BracketPairsTextModelPart","textModel","languageConfigurationService","bracketPairsTree","_register","onDidChangeEmitter","onDidChange","event","bracketsRequested","e","_a","languageId","value","object","didLanguageChange","clear","updateBracketPairsTree","maxSupportedDocumentLength","getValueLength","change","handleContentChanged","handleDidChangeBackgroundTokenizationState","handleDidChangeTokens","canBuildAST","store","createDisposableRef","add","getLanguageConfiguration","fire","range","getBracketPairsInRange","getBracketsInRange","_bracket","_position","maxDuration","position","validatePosition","getLanguageIdAtPosition","lineNumber","column","closingBracketInfo","bracketsNew","getClosingBracketInfo","bracketPair","fromPositions","b","closes","openingBracketInfo","openingBracketRange","bracket","toLowerCase","bracketsSupport","brackets","data","textIsBracket","stripBracketSearchCanceled","_findMatchingBracketUp","createTimeBasedContinueBracketSearchPredicate","filter","item","closingBracketRange","undefined","containsPosition","compareRangesUsingStarts","continueSearchPredicate","_matchBracket","lineTokens","modeBrackets","tokenIndex","tokenCount","getCount","currentLanguageId","getLanguageId","searchStartOffset","Math","max","maxBracketLength","i","tokenEndOffset","getEndOffset","getStandardTokenType","searchEndOffset","min","getLineContent","length","tokenStartOffset","getStartOffset","tokenization","getLineTokens","lineText","findTokenIndexAtOffset","currentModeBrackets","_establishBracketSearchOffsets","bestResult","foundBracket","findNextBracketInRange","forwardRegex","startColumn","endColumn","foundBracketText","substring","r","_matchFoundBracket","textIsOpenBracket","BracketSearchCanceled","prevTokenIndex","prevModeBrackets","findPrevBracketInRange","reversedRegex","isOpen","matched","_findMatchingBracketDown","getEndPosition","getStartPosition","reversedBracketRegex","count","totalCallCount","searchPrevMatchingBracketInRange","INSTANCE","hitText","isClose","prevSearchInToken","searchInToken","bracketRegex","searchNextMatchingBracketInRange","lineCount","getLineCount","getFirstBracketBefore","bracketConfig","tokenLanguageId","_toFoundBracket","getFirstBracketAfter","strictContainsRange","savedCounts","Map","counts","resetCounts","has","tmp","len","set","get","searchInRange","index","text","getValueInRange","bracketInfo","getBracketInfo","disposable","dispose","startTime","Date","now","_searchCanceledBrand","result"],"sources":["/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/common/model/bracketPairsTextModelPart/bracketPairsImpl.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../../../base/common/event.js';\nimport { Disposable, DisposableStore, MutableDisposable } from '../../../../base/common/lifecycle.js';\nimport { Range } from '../../core/range.js';\nimport { BracketPairsTree } from './bracketPairsTree/bracketPairsTree.js';\nimport { ignoreBracketsInToken } from '../../languages/supports.js';\nimport { BracketsUtils } from '../../languages/supports/richEditBrackets.js';\nimport { compareBy, findLast, findLastMaxBy } from '../../../../base/common/arrays.js';\nexport class BracketPairsTextModelPart extends Disposable {\n    constructor(textModel, languageConfigurationService) {\n        super();\n        this.textModel = textModel;\n        this.languageConfigurationService = languageConfigurationService;\n        this.bracketPairsTree = this._register(new MutableDisposable());\n        this.onDidChangeEmitter = new Emitter();\n        this.onDidChange = this.onDidChangeEmitter.event;\n        this.bracketsRequested = false;\n        this._register(this.languageConfigurationService.onDidChange(e => {\n            var _a;\n            if (!e.languageId || ((_a = this.bracketPairsTree.value) === null || _a === void 0 ? void 0 : _a.object.didLanguageChange(e.languageId))) {\n                this.bracketPairsTree.clear();\n                this.updateBracketPairsTree();\n            }\n        }));\n    }\n    get canBuildAST() {\n        const maxSupportedDocumentLength = /* max lines */ 50000 * /* average column count */ 100;\n        return this.textModel.getValueLength() <= maxSupportedDocumentLength;\n    }\n    //#region TextModel events\n    handleDidChangeOptions(e) {\n        this.bracketPairsTree.clear();\n        this.updateBracketPairsTree();\n    }\n    handleDidChangeLanguage(e) {\n        this.bracketPairsTree.clear();\n        this.updateBracketPairsTree();\n    }\n    handleDidChangeContent(change) {\n        var _a;\n        (_a = this.bracketPairsTree.value) === null || _a === void 0 ? void 0 : _a.object.handleContentChanged(change);\n    }\n    handleDidChangeBackgroundTokenizationState() {\n        var _a;\n        (_a = this.bracketPairsTree.value) === null || _a === void 0 ? void 0 : _a.object.handleDidChangeBackgroundTokenizationState();\n    }\n    handleDidChangeTokens(e) {\n        var _a;\n        (_a = this.bracketPairsTree.value) === null || _a === void 0 ? void 0 : _a.object.handleDidChangeTokens(e);\n    }\n    //#endregion\n    updateBracketPairsTree() {\n        if (this.bracketsRequested && this.canBuildAST) {\n            if (!this.bracketPairsTree.value) {\n                const store = new DisposableStore();\n                this.bracketPairsTree.value = createDisposableRef(store.add(new BracketPairsTree(this.textModel, (languageId) => {\n                    return this.languageConfigurationService.getLanguageConfiguration(languageId);\n                })), store);\n                store.add(this.bracketPairsTree.value.object.onDidChange(e => this.onDidChangeEmitter.fire(e)));\n                this.onDidChangeEmitter.fire();\n            }\n        }\n        else {\n            if (this.bracketPairsTree.value) {\n                this.bracketPairsTree.clear();\n                // Important: Don't call fire if there was no change!\n                this.onDidChangeEmitter.fire();\n            }\n        }\n    }\n    /**\n     * Returns all bracket pairs that intersect the given range.\n     * The result is sorted by the start position.\n    */\n    getBracketPairsInRange(range) {\n        var _a;\n        this.bracketsRequested = true;\n        this.updateBracketPairsTree();\n        return ((_a = this.bracketPairsTree.value) === null || _a === void 0 ? void 0 : _a.object.getBracketPairsInRange(range, false)) || [];\n    }\n    getBracketPairsInRangeWithMinIndentation(range) {\n        var _a;\n        this.bracketsRequested = true;\n        this.updateBracketPairsTree();\n        return ((_a = this.bracketPairsTree.value) === null || _a === void 0 ? void 0 : _a.object.getBracketPairsInRange(range, true)) || [];\n    }\n    getBracketsInRange(range) {\n        var _a;\n        this.bracketsRequested = true;\n        this.updateBracketPairsTree();\n        return ((_a = this.bracketPairsTree.value) === null || _a === void 0 ? void 0 : _a.object.getBracketsInRange(range)) || [];\n    }\n    findMatchingBracketUp(_bracket, _position, maxDuration) {\n        const position = this.textModel.validatePosition(_position);\n        const languageId = this.textModel.getLanguageIdAtPosition(position.lineNumber, position.column);\n        if (this.canBuildAST) {\n            const closingBracketInfo = this.languageConfigurationService\n                .getLanguageConfiguration(languageId)\n                .bracketsNew.getClosingBracketInfo(_bracket);\n            if (!closingBracketInfo) {\n                return null;\n            }\n            const bracketPair = findLast(this.getBracketPairsInRange(Range.fromPositions(_position, _position)) || [], (b) => closingBracketInfo.closes(b.openingBracketInfo));\n            if (bracketPair) {\n                return bracketPair.openingBracketRange;\n            }\n            return null;\n        }\n        else {\n            // Fallback to old bracket matching code:\n            const bracket = _bracket.toLowerCase();\n            const bracketsSupport = this.languageConfigurationService.getLanguageConfiguration(languageId).brackets;\n            if (!bracketsSupport) {\n                return null;\n            }\n            const data = bracketsSupport.textIsBracket[bracket];\n            if (!data) {\n                return null;\n            }\n            return stripBracketSearchCanceled(this._findMatchingBracketUp(data, position, createTimeBasedContinueBracketSearchPredicate(maxDuration)));\n        }\n    }\n    matchBracket(position, maxDuration) {\n        if (this.canBuildAST) {\n            const bracketPair = findLastMaxBy(this.getBracketPairsInRange(Range.fromPositions(position, position)).filter((item) => item.closingBracketRange !== undefined &&\n                (item.openingBracketRange.containsPosition(position) ||\n                    item.closingBracketRange.containsPosition(position))), compareBy((item) => item.openingBracketRange.containsPosition(position)\n                ? item.openingBracketRange\n                : item.closingBracketRange, Range.compareRangesUsingStarts));\n            if (bracketPair) {\n                return [bracketPair.openingBracketRange, bracketPair.closingBracketRange];\n            }\n            return null;\n        }\n        else {\n            // Fallback to old bracket matching code:\n            const continueSearchPredicate = createTimeBasedContinueBracketSearchPredicate(maxDuration);\n            return this._matchBracket(this.textModel.validatePosition(position), continueSearchPredicate);\n        }\n    }\n    _establishBracketSearchOffsets(position, lineTokens, modeBrackets, tokenIndex) {\n        const tokenCount = lineTokens.getCount();\n        const currentLanguageId = lineTokens.getLanguageId(tokenIndex);\n        // limit search to not go before `maxBracketLength`\n        let searchStartOffset = Math.max(0, position.column - 1 - modeBrackets.maxBracketLength);\n        for (let i = tokenIndex - 1; i >= 0; i--) {\n            const tokenEndOffset = lineTokens.getEndOffset(i);\n            if (tokenEndOffset <= searchStartOffset) {\n                break;\n            }\n            if (ignoreBracketsInToken(lineTokens.getStandardTokenType(i)) || lineTokens.getLanguageId(i) !== currentLanguageId) {\n                searchStartOffset = tokenEndOffset;\n                break;\n            }\n        }\n        // limit search to not go after `maxBracketLength`\n        let searchEndOffset = Math.min(lineTokens.getLineContent().length, position.column - 1 + modeBrackets.maxBracketLength);\n        for (let i = tokenIndex + 1; i < tokenCount; i++) {\n            const tokenStartOffset = lineTokens.getStartOffset(i);\n            if (tokenStartOffset >= searchEndOffset) {\n                break;\n            }\n            if (ignoreBracketsInToken(lineTokens.getStandardTokenType(i)) || lineTokens.getLanguageId(i) !== currentLanguageId) {\n                searchEndOffset = tokenStartOffset;\n                break;\n            }\n        }\n        return { searchStartOffset, searchEndOffset };\n    }\n    _matchBracket(position, continueSearchPredicate) {\n        const lineNumber = position.lineNumber;\n        const lineTokens = this.textModel.tokenization.getLineTokens(lineNumber);\n        const lineText = this.textModel.getLineContent(lineNumber);\n        const tokenIndex = lineTokens.findTokenIndexAtOffset(position.column - 1);\n        if (tokenIndex < 0) {\n            return null;\n        }\n        const currentModeBrackets = this.languageConfigurationService.getLanguageConfiguration(lineTokens.getLanguageId(tokenIndex)).brackets;\n        // check that the token is not to be ignored\n        if (currentModeBrackets && !ignoreBracketsInToken(lineTokens.getStandardTokenType(tokenIndex))) {\n            let { searchStartOffset, searchEndOffset } = this._establishBracketSearchOffsets(position, lineTokens, currentModeBrackets, tokenIndex);\n            // it might be the case that [currentTokenStart -> currentTokenEnd] contains multiple brackets\n            // `bestResult` will contain the most right-side result\n            let bestResult = null;\n            while (true) {\n                const foundBracket = BracketsUtils.findNextBracketInRange(currentModeBrackets.forwardRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n                if (!foundBracket) {\n                    // there are no more brackets in this text\n                    break;\n                }\n                // check that we didn't hit a bracket too far away from position\n                if (foundBracket.startColumn <= position.column && position.column <= foundBracket.endColumn) {\n                    const foundBracketText = lineText.substring(foundBracket.startColumn - 1, foundBracket.endColumn - 1).toLowerCase();\n                    const r = this._matchFoundBracket(foundBracket, currentModeBrackets.textIsBracket[foundBracketText], currentModeBrackets.textIsOpenBracket[foundBracketText], continueSearchPredicate);\n                    if (r) {\n                        if (r instanceof BracketSearchCanceled) {\n                            return null;\n                        }\n                        bestResult = r;\n                    }\n                }\n                searchStartOffset = foundBracket.endColumn - 1;\n            }\n            if (bestResult) {\n                return bestResult;\n            }\n        }\n        // If position is in between two tokens, try also looking in the previous token\n        if (tokenIndex > 0 && lineTokens.getStartOffset(tokenIndex) === position.column - 1) {\n            const prevTokenIndex = tokenIndex - 1;\n            const prevModeBrackets = this.languageConfigurationService.getLanguageConfiguration(lineTokens.getLanguageId(prevTokenIndex)).brackets;\n            // check that previous token is not to be ignored\n            if (prevModeBrackets && !ignoreBracketsInToken(lineTokens.getStandardTokenType(prevTokenIndex))) {\n                const { searchStartOffset, searchEndOffset } = this._establishBracketSearchOffsets(position, lineTokens, prevModeBrackets, prevTokenIndex);\n                const foundBracket = BracketsUtils.findPrevBracketInRange(prevModeBrackets.reversedRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n                // check that we didn't hit a bracket too far away from position\n                if (foundBracket && foundBracket.startColumn <= position.column && position.column <= foundBracket.endColumn) {\n                    const foundBracketText = lineText.substring(foundBracket.startColumn - 1, foundBracket.endColumn - 1).toLowerCase();\n                    const r = this._matchFoundBracket(foundBracket, prevModeBrackets.textIsBracket[foundBracketText], prevModeBrackets.textIsOpenBracket[foundBracketText], continueSearchPredicate);\n                    if (r) {\n                        if (r instanceof BracketSearchCanceled) {\n                            return null;\n                        }\n                        return r;\n                    }\n                }\n            }\n        }\n        return null;\n    }\n    _matchFoundBracket(foundBracket, data, isOpen, continueSearchPredicate) {\n        if (!data) {\n            return null;\n        }\n        const matched = (isOpen\n            ? this._findMatchingBracketDown(data, foundBracket.getEndPosition(), continueSearchPredicate)\n            : this._findMatchingBracketUp(data, foundBracket.getStartPosition(), continueSearchPredicate));\n        if (!matched) {\n            return null;\n        }\n        if (matched instanceof BracketSearchCanceled) {\n            return matched;\n        }\n        return [foundBracket, matched];\n    }\n    _findMatchingBracketUp(bracket, position, continueSearchPredicate) {\n        // console.log('_findMatchingBracketUp: ', 'bracket: ', JSON.stringify(bracket), 'startPosition: ', String(position));\n        const languageId = bracket.languageId;\n        const reversedBracketRegex = bracket.reversedRegex;\n        let count = -1;\n        let totalCallCount = 0;\n        const searchPrevMatchingBracketInRange = (lineNumber, lineText, searchStartOffset, searchEndOffset) => {\n            while (true) {\n                if (continueSearchPredicate && (++totalCallCount) % 100 === 0 && !continueSearchPredicate()) {\n                    return BracketSearchCanceled.INSTANCE;\n                }\n                const r = BracketsUtils.findPrevBracketInRange(reversedBracketRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n                if (!r) {\n                    break;\n                }\n                const hitText = lineText.substring(r.startColumn - 1, r.endColumn - 1).toLowerCase();\n                if (bracket.isOpen(hitText)) {\n                    count++;\n                }\n                else if (bracket.isClose(hitText)) {\n                    count--;\n                }\n                if (count === 0) {\n                    return r;\n                }\n                searchEndOffset = r.startColumn - 1;\n            }\n            return null;\n        };\n        for (let lineNumber = position.lineNumber; lineNumber >= 1; lineNumber--) {\n            const lineTokens = this.textModel.tokenization.getLineTokens(lineNumber);\n            const tokenCount = lineTokens.getCount();\n            const lineText = this.textModel.getLineContent(lineNumber);\n            let tokenIndex = tokenCount - 1;\n            let searchStartOffset = lineText.length;\n            let searchEndOffset = lineText.length;\n            if (lineNumber === position.lineNumber) {\n                tokenIndex = lineTokens.findTokenIndexAtOffset(position.column - 1);\n                searchStartOffset = position.column - 1;\n                searchEndOffset = position.column - 1;\n            }\n            let prevSearchInToken = true;\n            for (; tokenIndex >= 0; tokenIndex--) {\n                const searchInToken = (lineTokens.getLanguageId(tokenIndex) === languageId && !ignoreBracketsInToken(lineTokens.getStandardTokenType(tokenIndex)));\n                if (searchInToken) {\n                    // this token should be searched\n                    if (prevSearchInToken) {\n                        // the previous token should be searched, simply extend searchStartOffset\n                        searchStartOffset = lineTokens.getStartOffset(tokenIndex);\n                    }\n                    else {\n                        // the previous token should not be searched\n                        searchStartOffset = lineTokens.getStartOffset(tokenIndex);\n                        searchEndOffset = lineTokens.getEndOffset(tokenIndex);\n                    }\n                }\n                else {\n                    // this token should not be searched\n                    if (prevSearchInToken && searchStartOffset !== searchEndOffset) {\n                        const r = searchPrevMatchingBracketInRange(lineNumber, lineText, searchStartOffset, searchEndOffset);\n                        if (r) {\n                            return r;\n                        }\n                    }\n                }\n                prevSearchInToken = searchInToken;\n            }\n            if (prevSearchInToken && searchStartOffset !== searchEndOffset) {\n                const r = searchPrevMatchingBracketInRange(lineNumber, lineText, searchStartOffset, searchEndOffset);\n                if (r) {\n                    return r;\n                }\n            }\n        }\n        return null;\n    }\n    _findMatchingBracketDown(bracket, position, continueSearchPredicate) {\n        // console.log('_findMatchingBracketDown: ', 'bracket: ', JSON.stringify(bracket), 'startPosition: ', String(position));\n        const languageId = bracket.languageId;\n        const bracketRegex = bracket.forwardRegex;\n        let count = 1;\n        let totalCallCount = 0;\n        const searchNextMatchingBracketInRange = (lineNumber, lineText, searchStartOffset, searchEndOffset) => {\n            while (true) {\n                if (continueSearchPredicate && (++totalCallCount) % 100 === 0 && !continueSearchPredicate()) {\n                    return BracketSearchCanceled.INSTANCE;\n                }\n                const r = BracketsUtils.findNextBracketInRange(bracketRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n                if (!r) {\n                    break;\n                }\n                const hitText = lineText.substring(r.startColumn - 1, r.endColumn - 1).toLowerCase();\n                if (bracket.isOpen(hitText)) {\n                    count++;\n                }\n                else if (bracket.isClose(hitText)) {\n                    count--;\n                }\n                if (count === 0) {\n                    return r;\n                }\n                searchStartOffset = r.endColumn - 1;\n            }\n            return null;\n        };\n        const lineCount = this.textModel.getLineCount();\n        for (let lineNumber = position.lineNumber; lineNumber <= lineCount; lineNumber++) {\n            const lineTokens = this.textModel.tokenization.getLineTokens(lineNumber);\n            const tokenCount = lineTokens.getCount();\n            const lineText = this.textModel.getLineContent(lineNumber);\n            let tokenIndex = 0;\n            let searchStartOffset = 0;\n            let searchEndOffset = 0;\n            if (lineNumber === position.lineNumber) {\n                tokenIndex = lineTokens.findTokenIndexAtOffset(position.column - 1);\n                searchStartOffset = position.column - 1;\n                searchEndOffset = position.column - 1;\n            }\n            let prevSearchInToken = true;\n            for (; tokenIndex < tokenCount; tokenIndex++) {\n                const searchInToken = (lineTokens.getLanguageId(tokenIndex) === languageId && !ignoreBracketsInToken(lineTokens.getStandardTokenType(tokenIndex)));\n                if (searchInToken) {\n                    // this token should be searched\n                    if (prevSearchInToken) {\n                        // the previous token should be searched, simply extend searchEndOffset\n                        searchEndOffset = lineTokens.getEndOffset(tokenIndex);\n                    }\n                    else {\n                        // the previous token should not be searched\n                        searchStartOffset = lineTokens.getStartOffset(tokenIndex);\n                        searchEndOffset = lineTokens.getEndOffset(tokenIndex);\n                    }\n                }\n                else {\n                    // this token should not be searched\n                    if (prevSearchInToken && searchStartOffset !== searchEndOffset) {\n                        const r = searchNextMatchingBracketInRange(lineNumber, lineText, searchStartOffset, searchEndOffset);\n                        if (r) {\n                            return r;\n                        }\n                    }\n                }\n                prevSearchInToken = searchInToken;\n            }\n            if (prevSearchInToken && searchStartOffset !== searchEndOffset) {\n                const r = searchNextMatchingBracketInRange(lineNumber, lineText, searchStartOffset, searchEndOffset);\n                if (r) {\n                    return r;\n                }\n            }\n        }\n        return null;\n    }\n    findPrevBracket(_position) {\n        var _a;\n        const position = this.textModel.validatePosition(_position);\n        if (this.canBuildAST) {\n            this.bracketsRequested = true;\n            this.updateBracketPairsTree();\n            return ((_a = this.bracketPairsTree.value) === null || _a === void 0 ? void 0 : _a.object.getFirstBracketBefore(position)) || null;\n        }\n        let languageId = null;\n        let modeBrackets = null;\n        let bracketConfig = null;\n        for (let lineNumber = position.lineNumber; lineNumber >= 1; lineNumber--) {\n            const lineTokens = this.textModel.tokenization.getLineTokens(lineNumber);\n            const tokenCount = lineTokens.getCount();\n            const lineText = this.textModel.getLineContent(lineNumber);\n            let tokenIndex = tokenCount - 1;\n            let searchStartOffset = lineText.length;\n            let searchEndOffset = lineText.length;\n            if (lineNumber === position.lineNumber) {\n                tokenIndex = lineTokens.findTokenIndexAtOffset(position.column - 1);\n                searchStartOffset = position.column - 1;\n                searchEndOffset = position.column - 1;\n                const tokenLanguageId = lineTokens.getLanguageId(tokenIndex);\n                if (languageId !== tokenLanguageId) {\n                    languageId = tokenLanguageId;\n                    modeBrackets = this.languageConfigurationService.getLanguageConfiguration(languageId).brackets;\n                    bracketConfig = this.languageConfigurationService.getLanguageConfiguration(languageId).bracketsNew;\n                }\n            }\n            let prevSearchInToken = true;\n            for (; tokenIndex >= 0; tokenIndex--) {\n                const tokenLanguageId = lineTokens.getLanguageId(tokenIndex);\n                if (languageId !== tokenLanguageId) {\n                    // language id change!\n                    if (modeBrackets && bracketConfig && prevSearchInToken && searchStartOffset !== searchEndOffset) {\n                        const r = BracketsUtils.findPrevBracketInRange(modeBrackets.reversedRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n                        if (r) {\n                            return this._toFoundBracket(bracketConfig, r);\n                        }\n                        prevSearchInToken = false;\n                    }\n                    languageId = tokenLanguageId;\n                    modeBrackets = this.languageConfigurationService.getLanguageConfiguration(languageId).brackets;\n                    bracketConfig = this.languageConfigurationService.getLanguageConfiguration(languageId).bracketsNew;\n                }\n                const searchInToken = (!!modeBrackets && !ignoreBracketsInToken(lineTokens.getStandardTokenType(tokenIndex)));\n                if (searchInToken) {\n                    // this token should be searched\n                    if (prevSearchInToken) {\n                        // the previous token should be searched, simply extend searchStartOffset\n                        searchStartOffset = lineTokens.getStartOffset(tokenIndex);\n                    }\n                    else {\n                        // the previous token should not be searched\n                        searchStartOffset = lineTokens.getStartOffset(tokenIndex);\n                        searchEndOffset = lineTokens.getEndOffset(tokenIndex);\n                    }\n                }\n                else {\n                    // this token should not be searched\n                    if (bracketConfig && modeBrackets && prevSearchInToken && searchStartOffset !== searchEndOffset) {\n                        const r = BracketsUtils.findPrevBracketInRange(modeBrackets.reversedRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n                        if (r) {\n                            return this._toFoundBracket(bracketConfig, r);\n                        }\n                    }\n                }\n                prevSearchInToken = searchInToken;\n            }\n            if (bracketConfig && modeBrackets && prevSearchInToken && searchStartOffset !== searchEndOffset) {\n                const r = BracketsUtils.findPrevBracketInRange(modeBrackets.reversedRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n                if (r) {\n                    return this._toFoundBracket(bracketConfig, r);\n                }\n            }\n        }\n        return null;\n    }\n    findNextBracket(_position) {\n        var _a;\n        const position = this.textModel.validatePosition(_position);\n        if (this.canBuildAST) {\n            this.bracketsRequested = true;\n            this.updateBracketPairsTree();\n            return ((_a = this.bracketPairsTree.value) === null || _a === void 0 ? void 0 : _a.object.getFirstBracketAfter(position)) || null;\n        }\n        const lineCount = this.textModel.getLineCount();\n        let languageId = null;\n        let modeBrackets = null;\n        let bracketConfig = null;\n        for (let lineNumber = position.lineNumber; lineNumber <= lineCount; lineNumber++) {\n            const lineTokens = this.textModel.tokenization.getLineTokens(lineNumber);\n            const tokenCount = lineTokens.getCount();\n            const lineText = this.textModel.getLineContent(lineNumber);\n            let tokenIndex = 0;\n            let searchStartOffset = 0;\n            let searchEndOffset = 0;\n            if (lineNumber === position.lineNumber) {\n                tokenIndex = lineTokens.findTokenIndexAtOffset(position.column - 1);\n                searchStartOffset = position.column - 1;\n                searchEndOffset = position.column - 1;\n                const tokenLanguageId = lineTokens.getLanguageId(tokenIndex);\n                if (languageId !== tokenLanguageId) {\n                    languageId = tokenLanguageId;\n                    modeBrackets = this.languageConfigurationService.getLanguageConfiguration(languageId).brackets;\n                    bracketConfig = this.languageConfigurationService.getLanguageConfiguration(languageId).bracketsNew;\n                }\n            }\n            let prevSearchInToken = true;\n            for (; tokenIndex < tokenCount; tokenIndex++) {\n                const tokenLanguageId = lineTokens.getLanguageId(tokenIndex);\n                if (languageId !== tokenLanguageId) {\n                    // language id change!\n                    if (bracketConfig && modeBrackets && prevSearchInToken && searchStartOffset !== searchEndOffset) {\n                        const r = BracketsUtils.findNextBracketInRange(modeBrackets.forwardRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n                        if (r) {\n                            return this._toFoundBracket(bracketConfig, r);\n                        }\n                        prevSearchInToken = false;\n                    }\n                    languageId = tokenLanguageId;\n                    modeBrackets = this.languageConfigurationService.getLanguageConfiguration(languageId).brackets;\n                    bracketConfig = this.languageConfigurationService.getLanguageConfiguration(languageId).bracketsNew;\n                }\n                const searchInToken = (!!modeBrackets && !ignoreBracketsInToken(lineTokens.getStandardTokenType(tokenIndex)));\n                if (searchInToken) {\n                    // this token should be searched\n                    if (prevSearchInToken) {\n                        // the previous token should be searched, simply extend searchEndOffset\n                        searchEndOffset = lineTokens.getEndOffset(tokenIndex);\n                    }\n                    else {\n                        // the previous token should not be searched\n                        searchStartOffset = lineTokens.getStartOffset(tokenIndex);\n                        searchEndOffset = lineTokens.getEndOffset(tokenIndex);\n                    }\n                }\n                else {\n                    // this token should not be searched\n                    if (bracketConfig && modeBrackets && prevSearchInToken && searchStartOffset !== searchEndOffset) {\n                        const r = BracketsUtils.findNextBracketInRange(modeBrackets.forwardRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n                        if (r) {\n                            return this._toFoundBracket(bracketConfig, r);\n                        }\n                    }\n                }\n                prevSearchInToken = searchInToken;\n            }\n            if (bracketConfig && modeBrackets && prevSearchInToken && searchStartOffset !== searchEndOffset) {\n                const r = BracketsUtils.findNextBracketInRange(modeBrackets.forwardRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n                if (r) {\n                    return this._toFoundBracket(bracketConfig, r);\n                }\n            }\n        }\n        return null;\n    }\n    findEnclosingBrackets(_position, maxDuration) {\n        const position = this.textModel.validatePosition(_position);\n        if (this.canBuildAST) {\n            const range = Range.fromPositions(position);\n            const bracketPair = findLast(this.getBracketPairsInRange(Range.fromPositions(position, position)), (item) => item.closingBracketRange !== undefined && item.range.strictContainsRange(range));\n            if (bracketPair) {\n                return [bracketPair.openingBracketRange, bracketPair.closingBracketRange];\n            }\n            return null;\n        }\n        const continueSearchPredicate = createTimeBasedContinueBracketSearchPredicate(maxDuration);\n        const lineCount = this.textModel.getLineCount();\n        const savedCounts = new Map();\n        let counts = [];\n        const resetCounts = (languageId, modeBrackets) => {\n            if (!savedCounts.has(languageId)) {\n                const tmp = [];\n                for (let i = 0, len = modeBrackets ? modeBrackets.brackets.length : 0; i < len; i++) {\n                    tmp[i] = 0;\n                }\n                savedCounts.set(languageId, tmp);\n            }\n            counts = savedCounts.get(languageId);\n        };\n        let totalCallCount = 0;\n        const searchInRange = (modeBrackets, lineNumber, lineText, searchStartOffset, searchEndOffset) => {\n            while (true) {\n                if (continueSearchPredicate && (++totalCallCount) % 100 === 0 && !continueSearchPredicate()) {\n                    return BracketSearchCanceled.INSTANCE;\n                }\n                const r = BracketsUtils.findNextBracketInRange(modeBrackets.forwardRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n                if (!r) {\n                    break;\n                }\n                const hitText = lineText.substring(r.startColumn - 1, r.endColumn - 1).toLowerCase();\n                const bracket = modeBrackets.textIsBracket[hitText];\n                if (bracket) {\n                    if (bracket.isOpen(hitText)) {\n                        counts[bracket.index]++;\n                    }\n                    else if (bracket.isClose(hitText)) {\n                        counts[bracket.index]--;\n                    }\n                    if (counts[bracket.index] === -1) {\n                        return this._matchFoundBracket(r, bracket, false, continueSearchPredicate);\n                    }\n                }\n                searchStartOffset = r.endColumn - 1;\n            }\n            return null;\n        };\n        let languageId = null;\n        let modeBrackets = null;\n        for (let lineNumber = position.lineNumber; lineNumber <= lineCount; lineNumber++) {\n            const lineTokens = this.textModel.tokenization.getLineTokens(lineNumber);\n            const tokenCount = lineTokens.getCount();\n            const lineText = this.textModel.getLineContent(lineNumber);\n            let tokenIndex = 0;\n            let searchStartOffset = 0;\n            let searchEndOffset = 0;\n            if (lineNumber === position.lineNumber) {\n                tokenIndex = lineTokens.findTokenIndexAtOffset(position.column - 1);\n                searchStartOffset = position.column - 1;\n                searchEndOffset = position.column - 1;\n                const tokenLanguageId = lineTokens.getLanguageId(tokenIndex);\n                if (languageId !== tokenLanguageId) {\n                    languageId = tokenLanguageId;\n                    modeBrackets = this.languageConfigurationService.getLanguageConfiguration(languageId).brackets;\n                    resetCounts(languageId, modeBrackets);\n                }\n            }\n            let prevSearchInToken = true;\n            for (; tokenIndex < tokenCount; tokenIndex++) {\n                const tokenLanguageId = lineTokens.getLanguageId(tokenIndex);\n                if (languageId !== tokenLanguageId) {\n                    // language id change!\n                    if (modeBrackets && prevSearchInToken && searchStartOffset !== searchEndOffset) {\n                        const r = searchInRange(modeBrackets, lineNumber, lineText, searchStartOffset, searchEndOffset);\n                        if (r) {\n                            return stripBracketSearchCanceled(r);\n                        }\n                        prevSearchInToken = false;\n                    }\n                    languageId = tokenLanguageId;\n                    modeBrackets = this.languageConfigurationService.getLanguageConfiguration(languageId).brackets;\n                    resetCounts(languageId, modeBrackets);\n                }\n                const searchInToken = (!!modeBrackets && !ignoreBracketsInToken(lineTokens.getStandardTokenType(tokenIndex)));\n                if (searchInToken) {\n                    // this token should be searched\n                    if (prevSearchInToken) {\n                        // the previous token should be searched, simply extend searchEndOffset\n                        searchEndOffset = lineTokens.getEndOffset(tokenIndex);\n                    }\n                    else {\n                        // the previous token should not be searched\n                        searchStartOffset = lineTokens.getStartOffset(tokenIndex);\n                        searchEndOffset = lineTokens.getEndOffset(tokenIndex);\n                    }\n                }\n                else {\n                    // this token should not be searched\n                    if (modeBrackets && prevSearchInToken && searchStartOffset !== searchEndOffset) {\n                        const r = searchInRange(modeBrackets, lineNumber, lineText, searchStartOffset, searchEndOffset);\n                        if (r) {\n                            return stripBracketSearchCanceled(r);\n                        }\n                    }\n                }\n                prevSearchInToken = searchInToken;\n            }\n            if (modeBrackets && prevSearchInToken && searchStartOffset !== searchEndOffset) {\n                const r = searchInRange(modeBrackets, lineNumber, lineText, searchStartOffset, searchEndOffset);\n                if (r) {\n                    return stripBracketSearchCanceled(r);\n                }\n            }\n        }\n        return null;\n    }\n    _toFoundBracket(bracketConfig, r) {\n        if (!r) {\n            return null;\n        }\n        let text = this.textModel.getValueInRange(r);\n        text = text.toLowerCase();\n        const bracketInfo = bracketConfig.getBracketInfo(text);\n        if (!bracketInfo) {\n            return null;\n        }\n        return {\n            range: r,\n            bracketInfo\n        };\n    }\n}\nfunction createDisposableRef(object, disposable) {\n    return {\n        object,\n        dispose: () => disposable === null || disposable === void 0 ? void 0 : disposable.dispose(),\n    };\n}\nfunction createTimeBasedContinueBracketSearchPredicate(maxDuration) {\n    if (typeof maxDuration === 'undefined') {\n        return () => true;\n    }\n    else {\n        const startTime = Date.now();\n        return () => {\n            return (Date.now() - startTime <= maxDuration);\n        };\n    }\n}\nclass BracketSearchCanceled {\n    constructor() {\n        this._searchCanceledBrand = undefined;\n    }\n}\nBracketSearchCanceled.INSTANCE = new BracketSearchCanceled();\nfunction stripBracketSearchCanceled(result) {\n    if (result instanceof BracketSearchCanceled) {\n        return null;\n    }\n    return result;\n}\n"],"mappings":"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"}]}