{"remainingRequest":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js!/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/common/viewModel/viewModelImpl.js","dependencies":[{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/common/viewModel/viewModelImpl.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/babel.config.js","mtime":1668271197000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js","mtime":456789000000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF90b0NvbnN1bWFibGVBcnJheSBmcm9tICIvVXNlcnMveWFuamlhamlhL0Rlc2t0b3Avd29ya3NwYWNlL2F2dWUtZGF0YS1uZXcvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3RvQ29uc3VtYWJsZUFycmF5LmpzIjsKaW1wb3J0IF9zbGljZWRUb0FycmF5IGZyb20gIi9Vc2Vycy95YW5qaWFqaWEvRGVza3RvcC93b3Jrc3BhY2UvYXZ1ZS1kYXRhLW5ldy9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vc2xpY2VkVG9BcnJheS5qcyI7CmltcG9ydCBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlciBmcm9tICIvVXNlcnMveWFuamlhamlhL0Rlc2t0b3Avd29ya3NwYWNlL2F2dWUtZGF0YS1uZXcvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIuanMiOwppbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gIi9Vc2Vycy95YW5qaWFqaWEvRGVza3RvcC93b3Jrc3BhY2UvYXZ1ZS1kYXRhLW5ldy9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY2xhc3NDYWxsQ2hlY2suanMiOwppbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gIi9Vc2Vycy95YW5qaWFqaWEvRGVza3RvcC93b3Jrc3BhY2UvYXZ1ZS1kYXRhLW5ldy9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlQ2xhc3MuanMiOwppbXBvcnQgX2Fzc2VydFRoaXNJbml0aWFsaXplZCBmcm9tICIvVXNlcnMveWFuamlhamlhL0Rlc2t0b3Avd29ya3NwYWNlL2F2dWUtZGF0YS1uZXcvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2Fzc2VydFRoaXNJbml0aWFsaXplZC5qcyI7CmltcG9ydCBfZ2V0IGZyb20gIi9Vc2Vycy95YW5qaWFqaWEvRGVza3RvcC93b3Jrc3BhY2UvYXZ1ZS1kYXRhLW5ldy9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZ2V0LmpzIjsKaW1wb3J0IF9nZXRQcm90b3R5cGVPZiBmcm9tICIvVXNlcnMveWFuamlhamlhL0Rlc2t0b3Avd29ya3NwYWNlL2F2dWUtZGF0YS1uZXcvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2dldFByb3RvdHlwZU9mLmpzIjsKaW1wb3J0IF9pbmhlcml0cyBmcm9tICIvVXNlcnMveWFuamlhamlhL0Rlc2t0b3Avd29ya3NwYWNlL2F2dWUtZGF0YS1uZXcvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzLmpzIjsKaW1wb3J0IF9jcmVhdGVTdXBlciBmcm9tICIvVXNlcnMveWFuamlhamlhL0Rlc2t0b3Avd29ya3NwYWNlL2F2dWUtZGF0YS1uZXcvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZVN1cGVyLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmNvbmNhdC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lm1hcC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNsaWNlLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc29ydC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnB1c2guanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAuZXhlYy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC50ZXN0LmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnJlcGxhY2UuanMiOwovKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogKiAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLgogKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8KaW1wb3J0IHsgQXJyYXlRdWV1ZSB9IGZyb20gJy4uLy4uLy4uL2Jhc2UvY29tbW9uL2FycmF5cy5qcyc7CmltcG9ydCB7IFJ1bk9uY2VTY2hlZHVsZXIgfSBmcm9tICcuLi8uLi8uLi9iYXNlL2NvbW1vbi9hc3luYy5qcyc7CmltcG9ydCB7IENvbG9yIH0gZnJvbSAnLi4vLi4vLi4vYmFzZS9jb21tb24vY29sb3IuanMnOwppbXBvcnQgeyBEaXNwb3NhYmxlIH0gZnJvbSAnLi4vLi4vLi4vYmFzZS9jb21tb24vbGlmZWN5Y2xlLmpzJzsKaW1wb3J0ICogYXMgcGxhdGZvcm0gZnJvbSAnLi4vLi4vLi4vYmFzZS9jb21tb24vcGxhdGZvcm0uanMnOwppbXBvcnQgKiBhcyBzdHJpbmdzIGZyb20gJy4uLy4uLy4uL2Jhc2UvY29tbW9uL3N0cmluZ3MuanMnOwppbXBvcnQgeyBFRElUT1JfRk9OVF9ERUZBVUxUUywgZmlsdGVyVmFsaWRhdGlvbkRlY29yYXRpb25zIH0gZnJvbSAnLi4vY29uZmlnL2VkaXRvck9wdGlvbnMuanMnOwppbXBvcnQgeyBDdXJzb3JzQ29udHJvbGxlciB9IGZyb20gJy4uL2N1cnNvci9jdXJzb3IuanMnOwppbXBvcnQgeyBDdXJzb3JDb25maWd1cmF0aW9uIH0gZnJvbSAnLi4vY3Vyc29yQ29tbW9uLmpzJzsKaW1wb3J0IHsgUG9zaXRpb24gfSBmcm9tICcuLi9jb3JlL3Bvc2l0aW9uLmpzJzsKaW1wb3J0IHsgUmFuZ2UgfSBmcm9tICcuLi9jb3JlL3JhbmdlLmpzJzsKaW1wb3J0ICogYXMgdGV4dE1vZGVsRXZlbnRzIGZyb20gJy4uL3RleHRNb2RlbEV2ZW50cy5qcyc7CmltcG9ydCB7IFRva2VuaXphdGlvblJlZ2lzdHJ5IH0gZnJvbSAnLi4vbGFuZ3VhZ2VzLmpzJzsKaW1wb3J0IHsgUExBSU5URVhUX0xBTkdVQUdFX0lEIH0gZnJvbSAnLi4vbGFuZ3VhZ2VzL21vZGVzUmVnaXN0cnkuanMnOwppbXBvcnQgeyB0b2tlbml6ZUxpbmVUb0hUTUwgfSBmcm9tICcuLi9sYW5ndWFnZXMvdGV4dFRvSHRtbFRva2VuaXplci5qcyc7CmltcG9ydCAqIGFzIHZpZXdFdmVudHMgZnJvbSAnLi4vdmlld0V2ZW50cy5qcyc7CmltcG9ydCB7IFZpZXdMYXlvdXQgfSBmcm9tICcuLi92aWV3TGF5b3V0L3ZpZXdMYXlvdXQuanMnOwppbXBvcnQgeyBNaW5pbWFwVG9rZW5zQ29sb3JUcmFja2VyIH0gZnJvbSAnLi9taW5pbWFwVG9rZW5zQ29sb3JUcmFja2VyLmpzJzsKaW1wb3J0IHsgTWluaW1hcExpbmVzUmVuZGVyaW5nRGF0YSwgT3ZlcnZpZXdSdWxlckRlY29yYXRpb25zR3JvdXAsIFZpZXdMaW5lUmVuZGVyaW5nRGF0YSB9IGZyb20gJy4uL3ZpZXdNb2RlbC5qcyc7CmltcG9ydCB7IFZpZXdNb2RlbERlY29yYXRpb25zIH0gZnJvbSAnLi92aWV3TW9kZWxEZWNvcmF0aW9ucy5qcyc7CmltcG9ydCB7IEZvY3VzQ2hhbmdlZEV2ZW50LCBIaWRkZW5BcmVhc0NoYW5nZWRFdmVudCwgTW9kZWxDb250ZW50Q2hhbmdlZEV2ZW50LCBNb2RlbERlY29yYXRpb25zQ2hhbmdlZEV2ZW50LCBNb2RlbExhbmd1YWdlQ2hhbmdlZEV2ZW50LCBNb2RlbExhbmd1YWdlQ29uZmlndXJhdGlvbkNoYW5nZWRFdmVudCwgTW9kZWxPcHRpb25zQ2hhbmdlZEV2ZW50LCBNb2RlbFRva2Vuc0NoYW5nZWRFdmVudCwgUmVhZE9ubHlFZGl0QXR0ZW1wdEV2ZW50LCBTY3JvbGxDaGFuZ2VkRXZlbnQsIFZpZXdNb2RlbEV2ZW50RGlzcGF0Y2hlciwgVmlld1pvbmVzQ2hhbmdlZEV2ZW50IH0gZnJvbSAnLi4vdmlld01vZGVsRXZlbnREaXNwYXRjaGVyLmpzJzsKaW1wb3J0IHsgVmlld01vZGVsTGluZXNGcm9tTW9kZWxBc0lzLCBWaWV3TW9kZWxMaW5lc0Zyb21Qcm9qZWN0ZWRNb2RlbCB9IGZyb20gJy4vdmlld01vZGVsTGluZXMuanMnOwp2YXIgVVNFX0lERU5USVRZX0xJTkVTX0NPTExFQ1RJT04gPSB0cnVlOwpleHBvcnQgdmFyIFZpZXdNb2RlbCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0Rpc3Bvc2FibGUpIHsKICBfaW5oZXJpdHMoVmlld01vZGVsLCBfRGlzcG9zYWJsZSk7CiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihWaWV3TW9kZWwpOwogIGZ1bmN0aW9uIFZpZXdNb2RlbChlZGl0b3JJZCwgY29uZmlndXJhdGlvbiwgbW9kZWwsIGRvbUxpbmVCcmVha3NDb21wdXRlckZhY3RvcnksIG1vbm9zcGFjZUxpbmVCcmVha3NDb21wdXRlckZhY3RvcnksIHNjaGVkdWxlQXROZXh0QW5pbWF0aW9uRnJhbWUsIGxhbmd1YWdlQ29uZmlndXJhdGlvblNlcnZpY2UsIF90aGVtZVNlcnZpY2UpIHsKICAgIHZhciBfdGhpczsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBWaWV3TW9kZWwpOwogICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKTsKICAgIF90aGlzLmxhbmd1YWdlQ29uZmlndXJhdGlvblNlcnZpY2UgPSBsYW5ndWFnZUNvbmZpZ3VyYXRpb25TZXJ2aWNlOwogICAgX3RoaXMuX3RoZW1lU2VydmljZSA9IF90aGVtZVNlcnZpY2U7CiAgICBfdGhpcy5fZWRpdG9ySWQgPSBlZGl0b3JJZDsKICAgIF90aGlzLl9jb25maWd1cmF0aW9uID0gY29uZmlndXJhdGlvbjsKICAgIF90aGlzLm1vZGVsID0gbW9kZWw7CiAgICBfdGhpcy5fZXZlbnREaXNwYXRjaGVyID0gbmV3IFZpZXdNb2RlbEV2ZW50RGlzcGF0Y2hlcigpOwogICAgX3RoaXMub25FdmVudCA9IF90aGlzLl9ldmVudERpc3BhdGNoZXIub25FdmVudDsKICAgIF90aGlzLmN1cnNvckNvbmZpZyA9IG5ldyBDdXJzb3JDb25maWd1cmF0aW9uKF90aGlzLm1vZGVsLmdldExhbmd1YWdlSWQoKSwgX3RoaXMubW9kZWwuZ2V0T3B0aW9ucygpLCBfdGhpcy5fY29uZmlndXJhdGlvbiwgX3RoaXMubGFuZ3VhZ2VDb25maWd1cmF0aW9uU2VydmljZSk7CiAgICBfdGhpcy5fdG9rZW5pemVWaWV3cG9ydFNvb24gPSBfdGhpcy5fcmVnaXN0ZXIobmV3IFJ1bk9uY2VTY2hlZHVsZXIoZnVuY3Rpb24gKCkgewogICAgICByZXR1cm4gX3RoaXMudG9rZW5pemVWaWV3cG9ydCgpOwogICAgfSwgNTApKTsKICAgIF90aGlzLl91cGRhdGVDb25maWd1cmF0aW9uVmlld0xpbmVDb3VudCA9IF90aGlzLl9yZWdpc3RlcihuZXcgUnVuT25jZVNjaGVkdWxlcihmdW5jdGlvbiAoKSB7CiAgICAgIHJldHVybiBfdGhpcy5fdXBkYXRlQ29uZmlndXJhdGlvblZpZXdMaW5lQ291bnROb3coKTsKICAgIH0sIDApKTsKICAgIF90aGlzLl9oYXNGb2N1cyA9IGZhbHNlOwogICAgX3RoaXMuX3ZpZXdwb3J0U3RhcnQgPSBWaWV3cG9ydFN0YXJ0LmNyZWF0ZShfdGhpcy5tb2RlbCk7CiAgICBpZiAoVVNFX0lERU5USVRZX0xJTkVTX0NPTExFQ1RJT04gJiYgX3RoaXMubW9kZWwuaXNUb29MYXJnZUZvclRva2VuaXphdGlvbigpKSB7CiAgICAgIF90aGlzLl9saW5lcyA9IG5ldyBWaWV3TW9kZWxMaW5lc0Zyb21Nb2RlbEFzSXMoX3RoaXMubW9kZWwpOwogICAgfSBlbHNlIHsKICAgICAgdmFyIG9wdGlvbnMgPSBfdGhpcy5fY29uZmlndXJhdGlvbi5vcHRpb25zOwogICAgICB2YXIgZm9udEluZm8gPSBvcHRpb25zLmdldCg0NiAvKiBFZGl0b3JPcHRpb24uZm9udEluZm8gKi8pOwogICAgICB2YXIgd3JhcHBpbmdTdHJhdGVneSA9IG9wdGlvbnMuZ2V0KDEyNyAvKiBFZGl0b3JPcHRpb24ud3JhcHBpbmdTdHJhdGVneSAqLyk7CiAgICAgIHZhciB3cmFwcGluZ0luZm8gPSBvcHRpb25zLmdldCgxMzQgLyogRWRpdG9yT3B0aW9uLndyYXBwaW5nSW5mbyAqLyk7CiAgICAgIHZhciB3cmFwcGluZ0luZGVudCA9IG9wdGlvbnMuZ2V0KDEyNiAvKiBFZGl0b3JPcHRpb24ud3JhcHBpbmdJbmRlbnQgKi8pOwogICAgICBfdGhpcy5fbGluZXMgPSBuZXcgVmlld01vZGVsTGluZXNGcm9tUHJvamVjdGVkTW9kZWwoX3RoaXMuX2VkaXRvcklkLCBfdGhpcy5tb2RlbCwgZG9tTGluZUJyZWFrc0NvbXB1dGVyRmFjdG9yeSwgbW9ub3NwYWNlTGluZUJyZWFrc0NvbXB1dGVyRmFjdG9yeSwgZm9udEluZm8sIF90aGlzLm1vZGVsLmdldE9wdGlvbnMoKS50YWJTaXplLCB3cmFwcGluZ1N0cmF0ZWd5LCB3cmFwcGluZ0luZm8ud3JhcHBpbmdDb2x1bW4sIHdyYXBwaW5nSW5kZW50KTsKICAgIH0KICAgIF90aGlzLmNvb3JkaW5hdGVzQ29udmVydGVyID0gX3RoaXMuX2xpbmVzLmNyZWF0ZUNvb3JkaW5hdGVzQ29udmVydGVyKCk7CiAgICBfdGhpcy5fY3Vyc29yID0gX3RoaXMuX3JlZ2lzdGVyKG5ldyBDdXJzb3JzQ29udHJvbGxlcihtb2RlbCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIF90aGlzLmNvb3JkaW5hdGVzQ29udmVydGVyLCBfdGhpcy5jdXJzb3JDb25maWcpKTsKICAgIF90aGlzLnZpZXdMYXlvdXQgPSBfdGhpcy5fcmVnaXN0ZXIobmV3IFZpZXdMYXlvdXQoX3RoaXMuX2NvbmZpZ3VyYXRpb24sIF90aGlzLmdldExpbmVDb3VudCgpLCBzY2hlZHVsZUF0TmV4dEFuaW1hdGlvbkZyYW1lKSk7CiAgICBfdGhpcy5fcmVnaXN0ZXIoX3RoaXMudmlld0xheW91dC5vbkRpZFNjcm9sbChmdW5jdGlvbiAoZSkgewogICAgICBpZiAoZS5zY3JvbGxUb3BDaGFuZ2VkKSB7CiAgICAgICAgX3RoaXMuX3Rva2VuaXplVmlld3BvcnRTb29uLnNjaGVkdWxlKCk7CiAgICAgIH0KICAgICAgaWYgKGUuc2Nyb2xsVG9wQ2hhbmdlZCkgewogICAgICAgIF90aGlzLl92aWV3cG9ydFN0YXJ0LmludmFsaWRhdGUoKTsKICAgICAgfQogICAgICBfdGhpcy5fZXZlbnREaXNwYXRjaGVyLmVtaXRTaW5nbGVWaWV3RXZlbnQobmV3IHZpZXdFdmVudHMuVmlld1Njcm9sbENoYW5nZWRFdmVudChlKSk7CiAgICAgIF90aGlzLl9ldmVudERpc3BhdGNoZXIuZW1pdE91dGdvaW5nRXZlbnQobmV3IFNjcm9sbENoYW5nZWRFdmVudChlLm9sZFNjcm9sbFdpZHRoLCBlLm9sZFNjcm9sbExlZnQsIGUub2xkU2Nyb2xsSGVpZ2h0LCBlLm9sZFNjcm9sbFRvcCwgZS5zY3JvbGxXaWR0aCwgZS5zY3JvbGxMZWZ0LCBlLnNjcm9sbEhlaWdodCwgZS5zY3JvbGxUb3ApKTsKICAgIH0pKTsKICAgIF90aGlzLl9yZWdpc3RlcihfdGhpcy52aWV3TGF5b3V0Lm9uRGlkQ29udGVudFNpemVDaGFuZ2UoZnVuY3Rpb24gKGUpIHsKICAgICAgX3RoaXMuX2V2ZW50RGlzcGF0Y2hlci5lbWl0T3V0Z29pbmdFdmVudChlKTsKICAgIH0pKTsKICAgIF90aGlzLl9kZWNvcmF0aW9ucyA9IG5ldyBWaWV3TW9kZWxEZWNvcmF0aW9ucyhfdGhpcy5fZWRpdG9ySWQsIF90aGlzLm1vZGVsLCBfdGhpcy5fY29uZmlndXJhdGlvbiwgX3RoaXMuX2xpbmVzLCBfdGhpcy5jb29yZGluYXRlc0NvbnZlcnRlcik7CiAgICBfdGhpcy5fcmVnaXN0ZXJNb2RlbEV2ZW50cygpOwogICAgX3RoaXMuX3JlZ2lzdGVyKF90aGlzLl9jb25maWd1cmF0aW9uLm9uRGlkQ2hhbmdlRmFzdChmdW5jdGlvbiAoZSkgewogICAgICB0cnkgewogICAgICAgIHZhciBldmVudHNDb2xsZWN0b3IgPSBfdGhpcy5fZXZlbnREaXNwYXRjaGVyLmJlZ2luRW1pdFZpZXdFdmVudHMoKTsKICAgICAgICBfdGhpcy5fb25Db25maWd1cmF0aW9uQ2hhbmdlZChldmVudHNDb2xsZWN0b3IsIGUpOwogICAgICB9IGZpbmFsbHkgewogICAgICAgIF90aGlzLl9ldmVudERpc3BhdGNoZXIuZW5kRW1pdFZpZXdFdmVudHMoKTsKICAgICAgfQogICAgfSkpOwogICAgX3RoaXMuX3JlZ2lzdGVyKE1pbmltYXBUb2tlbnNDb2xvclRyYWNrZXIuZ2V0SW5zdGFuY2UoKS5vbkRpZENoYW5nZShmdW5jdGlvbiAoKSB7CiAgICAgIF90aGlzLl9ldmVudERpc3BhdGNoZXIuZW1pdFNpbmdsZVZpZXdFdmVudChuZXcgdmlld0V2ZW50cy5WaWV3VG9rZW5zQ29sb3JzQ2hhbmdlZEV2ZW50KCkpOwogICAgfSkpOwogICAgX3RoaXMuX3JlZ2lzdGVyKF90aGlzLl90aGVtZVNlcnZpY2Uub25EaWRDb2xvclRoZW1lQ2hhbmdlKGZ1bmN0aW9uICh0aGVtZSkgewogICAgICBfdGhpcy5faW52YWxpZGF0ZURlY29yYXRpb25zQ29sb3JDYWNoZSgpOwogICAgICBfdGhpcy5fZXZlbnREaXNwYXRjaGVyLmVtaXRTaW5nbGVWaWV3RXZlbnQobmV3IHZpZXdFdmVudHMuVmlld1RoZW1lQ2hhbmdlZEV2ZW50KHRoZW1lKSk7CiAgICB9KSk7CiAgICBfdGhpcy5fdXBkYXRlQ29uZmlndXJhdGlvblZpZXdMaW5lQ291bnROb3coKTsKICAgIHJldHVybiBfdGhpczsKICB9CiAgX2NyZWF0ZUNsYXNzKFZpZXdNb2RlbCwgW3sKICAgIGtleTogImRpc3Bvc2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGRpc3Bvc2UoKSB7CiAgICAgIC8vIEZpcnN0IHJlbW92ZSBsaXN0ZW5lcnMsIGFzIGRpc3Bvc2luZyB0aGUgbGluZXMgbWlnaHQgZW5kIHVwIHNlbmRpbmcKICAgICAgLy8gbW9kZWwgZGVjb3JhdGlvbiBjaGFuZ2VkIGV2ZW50cyAuLi4gYW5kIHdlIG5vIGxvbmdlciBjYXJlIGFib3V0IHRoZW0gLi4uCiAgICAgIF9nZXQoX2dldFByb3RvdHlwZU9mKFZpZXdNb2RlbC5wcm90b3R5cGUpLCAiZGlzcG9zZSIsIHRoaXMpLmNhbGwodGhpcyk7CiAgICAgIHRoaXMuX2RlY29yYXRpb25zLmRpc3Bvc2UoKTsKICAgICAgdGhpcy5fbGluZXMuZGlzcG9zZSgpOwogICAgICB0aGlzLl92aWV3cG9ydFN0YXJ0LmRpc3Bvc2UoKTsKICAgICAgdGhpcy5fZXZlbnREaXNwYXRjaGVyLmRpc3Bvc2UoKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJjcmVhdGVMaW5lQnJlYWtzQ29tcHV0ZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZUxpbmVCcmVha3NDb21wdXRlcigpIHsKICAgICAgcmV0dXJuIHRoaXMuX2xpbmVzLmNyZWF0ZUxpbmVCcmVha3NDb21wdXRlcigpOwogICAgfQogIH0sIHsKICAgIGtleTogImFkZFZpZXdFdmVudEhhbmRsZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGFkZFZpZXdFdmVudEhhbmRsZXIoZXZlbnRIYW5kbGVyKSB7CiAgICAgIHRoaXMuX2V2ZW50RGlzcGF0Y2hlci5hZGRWaWV3RXZlbnRIYW5kbGVyKGV2ZW50SGFuZGxlcik7CiAgICB9CiAgfSwgewogICAga2V5OiAicmVtb3ZlVmlld0V2ZW50SGFuZGxlciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlVmlld0V2ZW50SGFuZGxlcihldmVudEhhbmRsZXIpIHsKICAgICAgdGhpcy5fZXZlbnREaXNwYXRjaGVyLnJlbW92ZVZpZXdFdmVudEhhbmRsZXIoZXZlbnRIYW5kbGVyKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJfdXBkYXRlQ29uZmlndXJhdGlvblZpZXdMaW5lQ291bnROb3ciLAogICAgdmFsdWU6IGZ1bmN0aW9uIF91cGRhdGVDb25maWd1cmF0aW9uVmlld0xpbmVDb3VudE5vdygpIHsKICAgICAgdGhpcy5fY29uZmlndXJhdGlvbi5zZXRWaWV3TGluZUNvdW50KHRoaXMuX2xpbmVzLmdldFZpZXdMaW5lQ291bnQoKSk7CiAgICB9CiAgfSwgewogICAga2V5OiAidG9rZW5pemVWaWV3cG9ydCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gdG9rZW5pemVWaWV3cG9ydCgpIHsKICAgICAgdmFyIGxpbmVzVmlld3BvcnREYXRhID0gdGhpcy52aWV3TGF5b3V0LmdldExpbmVzVmlld3BvcnREYXRhKCk7CiAgICAgIHZhciB2aWV3VmlzaWJsZVJhbmdlID0gbmV3IFJhbmdlKGxpbmVzVmlld3BvcnREYXRhLnN0YXJ0TGluZU51bWJlciwgdGhpcy5nZXRMaW5lTWluQ29sdW1uKGxpbmVzVmlld3BvcnREYXRhLnN0YXJ0TGluZU51bWJlciksIGxpbmVzVmlld3BvcnREYXRhLmVuZExpbmVOdW1iZXIsIHRoaXMuZ2V0TGluZU1heENvbHVtbihsaW5lc1ZpZXdwb3J0RGF0YS5lbmRMaW5lTnVtYmVyKSk7CiAgICAgIHZhciBtb2RlbFZpc2libGVSYW5nZXMgPSB0aGlzLl90b01vZGVsVmlzaWJsZVJhbmdlcyh2aWV3VmlzaWJsZVJhbmdlKTsKICAgICAgdmFyIF9pdGVyYXRvciA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKG1vZGVsVmlzaWJsZVJhbmdlcyksCiAgICAgICAgX3N0ZXA7CiAgICAgIHRyeSB7CiAgICAgICAgZm9yIChfaXRlcmF0b3IucygpOyAhKF9zdGVwID0gX2l0ZXJhdG9yLm4oKSkuZG9uZTspIHsKICAgICAgICAgIHZhciBtb2RlbFZpc2libGVSYW5nZSA9IF9zdGVwLnZhbHVlOwogICAgICAgICAgdGhpcy5tb2RlbC50b2tlbml6YXRpb24udG9rZW5pemVWaWV3cG9ydChtb2RlbFZpc2libGVSYW5nZS5zdGFydExpbmVOdW1iZXIsIG1vZGVsVmlzaWJsZVJhbmdlLmVuZExpbmVOdW1iZXIpOwogICAgICAgIH0KICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgX2l0ZXJhdG9yLmUoZXJyKTsKICAgICAgfSBmaW5hbGx5IHsKICAgICAgICBfaXRlcmF0b3IuZigpOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAic2V0SGFzRm9jdXMiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHNldEhhc0ZvY3VzKGhhc0ZvY3VzKSB7CiAgICAgIHRoaXMuX2hhc0ZvY3VzID0gaGFzRm9jdXM7CiAgICAgIHRoaXMuX2N1cnNvci5zZXRIYXNGb2N1cyhoYXNGb2N1cyk7CiAgICAgIHRoaXMuX2V2ZW50RGlzcGF0Y2hlci5lbWl0U2luZ2xlVmlld0V2ZW50KG5ldyB2aWV3RXZlbnRzLlZpZXdGb2N1c0NoYW5nZWRFdmVudChoYXNGb2N1cykpOwogICAgICB0aGlzLl9ldmVudERpc3BhdGNoZXIuZW1pdE91dGdvaW5nRXZlbnQobmV3IEZvY3VzQ2hhbmdlZEV2ZW50KCFoYXNGb2N1cywgaGFzRm9jdXMpKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJvbkNvbXBvc2l0aW9uU3RhcnQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIG9uQ29tcG9zaXRpb25TdGFydCgpIHsKICAgICAgdGhpcy5fZXZlbnREaXNwYXRjaGVyLmVtaXRTaW5nbGVWaWV3RXZlbnQobmV3IHZpZXdFdmVudHMuVmlld0NvbXBvc2l0aW9uU3RhcnRFdmVudCgpKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJvbkNvbXBvc2l0aW9uRW5kIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBvbkNvbXBvc2l0aW9uRW5kKCkgewogICAgICB0aGlzLl9ldmVudERpc3BhdGNoZXIuZW1pdFNpbmdsZVZpZXdFdmVudChuZXcgdmlld0V2ZW50cy5WaWV3Q29tcG9zaXRpb25FbmRFdmVudCgpKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJfb25Db25maWd1cmF0aW9uQ2hhbmdlZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX29uQ29uZmlndXJhdGlvbkNoYW5nZWQoZXZlbnRzQ29sbGVjdG9yLCBlKSB7CiAgICAgIC8vIFdlIG1pZ2h0IG5lZWQgdG8gcmVzdG9yZSB0aGUgY3VycmVudCBjZW50ZXJlZCB2aWV3IHJhbmdlLCBzbyBzYXZlIGl0IChpZiBhdmFpbGFibGUpCiAgICAgIHZhciBwcmV2aW91c1ZpZXdwb3J0U3RhcnRNb2RlbFBvc2l0aW9uID0gbnVsbDsKICAgICAgaWYgKHRoaXMuX3ZpZXdwb3J0U3RhcnQuaXNWYWxpZCkgewogICAgICAgIHZhciBwcmV2aW91c1ZpZXdwb3J0U3RhcnRWaWV3UG9zaXRpb24gPSBuZXcgUG9zaXRpb24odGhpcy5fdmlld3BvcnRTdGFydC52aWV3TGluZU51bWJlciwgdGhpcy5nZXRMaW5lTWluQ29sdW1uKHRoaXMuX3ZpZXdwb3J0U3RhcnQudmlld0xpbmVOdW1iZXIpKTsKICAgICAgICBwcmV2aW91c1ZpZXdwb3J0U3RhcnRNb2RlbFBvc2l0aW9uID0gdGhpcy5jb29yZGluYXRlc0NvbnZlcnRlci5jb252ZXJ0Vmlld1Bvc2l0aW9uVG9Nb2RlbFBvc2l0aW9uKHByZXZpb3VzVmlld3BvcnRTdGFydFZpZXdQb3NpdGlvbik7CiAgICAgIH0KICAgICAgdmFyIHJlc3RvcmVQcmV2aW91c1ZpZXdwb3J0U3RhcnQgPSBmYWxzZTsKICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLl9jb25maWd1cmF0aW9uLm9wdGlvbnM7CiAgICAgIHZhciBmb250SW5mbyA9IG9wdGlvbnMuZ2V0KDQ2IC8qIEVkaXRvck9wdGlvbi5mb250SW5mbyAqLyk7CiAgICAgIHZhciB3cmFwcGluZ1N0cmF0ZWd5ID0gb3B0aW9ucy5nZXQoMTI3IC8qIEVkaXRvck9wdGlvbi53cmFwcGluZ1N0cmF0ZWd5ICovKTsKICAgICAgdmFyIHdyYXBwaW5nSW5mbyA9IG9wdGlvbnMuZ2V0KDEzNCAvKiBFZGl0b3JPcHRpb24ud3JhcHBpbmdJbmZvICovKTsKICAgICAgdmFyIHdyYXBwaW5nSW5kZW50ID0gb3B0aW9ucy5nZXQoMTI2IC8qIEVkaXRvck9wdGlvbi53cmFwcGluZ0luZGVudCAqLyk7CiAgICAgIGlmICh0aGlzLl9saW5lcy5zZXRXcmFwcGluZ1NldHRpbmdzKGZvbnRJbmZvLCB3cmFwcGluZ1N0cmF0ZWd5LCB3cmFwcGluZ0luZm8ud3JhcHBpbmdDb2x1bW4sIHdyYXBwaW5nSW5kZW50KSkgewogICAgICAgIGV2ZW50c0NvbGxlY3Rvci5lbWl0Vmlld0V2ZW50KG5ldyB2aWV3RXZlbnRzLlZpZXdGbHVzaGVkRXZlbnQoKSk7CiAgICAgICAgZXZlbnRzQ29sbGVjdG9yLmVtaXRWaWV3RXZlbnQobmV3IHZpZXdFdmVudHMuVmlld0xpbmVNYXBwaW5nQ2hhbmdlZEV2ZW50KCkpOwogICAgICAgIGV2ZW50c0NvbGxlY3Rvci5lbWl0Vmlld0V2ZW50KG5ldyB2aWV3RXZlbnRzLlZpZXdEZWNvcmF0aW9uc0NoYW5nZWRFdmVudChudWxsKSk7CiAgICAgICAgdGhpcy5fY3Vyc29yLm9uTGluZU1hcHBpbmdDaGFuZ2VkKGV2ZW50c0NvbGxlY3Rvcik7CiAgICAgICAgdGhpcy5fZGVjb3JhdGlvbnMub25MaW5lTWFwcGluZ0NoYW5nZWQoKTsKICAgICAgICB0aGlzLnZpZXdMYXlvdXQub25GbHVzaGVkKHRoaXMuZ2V0TGluZUNvdW50KCkpOwogICAgICAgIGlmICh0aGlzLnZpZXdMYXlvdXQuZ2V0Q3VycmVudFNjcm9sbFRvcCgpICE9PSAwKSB7CiAgICAgICAgICAvLyBOZXZlciBjaGFuZ2UgdGhlIHNjcm9sbCBwb3NpdGlvbiBmcm9tIDAgdG8gc29tZXRoaW5nIGVsc2UuLi4KICAgICAgICAgIHJlc3RvcmVQcmV2aW91c1ZpZXdwb3J0U3RhcnQgPSB0cnVlOwogICAgICAgIH0KICAgICAgICB0aGlzLl91cGRhdGVDb25maWd1cmF0aW9uVmlld0xpbmVDb3VudC5zY2hlZHVsZSgpOwogICAgICB9CiAgICAgIGlmIChlLmhhc0NoYW5nZWQoODMgLyogRWRpdG9yT3B0aW9uLnJlYWRPbmx5ICovKSkgewogICAgICAgIC8vIE11c3QgcmVhZCBhZ2FpbiBhbGwgZGVjb3JhdGlvbnMgZHVlIHRvIHJlYWRPbmx5IGZpbHRlcmluZwogICAgICAgIHRoaXMuX2RlY29yYXRpb25zLnJlc2V0KCk7CiAgICAgICAgZXZlbnRzQ29sbGVjdG9yLmVtaXRWaWV3RXZlbnQobmV3IHZpZXdFdmVudHMuVmlld0RlY29yYXRpb25zQ2hhbmdlZEV2ZW50KG51bGwpKTsKICAgICAgfQogICAgICBldmVudHNDb2xsZWN0b3IuZW1pdFZpZXdFdmVudChuZXcgdmlld0V2ZW50cy5WaWV3Q29uZmlndXJhdGlvbkNoYW5nZWRFdmVudChlKSk7CiAgICAgIHRoaXMudmlld0xheW91dC5vbkNvbmZpZ3VyYXRpb25DaGFuZ2VkKGUpOwogICAgICBpZiAocmVzdG9yZVByZXZpb3VzVmlld3BvcnRTdGFydCAmJiBwcmV2aW91c1ZpZXdwb3J0U3RhcnRNb2RlbFBvc2l0aW9uKSB7CiAgICAgICAgdmFyIHZpZXdQb3NpdGlvbiA9IHRoaXMuY29vcmRpbmF0ZXNDb252ZXJ0ZXIuY29udmVydE1vZGVsUG9zaXRpb25Ub1ZpZXdQb3NpdGlvbihwcmV2aW91c1ZpZXdwb3J0U3RhcnRNb2RlbFBvc2l0aW9uKTsKICAgICAgICB2YXIgdmlld1Bvc2l0aW9uVG9wID0gdGhpcy52aWV3TGF5b3V0LmdldFZlcnRpY2FsT2Zmc2V0Rm9yTGluZU51bWJlcih2aWV3UG9zaXRpb24ubGluZU51bWJlcik7CiAgICAgICAgdGhpcy52aWV3TGF5b3V0LnNldFNjcm9sbFBvc2l0aW9uKHsKICAgICAgICAgIHNjcm9sbFRvcDogdmlld1Bvc2l0aW9uVG9wICsgdGhpcy5fdmlld3BvcnRTdGFydC5zdGFydExpbmVEZWx0YQogICAgICAgIH0sIDEgLyogU2Nyb2xsVHlwZS5JbW1lZGlhdGUgKi8pOwogICAgICB9CgogICAgICBpZiAoQ3Vyc29yQ29uZmlndXJhdGlvbi5zaG91bGRSZWNyZWF0ZShlKSkgewogICAgICAgIHRoaXMuY3Vyc29yQ29uZmlnID0gbmV3IEN1cnNvckNvbmZpZ3VyYXRpb24odGhpcy5tb2RlbC5nZXRMYW5ndWFnZUlkKCksIHRoaXMubW9kZWwuZ2V0T3B0aW9ucygpLCB0aGlzLl9jb25maWd1cmF0aW9uLCB0aGlzLmxhbmd1YWdlQ29uZmlndXJhdGlvblNlcnZpY2UpOwogICAgICAgIHRoaXMuX2N1cnNvci51cGRhdGVDb25maWd1cmF0aW9uKHRoaXMuY3Vyc29yQ29uZmlnKTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogIl9yZWdpc3Rlck1vZGVsRXZlbnRzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBfcmVnaXN0ZXJNb2RlbEV2ZW50cygpIHsKICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CiAgICAgIHRoaXMuX3JlZ2lzdGVyKHRoaXMubW9kZWwub25EaWRDaGFuZ2VDb250ZW50T3JJbmplY3RlZFRleHQoZnVuY3Rpb24gKGUpIHsKICAgICAgICB0cnkgewogICAgICAgICAgdmFyIGV2ZW50c0NvbGxlY3RvciA9IF90aGlzMi5fZXZlbnREaXNwYXRjaGVyLmJlZ2luRW1pdFZpZXdFdmVudHMoKTsKICAgICAgICAgIHZhciBoYWRPdGhlck1vZGVsQ2hhbmdlID0gZmFsc2U7CiAgICAgICAgICB2YXIgaGFkTW9kZWxMaW5lQ2hhbmdlVGhhdENoYW5nZWRMaW5lTWFwcGluZyA9IGZhbHNlOwogICAgICAgICAgdmFyIGNoYW5nZXMgPSBlIGluc3RhbmNlb2YgdGV4dE1vZGVsRXZlbnRzLkludGVybmFsTW9kZWxDb250ZW50Q2hhbmdlRXZlbnQgPyBlLnJhd0NvbnRlbnRDaGFuZ2VkRXZlbnQuY2hhbmdlcyA6IGUuY2hhbmdlczsKICAgICAgICAgIHZhciB2ZXJzaW9uSWQgPSBlIGluc3RhbmNlb2YgdGV4dE1vZGVsRXZlbnRzLkludGVybmFsTW9kZWxDb250ZW50Q2hhbmdlRXZlbnQgPyBlLnJhd0NvbnRlbnRDaGFuZ2VkRXZlbnQudmVyc2lvbklkIDogbnVsbDsKICAgICAgICAgIC8vIERvIGEgZmlyc3QgcGFzcyB0byBjb21wdXRlIGxpbmUgbWFwcGluZ3MsIGFuZCBhIHNlY29uZCBwYXNzIHRvIGFjdHVhbGx5IGludGVycHJldCB0aGVtCiAgICAgICAgICB2YXIgbGluZUJyZWFrc0NvbXB1dGVyID0gX3RoaXMyLl9saW5lcy5jcmVhdGVMaW5lQnJlYWtzQ29tcHV0ZXIoKTsKICAgICAgICAgIHZhciBfaXRlcmF0b3IyID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoY2hhbmdlcyksCiAgICAgICAgICAgIF9zdGVwMjsKICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgIGZvciAoX2l0ZXJhdG9yMi5zKCk7ICEoX3N0ZXAyID0gX2l0ZXJhdG9yMi5uKCkpLmRvbmU7KSB7CiAgICAgICAgICAgICAgdmFyIGNoYW5nZSA9IF9zdGVwMi52YWx1ZTsKICAgICAgICAgICAgICBzd2l0Y2ggKGNoYW5nZS5jaGFuZ2VUeXBlKSB7CiAgICAgICAgICAgICAgICBjYXNlIDQgLyogdGV4dE1vZGVsRXZlbnRzLlJhd0NvbnRlbnRDaGFuZ2VkVHlwZS5MaW5lc0luc2VydGVkICovOgogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgbGluZUlkeCA9IDA7IGxpbmVJZHggPCBjaGFuZ2UuZGV0YWlsLmxlbmd0aDsgbGluZUlkeCsrKSB7CiAgICAgICAgICAgICAgICAgICAgICB2YXIgbGluZSA9IGNoYW5nZS5kZXRhaWxbbGluZUlkeF07CiAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5qZWN0ZWRUZXh0ID0gY2hhbmdlLmluamVjdGVkVGV4dHNbbGluZUlkeF07CiAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5qZWN0ZWRUZXh0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGluamVjdGVkVGV4dCA9IGluamVjdGVkVGV4dC5maWx0ZXIoZnVuY3Rpb24gKGVsZW1lbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gIWVsZW1lbnQub3duZXJJZCB8fCBlbGVtZW50Lm93bmVySWQgPT09IF90aGlzMi5fZWRpdG9ySWQ7CiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgbGluZUJyZWFrc0NvbXB1dGVyLmFkZFJlcXVlc3QobGluZSwgaW5qZWN0ZWRUZXh0LCBudWxsKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGNhc2UgMiAvKiB0ZXh0TW9kZWxFdmVudHMuUmF3Q29udGVudENoYW5nZWRUeXBlLkxpbmVDaGFuZ2VkICovOgogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgdmFyIF9pbmplY3RlZFRleHQgPSBudWxsOwogICAgICAgICAgICAgICAgICAgIGlmIChjaGFuZ2UuaW5qZWN0ZWRUZXh0KSB7CiAgICAgICAgICAgICAgICAgICAgICBfaW5qZWN0ZWRUZXh0ID0gY2hhbmdlLmluamVjdGVkVGV4dC5maWx0ZXIoZnVuY3Rpb24gKGVsZW1lbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICFlbGVtZW50Lm93bmVySWQgfHwgZWxlbWVudC5vd25lcklkID09PSBfdGhpczIuX2VkaXRvcklkOwogICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGxpbmVCcmVha3NDb21wdXRlci5hZGRSZXF1ZXN0KGNoYW5nZS5kZXRhaWwsIF9pbmplY3RlZFRleHQsIG51bGwpOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICAgICAgX2l0ZXJhdG9yMi5lKGVycik7CiAgICAgICAgICB9IGZpbmFsbHkgewogICAgICAgICAgICBfaXRlcmF0b3IyLmYoKTsKICAgICAgICAgIH0KICAgICAgICAgIHZhciBsaW5lQnJlYWtzID0gbGluZUJyZWFrc0NvbXB1dGVyLmZpbmFsaXplKCk7CiAgICAgICAgICB2YXIgbGluZUJyZWFrUXVldWUgPSBuZXcgQXJyYXlRdWV1ZShsaW5lQnJlYWtzKTsKICAgICAgICAgIHZhciBfaXRlcmF0b3IzID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoY2hhbmdlcyksCiAgICAgICAgICAgIF9zdGVwMzsKICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgIGZvciAoX2l0ZXJhdG9yMy5zKCk7ICEoX3N0ZXAzID0gX2l0ZXJhdG9yMy5uKCkpLmRvbmU7KSB7CiAgICAgICAgICAgICAgdmFyIF9jaGFuZ2UgPSBfc3RlcDMudmFsdWU7CiAgICAgICAgICAgICAgc3dpdGNoIChfY2hhbmdlLmNoYW5nZVR5cGUpIHsKICAgICAgICAgICAgICAgIGNhc2UgMSAvKiB0ZXh0TW9kZWxFdmVudHMuUmF3Q29udGVudENoYW5nZWRUeXBlLkZsdXNoICovOgogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgX3RoaXMyLl9saW5lcy5vbk1vZGVsRmx1c2hlZCgpOwogICAgICAgICAgICAgICAgICAgIGV2ZW50c0NvbGxlY3Rvci5lbWl0Vmlld0V2ZW50KG5ldyB2aWV3RXZlbnRzLlZpZXdGbHVzaGVkRXZlbnQoKSk7CiAgICAgICAgICAgICAgICAgICAgX3RoaXMyLl9kZWNvcmF0aW9ucy5yZXNldCgpOwogICAgICAgICAgICAgICAgICAgIF90aGlzMi52aWV3TGF5b3V0Lm9uRmx1c2hlZChfdGhpczIuZ2V0TGluZUNvdW50KCkpOwogICAgICAgICAgICAgICAgICAgIGhhZE90aGVyTW9kZWxDaGFuZ2UgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBjYXNlIDMgLyogdGV4dE1vZGVsRXZlbnRzLlJhd0NvbnRlbnRDaGFuZ2VkVHlwZS5MaW5lc0RlbGV0ZWQgKi86CiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICB2YXIgbGluZXNEZWxldGVkRXZlbnQgPSBfdGhpczIuX2xpbmVzLm9uTW9kZWxMaW5lc0RlbGV0ZWQodmVyc2lvbklkLCBfY2hhbmdlLmZyb21MaW5lTnVtYmVyLCBfY2hhbmdlLnRvTGluZU51bWJlcik7CiAgICAgICAgICAgICAgICAgICAgaWYgKGxpbmVzRGVsZXRlZEV2ZW50ICE9PSBudWxsKSB7CiAgICAgICAgICAgICAgICAgICAgICBldmVudHNDb2xsZWN0b3IuZW1pdFZpZXdFdmVudChsaW5lc0RlbGV0ZWRFdmVudCk7CiAgICAgICAgICAgICAgICAgICAgICBfdGhpczIudmlld0xheW91dC5vbkxpbmVzRGVsZXRlZChsaW5lc0RlbGV0ZWRFdmVudC5mcm9tTGluZU51bWJlciwgbGluZXNEZWxldGVkRXZlbnQudG9MaW5lTnVtYmVyKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgaGFkT3RoZXJNb2RlbENoYW5nZSA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGNhc2UgNCAvKiB0ZXh0TW9kZWxFdmVudHMuUmF3Q29udGVudENoYW5nZWRUeXBlLkxpbmVzSW5zZXJ0ZWQgKi86CiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICB2YXIgaW5zZXJ0ZWRMaW5lQnJlYWtzID0gbGluZUJyZWFrUXVldWUudGFrZUNvdW50KF9jaGFuZ2UuZGV0YWlsLmxlbmd0aCk7CiAgICAgICAgICAgICAgICAgICAgdmFyIGxpbmVzSW5zZXJ0ZWRFdmVudCA9IF90aGlzMi5fbGluZXMub25Nb2RlbExpbmVzSW5zZXJ0ZWQodmVyc2lvbklkLCBfY2hhbmdlLmZyb21MaW5lTnVtYmVyLCBfY2hhbmdlLnRvTGluZU51bWJlciwgaW5zZXJ0ZWRMaW5lQnJlYWtzKTsKICAgICAgICAgICAgICAgICAgICBpZiAobGluZXNJbnNlcnRlZEV2ZW50ICE9PSBudWxsKSB7CiAgICAgICAgICAgICAgICAgICAgICBldmVudHNDb2xsZWN0b3IuZW1pdFZpZXdFdmVudChsaW5lc0luc2VydGVkRXZlbnQpOwogICAgICAgICAgICAgICAgICAgICAgX3RoaXMyLnZpZXdMYXlvdXQub25MaW5lc0luc2VydGVkKGxpbmVzSW5zZXJ0ZWRFdmVudC5mcm9tTGluZU51bWJlciwgbGluZXNJbnNlcnRlZEV2ZW50LnRvTGluZU51bWJlcik7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGhhZE90aGVyTW9kZWxDaGFuZ2UgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBjYXNlIDIgLyogdGV4dE1vZGVsRXZlbnRzLlJhd0NvbnRlbnRDaGFuZ2VkVHlwZS5MaW5lQ2hhbmdlZCAqLzoKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIHZhciBjaGFuZ2VkTGluZUJyZWFrRGF0YSA9IGxpbmVCcmVha1F1ZXVlLmRlcXVldWUoKTsKICAgICAgICAgICAgICAgICAgICB2YXIgX3RoaXMyJF9saW5lcyRvbk1vZGVsID0gX3RoaXMyLl9saW5lcy5vbk1vZGVsTGluZUNoYW5nZWQodmVyc2lvbklkLCBfY2hhbmdlLmxpbmVOdW1iZXIsIGNoYW5nZWRMaW5lQnJlYWtEYXRhKSwKICAgICAgICAgICAgICAgICAgICAgIF90aGlzMiRfbGluZXMkb25Nb2RlbDIgPSBfc2xpY2VkVG9BcnJheShfdGhpczIkX2xpbmVzJG9uTW9kZWwsIDQpLAogICAgICAgICAgICAgICAgICAgICAgbGluZU1hcHBpbmdDaGFuZ2VkID0gX3RoaXMyJF9saW5lcyRvbk1vZGVsMlswXSwKICAgICAgICAgICAgICAgICAgICAgIGxpbmVzQ2hhbmdlZEV2ZW50ID0gX3RoaXMyJF9saW5lcyRvbk1vZGVsMlsxXSwKICAgICAgICAgICAgICAgICAgICAgIF9saW5lc0luc2VydGVkRXZlbnQgPSBfdGhpczIkX2xpbmVzJG9uTW9kZWwyWzJdLAogICAgICAgICAgICAgICAgICAgICAgX2xpbmVzRGVsZXRlZEV2ZW50ID0gX3RoaXMyJF9saW5lcyRvbk1vZGVsMlszXTsKICAgICAgICAgICAgICAgICAgICBoYWRNb2RlbExpbmVDaGFuZ2VUaGF0Q2hhbmdlZExpbmVNYXBwaW5nID0gbGluZU1hcHBpbmdDaGFuZ2VkOwogICAgICAgICAgICAgICAgICAgIGlmIChsaW5lc0NoYW5nZWRFdmVudCkgewogICAgICAgICAgICAgICAgICAgICAgZXZlbnRzQ29sbGVjdG9yLmVtaXRWaWV3RXZlbnQobGluZXNDaGFuZ2VkRXZlbnQpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpZiAoX2xpbmVzSW5zZXJ0ZWRFdmVudCkgewogICAgICAgICAgICAgICAgICAgICAgZXZlbnRzQ29sbGVjdG9yLmVtaXRWaWV3RXZlbnQoX2xpbmVzSW5zZXJ0ZWRFdmVudCk7CiAgICAgICAgICAgICAgICAgICAgICBfdGhpczIudmlld0xheW91dC5vbkxpbmVzSW5zZXJ0ZWQoX2xpbmVzSW5zZXJ0ZWRFdmVudC5mcm9tTGluZU51bWJlciwgX2xpbmVzSW5zZXJ0ZWRFdmVudC50b0xpbmVOdW1iZXIpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpZiAoX2xpbmVzRGVsZXRlZEV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICBldmVudHNDb2xsZWN0b3IuZW1pdFZpZXdFdmVudChfbGluZXNEZWxldGVkRXZlbnQpOwogICAgICAgICAgICAgICAgICAgICAgX3RoaXMyLnZpZXdMYXlvdXQub25MaW5lc0RlbGV0ZWQoX2xpbmVzRGVsZXRlZEV2ZW50LmZyb21MaW5lTnVtYmVyLCBfbGluZXNEZWxldGVkRXZlbnQudG9MaW5lTnVtYmVyKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGNhc2UgNSAvKiB0ZXh0TW9kZWxFdmVudHMuUmF3Q29udGVudENoYW5nZWRUeXBlLkVPTENoYW5nZWQgKi86CiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAvLyBOb3RoaW5nIHRvIGRvLiBUaGUgbmV3IHZlcnNpb24gd2lsbCBiZSBhY2NlcHRlZCBiZWxvdwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICAgICAgX2l0ZXJhdG9yMy5lKGVycik7CiAgICAgICAgICB9IGZpbmFsbHkgewogICAgICAgICAgICBfaXRlcmF0b3IzLmYoKTsKICAgICAgICAgIH0KICAgICAgICAgIGlmICh2ZXJzaW9uSWQgIT09IG51bGwpIHsKICAgICAgICAgICAgX3RoaXMyLl9saW5lcy5hY2NlcHRWZXJzaW9uSWQodmVyc2lvbklkKTsKICAgICAgICAgIH0KICAgICAgICAgIF90aGlzMi52aWV3TGF5b3V0Lm9uSGVpZ2h0TWF5YmVDaGFuZ2VkKCk7CiAgICAgICAgICBpZiAoIWhhZE90aGVyTW9kZWxDaGFuZ2UgJiYgaGFkTW9kZWxMaW5lQ2hhbmdlVGhhdENoYW5nZWRMaW5lTWFwcGluZykgewogICAgICAgICAgICBldmVudHNDb2xsZWN0b3IuZW1pdFZpZXdFdmVudChuZXcgdmlld0V2ZW50cy5WaWV3TGluZU1hcHBpbmdDaGFuZ2VkRXZlbnQoKSk7CiAgICAgICAgICAgIGV2ZW50c0NvbGxlY3Rvci5lbWl0Vmlld0V2ZW50KG5ldyB2aWV3RXZlbnRzLlZpZXdEZWNvcmF0aW9uc0NoYW5nZWRFdmVudChudWxsKSk7CiAgICAgICAgICAgIF90aGlzMi5fY3Vyc29yLm9uTGluZU1hcHBpbmdDaGFuZ2VkKGV2ZW50c0NvbGxlY3Rvcik7CiAgICAgICAgICAgIF90aGlzMi5fZGVjb3JhdGlvbnMub25MaW5lTWFwcGluZ0NoYW5nZWQoKTsKICAgICAgICAgIH0KICAgICAgICB9IGZpbmFsbHkgewogICAgICAgICAgX3RoaXMyLl9ldmVudERpc3BhdGNoZXIuZW5kRW1pdFZpZXdFdmVudHMoKTsKICAgICAgICB9CiAgICAgICAgLy8gVXBkYXRlIHRoZSBjb25maWd1cmF0aW9uIGFuZCByZXNldCB0aGUgY2VudGVyZWQgdmlldyBsaW5lCiAgICAgICAgdmFyIHZpZXdwb3J0U3RhcnRXYXNWYWxpZCA9IF90aGlzMi5fdmlld3BvcnRTdGFydC5pc1ZhbGlkOwogICAgICAgIF90aGlzMi5fdmlld3BvcnRTdGFydC5pbnZhbGlkYXRlKCk7CiAgICAgICAgX3RoaXMyLl9jb25maWd1cmF0aW9uLnNldE1vZGVsTGluZUNvdW50KF90aGlzMi5tb2RlbC5nZXRMaW5lQ291bnQoKSk7CiAgICAgICAgX3RoaXMyLl91cGRhdGVDb25maWd1cmF0aW9uVmlld0xpbmVDb3VudE5vdygpOwogICAgICAgIC8vIFJlY292ZXIgdmlld3BvcnQKICAgICAgICBpZiAoIV90aGlzMi5faGFzRm9jdXMgJiYgX3RoaXMyLm1vZGVsLmdldEF0dGFjaGVkRWRpdG9yQ291bnQoKSA+PSAyICYmIHZpZXdwb3J0U3RhcnRXYXNWYWxpZCkgewogICAgICAgICAgdmFyIG1vZGVsUmFuZ2UgPSBfdGhpczIubW9kZWwuX2dldFRyYWNrZWRSYW5nZShfdGhpczIuX3ZpZXdwb3J0U3RhcnQubW9kZWxUcmFja2VkUmFuZ2UpOwogICAgICAgICAgaWYgKG1vZGVsUmFuZ2UpIHsKICAgICAgICAgICAgdmFyIHZpZXdQb3NpdGlvbiA9IF90aGlzMi5jb29yZGluYXRlc0NvbnZlcnRlci5jb252ZXJ0TW9kZWxQb3NpdGlvblRvVmlld1Bvc2l0aW9uKG1vZGVsUmFuZ2UuZ2V0U3RhcnRQb3NpdGlvbigpKTsKICAgICAgICAgICAgdmFyIHZpZXdQb3NpdGlvblRvcCA9IF90aGlzMi52aWV3TGF5b3V0LmdldFZlcnRpY2FsT2Zmc2V0Rm9yTGluZU51bWJlcih2aWV3UG9zaXRpb24ubGluZU51bWJlcik7CiAgICAgICAgICAgIF90aGlzMi52aWV3TGF5b3V0LnNldFNjcm9sbFBvc2l0aW9uKHsKICAgICAgICAgICAgICBzY3JvbGxUb3A6IHZpZXdQb3NpdGlvblRvcCArIF90aGlzMi5fdmlld3BvcnRTdGFydC5zdGFydExpbmVEZWx0YQogICAgICAgICAgICB9LCAxIC8qIFNjcm9sbFR5cGUuSW1tZWRpYXRlICovKTsKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHRyeSB7CiAgICAgICAgICB2YXIgX2V2ZW50c0NvbGxlY3RvciA9IF90aGlzMi5fZXZlbnREaXNwYXRjaGVyLmJlZ2luRW1pdFZpZXdFdmVudHMoKTsKICAgICAgICAgIGlmIChlIGluc3RhbmNlb2YgdGV4dE1vZGVsRXZlbnRzLkludGVybmFsTW9kZWxDb250ZW50Q2hhbmdlRXZlbnQpIHsKICAgICAgICAgICAgX2V2ZW50c0NvbGxlY3Rvci5lbWl0T3V0Z29pbmdFdmVudChuZXcgTW9kZWxDb250ZW50Q2hhbmdlZEV2ZW50KGUuY29udGVudENoYW5nZWRFdmVudCkpOwogICAgICAgICAgfQogICAgICAgICAgX3RoaXMyLl9jdXJzb3Iub25Nb2RlbENvbnRlbnRDaGFuZ2VkKF9ldmVudHNDb2xsZWN0b3IsIGUpOwogICAgICAgIH0gZmluYWxseSB7CiAgICAgICAgICBfdGhpczIuX2V2ZW50RGlzcGF0Y2hlci5lbmRFbWl0Vmlld0V2ZW50cygpOwogICAgICAgIH0KICAgICAgICBfdGhpczIuX3Rva2VuaXplVmlld3BvcnRTb29uLnNjaGVkdWxlKCk7CiAgICAgIH0pKTsKICAgICAgdGhpcy5fcmVnaXN0ZXIodGhpcy5tb2RlbC5vbkRpZENoYW5nZVRva2VucyhmdW5jdGlvbiAoZSkgewogICAgICAgIHZhciB2aWV3UmFuZ2VzID0gW107CiAgICAgICAgZm9yICh2YXIgaiA9IDAsIGxlbkogPSBlLnJhbmdlcy5sZW5ndGg7IGogPCBsZW5KOyBqKyspIHsKICAgICAgICAgIHZhciBtb2RlbFJhbmdlID0gZS5yYW5nZXNbal07CiAgICAgICAgICB2YXIgdmlld1N0YXJ0TGluZU51bWJlciA9IF90aGlzMi5jb29yZGluYXRlc0NvbnZlcnRlci5jb252ZXJ0TW9kZWxQb3NpdGlvblRvVmlld1Bvc2l0aW9uKG5ldyBQb3NpdGlvbihtb2RlbFJhbmdlLmZyb21MaW5lTnVtYmVyLCAxKSkubGluZU51bWJlcjsKICAgICAgICAgIHZhciB2aWV3RW5kTGluZU51bWJlciA9IF90aGlzMi5jb29yZGluYXRlc0NvbnZlcnRlci5jb252ZXJ0TW9kZWxQb3NpdGlvblRvVmlld1Bvc2l0aW9uKG5ldyBQb3NpdGlvbihtb2RlbFJhbmdlLnRvTGluZU51bWJlciwgX3RoaXMyLm1vZGVsLmdldExpbmVNYXhDb2x1bW4obW9kZWxSYW5nZS50b0xpbmVOdW1iZXIpKSkubGluZU51bWJlcjsKICAgICAgICAgIHZpZXdSYW5nZXNbal0gPSB7CiAgICAgICAgICAgIGZyb21MaW5lTnVtYmVyOiB2aWV3U3RhcnRMaW5lTnVtYmVyLAogICAgICAgICAgICB0b0xpbmVOdW1iZXI6IHZpZXdFbmRMaW5lTnVtYmVyCiAgICAgICAgICB9OwogICAgICAgIH0KICAgICAgICBfdGhpczIuX2V2ZW50RGlzcGF0Y2hlci5lbWl0U2luZ2xlVmlld0V2ZW50KG5ldyB2aWV3RXZlbnRzLlZpZXdUb2tlbnNDaGFuZ2VkRXZlbnQodmlld1JhbmdlcykpOwogICAgICAgIGlmIChlLnRva2VuaXphdGlvblN1cHBvcnRDaGFuZ2VkKSB7CiAgICAgICAgICBfdGhpczIuX3Rva2VuaXplVmlld3BvcnRTb29uLnNjaGVkdWxlKCk7CiAgICAgICAgfQogICAgICAgIF90aGlzMi5fZXZlbnREaXNwYXRjaGVyLmVtaXRPdXRnb2luZ0V2ZW50KG5ldyBNb2RlbFRva2Vuc0NoYW5nZWRFdmVudChlKSk7CiAgICAgIH0pKTsKICAgICAgdGhpcy5fcmVnaXN0ZXIodGhpcy5tb2RlbC5vbkRpZENoYW5nZUxhbmd1YWdlQ29uZmlndXJhdGlvbihmdW5jdGlvbiAoZSkgewogICAgICAgIF90aGlzMi5fZXZlbnREaXNwYXRjaGVyLmVtaXRTaW5nbGVWaWV3RXZlbnQobmV3IHZpZXdFdmVudHMuVmlld0xhbmd1YWdlQ29uZmlndXJhdGlvbkV2ZW50KCkpOwogICAgICAgIF90aGlzMi5jdXJzb3JDb25maWcgPSBuZXcgQ3Vyc29yQ29uZmlndXJhdGlvbihfdGhpczIubW9kZWwuZ2V0TGFuZ3VhZ2VJZCgpLCBfdGhpczIubW9kZWwuZ2V0T3B0aW9ucygpLCBfdGhpczIuX2NvbmZpZ3VyYXRpb24sIF90aGlzMi5sYW5ndWFnZUNvbmZpZ3VyYXRpb25TZXJ2aWNlKTsKICAgICAgICBfdGhpczIuX2N1cnNvci51cGRhdGVDb25maWd1cmF0aW9uKF90aGlzMi5jdXJzb3JDb25maWcpOwogICAgICAgIF90aGlzMi5fZXZlbnREaXNwYXRjaGVyLmVtaXRPdXRnb2luZ0V2ZW50KG5ldyBNb2RlbExhbmd1YWdlQ29uZmlndXJhdGlvbkNoYW5nZWRFdmVudChlKSk7CiAgICAgIH0pKTsKICAgICAgdGhpcy5fcmVnaXN0ZXIodGhpcy5tb2RlbC5vbkRpZENoYW5nZUxhbmd1YWdlKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgX3RoaXMyLmN1cnNvckNvbmZpZyA9IG5ldyBDdXJzb3JDb25maWd1cmF0aW9uKF90aGlzMi5tb2RlbC5nZXRMYW5ndWFnZUlkKCksIF90aGlzMi5tb2RlbC5nZXRPcHRpb25zKCksIF90aGlzMi5fY29uZmlndXJhdGlvbiwgX3RoaXMyLmxhbmd1YWdlQ29uZmlndXJhdGlvblNlcnZpY2UpOwogICAgICAgIF90aGlzMi5fY3Vyc29yLnVwZGF0ZUNvbmZpZ3VyYXRpb24oX3RoaXMyLmN1cnNvckNvbmZpZyk7CiAgICAgICAgX3RoaXMyLl9ldmVudERpc3BhdGNoZXIuZW1pdE91dGdvaW5nRXZlbnQobmV3IE1vZGVsTGFuZ3VhZ2VDaGFuZ2VkRXZlbnQoZSkpOwogICAgICB9KSk7CiAgICAgIHRoaXMuX3JlZ2lzdGVyKHRoaXMubW9kZWwub25EaWRDaGFuZ2VPcHRpb25zKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgLy8gQSB0YWIgc2l6ZSBjaGFuZ2UgY2F1c2VzIGEgbGluZSBtYXBwaW5nIGNoYW5nZWQgZXZlbnQgPT4gYWxsIHZpZXcgcGFydHMgd2lsbCByZXBhaW50IE9LLCBubyBmdXJ0aGVyIGV2ZW50IG5lZWRlZCBoZXJlCiAgICAgICAgaWYgKF90aGlzMi5fbGluZXMuc2V0VGFiU2l6ZShfdGhpczIubW9kZWwuZ2V0T3B0aW9ucygpLnRhYlNpemUpKSB7CiAgICAgICAgICB0cnkgewogICAgICAgICAgICB2YXIgZXZlbnRzQ29sbGVjdG9yID0gX3RoaXMyLl9ldmVudERpc3BhdGNoZXIuYmVnaW5FbWl0Vmlld0V2ZW50cygpOwogICAgICAgICAgICBldmVudHNDb2xsZWN0b3IuZW1pdFZpZXdFdmVudChuZXcgdmlld0V2ZW50cy5WaWV3Rmx1c2hlZEV2ZW50KCkpOwogICAgICAgICAgICBldmVudHNDb2xsZWN0b3IuZW1pdFZpZXdFdmVudChuZXcgdmlld0V2ZW50cy5WaWV3TGluZU1hcHBpbmdDaGFuZ2VkRXZlbnQoKSk7CiAgICAgICAgICAgIGV2ZW50c0NvbGxlY3Rvci5lbWl0Vmlld0V2ZW50KG5ldyB2aWV3RXZlbnRzLlZpZXdEZWNvcmF0aW9uc0NoYW5nZWRFdmVudChudWxsKSk7CiAgICAgICAgICAgIF90aGlzMi5fY3Vyc29yLm9uTGluZU1hcHBpbmdDaGFuZ2VkKGV2ZW50c0NvbGxlY3Rvcik7CiAgICAgICAgICAgIF90aGlzMi5fZGVjb3JhdGlvbnMub25MaW5lTWFwcGluZ0NoYW5nZWQoKTsKICAgICAgICAgICAgX3RoaXMyLnZpZXdMYXlvdXQub25GbHVzaGVkKF90aGlzMi5nZXRMaW5lQ291bnQoKSk7CiAgICAgICAgICB9IGZpbmFsbHkgewogICAgICAgICAgICBfdGhpczIuX2V2ZW50RGlzcGF0Y2hlci5lbmRFbWl0Vmlld0V2ZW50cygpOwogICAgICAgICAgfQogICAgICAgICAgX3RoaXMyLl91cGRhdGVDb25maWd1cmF0aW9uVmlld0xpbmVDb3VudC5zY2hlZHVsZSgpOwogICAgICAgIH0KICAgICAgICBfdGhpczIuY3Vyc29yQ29uZmlnID0gbmV3IEN1cnNvckNvbmZpZ3VyYXRpb24oX3RoaXMyLm1vZGVsLmdldExhbmd1YWdlSWQoKSwgX3RoaXMyLm1vZGVsLmdldE9wdGlvbnMoKSwgX3RoaXMyLl9jb25maWd1cmF0aW9uLCBfdGhpczIubGFuZ3VhZ2VDb25maWd1cmF0aW9uU2VydmljZSk7CiAgICAgICAgX3RoaXMyLl9jdXJzb3IudXBkYXRlQ29uZmlndXJhdGlvbihfdGhpczIuY3Vyc29yQ29uZmlnKTsKICAgICAgICBfdGhpczIuX2V2ZW50RGlzcGF0Y2hlci5lbWl0T3V0Z29pbmdFdmVudChuZXcgTW9kZWxPcHRpb25zQ2hhbmdlZEV2ZW50KGUpKTsKICAgICAgfSkpOwogICAgICB0aGlzLl9yZWdpc3Rlcih0aGlzLm1vZGVsLm9uRGlkQ2hhbmdlRGVjb3JhdGlvbnMoZnVuY3Rpb24gKGUpIHsKICAgICAgICBfdGhpczIuX2RlY29yYXRpb25zLm9uTW9kZWxEZWNvcmF0aW9uc0NoYW5nZWQoKTsKICAgICAgICBfdGhpczIuX2V2ZW50RGlzcGF0Y2hlci5lbWl0U2luZ2xlVmlld0V2ZW50KG5ldyB2aWV3RXZlbnRzLlZpZXdEZWNvcmF0aW9uc0NoYW5nZWRFdmVudChlKSk7CiAgICAgICAgX3RoaXMyLl9ldmVudERpc3BhdGNoZXIuZW1pdE91dGdvaW5nRXZlbnQobmV3IE1vZGVsRGVjb3JhdGlvbnNDaGFuZ2VkRXZlbnQoZSkpOwogICAgICB9KSk7CiAgICB9CiAgfSwgewogICAga2V5OiAic2V0SGlkZGVuQXJlYXMiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHNldEhpZGRlbkFyZWFzKHJhbmdlcykgewogICAgICB2YXIgbGluZU1hcHBpbmdDaGFuZ2VkID0gZmFsc2U7CiAgICAgIHRyeSB7CiAgICAgICAgdmFyIGV2ZW50c0NvbGxlY3RvciA9IHRoaXMuX2V2ZW50RGlzcGF0Y2hlci5iZWdpbkVtaXRWaWV3RXZlbnRzKCk7CiAgICAgICAgbGluZU1hcHBpbmdDaGFuZ2VkID0gdGhpcy5fbGluZXMuc2V0SGlkZGVuQXJlYXMocmFuZ2VzKTsKICAgICAgICBpZiAobGluZU1hcHBpbmdDaGFuZ2VkKSB7CiAgICAgICAgICBldmVudHNDb2xsZWN0b3IuZW1pdFZpZXdFdmVudChuZXcgdmlld0V2ZW50cy5WaWV3Rmx1c2hlZEV2ZW50KCkpOwogICAgICAgICAgZXZlbnRzQ29sbGVjdG9yLmVtaXRWaWV3RXZlbnQobmV3IHZpZXdFdmVudHMuVmlld0xpbmVNYXBwaW5nQ2hhbmdlZEV2ZW50KCkpOwogICAgICAgICAgZXZlbnRzQ29sbGVjdG9yLmVtaXRWaWV3RXZlbnQobmV3IHZpZXdFdmVudHMuVmlld0RlY29yYXRpb25zQ2hhbmdlZEV2ZW50KG51bGwpKTsKICAgICAgICAgIHRoaXMuX2N1cnNvci5vbkxpbmVNYXBwaW5nQ2hhbmdlZChldmVudHNDb2xsZWN0b3IpOwogICAgICAgICAgdGhpcy5fZGVjb3JhdGlvbnMub25MaW5lTWFwcGluZ0NoYW5nZWQoKTsKICAgICAgICAgIHRoaXMudmlld0xheW91dC5vbkZsdXNoZWQodGhpcy5nZXRMaW5lQ291bnQoKSk7CiAgICAgICAgICB0aGlzLnZpZXdMYXlvdXQub25IZWlnaHRNYXliZUNoYW5nZWQoKTsKICAgICAgICB9CiAgICAgIH0gZmluYWxseSB7CiAgICAgICAgdGhpcy5fZXZlbnREaXNwYXRjaGVyLmVuZEVtaXRWaWV3RXZlbnRzKCk7CiAgICAgIH0KICAgICAgdGhpcy5fdXBkYXRlQ29uZmlndXJhdGlvblZpZXdMaW5lQ291bnQuc2NoZWR1bGUoKTsKICAgICAgaWYgKGxpbmVNYXBwaW5nQ2hhbmdlZCkgewogICAgICAgIHRoaXMuX2V2ZW50RGlzcGF0Y2hlci5lbWl0T3V0Z29pbmdFdmVudChuZXcgSGlkZGVuQXJlYXNDaGFuZ2VkRXZlbnQoKSk7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJnZXRWaXNpYmxlUmFuZ2VzUGx1c1ZpZXdwb3J0QWJvdmVCZWxvdyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0VmlzaWJsZVJhbmdlc1BsdXNWaWV3cG9ydEFib3ZlQmVsb3coKSB7CiAgICAgIHZhciBsYXlvdXRJbmZvID0gdGhpcy5fY29uZmlndXJhdGlvbi5vcHRpb25zLmdldCgxMzMgLyogRWRpdG9yT3B0aW9uLmxheW91dEluZm8gKi8pOwogICAgICB2YXIgbGluZUhlaWdodCA9IHRoaXMuX2NvbmZpZ3VyYXRpb24ub3B0aW9ucy5nZXQoNjEgLyogRWRpdG9yT3B0aW9uLmxpbmVIZWlnaHQgKi8pOwogICAgICB2YXIgbGluZXNBcm91bmQgPSBNYXRoLm1heCgyMCwgTWF0aC5yb3VuZChsYXlvdXRJbmZvLmhlaWdodCAvIGxpbmVIZWlnaHQpKTsKICAgICAgdmFyIHBhcnRpYWxEYXRhID0gdGhpcy52aWV3TGF5b3V0LmdldExpbmVzVmlld3BvcnREYXRhKCk7CiAgICAgIHZhciBzdGFydFZpZXdMaW5lTnVtYmVyID0gTWF0aC5tYXgoMSwgcGFydGlhbERhdGEuY29tcGxldGVseVZpc2libGVTdGFydExpbmVOdW1iZXIgLSBsaW5lc0Fyb3VuZCk7CiAgICAgIHZhciBlbmRWaWV3TGluZU51bWJlciA9IE1hdGgubWluKHRoaXMuZ2V0TGluZUNvdW50KCksIHBhcnRpYWxEYXRhLmNvbXBsZXRlbHlWaXNpYmxlRW5kTGluZU51bWJlciArIGxpbmVzQXJvdW5kKTsKICAgICAgcmV0dXJuIHRoaXMuX3RvTW9kZWxWaXNpYmxlUmFuZ2VzKG5ldyBSYW5nZShzdGFydFZpZXdMaW5lTnVtYmVyLCB0aGlzLmdldExpbmVNaW5Db2x1bW4oc3RhcnRWaWV3TGluZU51bWJlciksIGVuZFZpZXdMaW5lTnVtYmVyLCB0aGlzLmdldExpbmVNYXhDb2x1bW4oZW5kVmlld0xpbmVOdW1iZXIpKSk7CiAgICB9CiAgfSwgewogICAga2V5OiAiZ2V0VmlzaWJsZVJhbmdlcyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0VmlzaWJsZVJhbmdlcygpIHsKICAgICAgdmFyIHZpc2libGVWaWV3UmFuZ2UgPSB0aGlzLmdldENvbXBsZXRlbHlWaXNpYmxlVmlld1JhbmdlKCk7CiAgICAgIHJldHVybiB0aGlzLl90b01vZGVsVmlzaWJsZVJhbmdlcyh2aXNpYmxlVmlld1JhbmdlKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJnZXRIaWRkZW5BcmVhcyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0SGlkZGVuQXJlYXMoKSB7CiAgICAgIHJldHVybiB0aGlzLl9saW5lcy5nZXRIaWRkZW5BcmVhcygpOwogICAgfQogIH0sIHsKICAgIGtleTogIl90b01vZGVsVmlzaWJsZVJhbmdlcyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX3RvTW9kZWxWaXNpYmxlUmFuZ2VzKHZpc2libGVWaWV3UmFuZ2UpIHsKICAgICAgdmFyIHZpc2libGVSYW5nZSA9IHRoaXMuY29vcmRpbmF0ZXNDb252ZXJ0ZXIuY29udmVydFZpZXdSYW5nZVRvTW9kZWxSYW5nZSh2aXNpYmxlVmlld1JhbmdlKTsKICAgICAgdmFyIGhpZGRlbkFyZWFzID0gdGhpcy5fbGluZXMuZ2V0SGlkZGVuQXJlYXMoKTsKICAgICAgaWYgKGhpZGRlbkFyZWFzLmxlbmd0aCA9PT0gMCkgewogICAgICAgIHJldHVybiBbdmlzaWJsZVJhbmdlXTsKICAgICAgfQogICAgICB2YXIgcmVzdWx0ID0gW107CiAgICAgIHZhciByZXN1bHRMZW4gPSAwOwogICAgICB2YXIgc3RhcnRMaW5lTnVtYmVyID0gdmlzaWJsZVJhbmdlLnN0YXJ0TGluZU51bWJlcjsKICAgICAgdmFyIHN0YXJ0Q29sdW1uID0gdmlzaWJsZVJhbmdlLnN0YXJ0Q29sdW1uOwogICAgICB2YXIgZW5kTGluZU51bWJlciA9IHZpc2libGVSYW5nZS5lbmRMaW5lTnVtYmVyOwogICAgICB2YXIgZW5kQ29sdW1uID0gdmlzaWJsZVJhbmdlLmVuZENvbHVtbjsKICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGhpZGRlbkFyZWFzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7CiAgICAgICAgdmFyIGhpZGRlblN0YXJ0TGluZU51bWJlciA9IGhpZGRlbkFyZWFzW2ldLnN0YXJ0TGluZU51bWJlcjsKICAgICAgICB2YXIgaGlkZGVuRW5kTGluZU51bWJlciA9IGhpZGRlbkFyZWFzW2ldLmVuZExpbmVOdW1iZXI7CiAgICAgICAgaWYgKGhpZGRlbkVuZExpbmVOdW1iZXIgPCBzdGFydExpbmVOdW1iZXIpIHsKICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgIH0KICAgICAgICBpZiAoaGlkZGVuU3RhcnRMaW5lTnVtYmVyID4gZW5kTGluZU51bWJlcikgewogICAgICAgICAgY29udGludWU7CiAgICAgICAgfQogICAgICAgIGlmIChzdGFydExpbmVOdW1iZXIgPCBoaWRkZW5TdGFydExpbmVOdW1iZXIpIHsKICAgICAgICAgIHJlc3VsdFtyZXN1bHRMZW4rK10gPSBuZXcgUmFuZ2Uoc3RhcnRMaW5lTnVtYmVyLCBzdGFydENvbHVtbiwgaGlkZGVuU3RhcnRMaW5lTnVtYmVyIC0gMSwgdGhpcy5tb2RlbC5nZXRMaW5lTWF4Q29sdW1uKGhpZGRlblN0YXJ0TGluZU51bWJlciAtIDEpKTsKICAgICAgICB9CiAgICAgICAgc3RhcnRMaW5lTnVtYmVyID0gaGlkZGVuRW5kTGluZU51bWJlciArIDE7CiAgICAgICAgc3RhcnRDb2x1bW4gPSAxOwogICAgICB9CiAgICAgIGlmIChzdGFydExpbmVOdW1iZXIgPCBlbmRMaW5lTnVtYmVyIHx8IHN0YXJ0TGluZU51bWJlciA9PT0gZW5kTGluZU51bWJlciAmJiBzdGFydENvbHVtbiA8IGVuZENvbHVtbikgewogICAgICAgIHJlc3VsdFtyZXN1bHRMZW4rK10gPSBuZXcgUmFuZ2Uoc3RhcnRMaW5lTnVtYmVyLCBzdGFydENvbHVtbiwgZW5kTGluZU51bWJlciwgZW5kQ29sdW1uKTsKICAgICAgfQogICAgICByZXR1cm4gcmVzdWx0OwogICAgfQogIH0sIHsKICAgIGtleTogImdldENvbXBsZXRlbHlWaXNpYmxlVmlld1JhbmdlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRDb21wbGV0ZWx5VmlzaWJsZVZpZXdSYW5nZSgpIHsKICAgICAgdmFyIHBhcnRpYWxEYXRhID0gdGhpcy52aWV3TGF5b3V0LmdldExpbmVzVmlld3BvcnREYXRhKCk7CiAgICAgIHZhciBzdGFydFZpZXdMaW5lTnVtYmVyID0gcGFydGlhbERhdGEuY29tcGxldGVseVZpc2libGVTdGFydExpbmVOdW1iZXI7CiAgICAgIHZhciBlbmRWaWV3TGluZU51bWJlciA9IHBhcnRpYWxEYXRhLmNvbXBsZXRlbHlWaXNpYmxlRW5kTGluZU51bWJlcjsKICAgICAgcmV0dXJuIG5ldyBSYW5nZShzdGFydFZpZXdMaW5lTnVtYmVyLCB0aGlzLmdldExpbmVNaW5Db2x1bW4oc3RhcnRWaWV3TGluZU51bWJlciksIGVuZFZpZXdMaW5lTnVtYmVyLCB0aGlzLmdldExpbmVNYXhDb2x1bW4oZW5kVmlld0xpbmVOdW1iZXIpKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJnZXRDb21wbGV0ZWx5VmlzaWJsZVZpZXdSYW5nZUF0U2Nyb2xsVG9wIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRDb21wbGV0ZWx5VmlzaWJsZVZpZXdSYW5nZUF0U2Nyb2xsVG9wKHNjcm9sbFRvcCkgewogICAgICB2YXIgcGFydGlhbERhdGEgPSB0aGlzLnZpZXdMYXlvdXQuZ2V0TGluZXNWaWV3cG9ydERhdGFBdFNjcm9sbFRvcChzY3JvbGxUb3ApOwogICAgICB2YXIgc3RhcnRWaWV3TGluZU51bWJlciA9IHBhcnRpYWxEYXRhLmNvbXBsZXRlbHlWaXNpYmxlU3RhcnRMaW5lTnVtYmVyOwogICAgICB2YXIgZW5kVmlld0xpbmVOdW1iZXIgPSBwYXJ0aWFsRGF0YS5jb21wbGV0ZWx5VmlzaWJsZUVuZExpbmVOdW1iZXI7CiAgICAgIHJldHVybiBuZXcgUmFuZ2Uoc3RhcnRWaWV3TGluZU51bWJlciwgdGhpcy5nZXRMaW5lTWluQ29sdW1uKHN0YXJ0Vmlld0xpbmVOdW1iZXIpLCBlbmRWaWV3TGluZU51bWJlciwgdGhpcy5nZXRMaW5lTWF4Q29sdW1uKGVuZFZpZXdMaW5lTnVtYmVyKSk7CiAgICB9CiAgfSwgewogICAga2V5OiAic2F2ZVN0YXRlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBzYXZlU3RhdGUoKSB7CiAgICAgIHZhciBjb21wYXRWaWV3U3RhdGUgPSB0aGlzLnZpZXdMYXlvdXQuc2F2ZVN0YXRlKCk7CiAgICAgIHZhciBzY3JvbGxUb3AgPSBjb21wYXRWaWV3U3RhdGUuc2Nyb2xsVG9wOwogICAgICB2YXIgZmlyc3RWaWV3TGluZU51bWJlciA9IHRoaXMudmlld0xheW91dC5nZXRMaW5lTnVtYmVyQXRWZXJ0aWNhbE9mZnNldChzY3JvbGxUb3ApOwogICAgICB2YXIgZmlyc3RQb3NpdGlvbiA9IHRoaXMuY29vcmRpbmF0ZXNDb252ZXJ0ZXIuY29udmVydFZpZXdQb3NpdGlvblRvTW9kZWxQb3NpdGlvbihuZXcgUG9zaXRpb24oZmlyc3RWaWV3TGluZU51bWJlciwgdGhpcy5nZXRMaW5lTWluQ29sdW1uKGZpcnN0Vmlld0xpbmVOdW1iZXIpKSk7CiAgICAgIHZhciBmaXJzdFBvc2l0aW9uRGVsdGFUb3AgPSB0aGlzLnZpZXdMYXlvdXQuZ2V0VmVydGljYWxPZmZzZXRGb3JMaW5lTnVtYmVyKGZpcnN0Vmlld0xpbmVOdW1iZXIpIC0gc2Nyb2xsVG9wOwogICAgICByZXR1cm4gewogICAgICAgIHNjcm9sbExlZnQ6IGNvbXBhdFZpZXdTdGF0ZS5zY3JvbGxMZWZ0LAogICAgICAgIGZpcnN0UG9zaXRpb246IGZpcnN0UG9zaXRpb24sCiAgICAgICAgZmlyc3RQb3NpdGlvbkRlbHRhVG9wOiBmaXJzdFBvc2l0aW9uRGVsdGFUb3AKICAgICAgfTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJyZWR1Y2VSZXN0b3JlU3RhdGUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlZHVjZVJlc3RvcmVTdGF0ZShzdGF0ZSkgewogICAgICBpZiAodHlwZW9mIHN0YXRlLmZpcnN0UG9zaXRpb24gPT09ICd1bmRlZmluZWQnKSB7CiAgICAgICAgLy8gVGhpcyBpcyBhIHZpZXcgc3RhdGUgc2VyaWFsaXplZCBieSBhbiBvbGRlciB2ZXJzaW9uCiAgICAgICAgcmV0dXJuIHRoaXMuX3JlZHVjZVJlc3RvcmVTdGF0ZUNvbXBhdGliaWxpdHkoc3RhdGUpOwogICAgICB9CiAgICAgIHZhciBtb2RlbFBvc2l0aW9uID0gdGhpcy5tb2RlbC52YWxpZGF0ZVBvc2l0aW9uKHN0YXRlLmZpcnN0UG9zaXRpb24pOwogICAgICB2YXIgdmlld1Bvc2l0aW9uID0gdGhpcy5jb29yZGluYXRlc0NvbnZlcnRlci5jb252ZXJ0TW9kZWxQb3NpdGlvblRvVmlld1Bvc2l0aW9uKG1vZGVsUG9zaXRpb24pOwogICAgICB2YXIgc2Nyb2xsVG9wID0gdGhpcy52aWV3TGF5b3V0LmdldFZlcnRpY2FsT2Zmc2V0Rm9yTGluZU51bWJlcih2aWV3UG9zaXRpb24ubGluZU51bWJlcikgLSBzdGF0ZS5maXJzdFBvc2l0aW9uRGVsdGFUb3A7CiAgICAgIHJldHVybiB7CiAgICAgICAgc2Nyb2xsTGVmdDogc3RhdGUuc2Nyb2xsTGVmdCwKICAgICAgICBzY3JvbGxUb3A6IHNjcm9sbFRvcAogICAgICB9OwogICAgfQogIH0sIHsKICAgIGtleTogIl9yZWR1Y2VSZXN0b3JlU3RhdGVDb21wYXRpYmlsaXR5IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBfcmVkdWNlUmVzdG9yZVN0YXRlQ29tcGF0aWJpbGl0eShzdGF0ZSkgewogICAgICByZXR1cm4gewogICAgICAgIHNjcm9sbExlZnQ6IHN0YXRlLnNjcm9sbExlZnQsCiAgICAgICAgc2Nyb2xsVG9wOiBzdGF0ZS5zY3JvbGxUb3BXaXRob3V0Vmlld1pvbmVzCiAgICAgIH07CiAgICB9CiAgfSwgewogICAga2V5OiAiZ2V0VGFiU2l6ZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0VGFiU2l6ZSgpIHsKICAgICAgcmV0dXJuIHRoaXMubW9kZWwuZ2V0T3B0aW9ucygpLnRhYlNpemU7CiAgICB9CiAgfSwgewogICAga2V5OiAiZ2V0TGluZUNvdW50IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRMaW5lQ291bnQoKSB7CiAgICAgIHJldHVybiB0aGlzLl9saW5lcy5nZXRWaWV3TGluZUNvdW50KCk7CiAgICB9CiAgICAvKioKICAgICAqIEdpdmVzIGEgaGludCB0aGF0IGEgbG90IG9mIHJlcXVlc3RzIGFyZSBhYm91dCB0byBjb21lIGluIGZvciB0aGVzZSBsaW5lIG51bWJlcnMuCiAgICAgKi8KICB9LCB7CiAgICBrZXk6ICJzZXRWaWV3cG9ydCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0Vmlld3BvcnQoc3RhcnRMaW5lTnVtYmVyLCBlbmRMaW5lTnVtYmVyLCBjZW50ZXJlZExpbmVOdW1iZXIpIHsKICAgICAgdGhpcy5fdmlld3BvcnRTdGFydC51cGRhdGUodGhpcywgc3RhcnRMaW5lTnVtYmVyKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJnZXRBY3RpdmVJbmRlbnRHdWlkZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0QWN0aXZlSW5kZW50R3VpZGUobGluZU51bWJlciwgbWluTGluZU51bWJlciwgbWF4TGluZU51bWJlcikgewogICAgICByZXR1cm4gdGhpcy5fbGluZXMuZ2V0QWN0aXZlSW5kZW50R3VpZGUobGluZU51bWJlciwgbWluTGluZU51bWJlciwgbWF4TGluZU51bWJlcik7CiAgICB9CiAgfSwgewogICAga2V5OiAiZ2V0TGluZXNJbmRlbnRHdWlkZXMiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldExpbmVzSW5kZW50R3VpZGVzKHN0YXJ0TGluZU51bWJlciwgZW5kTGluZU51bWJlcikgewogICAgICByZXR1cm4gdGhpcy5fbGluZXMuZ2V0Vmlld0xpbmVzSW5kZW50R3VpZGVzKHN0YXJ0TGluZU51bWJlciwgZW5kTGluZU51bWJlcik7CiAgICB9CiAgfSwgewogICAga2V5OiAiZ2V0QnJhY2tldEd1aWRlc0luUmFuZ2VCeUxpbmUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldEJyYWNrZXRHdWlkZXNJblJhbmdlQnlMaW5lKHN0YXJ0TGluZU51bWJlciwgZW5kTGluZU51bWJlciwgYWN0aXZlUG9zaXRpb24sIG9wdGlvbnMpIHsKICAgICAgcmV0dXJuIHRoaXMuX2xpbmVzLmdldFZpZXdMaW5lc0JyYWNrZXRHdWlkZXMoc3RhcnRMaW5lTnVtYmVyLCBlbmRMaW5lTnVtYmVyLCBhY3RpdmVQb3NpdGlvbiwgb3B0aW9ucyk7CiAgICB9CiAgfSwgewogICAga2V5OiAiZ2V0TGluZUNvbnRlbnQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldExpbmVDb250ZW50KGxpbmVOdW1iZXIpIHsKICAgICAgcmV0dXJuIHRoaXMuX2xpbmVzLmdldFZpZXdMaW5lQ29udGVudChsaW5lTnVtYmVyKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJnZXRMaW5lTGVuZ3RoIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRMaW5lTGVuZ3RoKGxpbmVOdW1iZXIpIHsKICAgICAgcmV0dXJuIHRoaXMuX2xpbmVzLmdldFZpZXdMaW5lTGVuZ3RoKGxpbmVOdW1iZXIpOwogICAgfQogIH0sIHsKICAgIGtleTogImdldExpbmVNaW5Db2x1bW4iLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldExpbmVNaW5Db2x1bW4obGluZU51bWJlcikgewogICAgICByZXR1cm4gdGhpcy5fbGluZXMuZ2V0Vmlld0xpbmVNaW5Db2x1bW4obGluZU51bWJlcik7CiAgICB9CiAgfSwgewogICAga2V5OiAiZ2V0TGluZU1heENvbHVtbiIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0TGluZU1heENvbHVtbihsaW5lTnVtYmVyKSB7CiAgICAgIHJldHVybiB0aGlzLl9saW5lcy5nZXRWaWV3TGluZU1heENvbHVtbihsaW5lTnVtYmVyKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJnZXRMaW5lRmlyc3ROb25XaGl0ZXNwYWNlQ29sdW1uIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRMaW5lRmlyc3ROb25XaGl0ZXNwYWNlQ29sdW1uKGxpbmVOdW1iZXIpIHsKICAgICAgdmFyIHJlc3VsdCA9IHN0cmluZ3MuZmlyc3ROb25XaGl0ZXNwYWNlSW5kZXgodGhpcy5nZXRMaW5lQ29udGVudChsaW5lTnVtYmVyKSk7CiAgICAgIGlmIChyZXN1bHQgPT09IC0xKSB7CiAgICAgICAgcmV0dXJuIDA7CiAgICAgIH0KICAgICAgcmV0dXJuIHJlc3VsdCArIDE7CiAgICB9CiAgfSwgewogICAga2V5OiAiZ2V0TGluZUxhc3ROb25XaGl0ZXNwYWNlQ29sdW1uIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRMaW5lTGFzdE5vbldoaXRlc3BhY2VDb2x1bW4obGluZU51bWJlcikgewogICAgICB2YXIgcmVzdWx0ID0gc3RyaW5ncy5sYXN0Tm9uV2hpdGVzcGFjZUluZGV4KHRoaXMuZ2V0TGluZUNvbnRlbnQobGluZU51bWJlcikpOwogICAgICBpZiAocmVzdWx0ID09PSAtMSkgewogICAgICAgIHJldHVybiAwOwogICAgICB9CiAgICAgIHJldHVybiByZXN1bHQgKyAyOwogICAgfQogIH0sIHsKICAgIGtleTogImdldERlY29yYXRpb25zSW5WaWV3cG9ydCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RGVjb3JhdGlvbnNJblZpZXdwb3J0KHZpc2libGVSYW5nZSkgewogICAgICByZXR1cm4gdGhpcy5fZGVjb3JhdGlvbnMuZ2V0RGVjb3JhdGlvbnNWaWV3cG9ydERhdGEodmlzaWJsZVJhbmdlKS5kZWNvcmF0aW9uczsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJnZXRJbmplY3RlZFRleHRBdCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0SW5qZWN0ZWRUZXh0QXQodmlld1Bvc2l0aW9uKSB7CiAgICAgIHJldHVybiB0aGlzLl9saW5lcy5nZXRJbmplY3RlZFRleHRBdCh2aWV3UG9zaXRpb24pOwogICAgfQogIH0sIHsKICAgIGtleTogImdldFZpZXdwb3J0Vmlld0xpbmVSZW5kZXJpbmdEYXRhIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRWaWV3cG9ydFZpZXdMaW5lUmVuZGVyaW5nRGF0YSh2aXNpYmxlUmFuZ2UsIGxpbmVOdW1iZXIpIHsKICAgICAgdmFyIGFsbElubGluZURlY29yYXRpb25zID0gdGhpcy5fZGVjb3JhdGlvbnMuZ2V0RGVjb3JhdGlvbnNWaWV3cG9ydERhdGEodmlzaWJsZVJhbmdlKS5pbmxpbmVEZWNvcmF0aW9uczsKICAgICAgdmFyIGlubGluZURlY29yYXRpb25zID0gYWxsSW5saW5lRGVjb3JhdGlvbnNbbGluZU51bWJlciAtIHZpc2libGVSYW5nZS5zdGFydExpbmVOdW1iZXJdOwogICAgICByZXR1cm4gdGhpcy5fZ2V0Vmlld0xpbmVSZW5kZXJpbmdEYXRhKGxpbmVOdW1iZXIsIGlubGluZURlY29yYXRpb25zKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJnZXRWaWV3TGluZVJlbmRlcmluZ0RhdGEiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldFZpZXdMaW5lUmVuZGVyaW5nRGF0YShsaW5lTnVtYmVyKSB7CiAgICAgIHZhciBpbmxpbmVEZWNvcmF0aW9ucyA9IHRoaXMuX2RlY29yYXRpb25zLmdldElubGluZURlY29yYXRpb25zT25MaW5lKGxpbmVOdW1iZXIpOwogICAgICByZXR1cm4gdGhpcy5fZ2V0Vmlld0xpbmVSZW5kZXJpbmdEYXRhKGxpbmVOdW1iZXIsIGlubGluZURlY29yYXRpb25zKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJfZ2V0Vmlld0xpbmVSZW5kZXJpbmdEYXRhIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0Vmlld0xpbmVSZW5kZXJpbmdEYXRhKGxpbmVOdW1iZXIsIGlubGluZURlY29yYXRpb25zKSB7CiAgICAgIHZhciBtaWdodENvbnRhaW5SVEwgPSB0aGlzLm1vZGVsLm1pZ2h0Q29udGFpblJUTCgpOwogICAgICB2YXIgbWlnaHRDb250YWluTm9uQmFzaWNBU0NJSSA9IHRoaXMubW9kZWwubWlnaHRDb250YWluTm9uQmFzaWNBU0NJSSgpOwogICAgICB2YXIgdGFiU2l6ZSA9IHRoaXMuZ2V0VGFiU2l6ZSgpOwogICAgICB2YXIgbGluZURhdGEgPSB0aGlzLl9saW5lcy5nZXRWaWV3TGluZURhdGEobGluZU51bWJlcik7CiAgICAgIGlmIChsaW5lRGF0YS5pbmxpbmVEZWNvcmF0aW9ucykgewogICAgICAgIGlubGluZURlY29yYXRpb25zID0gW10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShpbmxpbmVEZWNvcmF0aW9ucyksIF90b0NvbnN1bWFibGVBcnJheShsaW5lRGF0YS5pbmxpbmVEZWNvcmF0aW9ucy5tYXAoZnVuY3Rpb24gKGQpIHsKICAgICAgICAgIHJldHVybiBkLnRvSW5saW5lRGVjb3JhdGlvbihsaW5lTnVtYmVyKTsKICAgICAgICB9KSkpOwogICAgICB9CiAgICAgIHJldHVybiBuZXcgVmlld0xpbmVSZW5kZXJpbmdEYXRhKGxpbmVEYXRhLm1pbkNvbHVtbiwgbGluZURhdGEubWF4Q29sdW1uLCBsaW5lRGF0YS5jb250ZW50LCBsaW5lRGF0YS5jb250aW51ZXNXaXRoV3JhcHBlZExpbmUsIG1pZ2h0Q29udGFpblJUTCwgbWlnaHRDb250YWluTm9uQmFzaWNBU0NJSSwgbGluZURhdGEudG9rZW5zLCBpbmxpbmVEZWNvcmF0aW9ucywgdGFiU2l6ZSwgbGluZURhdGEuc3RhcnRWaXNpYmxlQ29sdW1uKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJnZXRWaWV3TGluZURhdGEiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldFZpZXdMaW5lRGF0YShsaW5lTnVtYmVyKSB7CiAgICAgIHJldHVybiB0aGlzLl9saW5lcy5nZXRWaWV3TGluZURhdGEobGluZU51bWJlcik7CiAgICB9CiAgfSwgewogICAga2V5OiAiZ2V0TWluaW1hcExpbmVzUmVuZGVyaW5nRGF0YSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0TWluaW1hcExpbmVzUmVuZGVyaW5nRGF0YShzdGFydExpbmVOdW1iZXIsIGVuZExpbmVOdW1iZXIsIG5lZWRlZCkgewogICAgICB2YXIgcmVzdWx0ID0gdGhpcy5fbGluZXMuZ2V0Vmlld0xpbmVzRGF0YShzdGFydExpbmVOdW1iZXIsIGVuZExpbmVOdW1iZXIsIG5lZWRlZCk7CiAgICAgIHJldHVybiBuZXcgTWluaW1hcExpbmVzUmVuZGVyaW5nRGF0YSh0aGlzLmdldFRhYlNpemUoKSwgcmVzdWx0KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJnZXRBbGxPdmVydmlld1J1bGVyRGVjb3JhdGlvbnMiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldEFsbE92ZXJ2aWV3UnVsZXJEZWNvcmF0aW9ucyh0aGVtZSkgewogICAgICB2YXIgZGVjb3JhdGlvbnMgPSB0aGlzLm1vZGVsLmdldE92ZXJ2aWV3UnVsZXJEZWNvcmF0aW9ucyh0aGlzLl9lZGl0b3JJZCwgZmlsdGVyVmFsaWRhdGlvbkRlY29yYXRpb25zKHRoaXMuX2NvbmZpZ3VyYXRpb24ub3B0aW9ucykpOwogICAgICB2YXIgcmVzdWx0ID0gbmV3IE92ZXJ2aWV3UnVsZXJEZWNvcmF0aW9ucygpOwogICAgICB2YXIgX2l0ZXJhdG9yNCA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGRlY29yYXRpb25zKSwKICAgICAgICBfc3RlcDQ7CiAgICAgIHRyeSB7CiAgICAgICAgZm9yIChfaXRlcmF0b3I0LnMoKTsgIShfc3RlcDQgPSBfaXRlcmF0b3I0Lm4oKSkuZG9uZTspIHsKICAgICAgICAgIHZhciBkZWNvcmF0aW9uID0gX3N0ZXA0LnZhbHVlOwogICAgICAgICAgdmFyIGRlY29yYXRpb25PcHRpb25zID0gZGVjb3JhdGlvbi5vcHRpb25zOwogICAgICAgICAgdmFyIG9wdHMgPSBkZWNvcmF0aW9uT3B0aW9ucy5vdmVydmlld1J1bGVyOwogICAgICAgICAgaWYgKCFvcHRzKSB7CiAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgfQogICAgICAgICAgdmFyIGxhbmUgPSBvcHRzLnBvc2l0aW9uOwogICAgICAgICAgaWYgKGxhbmUgPT09IDApIHsKICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICB9CiAgICAgICAgICB2YXIgY29sb3IgPSBvcHRzLmdldENvbG9yKHRoZW1lLnZhbHVlKTsKICAgICAgICAgIHZhciB2aWV3U3RhcnRMaW5lTnVtYmVyID0gdGhpcy5jb29yZGluYXRlc0NvbnZlcnRlci5nZXRWaWV3TGluZU51bWJlck9mTW9kZWxQb3NpdGlvbihkZWNvcmF0aW9uLnJhbmdlLnN0YXJ0TGluZU51bWJlciwgZGVjb3JhdGlvbi5yYW5nZS5zdGFydENvbHVtbik7CiAgICAgICAgICB2YXIgdmlld0VuZExpbmVOdW1iZXIgPSB0aGlzLmNvb3JkaW5hdGVzQ29udmVydGVyLmdldFZpZXdMaW5lTnVtYmVyT2ZNb2RlbFBvc2l0aW9uKGRlY29yYXRpb24ucmFuZ2UuZW5kTGluZU51bWJlciwgZGVjb3JhdGlvbi5yYW5nZS5lbmRDb2x1bW4pOwogICAgICAgICAgcmVzdWx0LmFjY2VwdChjb2xvciwgZGVjb3JhdGlvbk9wdGlvbnMuekluZGV4LCB2aWV3U3RhcnRMaW5lTnVtYmVyLCB2aWV3RW5kTGluZU51bWJlciwgbGFuZSk7CiAgICAgICAgfQogICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICBfaXRlcmF0b3I0LmUoZXJyKTsKICAgICAgfSBmaW5hbGx5IHsKICAgICAgICBfaXRlcmF0b3I0LmYoKTsKICAgICAgfQogICAgICByZXR1cm4gcmVzdWx0LmFzQXJyYXk7CiAgICB9CiAgfSwgewogICAga2V5OiAiX2ludmFsaWRhdGVEZWNvcmF0aW9uc0NvbG9yQ2FjaGUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9pbnZhbGlkYXRlRGVjb3JhdGlvbnNDb2xvckNhY2hlKCkgewogICAgICB2YXIgZGVjb3JhdGlvbnMgPSB0aGlzLm1vZGVsLmdldE92ZXJ2aWV3UnVsZXJEZWNvcmF0aW9ucygpOwogICAgICB2YXIgX2l0ZXJhdG9yNSA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGRlY29yYXRpb25zKSwKICAgICAgICBfc3RlcDU7CiAgICAgIHRyeSB7CiAgICAgICAgZm9yIChfaXRlcmF0b3I1LnMoKTsgIShfc3RlcDUgPSBfaXRlcmF0b3I1Lm4oKSkuZG9uZTspIHsKICAgICAgICAgIHZhciBkZWNvcmF0aW9uID0gX3N0ZXA1LnZhbHVlOwogICAgICAgICAgdmFyIG9wdHMxID0gZGVjb3JhdGlvbi5vcHRpb25zLm92ZXJ2aWV3UnVsZXI7CiAgICAgICAgICBpZiAob3B0czEpIHsKICAgICAgICAgICAgb3B0czEuaW52YWxpZGF0ZUNhY2hlZENvbG9yKCk7CiAgICAgICAgICB9CiAgICAgICAgICB2YXIgb3B0czIgPSBkZWNvcmF0aW9uLm9wdGlvbnMubWluaW1hcDsKICAgICAgICAgIGlmIChvcHRzMikgewogICAgICAgICAgICBvcHRzMi5pbnZhbGlkYXRlQ2FjaGVkQ29sb3IoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgIF9pdGVyYXRvcjUuZShlcnIpOwogICAgICB9IGZpbmFsbHkgewogICAgICAgIF9pdGVyYXRvcjUuZigpOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAiZ2V0VmFsdWVJblJhbmdlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRWYWx1ZUluUmFuZ2UocmFuZ2UsIGVvbCkgewogICAgICB2YXIgbW9kZWxSYW5nZSA9IHRoaXMuY29vcmRpbmF0ZXNDb252ZXJ0ZXIuY29udmVydFZpZXdSYW5nZVRvTW9kZWxSYW5nZShyYW5nZSk7CiAgICAgIHJldHVybiB0aGlzLm1vZGVsLmdldFZhbHVlSW5SYW5nZShtb2RlbFJhbmdlLCBlb2wpOwogICAgfQogIH0sIHsKICAgIGtleTogImRlZHVjZU1vZGVsUG9zaXRpb25SZWxhdGl2ZVRvVmlld1Bvc2l0aW9uIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBkZWR1Y2VNb2RlbFBvc2l0aW9uUmVsYXRpdmVUb1ZpZXdQb3NpdGlvbih2aWV3QW5jaG9yUG9zaXRpb24sIGRlbHRhT2Zmc2V0LCBsaW5lRmVlZENudCkgewogICAgICB2YXIgbW9kZWxBbmNob3IgPSB0aGlzLmNvb3JkaW5hdGVzQ29udmVydGVyLmNvbnZlcnRWaWV3UG9zaXRpb25Ub01vZGVsUG9zaXRpb24odmlld0FuY2hvclBvc2l0aW9uKTsKICAgICAgaWYgKHRoaXMubW9kZWwuZ2V0RU9MKCkubGVuZ3RoID09PSAyKSB7CiAgICAgICAgLy8gVGhpcyBtb2RlbCB1c2VzIENSTEYsIHNvIHRoZSBkZWx0YSBtdXN0IHRha2UgdGhhdCBpbnRvIGFjY291bnQKICAgICAgICBpZiAoZGVsdGFPZmZzZXQgPCAwKSB7CiAgICAgICAgICBkZWx0YU9mZnNldCAtPSBsaW5lRmVlZENudDsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgZGVsdGFPZmZzZXQgKz0gbGluZUZlZWRDbnQ7CiAgICAgICAgfQogICAgICB9CiAgICAgIHZhciBtb2RlbEFuY2hvck9mZnNldCA9IHRoaXMubW9kZWwuZ2V0T2Zmc2V0QXQobW9kZWxBbmNob3IpOwogICAgICB2YXIgcmVzdWx0T2Zmc2V0ID0gbW9kZWxBbmNob3JPZmZzZXQgKyBkZWx0YU9mZnNldDsKICAgICAgcmV0dXJuIHRoaXMubW9kZWwuZ2V0UG9zaXRpb25BdChyZXN1bHRPZmZzZXQpOwogICAgfQogIH0sIHsKICAgIGtleTogImdldFBsYWluVGV4dFRvQ29weSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UGxhaW5UZXh0VG9Db3B5KG1vZGVsUmFuZ2VzLCBlbXB0eVNlbGVjdGlvbkNsaXBib2FyZCwgZm9yY2VDUkxGKSB7CiAgICAgIHZhciBuZXdMaW5lQ2hhcmFjdGVyID0gZm9yY2VDUkxGID8gJ1xyXG4nIDogdGhpcy5tb2RlbC5nZXRFT0woKTsKICAgICAgbW9kZWxSYW5nZXMgPSBtb2RlbFJhbmdlcy5zbGljZSgwKTsKICAgICAgbW9kZWxSYW5nZXMuc29ydChSYW5nZS5jb21wYXJlUmFuZ2VzVXNpbmdTdGFydHMpOwogICAgICB2YXIgaGFzRW1wdHlSYW5nZSA9IGZhbHNlOwogICAgICB2YXIgaGFzTm9uRW1wdHlSYW5nZSA9IGZhbHNlOwogICAgICB2YXIgX2l0ZXJhdG9yNiA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKG1vZGVsUmFuZ2VzKSwKICAgICAgICBfc3RlcDY7CiAgICAgIHRyeSB7CiAgICAgICAgZm9yIChfaXRlcmF0b3I2LnMoKTsgIShfc3RlcDYgPSBfaXRlcmF0b3I2Lm4oKSkuZG9uZTspIHsKICAgICAgICAgIHZhciByYW5nZSA9IF9zdGVwNi52YWx1ZTsKICAgICAgICAgIGlmIChyYW5nZS5pc0VtcHR5KCkpIHsKICAgICAgICAgICAgaGFzRW1wdHlSYW5nZSA9IHRydWU7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBoYXNOb25FbXB0eVJhbmdlID0gdHJ1ZTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgIF9pdGVyYXRvcjYuZShlcnIpOwogICAgICB9IGZpbmFsbHkgewogICAgICAgIF9pdGVyYXRvcjYuZigpOwogICAgICB9CiAgICAgIGlmICghaGFzTm9uRW1wdHlSYW5nZSkgewogICAgICAgIC8vIGFsbCByYW5nZXMgYXJlIGVtcHR5CiAgICAgICAgaWYgKCFlbXB0eVNlbGVjdGlvbkNsaXBib2FyZCkgewogICAgICAgICAgcmV0dXJuICcnOwogICAgICAgIH0KICAgICAgICB2YXIgbW9kZWxMaW5lTnVtYmVycyA9IG1vZGVsUmFuZ2VzLm1hcChmdW5jdGlvbiAocikgewogICAgICAgICAgcmV0dXJuIHIuc3RhcnRMaW5lTnVtYmVyOwogICAgICAgIH0pOwogICAgICAgIHZhciBfcmVzdWx0ID0gJyc7CiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtb2RlbExpbmVOdW1iZXJzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICBpZiAoaSA+IDAgJiYgbW9kZWxMaW5lTnVtYmVyc1tpIC0gMV0gPT09IG1vZGVsTGluZU51bWJlcnNbaV0pIHsKICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICB9CiAgICAgICAgICBfcmVzdWx0ICs9IHRoaXMubW9kZWwuZ2V0TGluZUNvbnRlbnQobW9kZWxMaW5lTnVtYmVyc1tpXSkgKyBuZXdMaW5lQ2hhcmFjdGVyOwogICAgICAgIH0KICAgICAgICByZXR1cm4gX3Jlc3VsdDsKICAgICAgfQogICAgICBpZiAoaGFzRW1wdHlSYW5nZSAmJiBlbXB0eVNlbGVjdGlvbkNsaXBib2FyZCkgewogICAgICAgIC8vIG1peGVkIGVtcHR5IHNlbGVjdGlvbnMgYW5kIG5vbi1lbXB0eSBzZWxlY3Rpb25zCiAgICAgICAgdmFyIF9yZXN1bHQyID0gW107CiAgICAgICAgdmFyIHByZXZNb2RlbExpbmVOdW1iZXIgPSAwOwogICAgICAgIHZhciBfaXRlcmF0b3I3ID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIobW9kZWxSYW5nZXMpLAogICAgICAgICAgX3N0ZXA3OwogICAgICAgIHRyeSB7CiAgICAgICAgICBmb3IgKF9pdGVyYXRvcjcucygpOyAhKF9zdGVwNyA9IF9pdGVyYXRvcjcubigpKS5kb25lOykgewogICAgICAgICAgICB2YXIgbW9kZWxSYW5nZSA9IF9zdGVwNy52YWx1ZTsKICAgICAgICAgICAgdmFyIG1vZGVsTGluZU51bWJlciA9IG1vZGVsUmFuZ2Uuc3RhcnRMaW5lTnVtYmVyOwogICAgICAgICAgICBpZiAobW9kZWxSYW5nZS5pc0VtcHR5KCkpIHsKICAgICAgICAgICAgICBpZiAobW9kZWxMaW5lTnVtYmVyICE9PSBwcmV2TW9kZWxMaW5lTnVtYmVyKSB7CiAgICAgICAgICAgICAgICBfcmVzdWx0Mi5wdXNoKHRoaXMubW9kZWwuZ2V0TGluZUNvbnRlbnQobW9kZWxMaW5lTnVtYmVyKSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIF9yZXN1bHQyLnB1c2godGhpcy5tb2RlbC5nZXRWYWx1ZUluUmFuZ2UobW9kZWxSYW5nZSwgZm9yY2VDUkxGID8gMiAvKiBFbmRPZkxpbmVQcmVmZXJlbmNlLkNSTEYgKi8gOiAwIC8qIEVuZE9mTGluZVByZWZlcmVuY2UuVGV4dERlZmluZWQgKi8pKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcHJldk1vZGVsTGluZU51bWJlciA9IG1vZGVsTGluZU51bWJlcjsKICAgICAgICAgIH0KICAgICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICAgIF9pdGVyYXRvcjcuZShlcnIpOwogICAgICAgIH0gZmluYWxseSB7CiAgICAgICAgICBfaXRlcmF0b3I3LmYoKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIF9yZXN1bHQyLmxlbmd0aCA9PT0gMSA/IF9yZXN1bHQyWzBdIDogX3Jlc3VsdDI7CiAgICAgIH0KICAgICAgdmFyIHJlc3VsdCA9IFtdOwogICAgICB2YXIgX2l0ZXJhdG9yOCA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKG1vZGVsUmFuZ2VzKSwKICAgICAgICBfc3RlcDg7CiAgICAgIHRyeSB7CiAgICAgICAgZm9yIChfaXRlcmF0b3I4LnMoKTsgIShfc3RlcDggPSBfaXRlcmF0b3I4Lm4oKSkuZG9uZTspIHsKICAgICAgICAgIHZhciBfbW9kZWxSYW5nZSA9IF9zdGVwOC52YWx1ZTsKICAgICAgICAgIGlmICghX21vZGVsUmFuZ2UuaXNFbXB0eSgpKSB7CiAgICAgICAgICAgIHJlc3VsdC5wdXNoKHRoaXMubW9kZWwuZ2V0VmFsdWVJblJhbmdlKF9tb2RlbFJhbmdlLCBmb3JjZUNSTEYgPyAyIC8qIEVuZE9mTGluZVByZWZlcmVuY2UuQ1JMRiAqLyA6IDAgLyogRW5kT2ZMaW5lUHJlZmVyZW5jZS5UZXh0RGVmaW5lZCAqLykpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgX2l0ZXJhdG9yOC5lKGVycik7CiAgICAgIH0gZmluYWxseSB7CiAgICAgICAgX2l0ZXJhdG9yOC5mKCk7CiAgICAgIH0KICAgICAgcmV0dXJuIHJlc3VsdC5sZW5ndGggPT09IDEgPyByZXN1bHRbMF0gOiByZXN1bHQ7CiAgICB9CiAgfSwgewogICAga2V5OiAiZ2V0UmljaFRleHRUb0NvcHkiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldFJpY2hUZXh0VG9Db3B5KG1vZGVsUmFuZ2VzLCBlbXB0eVNlbGVjdGlvbkNsaXBib2FyZCkgewogICAgICB2YXIgbGFuZ3VhZ2VJZCA9IHRoaXMubW9kZWwuZ2V0TGFuZ3VhZ2VJZCgpOwogICAgICBpZiAobGFuZ3VhZ2VJZCA9PT0gUExBSU5URVhUX0xBTkdVQUdFX0lEKSB7CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgIH0KICAgICAgaWYgKG1vZGVsUmFuZ2VzLmxlbmd0aCAhPT0gMSkgewogICAgICAgIC8vIG5vIG11bHRpcGxlIHNlbGVjdGlvbiBzdXBwb3J0IGF0IHRoaXMgdGltZQogICAgICAgIHJldHVybiBudWxsOwogICAgICB9CiAgICAgIHZhciByYW5nZSA9IG1vZGVsUmFuZ2VzWzBdOwogICAgICBpZiAocmFuZ2UuaXNFbXB0eSgpKSB7CiAgICAgICAgaWYgKCFlbXB0eVNlbGVjdGlvbkNsaXBib2FyZCkgewogICAgICAgICAgLy8gbm90aGluZyB0byBjb3B5CiAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICB9CiAgICAgICAgdmFyIGxpbmVOdW1iZXIgPSByYW5nZS5zdGFydExpbmVOdW1iZXI7CiAgICAgICAgcmFuZ2UgPSBuZXcgUmFuZ2UobGluZU51bWJlciwgdGhpcy5tb2RlbC5nZXRMaW5lTWluQ29sdW1uKGxpbmVOdW1iZXIpLCBsaW5lTnVtYmVyLCB0aGlzLm1vZGVsLmdldExpbmVNYXhDb2x1bW4obGluZU51bWJlcikpOwogICAgICB9CiAgICAgIHZhciBmb250SW5mbyA9IHRoaXMuX2NvbmZpZ3VyYXRpb24ub3B0aW9ucy5nZXQoNDYgLyogRWRpdG9yT3B0aW9uLmZvbnRJbmZvICovKTsKICAgICAgdmFyIGNvbG9yTWFwID0gdGhpcy5fZ2V0Q29sb3JNYXAoKTsKICAgICAgdmFyIGhhc0JhZENoYXJzID0gL1s6O1xcXC88Pl0vLnRlc3QoZm9udEluZm8uZm9udEZhbWlseSk7CiAgICAgIHZhciB1c2VEZWZhdWx0Rm9udEZhbWlseSA9IGhhc0JhZENoYXJzIHx8IGZvbnRJbmZvLmZvbnRGYW1pbHkgPT09IEVESVRPUl9GT05UX0RFRkFVTFRTLmZvbnRGYW1pbHk7CiAgICAgIHZhciBmb250RmFtaWx5OwogICAgICBpZiAodXNlRGVmYXVsdEZvbnRGYW1pbHkpIHsKICAgICAgICBmb250RmFtaWx5ID0gRURJVE9SX0ZPTlRfREVGQVVMVFMuZm9udEZhbWlseTsKICAgICAgfSBlbHNlIHsKICAgICAgICBmb250RmFtaWx5ID0gZm9udEluZm8uZm9udEZhbWlseTsKICAgICAgICBmb250RmFtaWx5ID0gZm9udEZhbWlseS5yZXBsYWNlKC8iL2csICdcJycpOwogICAgICAgIHZhciBoYXNRdW90ZXNPcklzTGlzdCA9IC9bLCddLy50ZXN0KGZvbnRGYW1pbHkpOwogICAgICAgIGlmICghaGFzUXVvdGVzT3JJc0xpc3QpIHsKICAgICAgICAgIHZhciBuZWVkc1F1b3RlcyA9IC9bKyBdLy50ZXN0KGZvbnRGYW1pbHkpOwogICAgICAgICAgaWYgKG5lZWRzUXVvdGVzKSB7CiAgICAgICAgICAgIGZvbnRGYW1pbHkgPSAiJyIuY29uY2F0KGZvbnRGYW1pbHksICInIik7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGZvbnRGYW1pbHkgPSAiIi5jb25jYXQoZm9udEZhbWlseSwgIiwgIikuY29uY2F0KEVESVRPUl9GT05UX0RFRkFVTFRTLmZvbnRGYW1pbHkpOwogICAgICB9CiAgICAgIHJldHVybiB7CiAgICAgICAgbW9kZTogbGFuZ3VhZ2VJZCwKICAgICAgICBodG1sOiAiPGRpdiBzdHlsZT1cIiIgKyAiY29sb3I6ICIuY29uY2F0KGNvbG9yTWFwWzEgLyogQ29sb3JJZC5EZWZhdWx0Rm9yZWdyb3VuZCAqL10sICI7IikgKyAiYmFja2dyb3VuZC1jb2xvcjogIi5jb25jYXQoY29sb3JNYXBbMiAvKiBDb2xvcklkLkRlZmF1bHRCYWNrZ3JvdW5kICovXSwgIjsiKSArICJmb250LWZhbWlseTogIi5jb25jYXQoZm9udEZhbWlseSwgIjsiKSArICJmb250LXdlaWdodDogIi5jb25jYXQoZm9udEluZm8uZm9udFdlaWdodCwgIjsiKSArICJmb250LXNpemU6ICIuY29uY2F0KGZvbnRJbmZvLmZvbnRTaXplLCAicHg7IikgKyAibGluZS1oZWlnaHQ6ICIuY29uY2F0KGZvbnRJbmZvLmxpbmVIZWlnaHQsICJweDsiKSArICJ3aGl0ZS1zcGFjZTogcHJlOyIgKyAiXCI+IiArIHRoaXMuX2dldEhUTUxUb0NvcHkocmFuZ2UsIGNvbG9yTWFwKSArICc8L2Rpdj4nCiAgICAgIH07CiAgICB9CiAgfSwgewogICAga2V5OiAiX2dldEhUTUxUb0NvcHkiLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9nZXRIVE1MVG9Db3B5KG1vZGVsUmFuZ2UsIGNvbG9yTWFwKSB7CiAgICAgIHZhciBzdGFydExpbmVOdW1iZXIgPSBtb2RlbFJhbmdlLnN0YXJ0TGluZU51bWJlcjsKICAgICAgdmFyIHN0YXJ0Q29sdW1uID0gbW9kZWxSYW5nZS5zdGFydENvbHVtbjsKICAgICAgdmFyIGVuZExpbmVOdW1iZXIgPSBtb2RlbFJhbmdlLmVuZExpbmVOdW1iZXI7CiAgICAgIHZhciBlbmRDb2x1bW4gPSBtb2RlbFJhbmdlLmVuZENvbHVtbjsKICAgICAgdmFyIHRhYlNpemUgPSB0aGlzLmdldFRhYlNpemUoKTsKICAgICAgdmFyIHJlc3VsdCA9ICcnOwogICAgICBmb3IgKHZhciBsaW5lTnVtYmVyID0gc3RhcnRMaW5lTnVtYmVyOyBsaW5lTnVtYmVyIDw9IGVuZExpbmVOdW1iZXI7IGxpbmVOdW1iZXIrKykgewogICAgICAgIHZhciBsaW5lVG9rZW5zID0gdGhpcy5tb2RlbC50b2tlbml6YXRpb24uZ2V0TGluZVRva2VucyhsaW5lTnVtYmVyKTsKICAgICAgICB2YXIgbGluZUNvbnRlbnQgPSBsaW5lVG9rZW5zLmdldExpbmVDb250ZW50KCk7CiAgICAgICAgdmFyIHN0YXJ0T2Zmc2V0ID0gbGluZU51bWJlciA9PT0gc3RhcnRMaW5lTnVtYmVyID8gc3RhcnRDb2x1bW4gLSAxIDogMDsKICAgICAgICB2YXIgZW5kT2Zmc2V0ID0gbGluZU51bWJlciA9PT0gZW5kTGluZU51bWJlciA/IGVuZENvbHVtbiAtIDEgOiBsaW5lQ29udGVudC5sZW5ndGg7CiAgICAgICAgaWYgKGxpbmVDb250ZW50ID09PSAnJykgewogICAgICAgICAgcmVzdWx0ICs9ICc8YnI+JzsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcmVzdWx0ICs9IHRva2VuaXplTGluZVRvSFRNTChsaW5lQ29udGVudCwgbGluZVRva2Vucy5pbmZsYXRlKCksIGNvbG9yTWFwLCBzdGFydE9mZnNldCwgZW5kT2Zmc2V0LCB0YWJTaXplLCBwbGF0Zm9ybS5pc1dpbmRvd3MpOwogICAgICAgIH0KICAgICAgfQogICAgICByZXR1cm4gcmVzdWx0OwogICAgfQogIH0sIHsKICAgIGtleTogIl9nZXRDb2xvck1hcCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX2dldENvbG9yTWFwKCkgewogICAgICB2YXIgY29sb3JNYXAgPSBUb2tlbml6YXRpb25SZWdpc3RyeS5nZXRDb2xvck1hcCgpOwogICAgICB2YXIgcmVzdWx0ID0gWycjMDAwMDAwJ107CiAgICAgIGlmIChjb2xvck1hcCkgewogICAgICAgIGZvciAodmFyIGkgPSAxLCBsZW4gPSBjb2xvck1hcC5sZW5ndGg7IGkgPCBsZW47IGkrKykgewogICAgICAgICAgcmVzdWx0W2ldID0gQ29sb3IuRm9ybWF0LkNTUy5mb3JtYXRIZXgoY29sb3JNYXBbaV0pOwogICAgICAgIH0KICAgICAgfQogICAgICByZXR1cm4gcmVzdWx0OwogICAgfQogICAgLy8jcmVnaW9uIGN1cnNvciBvcGVyYXRpb25zCiAgfSwgewogICAga2V5OiAiZ2V0UHJpbWFyeUN1cnNvclN0YXRlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRQcmltYXJ5Q3Vyc29yU3RhdGUoKSB7CiAgICAgIHJldHVybiB0aGlzLl9jdXJzb3IuZ2V0UHJpbWFyeUN1cnNvclN0YXRlKCk7CiAgICB9CiAgfSwgewogICAga2V5OiAiZ2V0TGFzdEFkZGVkQ3Vyc29ySW5kZXgiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldExhc3RBZGRlZEN1cnNvckluZGV4KCkgewogICAgICByZXR1cm4gdGhpcy5fY3Vyc29yLmdldExhc3RBZGRlZEN1cnNvckluZGV4KCk7CiAgICB9CiAgfSwgewogICAga2V5OiAiZ2V0Q3Vyc29yU3RhdGVzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRDdXJzb3JTdGF0ZXMoKSB7CiAgICAgIHJldHVybiB0aGlzLl9jdXJzb3IuZ2V0Q3Vyc29yU3RhdGVzKCk7CiAgICB9CiAgfSwgewogICAga2V5OiAic2V0Q3Vyc29yU3RhdGVzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRDdXJzb3JTdGF0ZXMoc291cmNlLCByZWFzb24sIHN0YXRlcykgewogICAgICB2YXIgX3RoaXMzID0gdGhpczsKICAgICAgcmV0dXJuIHRoaXMuX3dpdGhWaWV3RXZlbnRzQ29sbGVjdG9yKGZ1bmN0aW9uIChldmVudHNDb2xsZWN0b3IpIHsKICAgICAgICByZXR1cm4gX3RoaXMzLl9jdXJzb3Iuc2V0U3RhdGVzKGV2ZW50c0NvbGxlY3Rvciwgc291cmNlLCByZWFzb24sIHN0YXRlcyk7CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogImdldEN1cnNvckNvbHVtblNlbGVjdERhdGEiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldEN1cnNvckNvbHVtblNlbGVjdERhdGEoKSB7CiAgICAgIHJldHVybiB0aGlzLl9jdXJzb3IuZ2V0Q3Vyc29yQ29sdW1uU2VsZWN0RGF0YSgpOwogICAgfQogIH0sIHsKICAgIGtleTogImdldEN1cnNvckF1dG9DbG9zZWRDaGFyYWN0ZXJzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRDdXJzb3JBdXRvQ2xvc2VkQ2hhcmFjdGVycygpIHsKICAgICAgcmV0dXJuIHRoaXMuX2N1cnNvci5nZXRBdXRvQ2xvc2VkQ2hhcmFjdGVycygpOwogICAgfQogIH0sIHsKICAgIGtleTogInNldEN1cnNvckNvbHVtblNlbGVjdERhdGEiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHNldEN1cnNvckNvbHVtblNlbGVjdERhdGEoY29sdW1uU2VsZWN0RGF0YSkgewogICAgICB0aGlzLl9jdXJzb3Iuc2V0Q3Vyc29yQ29sdW1uU2VsZWN0RGF0YShjb2x1bW5TZWxlY3REYXRhKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJnZXRQcmV2RWRpdE9wZXJhdGlvblR5cGUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldFByZXZFZGl0T3BlcmF0aW9uVHlwZSgpIHsKICAgICAgcmV0dXJuIHRoaXMuX2N1cnNvci5nZXRQcmV2RWRpdE9wZXJhdGlvblR5cGUoKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJzZXRQcmV2RWRpdE9wZXJhdGlvblR5cGUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHNldFByZXZFZGl0T3BlcmF0aW9uVHlwZSh0eXBlKSB7CiAgICAgIHRoaXMuX2N1cnNvci5zZXRQcmV2RWRpdE9wZXJhdGlvblR5cGUodHlwZSk7CiAgICB9CiAgfSwgewogICAga2V5OiAiZ2V0U2VsZWN0aW9uIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRTZWxlY3Rpb24oKSB7CiAgICAgIHJldHVybiB0aGlzLl9jdXJzb3IuZ2V0U2VsZWN0aW9uKCk7CiAgICB9CiAgfSwgewogICAga2V5OiAiZ2V0U2VsZWN0aW9ucyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0U2VsZWN0aW9ucygpIHsKICAgICAgcmV0dXJuIHRoaXMuX2N1cnNvci5nZXRTZWxlY3Rpb25zKCk7CiAgICB9CiAgfSwgewogICAga2V5OiAiZ2V0UG9zaXRpb24iLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldFBvc2l0aW9uKCkgewogICAgICByZXR1cm4gdGhpcy5fY3Vyc29yLmdldFByaW1hcnlDdXJzb3JTdGF0ZSgpLm1vZGVsU3RhdGUucG9zaXRpb247CiAgICB9CiAgfSwgewogICAga2V5OiAic2V0U2VsZWN0aW9ucyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0U2VsZWN0aW9ucyhzb3VyY2UsIHNlbGVjdGlvbnMpIHsKICAgICAgdmFyIF90aGlzNCA9IHRoaXM7CiAgICAgIHZhciByZWFzb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IDA7CiAgICAgIHRoaXMuX3dpdGhWaWV3RXZlbnRzQ29sbGVjdG9yKGZ1bmN0aW9uIChldmVudHNDb2xsZWN0b3IpIHsKICAgICAgICByZXR1cm4gX3RoaXM0Ll9jdXJzb3Iuc2V0U2VsZWN0aW9ucyhldmVudHNDb2xsZWN0b3IsIHNvdXJjZSwgc2VsZWN0aW9ucywgcmVhc29uKTsKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAic2F2ZUN1cnNvclN0YXRlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBzYXZlQ3Vyc29yU3RhdGUoKSB7CiAgICAgIHJldHVybiB0aGlzLl9jdXJzb3Iuc2F2ZVN0YXRlKCk7CiAgICB9CiAgfSwgewogICAga2V5OiAicmVzdG9yZUN1cnNvclN0YXRlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZXN0b3JlQ3Vyc29yU3RhdGUoc3RhdGVzKSB7CiAgICAgIHZhciBfdGhpczUgPSB0aGlzOwogICAgICB0aGlzLl93aXRoVmlld0V2ZW50c0NvbGxlY3RvcihmdW5jdGlvbiAoZXZlbnRzQ29sbGVjdG9yKSB7CiAgICAgICAgcmV0dXJuIF90aGlzNS5fY3Vyc29yLnJlc3RvcmVTdGF0ZShldmVudHNDb2xsZWN0b3IsIHN0YXRlcyk7CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogIl9leGVjdXRlQ3Vyc29yRWRpdCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX2V4ZWN1dGVDdXJzb3JFZGl0KGNhbGxiYWNrKSB7CiAgICAgIGlmICh0aGlzLl9jdXJzb3IuY29udGV4dC5jdXJzb3JDb25maWcucmVhZE9ubHkpIHsKICAgICAgICAvLyB3ZSBjYW5ub3QgZWRpdCB3aGVuIHJlYWQgb25seS4uLgogICAgICAgIHRoaXMuX2V2ZW50RGlzcGF0Y2hlci5lbWl0T3V0Z29pbmdFdmVudChuZXcgUmVhZE9ubHlFZGl0QXR0ZW1wdEV2ZW50KCkpOwogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICB0aGlzLl93aXRoVmlld0V2ZW50c0NvbGxlY3RvcihjYWxsYmFjayk7CiAgICB9CiAgfSwgewogICAga2V5OiAiZXhlY3V0ZUVkaXRzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBleGVjdXRlRWRpdHMoc291cmNlLCBlZGl0cywgY3Vyc29yU3RhdGVDb21wdXRlcikgewogICAgICB2YXIgX3RoaXM2ID0gdGhpczsKICAgICAgdGhpcy5fZXhlY3V0ZUN1cnNvckVkaXQoZnVuY3Rpb24gKGV2ZW50c0NvbGxlY3RvcikgewogICAgICAgIHJldHVybiBfdGhpczYuX2N1cnNvci5leGVjdXRlRWRpdHMoZXZlbnRzQ29sbGVjdG9yLCBzb3VyY2UsIGVkaXRzLCBjdXJzb3JTdGF0ZUNvbXB1dGVyKTsKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAic3RhcnRDb21wb3NpdGlvbiIsCiAgICB2YWx1ZTogZnVuY3Rpb24gc3RhcnRDb21wb3NpdGlvbigpIHsKICAgICAgdmFyIF90aGlzNyA9IHRoaXM7CiAgICAgIHRoaXMuX2V4ZWN1dGVDdXJzb3JFZGl0KGZ1bmN0aW9uIChldmVudHNDb2xsZWN0b3IpIHsKICAgICAgICByZXR1cm4gX3RoaXM3Ll9jdXJzb3Iuc3RhcnRDb21wb3NpdGlvbihldmVudHNDb2xsZWN0b3IpOwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJlbmRDb21wb3NpdGlvbiIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZW5kQ29tcG9zaXRpb24oc291cmNlKSB7CiAgICAgIHZhciBfdGhpczggPSB0aGlzOwogICAgICB0aGlzLl9leGVjdXRlQ3Vyc29yRWRpdChmdW5jdGlvbiAoZXZlbnRzQ29sbGVjdG9yKSB7CiAgICAgICAgcmV0dXJuIF90aGlzOC5fY3Vyc29yLmVuZENvbXBvc2l0aW9uKGV2ZW50c0NvbGxlY3Rvciwgc291cmNlKTsKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAidHlwZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gdHlwZSh0ZXh0LCBzb3VyY2UpIHsKICAgICAgdmFyIF90aGlzOSA9IHRoaXM7CiAgICAgIHRoaXMuX2V4ZWN1dGVDdXJzb3JFZGl0KGZ1bmN0aW9uIChldmVudHNDb2xsZWN0b3IpIHsKICAgICAgICByZXR1cm4gX3RoaXM5Ll9jdXJzb3IudHlwZShldmVudHNDb2xsZWN0b3IsIHRleHQsIHNvdXJjZSk7CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogImNvbXBvc2l0aW9uVHlwZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9zaXRpb25UeXBlKHRleHQsIHJlcGxhY2VQcmV2Q2hhckNudCwgcmVwbGFjZU5leHRDaGFyQ250LCBwb3NpdGlvbkRlbHRhLCBzb3VyY2UpIHsKICAgICAgdmFyIF90aGlzMTAgPSB0aGlzOwogICAgICB0aGlzLl9leGVjdXRlQ3Vyc29yRWRpdChmdW5jdGlvbiAoZXZlbnRzQ29sbGVjdG9yKSB7CiAgICAgICAgcmV0dXJuIF90aGlzMTAuX2N1cnNvci5jb21wb3NpdGlvblR5cGUoZXZlbnRzQ29sbGVjdG9yLCB0ZXh0LCByZXBsYWNlUHJldkNoYXJDbnQsIHJlcGxhY2VOZXh0Q2hhckNudCwgcG9zaXRpb25EZWx0YSwgc291cmNlKTsKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAicGFzdGUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBhc3RlKHRleHQsIHBhc3RlT25OZXdMaW5lLCBtdWx0aWN1cnNvclRleHQsIHNvdXJjZSkgewogICAgICB2YXIgX3RoaXMxMSA9IHRoaXM7CiAgICAgIHRoaXMuX2V4ZWN1dGVDdXJzb3JFZGl0KGZ1bmN0aW9uIChldmVudHNDb2xsZWN0b3IpIHsKICAgICAgICByZXR1cm4gX3RoaXMxMS5fY3Vyc29yLnBhc3RlKGV2ZW50c0NvbGxlY3RvciwgdGV4dCwgcGFzdGVPbk5ld0xpbmUsIG11bHRpY3Vyc29yVGV4dCwgc291cmNlKTsKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAiY3V0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBjdXQoc291cmNlKSB7CiAgICAgIHZhciBfdGhpczEyID0gdGhpczsKICAgICAgdGhpcy5fZXhlY3V0ZUN1cnNvckVkaXQoZnVuY3Rpb24gKGV2ZW50c0NvbGxlY3RvcikgewogICAgICAgIHJldHVybiBfdGhpczEyLl9jdXJzb3IuY3V0KGV2ZW50c0NvbGxlY3Rvciwgc291cmNlKTsKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAiZXhlY3V0ZUNvbW1hbmQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGV4ZWN1dGVDb21tYW5kKGNvbW1hbmQsIHNvdXJjZSkgewogICAgICB2YXIgX3RoaXMxMyA9IHRoaXM7CiAgICAgIHRoaXMuX2V4ZWN1dGVDdXJzb3JFZGl0KGZ1bmN0aW9uIChldmVudHNDb2xsZWN0b3IpIHsKICAgICAgICByZXR1cm4gX3RoaXMxMy5fY3Vyc29yLmV4ZWN1dGVDb21tYW5kKGV2ZW50c0NvbGxlY3RvciwgY29tbWFuZCwgc291cmNlKTsKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAiZXhlY3V0ZUNvbW1hbmRzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBleGVjdXRlQ29tbWFuZHMoY29tbWFuZHMsIHNvdXJjZSkgewogICAgICB2YXIgX3RoaXMxNCA9IHRoaXM7CiAgICAgIHRoaXMuX2V4ZWN1dGVDdXJzb3JFZGl0KGZ1bmN0aW9uIChldmVudHNDb2xsZWN0b3IpIHsKICAgICAgICByZXR1cm4gX3RoaXMxNC5fY3Vyc29yLmV4ZWN1dGVDb21tYW5kcyhldmVudHNDb2xsZWN0b3IsIGNvbW1hbmRzLCBzb3VyY2UpOwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJyZXZlYWxQcmltYXJ5Q3Vyc29yIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZXZlYWxQcmltYXJ5Q3Vyc29yKHNvdXJjZSwgcmV2ZWFsSG9yaXpvbnRhbCkgewogICAgICB2YXIgX3RoaXMxNSA9IHRoaXM7CiAgICAgIHZhciBtaW5pbWFsUmV2ZWFsID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBmYWxzZTsKICAgICAgdGhpcy5fd2l0aFZpZXdFdmVudHNDb2xsZWN0b3IoZnVuY3Rpb24gKGV2ZW50c0NvbGxlY3RvcikgewogICAgICAgIHJldHVybiBfdGhpczE1Ll9jdXJzb3IucmV2ZWFsUHJpbWFyeShldmVudHNDb2xsZWN0b3IsIHNvdXJjZSwgbWluaW1hbFJldmVhbCwgMCAvKiB2aWV3RXZlbnRzLlZlcnRpY2FsUmV2ZWFsVHlwZS5TaW1wbGUgKi8sIHJldmVhbEhvcml6b250YWwsIDAgLyogU2Nyb2xsVHlwZS5TbW9vdGggKi8pOwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJyZXZlYWxUb3BNb3N0Q3Vyc29yIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZXZlYWxUb3BNb3N0Q3Vyc29yKHNvdXJjZSkgewogICAgICB2YXIgdmlld1Bvc2l0aW9uID0gdGhpcy5fY3Vyc29yLmdldFRvcE1vc3RWaWV3UG9zaXRpb24oKTsKICAgICAgdmFyIHZpZXdSYW5nZSA9IG5ldyBSYW5nZSh2aWV3UG9zaXRpb24ubGluZU51bWJlciwgdmlld1Bvc2l0aW9uLmNvbHVtbiwgdmlld1Bvc2l0aW9uLmxpbmVOdW1iZXIsIHZpZXdQb3NpdGlvbi5jb2x1bW4pOwogICAgICB0aGlzLl93aXRoVmlld0V2ZW50c0NvbGxlY3RvcihmdW5jdGlvbiAoZXZlbnRzQ29sbGVjdG9yKSB7CiAgICAgICAgcmV0dXJuIGV2ZW50c0NvbGxlY3Rvci5lbWl0Vmlld0V2ZW50KG5ldyB2aWV3RXZlbnRzLlZpZXdSZXZlYWxSYW5nZVJlcXVlc3RFdmVudChzb3VyY2UsIGZhbHNlLCB2aWV3UmFuZ2UsIG51bGwsIDAgLyogdmlld0V2ZW50cy5WZXJ0aWNhbFJldmVhbFR5cGUuU2ltcGxlICovLCB0cnVlLCAwIC8qIFNjcm9sbFR5cGUuU21vb3RoICovKSk7CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogInJldmVhbEJvdHRvbU1vc3RDdXJzb3IiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJldmVhbEJvdHRvbU1vc3RDdXJzb3Ioc291cmNlKSB7CiAgICAgIHZhciB2aWV3UG9zaXRpb24gPSB0aGlzLl9jdXJzb3IuZ2V0Qm90dG9tTW9zdFZpZXdQb3NpdGlvbigpOwogICAgICB2YXIgdmlld1JhbmdlID0gbmV3IFJhbmdlKHZpZXdQb3NpdGlvbi5saW5lTnVtYmVyLCB2aWV3UG9zaXRpb24uY29sdW1uLCB2aWV3UG9zaXRpb24ubGluZU51bWJlciwgdmlld1Bvc2l0aW9uLmNvbHVtbik7CiAgICAgIHRoaXMuX3dpdGhWaWV3RXZlbnRzQ29sbGVjdG9yKGZ1bmN0aW9uIChldmVudHNDb2xsZWN0b3IpIHsKICAgICAgICByZXR1cm4gZXZlbnRzQ29sbGVjdG9yLmVtaXRWaWV3RXZlbnQobmV3IHZpZXdFdmVudHMuVmlld1JldmVhbFJhbmdlUmVxdWVzdEV2ZW50KHNvdXJjZSwgZmFsc2UsIHZpZXdSYW5nZSwgbnVsbCwgMCAvKiB2aWV3RXZlbnRzLlZlcnRpY2FsUmV2ZWFsVHlwZS5TaW1wbGUgKi8sIHRydWUsIDAgLyogU2Nyb2xsVHlwZS5TbW9vdGggKi8pKTsKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAicmV2ZWFsUmFuZ2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJldmVhbFJhbmdlKHNvdXJjZSwgcmV2ZWFsSG9yaXpvbnRhbCwgdmlld1JhbmdlLCB2ZXJ0aWNhbFR5cGUsIHNjcm9sbFR5cGUpIHsKICAgICAgdGhpcy5fd2l0aFZpZXdFdmVudHNDb2xsZWN0b3IoZnVuY3Rpb24gKGV2ZW50c0NvbGxlY3RvcikgewogICAgICAgIHJldHVybiBldmVudHNDb2xsZWN0b3IuZW1pdFZpZXdFdmVudChuZXcgdmlld0V2ZW50cy5WaWV3UmV2ZWFsUmFuZ2VSZXF1ZXN0RXZlbnQoc291cmNlLCBmYWxzZSwgdmlld1JhbmdlLCBudWxsLCB2ZXJ0aWNhbFR5cGUsIHJldmVhbEhvcml6b250YWwsIHNjcm9sbFR5cGUpKTsKICAgICAgfSk7CiAgICB9CiAgICAvLyNlbmRyZWdpb24KICAgIC8vI3JlZ2lvbiB2aWV3TGF5b3V0CiAgfSwgewogICAga2V5OiAiY2hhbmdlV2hpdGVzcGFjZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gY2hhbmdlV2hpdGVzcGFjZShjYWxsYmFjaykgewogICAgICB2YXIgaGFkQUNoYW5nZSA9IHRoaXMudmlld0xheW91dC5jaGFuZ2VXaGl0ZXNwYWNlKGNhbGxiYWNrKTsKICAgICAgaWYgKGhhZEFDaGFuZ2UpIHsKICAgICAgICB0aGlzLl9ldmVudERpc3BhdGNoZXIuZW1pdFNpbmdsZVZpZXdFdmVudChuZXcgdmlld0V2ZW50cy5WaWV3Wm9uZXNDaGFuZ2VkRXZlbnQoKSk7CiAgICAgICAgdGhpcy5fZXZlbnREaXNwYXRjaGVyLmVtaXRPdXRnb2luZ0V2ZW50KG5ldyBWaWV3Wm9uZXNDaGFuZ2VkRXZlbnQoKSk7CiAgICAgIH0KICAgIH0KICAgIC8vI2VuZHJlZ2lvbgogIH0sIHsKICAgIGtleTogIl93aXRoVmlld0V2ZW50c0NvbGxlY3RvciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX3dpdGhWaWV3RXZlbnRzQ29sbGVjdG9yKGNhbGxiYWNrKSB7CiAgICAgIHRyeSB7CiAgICAgICAgdmFyIGV2ZW50c0NvbGxlY3RvciA9IHRoaXMuX2V2ZW50RGlzcGF0Y2hlci5iZWdpbkVtaXRWaWV3RXZlbnRzKCk7CiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGV2ZW50c0NvbGxlY3Rvcik7CiAgICAgIH0gZmluYWxseSB7CiAgICAgICAgdGhpcy5fZXZlbnREaXNwYXRjaGVyLmVuZEVtaXRWaWV3RXZlbnRzKCk7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJub3JtYWxpemVQb3NpdGlvbiIsCiAgICB2YWx1ZTogZnVuY3Rpb24gbm9ybWFsaXplUG9zaXRpb24ocG9zaXRpb24sIGFmZmluaXR5KSB7CiAgICAgIHJldHVybiB0aGlzLl9saW5lcy5ub3JtYWxpemVQb3NpdGlvbihwb3NpdGlvbiwgYWZmaW5pdHkpOwogICAgfQogICAgLyoqCiAgICAgKiBHZXRzIHRoZSBjb2x1bW4gYXQgd2hpY2ggaW5kZW50YXRpb24gc3RvcHMgYXQgYSBnaXZlbiBsaW5lLgogICAgICogQGludGVybmFsCiAgICAqLwogIH0sIHsKICAgIGtleTogImdldExpbmVJbmRlbnRDb2x1bW4iLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldExpbmVJbmRlbnRDb2x1bW4obGluZU51bWJlcikgewogICAgICByZXR1cm4gdGhpcy5fbGluZXMuZ2V0TGluZUluZGVudENvbHVtbihsaW5lTnVtYmVyKTsKICAgIH0KICB9XSk7CiAgcmV0dXJuIFZpZXdNb2RlbDsKfShEaXNwb3NhYmxlKTsKdmFyIFZpZXdwb3J0U3RhcnQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIFZpZXdwb3J0U3RhcnQoX21vZGVsLCBfdmlld0xpbmVOdW1iZXIsIF9pc1ZhbGlkLCBfbW9kZWxUcmFja2VkUmFuZ2UsIF9zdGFydExpbmVEZWx0YSkgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFZpZXdwb3J0U3RhcnQpOwogICAgdGhpcy5fbW9kZWwgPSBfbW9kZWw7CiAgICB0aGlzLl92aWV3TGluZU51bWJlciA9IF92aWV3TGluZU51bWJlcjsKICAgIHRoaXMuX2lzVmFsaWQgPSBfaXNWYWxpZDsKICAgIHRoaXMuX21vZGVsVHJhY2tlZFJhbmdlID0gX21vZGVsVHJhY2tlZFJhbmdlOwogICAgdGhpcy5fc3RhcnRMaW5lRGVsdGEgPSBfc3RhcnRMaW5lRGVsdGE7CiAgfQogIF9jcmVhdGVDbGFzcyhWaWV3cG9ydFN0YXJ0LCBbewogICAga2V5OiAidmlld0xpbmVOdW1iZXIiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLl92aWV3TGluZU51bWJlcjsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJpc1ZhbGlkIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5faXNWYWxpZDsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJtb2RlbFRyYWNrZWRSYW5nZSIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMuX21vZGVsVHJhY2tlZFJhbmdlOwogICAgfQogIH0sIHsKICAgIGtleTogInN0YXJ0TGluZURlbHRhIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5fc3RhcnRMaW5lRGVsdGE7CiAgICB9CiAgfSwgewogICAga2V5OiAiZGlzcG9zZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZGlzcG9zZSgpIHsKICAgICAgdGhpcy5fbW9kZWwuX3NldFRyYWNrZWRSYW5nZSh0aGlzLl9tb2RlbFRyYWNrZWRSYW5nZSwgbnVsbCwgMSAvKiBUcmFja2VkUmFuZ2VTdGlja2luZXNzLk5ldmVyR3Jvd3NXaGVuVHlwaW5nQXRFZGdlcyAqLyk7CiAgICB9CiAgfSwgewogICAga2V5OiAidXBkYXRlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGUodmlld01vZGVsLCBzdGFydExpbmVOdW1iZXIpIHsKICAgICAgdmFyIHBvc2l0aW9uID0gdmlld01vZGVsLmNvb3JkaW5hdGVzQ29udmVydGVyLmNvbnZlcnRWaWV3UG9zaXRpb25Ub01vZGVsUG9zaXRpb24obmV3IFBvc2l0aW9uKHN0YXJ0TGluZU51bWJlciwgdmlld01vZGVsLmdldExpbmVNaW5Db2x1bW4oc3RhcnRMaW5lTnVtYmVyKSkpOwogICAgICB2YXIgdmlld3BvcnRTdGFydExpbmVUcmFja2VkUmFuZ2UgPSB2aWV3TW9kZWwubW9kZWwuX3NldFRyYWNrZWRSYW5nZSh0aGlzLl9tb2RlbFRyYWNrZWRSYW5nZSwgbmV3IFJhbmdlKHBvc2l0aW9uLmxpbmVOdW1iZXIsIHBvc2l0aW9uLmNvbHVtbiwgcG9zaXRpb24ubGluZU51bWJlciwgcG9zaXRpb24uY29sdW1uKSwgMSAvKiBUcmFja2VkUmFuZ2VTdGlja2luZXNzLk5ldmVyR3Jvd3NXaGVuVHlwaW5nQXRFZGdlcyAqLyk7CiAgICAgIHZhciB2aWV3cG9ydFN0YXJ0TGluZVRvcCA9IHZpZXdNb2RlbC52aWV3TGF5b3V0LmdldFZlcnRpY2FsT2Zmc2V0Rm9yTGluZU51bWJlcihzdGFydExpbmVOdW1iZXIpOwogICAgICB2YXIgc2Nyb2xsVG9wID0gdmlld01vZGVsLnZpZXdMYXlvdXQuZ2V0Q3VycmVudFNjcm9sbFRvcCgpOwogICAgICB0aGlzLl92aWV3TGluZU51bWJlciA9IHN0YXJ0TGluZU51bWJlcjsKICAgICAgdGhpcy5faXNWYWxpZCA9IHRydWU7CiAgICAgIHRoaXMuX21vZGVsVHJhY2tlZFJhbmdlID0gdmlld3BvcnRTdGFydExpbmVUcmFja2VkUmFuZ2U7CiAgICAgIHRoaXMuX3N0YXJ0TGluZURlbHRhID0gc2Nyb2xsVG9wIC0gdmlld3BvcnRTdGFydExpbmVUb3A7CiAgICB9CiAgfSwgewogICAga2V5OiAiaW52YWxpZGF0ZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gaW52YWxpZGF0ZSgpIHsKICAgICAgdGhpcy5faXNWYWxpZCA9IGZhbHNlOwogICAgfQogIH1dLCBbewogICAga2V5OiAiY3JlYXRlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGUobW9kZWwpIHsKICAgICAgdmFyIHZpZXdwb3J0U3RhcnRMaW5lVHJhY2tlZFJhbmdlID0gbW9kZWwuX3NldFRyYWNrZWRSYW5nZShudWxsLCBuZXcgUmFuZ2UoMSwgMSwgMSwgMSksIDEgLyogVHJhY2tlZFJhbmdlU3RpY2tpbmVzcy5OZXZlckdyb3dzV2hlblR5cGluZ0F0RWRnZXMgKi8pOwogICAgICByZXR1cm4gbmV3IFZpZXdwb3J0U3RhcnQobW9kZWwsIDEsIGZhbHNlLCB2aWV3cG9ydFN0YXJ0TGluZVRyYWNrZWRSYW5nZSwgMCk7CiAgICB9CiAgfV0pOwogIHJldHVybiBWaWV3cG9ydFN0YXJ0Owp9KCk7CnZhciBPdmVydmlld1J1bGVyRGVjb3JhdGlvbnMgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIE92ZXJ2aWV3UnVsZXJEZWNvcmF0aW9ucygpIHsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBPdmVydmlld1J1bGVyRGVjb3JhdGlvbnMpOwogICAgdGhpcy5fYXNNYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpOwogICAgdGhpcy5hc0FycmF5ID0gW107CiAgfQogIF9jcmVhdGVDbGFzcyhPdmVydmlld1J1bGVyRGVjb3JhdGlvbnMsIFt7CiAgICBrZXk6ICJhY2NlcHQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGFjY2VwdChjb2xvciwgekluZGV4LCBzdGFydExpbmVOdW1iZXIsIGVuZExpbmVOdW1iZXIsIGxhbmUpIHsKICAgICAgdmFyIHByZXZHcm91cCA9IHRoaXMuX2FzTWFwW2NvbG9yXTsKICAgICAgaWYgKHByZXZHcm91cCkgewogICAgICAgIHZhciBwcmV2RGF0YSA9IHByZXZHcm91cC5kYXRhOwogICAgICAgIHZhciBwcmV2TGFuZSA9IHByZXZEYXRhW3ByZXZEYXRhLmxlbmd0aCAtIDNdOwogICAgICAgIHZhciBwcmV2RW5kTGluZU51bWJlciA9IHByZXZEYXRhW3ByZXZEYXRhLmxlbmd0aCAtIDFdOwogICAgICAgIGlmIChwcmV2TGFuZSA9PT0gbGFuZSAmJiBwcmV2RW5kTGluZU51bWJlciArIDEgPj0gc3RhcnRMaW5lTnVtYmVyKSB7CiAgICAgICAgICAvLyBtZXJnZSBpbnRvIHByZXYKICAgICAgICAgIGlmIChlbmRMaW5lTnVtYmVyID4gcHJldkVuZExpbmVOdW1iZXIpIHsKICAgICAgICAgICAgcHJldkRhdGFbcHJldkRhdGEubGVuZ3RoIC0gMV0gPSBlbmRMaW5lTnVtYmVyOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICAvLyBwdXNoCiAgICAgICAgcHJldkRhdGEucHVzaChsYW5lLCBzdGFydExpbmVOdW1iZXIsIGVuZExpbmVOdW1iZXIpOwogICAgICB9IGVsc2UgewogICAgICAgIHZhciBncm91cCA9IG5ldyBPdmVydmlld1J1bGVyRGVjb3JhdGlvbnNHcm91cChjb2xvciwgekluZGV4LCBbbGFuZSwgc3RhcnRMaW5lTnVtYmVyLCBlbmRMaW5lTnVtYmVyXSk7CiAgICAgICAgdGhpcy5fYXNNYXBbY29sb3JdID0gZ3JvdXA7CiAgICAgICAgdGhpcy5hc0FycmF5LnB1c2goZ3JvdXApOwogICAgICB9CiAgICB9CiAgfV0pOwogIHJldHVybiBPdmVydmlld1J1bGVyRGVjb3JhdGlvbnM7Cn0oKTs="},{"version":3,"names":["ArrayQueue","RunOnceScheduler","Color","Disposable","platform","strings","EDITOR_FONT_DEFAULTS","filterValidationDecorations","CursorsController","CursorConfiguration","Position","Range","textModelEvents","TokenizationRegistry","PLAINTEXT_LANGUAGE_ID","tokenizeLineToHTML","viewEvents","ViewLayout","MinimapTokensColorTracker","MinimapLinesRenderingData","OverviewRulerDecorationsGroup","ViewLineRenderingData","ViewModelDecorations","FocusChangedEvent","HiddenAreasChangedEvent","ModelContentChangedEvent","ModelDecorationsChangedEvent","ModelLanguageChangedEvent","ModelLanguageConfigurationChangedEvent","ModelOptionsChangedEvent","ModelTokensChangedEvent","ReadOnlyEditAttemptEvent","ScrollChangedEvent","ViewModelEventDispatcher","ViewZonesChangedEvent","ViewModelLinesFromModelAsIs","ViewModelLinesFromProjectedModel","USE_IDENTITY_LINES_COLLECTION","ViewModel","editorId","configuration","model","domLineBreaksComputerFactory","monospaceLineBreaksComputerFactory","scheduleAtNextAnimationFrame","languageConfigurationService","_themeService","_editorId","_configuration","_eventDispatcher","onEvent","cursorConfig","getLanguageId","getOptions","_tokenizeViewportSoon","_register","tokenizeViewport","_updateConfigurationViewLineCount","_updateConfigurationViewLineCountNow","_hasFocus","_viewportStart","ViewportStart","create","isTooLargeForTokenization","_lines","options","fontInfo","get","wrappingStrategy","wrappingInfo","wrappingIndent","tabSize","wrappingColumn","coordinatesConverter","createCoordinatesConverter","_cursor","viewLayout","getLineCount","onDidScroll","e","scrollTopChanged","schedule","invalidate","emitSingleViewEvent","ViewScrollChangedEvent","emitOutgoingEvent","oldScrollWidth","oldScrollLeft","oldScrollHeight","oldScrollTop","scrollWidth","scrollLeft","scrollHeight","scrollTop","onDidContentSizeChange","_decorations","_registerModelEvents","onDidChangeFast","eventsCollector","beginEmitViewEvents","_onConfigurationChanged","endEmitViewEvents","getInstance","onDidChange","ViewTokensColorsChangedEvent","onDidColorThemeChange","theme","_invalidateDecorationsColorCache","ViewThemeChangedEvent","dispose","createLineBreaksComputer","eventHandler","addViewEventHandler","removeViewEventHandler","setViewLineCount","getViewLineCount","linesViewportData","getLinesViewportData","viewVisibleRange","startLineNumber","getLineMinColumn","endLineNumber","getLineMaxColumn","modelVisibleRanges","_toModelVisibleRanges","modelVisibleRange","tokenization","hasFocus","setHasFocus","ViewFocusChangedEvent","ViewCompositionStartEvent","ViewCompositionEndEvent","previousViewportStartModelPosition","isValid","previousViewportStartViewPosition","viewLineNumber","convertViewPositionToModelPosition","restorePreviousViewportStart","setWrappingSettings","emitViewEvent","ViewFlushedEvent","ViewLineMappingChangedEvent","ViewDecorationsChangedEvent","onLineMappingChanged","onFlushed","getCurrentScrollTop","hasChanged","reset","ViewConfigurationChangedEvent","onConfigurationChanged","viewPosition","convertModelPositionToViewPosition","viewPositionTop","getVerticalOffsetForLineNumber","lineNumber","setScrollPosition","startLineDelta","shouldRecreate","updateConfiguration","onDidChangeContentOrInjectedText","hadOtherModelChange","hadModelLineChangeThatChangedLineMapping","changes","InternalModelContentChangeEvent","rawContentChangedEvent","versionId","lineBreaksComputer","change","changeType","lineIdx","detail","length","line","injectedText","injectedTexts","filter","element","ownerId","addRequest","lineBreaks","finalize","lineBreakQueue","onModelFlushed","linesDeletedEvent","onModelLinesDeleted","fromLineNumber","toLineNumber","onLinesDeleted","insertedLineBreaks","takeCount","linesInsertedEvent","onModelLinesInserted","onLinesInserted","changedLineBreakData","dequeue","onModelLineChanged","lineMappingChanged","linesChangedEvent","acceptVersionId","onHeightMaybeChanged","viewportStartWasValid","setModelLineCount","getAttachedEditorCount","modelRange","_getTrackedRange","modelTrackedRange","getStartPosition","contentChangedEvent","onModelContentChanged","onDidChangeTokens","viewRanges","j","lenJ","ranges","viewStartLineNumber","viewEndLineNumber","ViewTokensChangedEvent","tokenizationSupportChanged","onDidChangeLanguageConfiguration","ViewLanguageConfigurationEvent","onDidChangeLanguage","onDidChangeOptions","setTabSize","onDidChangeDecorations","onModelDecorationsChanged","setHiddenAreas","layoutInfo","lineHeight","linesAround","Math","max","round","height","partialData","startViewLineNumber","completelyVisibleStartLineNumber","endViewLineNumber","min","completelyVisibleEndLineNumber","visibleViewRange","getCompletelyVisibleViewRange","getHiddenAreas","visibleRange","convertViewRangeToModelRange","hiddenAreas","result","resultLen","startColumn","endColumn","i","len","hiddenStartLineNumber","hiddenEndLineNumber","getLinesViewportDataAtScrollTop","compatViewState","saveState","firstViewLineNumber","getLineNumberAtVerticalOffset","firstPosition","firstPositionDeltaTop","state","_reduceRestoreStateCompatibility","modelPosition","validatePosition","scrollTopWithoutViewZones","centeredLineNumber","update","minLineNumber","maxLineNumber","getActiveIndentGuide","getViewLinesIndentGuides","activePosition","getViewLinesBracketGuides","getViewLineContent","getViewLineLength","getViewLineMinColumn","getViewLineMaxColumn","firstNonWhitespaceIndex","getLineContent","lastNonWhitespaceIndex","getDecorationsViewportData","decorations","getInjectedTextAt","allInlineDecorations","inlineDecorations","_getViewLineRenderingData","getInlineDecorationsOnLine","mightContainRTL","mightContainNonBasicASCII","getTabSize","lineData","getViewLineData","map","d","toInlineDecoration","minColumn","maxColumn","content","continuesWithWrappedLine","tokens","startVisibleColumn","needed","getViewLinesData","getOverviewRulerDecorations","OverviewRulerDecorations","decoration","decorationOptions","opts","overviewRuler","lane","position","color","getColor","value","getViewLineNumberOfModelPosition","range","accept","zIndex","asArray","opts1","invalidateCachedColor","opts2","minimap","eol","getValueInRange","viewAnchorPosition","deltaOffset","lineFeedCnt","modelAnchor","getEOL","modelAnchorOffset","getOffsetAt","resultOffset","getPositionAt","modelRanges","emptySelectionClipboard","forceCRLF","newLineCharacter","slice","sort","compareRangesUsingStarts","hasEmptyRange","hasNonEmptyRange","isEmpty","modelLineNumbers","r","prevModelLineNumber","modelLineNumber","push","languageId","colorMap","_getColorMap","hasBadChars","test","fontFamily","useDefaultFontFamily","replace","hasQuotesOrIsList","needsQuotes","mode","html","fontWeight","fontSize","_getHTMLToCopy","lineTokens","getLineTokens","lineContent","startOffset","endOffset","inflate","isWindows","getColorMap","Format","CSS","formatHex","getPrimaryCursorState","getLastAddedCursorIndex","getCursorStates","source","reason","states","_withViewEventsCollector","setStates","getCursorColumnSelectData","getAutoClosedCharacters","columnSelectData","setCursorColumnSelectData","getPrevEditOperationType","type","setPrevEditOperationType","getSelection","getSelections","modelState","selections","setSelections","restoreState","callback","context","readOnly","edits","cursorStateComputer","_executeCursorEdit","executeEdits","startComposition","endComposition","text","replacePrevCharCnt","replaceNextCharCnt","positionDelta","compositionType","pasteOnNewLine","multicursorText","paste","cut","command","executeCommand","commands","executeCommands","revealHorizontal","minimalReveal","revealPrimary","getTopMostViewPosition","viewRange","column","ViewRevealRangeRequestEvent","getBottomMostViewPosition","verticalType","scrollType","hadAChange","changeWhitespace","affinity","normalizePosition","getLineIndentColumn","_model","_viewLineNumber","_isValid","_modelTrackedRange","_startLineDelta","_setTrackedRange","viewModel","viewportStartLineTrackedRange","viewportStartLineTop","_asMap","Object","prevGroup","prevData","data","prevLane","prevEndLineNumber","group"],"sources":["/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/common/viewModel/viewModelImpl.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { ArrayQueue } from '../../../base/common/arrays.js';\nimport { RunOnceScheduler } from '../../../base/common/async.js';\nimport { Color } from '../../../base/common/color.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport * as platform from '../../../base/common/platform.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { EDITOR_FONT_DEFAULTS, filterValidationDecorations } from '../config/editorOptions.js';\nimport { CursorsController } from '../cursor/cursor.js';\nimport { CursorConfiguration } from '../cursorCommon.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport * as textModelEvents from '../textModelEvents.js';\nimport { TokenizationRegistry } from '../languages.js';\nimport { PLAINTEXT_LANGUAGE_ID } from '../languages/modesRegistry.js';\nimport { tokenizeLineToHTML } from '../languages/textToHtmlTokenizer.js';\nimport * as viewEvents from '../viewEvents.js';\nimport { ViewLayout } from '../viewLayout/viewLayout.js';\nimport { MinimapTokensColorTracker } from './minimapTokensColorTracker.js';\nimport { MinimapLinesRenderingData, OverviewRulerDecorationsGroup, ViewLineRenderingData } from '../viewModel.js';\nimport { ViewModelDecorations } from './viewModelDecorations.js';\nimport { FocusChangedEvent, HiddenAreasChangedEvent, ModelContentChangedEvent, ModelDecorationsChangedEvent, ModelLanguageChangedEvent, ModelLanguageConfigurationChangedEvent, ModelOptionsChangedEvent, ModelTokensChangedEvent, ReadOnlyEditAttemptEvent, ScrollChangedEvent, ViewModelEventDispatcher, ViewZonesChangedEvent } from '../viewModelEventDispatcher.js';\nimport { ViewModelLinesFromModelAsIs, ViewModelLinesFromProjectedModel } from './viewModelLines.js';\nconst USE_IDENTITY_LINES_COLLECTION = true;\nexport class ViewModel extends Disposable {\n    constructor(editorId, configuration, model, domLineBreaksComputerFactory, monospaceLineBreaksComputerFactory, scheduleAtNextAnimationFrame, languageConfigurationService, _themeService) {\n        super();\n        this.languageConfigurationService = languageConfigurationService;\n        this._themeService = _themeService;\n        this._editorId = editorId;\n        this._configuration = configuration;\n        this.model = model;\n        this._eventDispatcher = new ViewModelEventDispatcher();\n        this.onEvent = this._eventDispatcher.onEvent;\n        this.cursorConfig = new CursorConfiguration(this.model.getLanguageId(), this.model.getOptions(), this._configuration, this.languageConfigurationService);\n        this._tokenizeViewportSoon = this._register(new RunOnceScheduler(() => this.tokenizeViewport(), 50));\n        this._updateConfigurationViewLineCount = this._register(new RunOnceScheduler(() => this._updateConfigurationViewLineCountNow(), 0));\n        this._hasFocus = false;\n        this._viewportStart = ViewportStart.create(this.model);\n        if (USE_IDENTITY_LINES_COLLECTION && this.model.isTooLargeForTokenization()) {\n            this._lines = new ViewModelLinesFromModelAsIs(this.model);\n        }\n        else {\n            const options = this._configuration.options;\n            const fontInfo = options.get(46 /* EditorOption.fontInfo */);\n            const wrappingStrategy = options.get(127 /* EditorOption.wrappingStrategy */);\n            const wrappingInfo = options.get(134 /* EditorOption.wrappingInfo */);\n            const wrappingIndent = options.get(126 /* EditorOption.wrappingIndent */);\n            this._lines = new ViewModelLinesFromProjectedModel(this._editorId, this.model, domLineBreaksComputerFactory, monospaceLineBreaksComputerFactory, fontInfo, this.model.getOptions().tabSize, wrappingStrategy, wrappingInfo.wrappingColumn, wrappingIndent);\n        }\n        this.coordinatesConverter = this._lines.createCoordinatesConverter();\n        this._cursor = this._register(new CursorsController(model, this, this.coordinatesConverter, this.cursorConfig));\n        this.viewLayout = this._register(new ViewLayout(this._configuration, this.getLineCount(), scheduleAtNextAnimationFrame));\n        this._register(this.viewLayout.onDidScroll((e) => {\n            if (e.scrollTopChanged) {\n                this._tokenizeViewportSoon.schedule();\n            }\n            if (e.scrollTopChanged) {\n                this._viewportStart.invalidate();\n            }\n            this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewScrollChangedEvent(e));\n            this._eventDispatcher.emitOutgoingEvent(new ScrollChangedEvent(e.oldScrollWidth, e.oldScrollLeft, e.oldScrollHeight, e.oldScrollTop, e.scrollWidth, e.scrollLeft, e.scrollHeight, e.scrollTop));\n        }));\n        this._register(this.viewLayout.onDidContentSizeChange((e) => {\n            this._eventDispatcher.emitOutgoingEvent(e);\n        }));\n        this._decorations = new ViewModelDecorations(this._editorId, this.model, this._configuration, this._lines, this.coordinatesConverter);\n        this._registerModelEvents();\n        this._register(this._configuration.onDidChangeFast((e) => {\n            try {\n                const eventsCollector = this._eventDispatcher.beginEmitViewEvents();\n                this._onConfigurationChanged(eventsCollector, e);\n            }\n            finally {\n                this._eventDispatcher.endEmitViewEvents();\n            }\n        }));\n        this._register(MinimapTokensColorTracker.getInstance().onDidChange(() => {\n            this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewTokensColorsChangedEvent());\n        }));\n        this._register(this._themeService.onDidColorThemeChange((theme) => {\n            this._invalidateDecorationsColorCache();\n            this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewThemeChangedEvent(theme));\n        }));\n        this._updateConfigurationViewLineCountNow();\n    }\n    dispose() {\n        // First remove listeners, as disposing the lines might end up sending\n        // model decoration changed events ... and we no longer care about them ...\n        super.dispose();\n        this._decorations.dispose();\n        this._lines.dispose();\n        this._viewportStart.dispose();\n        this._eventDispatcher.dispose();\n    }\n    createLineBreaksComputer() {\n        return this._lines.createLineBreaksComputer();\n    }\n    addViewEventHandler(eventHandler) {\n        this._eventDispatcher.addViewEventHandler(eventHandler);\n    }\n    removeViewEventHandler(eventHandler) {\n        this._eventDispatcher.removeViewEventHandler(eventHandler);\n    }\n    _updateConfigurationViewLineCountNow() {\n        this._configuration.setViewLineCount(this._lines.getViewLineCount());\n    }\n    tokenizeViewport() {\n        const linesViewportData = this.viewLayout.getLinesViewportData();\n        const viewVisibleRange = new Range(linesViewportData.startLineNumber, this.getLineMinColumn(linesViewportData.startLineNumber), linesViewportData.endLineNumber, this.getLineMaxColumn(linesViewportData.endLineNumber));\n        const modelVisibleRanges = this._toModelVisibleRanges(viewVisibleRange);\n        for (const modelVisibleRange of modelVisibleRanges) {\n            this.model.tokenization.tokenizeViewport(modelVisibleRange.startLineNumber, modelVisibleRange.endLineNumber);\n        }\n    }\n    setHasFocus(hasFocus) {\n        this._hasFocus = hasFocus;\n        this._cursor.setHasFocus(hasFocus);\n        this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewFocusChangedEvent(hasFocus));\n        this._eventDispatcher.emitOutgoingEvent(new FocusChangedEvent(!hasFocus, hasFocus));\n    }\n    onCompositionStart() {\n        this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewCompositionStartEvent());\n    }\n    onCompositionEnd() {\n        this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewCompositionEndEvent());\n    }\n    _onConfigurationChanged(eventsCollector, e) {\n        // We might need to restore the current centered view range, so save it (if available)\n        let previousViewportStartModelPosition = null;\n        if (this._viewportStart.isValid) {\n            const previousViewportStartViewPosition = new Position(this._viewportStart.viewLineNumber, this.getLineMinColumn(this._viewportStart.viewLineNumber));\n            previousViewportStartModelPosition = this.coordinatesConverter.convertViewPositionToModelPosition(previousViewportStartViewPosition);\n        }\n        let restorePreviousViewportStart = false;\n        const options = this._configuration.options;\n        const fontInfo = options.get(46 /* EditorOption.fontInfo */);\n        const wrappingStrategy = options.get(127 /* EditorOption.wrappingStrategy */);\n        const wrappingInfo = options.get(134 /* EditorOption.wrappingInfo */);\n        const wrappingIndent = options.get(126 /* EditorOption.wrappingIndent */);\n        if (this._lines.setWrappingSettings(fontInfo, wrappingStrategy, wrappingInfo.wrappingColumn, wrappingIndent)) {\n            eventsCollector.emitViewEvent(new viewEvents.ViewFlushedEvent());\n            eventsCollector.emitViewEvent(new viewEvents.ViewLineMappingChangedEvent());\n            eventsCollector.emitViewEvent(new viewEvents.ViewDecorationsChangedEvent(null));\n            this._cursor.onLineMappingChanged(eventsCollector);\n            this._decorations.onLineMappingChanged();\n            this.viewLayout.onFlushed(this.getLineCount());\n            if (this.viewLayout.getCurrentScrollTop() !== 0) {\n                // Never change the scroll position from 0 to something else...\n                restorePreviousViewportStart = true;\n            }\n            this._updateConfigurationViewLineCount.schedule();\n        }\n        if (e.hasChanged(83 /* EditorOption.readOnly */)) {\n            // Must read again all decorations due to readOnly filtering\n            this._decorations.reset();\n            eventsCollector.emitViewEvent(new viewEvents.ViewDecorationsChangedEvent(null));\n        }\n        eventsCollector.emitViewEvent(new viewEvents.ViewConfigurationChangedEvent(e));\n        this.viewLayout.onConfigurationChanged(e);\n        if (restorePreviousViewportStart && previousViewportStartModelPosition) {\n            const viewPosition = this.coordinatesConverter.convertModelPositionToViewPosition(previousViewportStartModelPosition);\n            const viewPositionTop = this.viewLayout.getVerticalOffsetForLineNumber(viewPosition.lineNumber);\n            this.viewLayout.setScrollPosition({ scrollTop: viewPositionTop + this._viewportStart.startLineDelta }, 1 /* ScrollType.Immediate */);\n        }\n        if (CursorConfiguration.shouldRecreate(e)) {\n            this.cursorConfig = new CursorConfiguration(this.model.getLanguageId(), this.model.getOptions(), this._configuration, this.languageConfigurationService);\n            this._cursor.updateConfiguration(this.cursorConfig);\n        }\n    }\n    _registerModelEvents() {\n        this._register(this.model.onDidChangeContentOrInjectedText((e) => {\n            try {\n                const eventsCollector = this._eventDispatcher.beginEmitViewEvents();\n                let hadOtherModelChange = false;\n                let hadModelLineChangeThatChangedLineMapping = false;\n                const changes = (e instanceof textModelEvents.InternalModelContentChangeEvent ? e.rawContentChangedEvent.changes : e.changes);\n                const versionId = (e instanceof textModelEvents.InternalModelContentChangeEvent ? e.rawContentChangedEvent.versionId : null);\n                // Do a first pass to compute line mappings, and a second pass to actually interpret them\n                const lineBreaksComputer = this._lines.createLineBreaksComputer();\n                for (const change of changes) {\n                    switch (change.changeType) {\n                        case 4 /* textModelEvents.RawContentChangedType.LinesInserted */: {\n                            for (let lineIdx = 0; lineIdx < change.detail.length; lineIdx++) {\n                                const line = change.detail[lineIdx];\n                                let injectedText = change.injectedTexts[lineIdx];\n                                if (injectedText) {\n                                    injectedText = injectedText.filter(element => (!element.ownerId || element.ownerId === this._editorId));\n                                }\n                                lineBreaksComputer.addRequest(line, injectedText, null);\n                            }\n                            break;\n                        }\n                        case 2 /* textModelEvents.RawContentChangedType.LineChanged */: {\n                            let injectedText = null;\n                            if (change.injectedText) {\n                                injectedText = change.injectedText.filter(element => (!element.ownerId || element.ownerId === this._editorId));\n                            }\n                            lineBreaksComputer.addRequest(change.detail, injectedText, null);\n                            break;\n                        }\n                    }\n                }\n                const lineBreaks = lineBreaksComputer.finalize();\n                const lineBreakQueue = new ArrayQueue(lineBreaks);\n                for (const change of changes) {\n                    switch (change.changeType) {\n                        case 1 /* textModelEvents.RawContentChangedType.Flush */: {\n                            this._lines.onModelFlushed();\n                            eventsCollector.emitViewEvent(new viewEvents.ViewFlushedEvent());\n                            this._decorations.reset();\n                            this.viewLayout.onFlushed(this.getLineCount());\n                            hadOtherModelChange = true;\n                            break;\n                        }\n                        case 3 /* textModelEvents.RawContentChangedType.LinesDeleted */: {\n                            const linesDeletedEvent = this._lines.onModelLinesDeleted(versionId, change.fromLineNumber, change.toLineNumber);\n                            if (linesDeletedEvent !== null) {\n                                eventsCollector.emitViewEvent(linesDeletedEvent);\n                                this.viewLayout.onLinesDeleted(linesDeletedEvent.fromLineNumber, linesDeletedEvent.toLineNumber);\n                            }\n                            hadOtherModelChange = true;\n                            break;\n                        }\n                        case 4 /* textModelEvents.RawContentChangedType.LinesInserted */: {\n                            const insertedLineBreaks = lineBreakQueue.takeCount(change.detail.length);\n                            const linesInsertedEvent = this._lines.onModelLinesInserted(versionId, change.fromLineNumber, change.toLineNumber, insertedLineBreaks);\n                            if (linesInsertedEvent !== null) {\n                                eventsCollector.emitViewEvent(linesInsertedEvent);\n                                this.viewLayout.onLinesInserted(linesInsertedEvent.fromLineNumber, linesInsertedEvent.toLineNumber);\n                            }\n                            hadOtherModelChange = true;\n                            break;\n                        }\n                        case 2 /* textModelEvents.RawContentChangedType.LineChanged */: {\n                            const changedLineBreakData = lineBreakQueue.dequeue();\n                            const [lineMappingChanged, linesChangedEvent, linesInsertedEvent, linesDeletedEvent] = this._lines.onModelLineChanged(versionId, change.lineNumber, changedLineBreakData);\n                            hadModelLineChangeThatChangedLineMapping = lineMappingChanged;\n                            if (linesChangedEvent) {\n                                eventsCollector.emitViewEvent(linesChangedEvent);\n                            }\n                            if (linesInsertedEvent) {\n                                eventsCollector.emitViewEvent(linesInsertedEvent);\n                                this.viewLayout.onLinesInserted(linesInsertedEvent.fromLineNumber, linesInsertedEvent.toLineNumber);\n                            }\n                            if (linesDeletedEvent) {\n                                eventsCollector.emitViewEvent(linesDeletedEvent);\n                                this.viewLayout.onLinesDeleted(linesDeletedEvent.fromLineNumber, linesDeletedEvent.toLineNumber);\n                            }\n                            break;\n                        }\n                        case 5 /* textModelEvents.RawContentChangedType.EOLChanged */: {\n                            // Nothing to do. The new version will be accepted below\n                            break;\n                        }\n                    }\n                }\n                if (versionId !== null) {\n                    this._lines.acceptVersionId(versionId);\n                }\n                this.viewLayout.onHeightMaybeChanged();\n                if (!hadOtherModelChange && hadModelLineChangeThatChangedLineMapping) {\n                    eventsCollector.emitViewEvent(new viewEvents.ViewLineMappingChangedEvent());\n                    eventsCollector.emitViewEvent(new viewEvents.ViewDecorationsChangedEvent(null));\n                    this._cursor.onLineMappingChanged(eventsCollector);\n                    this._decorations.onLineMappingChanged();\n                }\n            }\n            finally {\n                this._eventDispatcher.endEmitViewEvents();\n            }\n            // Update the configuration and reset the centered view line\n            const viewportStartWasValid = this._viewportStart.isValid;\n            this._viewportStart.invalidate();\n            this._configuration.setModelLineCount(this.model.getLineCount());\n            this._updateConfigurationViewLineCountNow();\n            // Recover viewport\n            if (!this._hasFocus && this.model.getAttachedEditorCount() >= 2 && viewportStartWasValid) {\n                const modelRange = this.model._getTrackedRange(this._viewportStart.modelTrackedRange);\n                if (modelRange) {\n                    const viewPosition = this.coordinatesConverter.convertModelPositionToViewPosition(modelRange.getStartPosition());\n                    const viewPositionTop = this.viewLayout.getVerticalOffsetForLineNumber(viewPosition.lineNumber);\n                    this.viewLayout.setScrollPosition({ scrollTop: viewPositionTop + this._viewportStart.startLineDelta }, 1 /* ScrollType.Immediate */);\n                }\n            }\n            try {\n                const eventsCollector = this._eventDispatcher.beginEmitViewEvents();\n                if (e instanceof textModelEvents.InternalModelContentChangeEvent) {\n                    eventsCollector.emitOutgoingEvent(new ModelContentChangedEvent(e.contentChangedEvent));\n                }\n                this._cursor.onModelContentChanged(eventsCollector, e);\n            }\n            finally {\n                this._eventDispatcher.endEmitViewEvents();\n            }\n            this._tokenizeViewportSoon.schedule();\n        }));\n        this._register(this.model.onDidChangeTokens((e) => {\n            const viewRanges = [];\n            for (let j = 0, lenJ = e.ranges.length; j < lenJ; j++) {\n                const modelRange = e.ranges[j];\n                const viewStartLineNumber = this.coordinatesConverter.convertModelPositionToViewPosition(new Position(modelRange.fromLineNumber, 1)).lineNumber;\n                const viewEndLineNumber = this.coordinatesConverter.convertModelPositionToViewPosition(new Position(modelRange.toLineNumber, this.model.getLineMaxColumn(modelRange.toLineNumber))).lineNumber;\n                viewRanges[j] = {\n                    fromLineNumber: viewStartLineNumber,\n                    toLineNumber: viewEndLineNumber\n                };\n            }\n            this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewTokensChangedEvent(viewRanges));\n            if (e.tokenizationSupportChanged) {\n                this._tokenizeViewportSoon.schedule();\n            }\n            this._eventDispatcher.emitOutgoingEvent(new ModelTokensChangedEvent(e));\n        }));\n        this._register(this.model.onDidChangeLanguageConfiguration((e) => {\n            this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewLanguageConfigurationEvent());\n            this.cursorConfig = new CursorConfiguration(this.model.getLanguageId(), this.model.getOptions(), this._configuration, this.languageConfigurationService);\n            this._cursor.updateConfiguration(this.cursorConfig);\n            this._eventDispatcher.emitOutgoingEvent(new ModelLanguageConfigurationChangedEvent(e));\n        }));\n        this._register(this.model.onDidChangeLanguage((e) => {\n            this.cursorConfig = new CursorConfiguration(this.model.getLanguageId(), this.model.getOptions(), this._configuration, this.languageConfigurationService);\n            this._cursor.updateConfiguration(this.cursorConfig);\n            this._eventDispatcher.emitOutgoingEvent(new ModelLanguageChangedEvent(e));\n        }));\n        this._register(this.model.onDidChangeOptions((e) => {\n            // A tab size change causes a line mapping changed event => all view parts will repaint OK, no further event needed here\n            if (this._lines.setTabSize(this.model.getOptions().tabSize)) {\n                try {\n                    const eventsCollector = this._eventDispatcher.beginEmitViewEvents();\n                    eventsCollector.emitViewEvent(new viewEvents.ViewFlushedEvent());\n                    eventsCollector.emitViewEvent(new viewEvents.ViewLineMappingChangedEvent());\n                    eventsCollector.emitViewEvent(new viewEvents.ViewDecorationsChangedEvent(null));\n                    this._cursor.onLineMappingChanged(eventsCollector);\n                    this._decorations.onLineMappingChanged();\n                    this.viewLayout.onFlushed(this.getLineCount());\n                }\n                finally {\n                    this._eventDispatcher.endEmitViewEvents();\n                }\n                this._updateConfigurationViewLineCount.schedule();\n            }\n            this.cursorConfig = new CursorConfiguration(this.model.getLanguageId(), this.model.getOptions(), this._configuration, this.languageConfigurationService);\n            this._cursor.updateConfiguration(this.cursorConfig);\n            this._eventDispatcher.emitOutgoingEvent(new ModelOptionsChangedEvent(e));\n        }));\n        this._register(this.model.onDidChangeDecorations((e) => {\n            this._decorations.onModelDecorationsChanged();\n            this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewDecorationsChangedEvent(e));\n            this._eventDispatcher.emitOutgoingEvent(new ModelDecorationsChangedEvent(e));\n        }));\n    }\n    setHiddenAreas(ranges) {\n        let lineMappingChanged = false;\n        try {\n            const eventsCollector = this._eventDispatcher.beginEmitViewEvents();\n            lineMappingChanged = this._lines.setHiddenAreas(ranges);\n            if (lineMappingChanged) {\n                eventsCollector.emitViewEvent(new viewEvents.ViewFlushedEvent());\n                eventsCollector.emitViewEvent(new viewEvents.ViewLineMappingChangedEvent());\n                eventsCollector.emitViewEvent(new viewEvents.ViewDecorationsChangedEvent(null));\n                this._cursor.onLineMappingChanged(eventsCollector);\n                this._decorations.onLineMappingChanged();\n                this.viewLayout.onFlushed(this.getLineCount());\n                this.viewLayout.onHeightMaybeChanged();\n            }\n        }\n        finally {\n            this._eventDispatcher.endEmitViewEvents();\n        }\n        this._updateConfigurationViewLineCount.schedule();\n        if (lineMappingChanged) {\n            this._eventDispatcher.emitOutgoingEvent(new HiddenAreasChangedEvent());\n        }\n    }\n    getVisibleRangesPlusViewportAboveBelow() {\n        const layoutInfo = this._configuration.options.get(133 /* EditorOption.layoutInfo */);\n        const lineHeight = this._configuration.options.get(61 /* EditorOption.lineHeight */);\n        const linesAround = Math.max(20, Math.round(layoutInfo.height / lineHeight));\n        const partialData = this.viewLayout.getLinesViewportData();\n        const startViewLineNumber = Math.max(1, partialData.completelyVisibleStartLineNumber - linesAround);\n        const endViewLineNumber = Math.min(this.getLineCount(), partialData.completelyVisibleEndLineNumber + linesAround);\n        return this._toModelVisibleRanges(new Range(startViewLineNumber, this.getLineMinColumn(startViewLineNumber), endViewLineNumber, this.getLineMaxColumn(endViewLineNumber)));\n    }\n    getVisibleRanges() {\n        const visibleViewRange = this.getCompletelyVisibleViewRange();\n        return this._toModelVisibleRanges(visibleViewRange);\n    }\n    getHiddenAreas() {\n        return this._lines.getHiddenAreas();\n    }\n    _toModelVisibleRanges(visibleViewRange) {\n        const visibleRange = this.coordinatesConverter.convertViewRangeToModelRange(visibleViewRange);\n        const hiddenAreas = this._lines.getHiddenAreas();\n        if (hiddenAreas.length === 0) {\n            return [visibleRange];\n        }\n        const result = [];\n        let resultLen = 0;\n        let startLineNumber = visibleRange.startLineNumber;\n        let startColumn = visibleRange.startColumn;\n        const endLineNumber = visibleRange.endLineNumber;\n        const endColumn = visibleRange.endColumn;\n        for (let i = 0, len = hiddenAreas.length; i < len; i++) {\n            const hiddenStartLineNumber = hiddenAreas[i].startLineNumber;\n            const hiddenEndLineNumber = hiddenAreas[i].endLineNumber;\n            if (hiddenEndLineNumber < startLineNumber) {\n                continue;\n            }\n            if (hiddenStartLineNumber > endLineNumber) {\n                continue;\n            }\n            if (startLineNumber < hiddenStartLineNumber) {\n                result[resultLen++] = new Range(startLineNumber, startColumn, hiddenStartLineNumber - 1, this.model.getLineMaxColumn(hiddenStartLineNumber - 1));\n            }\n            startLineNumber = hiddenEndLineNumber + 1;\n            startColumn = 1;\n        }\n        if (startLineNumber < endLineNumber || (startLineNumber === endLineNumber && startColumn < endColumn)) {\n            result[resultLen++] = new Range(startLineNumber, startColumn, endLineNumber, endColumn);\n        }\n        return result;\n    }\n    getCompletelyVisibleViewRange() {\n        const partialData = this.viewLayout.getLinesViewportData();\n        const startViewLineNumber = partialData.completelyVisibleStartLineNumber;\n        const endViewLineNumber = partialData.completelyVisibleEndLineNumber;\n        return new Range(startViewLineNumber, this.getLineMinColumn(startViewLineNumber), endViewLineNumber, this.getLineMaxColumn(endViewLineNumber));\n    }\n    getCompletelyVisibleViewRangeAtScrollTop(scrollTop) {\n        const partialData = this.viewLayout.getLinesViewportDataAtScrollTop(scrollTop);\n        const startViewLineNumber = partialData.completelyVisibleStartLineNumber;\n        const endViewLineNumber = partialData.completelyVisibleEndLineNumber;\n        return new Range(startViewLineNumber, this.getLineMinColumn(startViewLineNumber), endViewLineNumber, this.getLineMaxColumn(endViewLineNumber));\n    }\n    saveState() {\n        const compatViewState = this.viewLayout.saveState();\n        const scrollTop = compatViewState.scrollTop;\n        const firstViewLineNumber = this.viewLayout.getLineNumberAtVerticalOffset(scrollTop);\n        const firstPosition = this.coordinatesConverter.convertViewPositionToModelPosition(new Position(firstViewLineNumber, this.getLineMinColumn(firstViewLineNumber)));\n        const firstPositionDeltaTop = this.viewLayout.getVerticalOffsetForLineNumber(firstViewLineNumber) - scrollTop;\n        return {\n            scrollLeft: compatViewState.scrollLeft,\n            firstPosition: firstPosition,\n            firstPositionDeltaTop: firstPositionDeltaTop\n        };\n    }\n    reduceRestoreState(state) {\n        if (typeof state.firstPosition === 'undefined') {\n            // This is a view state serialized by an older version\n            return this._reduceRestoreStateCompatibility(state);\n        }\n        const modelPosition = this.model.validatePosition(state.firstPosition);\n        const viewPosition = this.coordinatesConverter.convertModelPositionToViewPosition(modelPosition);\n        const scrollTop = this.viewLayout.getVerticalOffsetForLineNumber(viewPosition.lineNumber) - state.firstPositionDeltaTop;\n        return {\n            scrollLeft: state.scrollLeft,\n            scrollTop: scrollTop\n        };\n    }\n    _reduceRestoreStateCompatibility(state) {\n        return {\n            scrollLeft: state.scrollLeft,\n            scrollTop: state.scrollTopWithoutViewZones\n        };\n    }\n    getTabSize() {\n        return this.model.getOptions().tabSize;\n    }\n    getLineCount() {\n        return this._lines.getViewLineCount();\n    }\n    /**\n     * Gives a hint that a lot of requests are about to come in for these line numbers.\n     */\n    setViewport(startLineNumber, endLineNumber, centeredLineNumber) {\n        this._viewportStart.update(this, startLineNumber);\n    }\n    getActiveIndentGuide(lineNumber, minLineNumber, maxLineNumber) {\n        return this._lines.getActiveIndentGuide(lineNumber, minLineNumber, maxLineNumber);\n    }\n    getLinesIndentGuides(startLineNumber, endLineNumber) {\n        return this._lines.getViewLinesIndentGuides(startLineNumber, endLineNumber);\n    }\n    getBracketGuidesInRangeByLine(startLineNumber, endLineNumber, activePosition, options) {\n        return this._lines.getViewLinesBracketGuides(startLineNumber, endLineNumber, activePosition, options);\n    }\n    getLineContent(lineNumber) {\n        return this._lines.getViewLineContent(lineNumber);\n    }\n    getLineLength(lineNumber) {\n        return this._lines.getViewLineLength(lineNumber);\n    }\n    getLineMinColumn(lineNumber) {\n        return this._lines.getViewLineMinColumn(lineNumber);\n    }\n    getLineMaxColumn(lineNumber) {\n        return this._lines.getViewLineMaxColumn(lineNumber);\n    }\n    getLineFirstNonWhitespaceColumn(lineNumber) {\n        const result = strings.firstNonWhitespaceIndex(this.getLineContent(lineNumber));\n        if (result === -1) {\n            return 0;\n        }\n        return result + 1;\n    }\n    getLineLastNonWhitespaceColumn(lineNumber) {\n        const result = strings.lastNonWhitespaceIndex(this.getLineContent(lineNumber));\n        if (result === -1) {\n            return 0;\n        }\n        return result + 2;\n    }\n    getDecorationsInViewport(visibleRange) {\n        return this._decorations.getDecorationsViewportData(visibleRange).decorations;\n    }\n    getInjectedTextAt(viewPosition) {\n        return this._lines.getInjectedTextAt(viewPosition);\n    }\n    getViewportViewLineRenderingData(visibleRange, lineNumber) {\n        const allInlineDecorations = this._decorations.getDecorationsViewportData(visibleRange).inlineDecorations;\n        const inlineDecorations = allInlineDecorations[lineNumber - visibleRange.startLineNumber];\n        return this._getViewLineRenderingData(lineNumber, inlineDecorations);\n    }\n    getViewLineRenderingData(lineNumber) {\n        const inlineDecorations = this._decorations.getInlineDecorationsOnLine(lineNumber);\n        return this._getViewLineRenderingData(lineNumber, inlineDecorations);\n    }\n    _getViewLineRenderingData(lineNumber, inlineDecorations) {\n        const mightContainRTL = this.model.mightContainRTL();\n        const mightContainNonBasicASCII = this.model.mightContainNonBasicASCII();\n        const tabSize = this.getTabSize();\n        const lineData = this._lines.getViewLineData(lineNumber);\n        if (lineData.inlineDecorations) {\n            inlineDecorations = [\n                ...inlineDecorations,\n                ...lineData.inlineDecorations.map(d => d.toInlineDecoration(lineNumber))\n            ];\n        }\n        return new ViewLineRenderingData(lineData.minColumn, lineData.maxColumn, lineData.content, lineData.continuesWithWrappedLine, mightContainRTL, mightContainNonBasicASCII, lineData.tokens, inlineDecorations, tabSize, lineData.startVisibleColumn);\n    }\n    getViewLineData(lineNumber) {\n        return this._lines.getViewLineData(lineNumber);\n    }\n    getMinimapLinesRenderingData(startLineNumber, endLineNumber, needed) {\n        const result = this._lines.getViewLinesData(startLineNumber, endLineNumber, needed);\n        return new MinimapLinesRenderingData(this.getTabSize(), result);\n    }\n    getAllOverviewRulerDecorations(theme) {\n        const decorations = this.model.getOverviewRulerDecorations(this._editorId, filterValidationDecorations(this._configuration.options));\n        const result = new OverviewRulerDecorations();\n        for (const decoration of decorations) {\n            const decorationOptions = decoration.options;\n            const opts = decorationOptions.overviewRuler;\n            if (!opts) {\n                continue;\n            }\n            const lane = opts.position;\n            if (lane === 0) {\n                continue;\n            }\n            const color = opts.getColor(theme.value);\n            const viewStartLineNumber = this.coordinatesConverter.getViewLineNumberOfModelPosition(decoration.range.startLineNumber, decoration.range.startColumn);\n            const viewEndLineNumber = this.coordinatesConverter.getViewLineNumberOfModelPosition(decoration.range.endLineNumber, decoration.range.endColumn);\n            result.accept(color, decorationOptions.zIndex, viewStartLineNumber, viewEndLineNumber, lane);\n        }\n        return result.asArray;\n    }\n    _invalidateDecorationsColorCache() {\n        const decorations = this.model.getOverviewRulerDecorations();\n        for (const decoration of decorations) {\n            const opts1 = decoration.options.overviewRuler;\n            if (opts1) {\n                opts1.invalidateCachedColor();\n            }\n            const opts2 = decoration.options.minimap;\n            if (opts2) {\n                opts2.invalidateCachedColor();\n            }\n        }\n    }\n    getValueInRange(range, eol) {\n        const modelRange = this.coordinatesConverter.convertViewRangeToModelRange(range);\n        return this.model.getValueInRange(modelRange, eol);\n    }\n    deduceModelPositionRelativeToViewPosition(viewAnchorPosition, deltaOffset, lineFeedCnt) {\n        const modelAnchor = this.coordinatesConverter.convertViewPositionToModelPosition(viewAnchorPosition);\n        if (this.model.getEOL().length === 2) {\n            // This model uses CRLF, so the delta must take that into account\n            if (deltaOffset < 0) {\n                deltaOffset -= lineFeedCnt;\n            }\n            else {\n                deltaOffset += lineFeedCnt;\n            }\n        }\n        const modelAnchorOffset = this.model.getOffsetAt(modelAnchor);\n        const resultOffset = modelAnchorOffset + deltaOffset;\n        return this.model.getPositionAt(resultOffset);\n    }\n    getPlainTextToCopy(modelRanges, emptySelectionClipboard, forceCRLF) {\n        const newLineCharacter = forceCRLF ? '\\r\\n' : this.model.getEOL();\n        modelRanges = modelRanges.slice(0);\n        modelRanges.sort(Range.compareRangesUsingStarts);\n        let hasEmptyRange = false;\n        let hasNonEmptyRange = false;\n        for (const range of modelRanges) {\n            if (range.isEmpty()) {\n                hasEmptyRange = true;\n            }\n            else {\n                hasNonEmptyRange = true;\n            }\n        }\n        if (!hasNonEmptyRange) {\n            // all ranges are empty\n            if (!emptySelectionClipboard) {\n                return '';\n            }\n            const modelLineNumbers = modelRanges.map((r) => r.startLineNumber);\n            let result = '';\n            for (let i = 0; i < modelLineNumbers.length; i++) {\n                if (i > 0 && modelLineNumbers[i - 1] === modelLineNumbers[i]) {\n                    continue;\n                }\n                result += this.model.getLineContent(modelLineNumbers[i]) + newLineCharacter;\n            }\n            return result;\n        }\n        if (hasEmptyRange && emptySelectionClipboard) {\n            // mixed empty selections and non-empty selections\n            const result = [];\n            let prevModelLineNumber = 0;\n            for (const modelRange of modelRanges) {\n                const modelLineNumber = modelRange.startLineNumber;\n                if (modelRange.isEmpty()) {\n                    if (modelLineNumber !== prevModelLineNumber) {\n                        result.push(this.model.getLineContent(modelLineNumber));\n                    }\n                }\n                else {\n                    result.push(this.model.getValueInRange(modelRange, forceCRLF ? 2 /* EndOfLinePreference.CRLF */ : 0 /* EndOfLinePreference.TextDefined */));\n                }\n                prevModelLineNumber = modelLineNumber;\n            }\n            return result.length === 1 ? result[0] : result;\n        }\n        const result = [];\n        for (const modelRange of modelRanges) {\n            if (!modelRange.isEmpty()) {\n                result.push(this.model.getValueInRange(modelRange, forceCRLF ? 2 /* EndOfLinePreference.CRLF */ : 0 /* EndOfLinePreference.TextDefined */));\n            }\n        }\n        return result.length === 1 ? result[0] : result;\n    }\n    getRichTextToCopy(modelRanges, emptySelectionClipboard) {\n        const languageId = this.model.getLanguageId();\n        if (languageId === PLAINTEXT_LANGUAGE_ID) {\n            return null;\n        }\n        if (modelRanges.length !== 1) {\n            // no multiple selection support at this time\n            return null;\n        }\n        let range = modelRanges[0];\n        if (range.isEmpty()) {\n            if (!emptySelectionClipboard) {\n                // nothing to copy\n                return null;\n            }\n            const lineNumber = range.startLineNumber;\n            range = new Range(lineNumber, this.model.getLineMinColumn(lineNumber), lineNumber, this.model.getLineMaxColumn(lineNumber));\n        }\n        const fontInfo = this._configuration.options.get(46 /* EditorOption.fontInfo */);\n        const colorMap = this._getColorMap();\n        const hasBadChars = (/[:;\\\\\\/<>]/.test(fontInfo.fontFamily));\n        const useDefaultFontFamily = (hasBadChars || fontInfo.fontFamily === EDITOR_FONT_DEFAULTS.fontFamily);\n        let fontFamily;\n        if (useDefaultFontFamily) {\n            fontFamily = EDITOR_FONT_DEFAULTS.fontFamily;\n        }\n        else {\n            fontFamily = fontInfo.fontFamily;\n            fontFamily = fontFamily.replace(/\"/g, '\\'');\n            const hasQuotesOrIsList = /[,']/.test(fontFamily);\n            if (!hasQuotesOrIsList) {\n                const needsQuotes = /[+ ]/.test(fontFamily);\n                if (needsQuotes) {\n                    fontFamily = `'${fontFamily}'`;\n                }\n            }\n            fontFamily = `${fontFamily}, ${EDITOR_FONT_DEFAULTS.fontFamily}`;\n        }\n        return {\n            mode: languageId,\n            html: (`<div style=\"`\n                + `color: ${colorMap[1 /* ColorId.DefaultForeground */]};`\n                + `background-color: ${colorMap[2 /* ColorId.DefaultBackground */]};`\n                + `font-family: ${fontFamily};`\n                + `font-weight: ${fontInfo.fontWeight};`\n                + `font-size: ${fontInfo.fontSize}px;`\n                + `line-height: ${fontInfo.lineHeight}px;`\n                + `white-space: pre;`\n                + `\">`\n                + this._getHTMLToCopy(range, colorMap)\n                + '</div>')\n        };\n    }\n    _getHTMLToCopy(modelRange, colorMap) {\n        const startLineNumber = modelRange.startLineNumber;\n        const startColumn = modelRange.startColumn;\n        const endLineNumber = modelRange.endLineNumber;\n        const endColumn = modelRange.endColumn;\n        const tabSize = this.getTabSize();\n        let result = '';\n        for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n            const lineTokens = this.model.tokenization.getLineTokens(lineNumber);\n            const lineContent = lineTokens.getLineContent();\n            const startOffset = (lineNumber === startLineNumber ? startColumn - 1 : 0);\n            const endOffset = (lineNumber === endLineNumber ? endColumn - 1 : lineContent.length);\n            if (lineContent === '') {\n                result += '<br>';\n            }\n            else {\n                result += tokenizeLineToHTML(lineContent, lineTokens.inflate(), colorMap, startOffset, endOffset, tabSize, platform.isWindows);\n            }\n        }\n        return result;\n    }\n    _getColorMap() {\n        const colorMap = TokenizationRegistry.getColorMap();\n        const result = ['#000000'];\n        if (colorMap) {\n            for (let i = 1, len = colorMap.length; i < len; i++) {\n                result[i] = Color.Format.CSS.formatHex(colorMap[i]);\n            }\n        }\n        return result;\n    }\n    //#region cursor operations\n    getPrimaryCursorState() {\n        return this._cursor.getPrimaryCursorState();\n    }\n    getLastAddedCursorIndex() {\n        return this._cursor.getLastAddedCursorIndex();\n    }\n    getCursorStates() {\n        return this._cursor.getCursorStates();\n    }\n    setCursorStates(source, reason, states) {\n        return this._withViewEventsCollector(eventsCollector => this._cursor.setStates(eventsCollector, source, reason, states));\n    }\n    getCursorColumnSelectData() {\n        return this._cursor.getCursorColumnSelectData();\n    }\n    getCursorAutoClosedCharacters() {\n        return this._cursor.getAutoClosedCharacters();\n    }\n    setCursorColumnSelectData(columnSelectData) {\n        this._cursor.setCursorColumnSelectData(columnSelectData);\n    }\n    getPrevEditOperationType() {\n        return this._cursor.getPrevEditOperationType();\n    }\n    setPrevEditOperationType(type) {\n        this._cursor.setPrevEditOperationType(type);\n    }\n    getSelection() {\n        return this._cursor.getSelection();\n    }\n    getSelections() {\n        return this._cursor.getSelections();\n    }\n    getPosition() {\n        return this._cursor.getPrimaryCursorState().modelState.position;\n    }\n    setSelections(source, selections, reason = 0 /* CursorChangeReason.NotSet */) {\n        this._withViewEventsCollector(eventsCollector => this._cursor.setSelections(eventsCollector, source, selections, reason));\n    }\n    saveCursorState() {\n        return this._cursor.saveState();\n    }\n    restoreCursorState(states) {\n        this._withViewEventsCollector(eventsCollector => this._cursor.restoreState(eventsCollector, states));\n    }\n    _executeCursorEdit(callback) {\n        if (this._cursor.context.cursorConfig.readOnly) {\n            // we cannot edit when read only...\n            this._eventDispatcher.emitOutgoingEvent(new ReadOnlyEditAttemptEvent());\n            return;\n        }\n        this._withViewEventsCollector(callback);\n    }\n    executeEdits(source, edits, cursorStateComputer) {\n        this._executeCursorEdit(eventsCollector => this._cursor.executeEdits(eventsCollector, source, edits, cursorStateComputer));\n    }\n    startComposition() {\n        this._executeCursorEdit(eventsCollector => this._cursor.startComposition(eventsCollector));\n    }\n    endComposition(source) {\n        this._executeCursorEdit(eventsCollector => this._cursor.endComposition(eventsCollector, source));\n    }\n    type(text, source) {\n        this._executeCursorEdit(eventsCollector => this._cursor.type(eventsCollector, text, source));\n    }\n    compositionType(text, replacePrevCharCnt, replaceNextCharCnt, positionDelta, source) {\n        this._executeCursorEdit(eventsCollector => this._cursor.compositionType(eventsCollector, text, replacePrevCharCnt, replaceNextCharCnt, positionDelta, source));\n    }\n    paste(text, pasteOnNewLine, multicursorText, source) {\n        this._executeCursorEdit(eventsCollector => this._cursor.paste(eventsCollector, text, pasteOnNewLine, multicursorText, source));\n    }\n    cut(source) {\n        this._executeCursorEdit(eventsCollector => this._cursor.cut(eventsCollector, source));\n    }\n    executeCommand(command, source) {\n        this._executeCursorEdit(eventsCollector => this._cursor.executeCommand(eventsCollector, command, source));\n    }\n    executeCommands(commands, source) {\n        this._executeCursorEdit(eventsCollector => this._cursor.executeCommands(eventsCollector, commands, source));\n    }\n    revealPrimaryCursor(source, revealHorizontal, minimalReveal = false) {\n        this._withViewEventsCollector(eventsCollector => this._cursor.revealPrimary(eventsCollector, source, minimalReveal, 0 /* viewEvents.VerticalRevealType.Simple */, revealHorizontal, 0 /* ScrollType.Smooth */));\n    }\n    revealTopMostCursor(source) {\n        const viewPosition = this._cursor.getTopMostViewPosition();\n        const viewRange = new Range(viewPosition.lineNumber, viewPosition.column, viewPosition.lineNumber, viewPosition.column);\n        this._withViewEventsCollector(eventsCollector => eventsCollector.emitViewEvent(new viewEvents.ViewRevealRangeRequestEvent(source, false, viewRange, null, 0 /* viewEvents.VerticalRevealType.Simple */, true, 0 /* ScrollType.Smooth */)));\n    }\n    revealBottomMostCursor(source) {\n        const viewPosition = this._cursor.getBottomMostViewPosition();\n        const viewRange = new Range(viewPosition.lineNumber, viewPosition.column, viewPosition.lineNumber, viewPosition.column);\n        this._withViewEventsCollector(eventsCollector => eventsCollector.emitViewEvent(new viewEvents.ViewRevealRangeRequestEvent(source, false, viewRange, null, 0 /* viewEvents.VerticalRevealType.Simple */, true, 0 /* ScrollType.Smooth */)));\n    }\n    revealRange(source, revealHorizontal, viewRange, verticalType, scrollType) {\n        this._withViewEventsCollector(eventsCollector => eventsCollector.emitViewEvent(new viewEvents.ViewRevealRangeRequestEvent(source, false, viewRange, null, verticalType, revealHorizontal, scrollType)));\n    }\n    //#endregion\n    //#region viewLayout\n    changeWhitespace(callback) {\n        const hadAChange = this.viewLayout.changeWhitespace(callback);\n        if (hadAChange) {\n            this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewZonesChangedEvent());\n            this._eventDispatcher.emitOutgoingEvent(new ViewZonesChangedEvent());\n        }\n    }\n    //#endregion\n    _withViewEventsCollector(callback) {\n        try {\n            const eventsCollector = this._eventDispatcher.beginEmitViewEvents();\n            return callback(eventsCollector);\n        }\n        finally {\n            this._eventDispatcher.endEmitViewEvents();\n        }\n    }\n    normalizePosition(position, affinity) {\n        return this._lines.normalizePosition(position, affinity);\n    }\n    /**\n     * Gets the column at which indentation stops at a given line.\n     * @internal\n    */\n    getLineIndentColumn(lineNumber) {\n        return this._lines.getLineIndentColumn(lineNumber);\n    }\n}\nclass ViewportStart {\n    constructor(_model, _viewLineNumber, _isValid, _modelTrackedRange, _startLineDelta) {\n        this._model = _model;\n        this._viewLineNumber = _viewLineNumber;\n        this._isValid = _isValid;\n        this._modelTrackedRange = _modelTrackedRange;\n        this._startLineDelta = _startLineDelta;\n    }\n    static create(model) {\n        const viewportStartLineTrackedRange = model._setTrackedRange(null, new Range(1, 1, 1, 1), 1 /* TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges */);\n        return new ViewportStart(model, 1, false, viewportStartLineTrackedRange, 0);\n    }\n    get viewLineNumber() {\n        return this._viewLineNumber;\n    }\n    get isValid() {\n        return this._isValid;\n    }\n    get modelTrackedRange() {\n        return this._modelTrackedRange;\n    }\n    get startLineDelta() {\n        return this._startLineDelta;\n    }\n    dispose() {\n        this._model._setTrackedRange(this._modelTrackedRange, null, 1 /* TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges */);\n    }\n    update(viewModel, startLineNumber) {\n        const position = viewModel.coordinatesConverter.convertViewPositionToModelPosition(new Position(startLineNumber, viewModel.getLineMinColumn(startLineNumber)));\n        const viewportStartLineTrackedRange = viewModel.model._setTrackedRange(this._modelTrackedRange, new Range(position.lineNumber, position.column, position.lineNumber, position.column), 1 /* TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges */);\n        const viewportStartLineTop = viewModel.viewLayout.getVerticalOffsetForLineNumber(startLineNumber);\n        const scrollTop = viewModel.viewLayout.getCurrentScrollTop();\n        this._viewLineNumber = startLineNumber;\n        this._isValid = true;\n        this._modelTrackedRange = viewportStartLineTrackedRange;\n        this._startLineDelta = scrollTop - viewportStartLineTop;\n    }\n    invalidate() {\n        this._isValid = false;\n    }\n}\nclass OverviewRulerDecorations {\n    constructor() {\n        this._asMap = Object.create(null);\n        this.asArray = [];\n    }\n    accept(color, zIndex, startLineNumber, endLineNumber, lane) {\n        const prevGroup = this._asMap[color];\n        if (prevGroup) {\n            const prevData = prevGroup.data;\n            const prevLane = prevData[prevData.length - 3];\n            const prevEndLineNumber = prevData[prevData.length - 1];\n            if (prevLane === lane && prevEndLineNumber + 1 >= startLineNumber) {\n                // merge into prev\n                if (endLineNumber > prevEndLineNumber) {\n                    prevData[prevData.length - 1] = endLineNumber;\n                }\n                return;\n            }\n            // push\n            prevData.push(lane, startLineNumber, endLineNumber);\n        }\n        else {\n            const group = new OverviewRulerDecorationsGroup(color, zIndex, [lane, startLineNumber, endLineNumber]);\n            this._asMap[color] = group;\n            this.asArray.push(group);\n        }\n    }\n}\n"],"mappings":"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"}]}