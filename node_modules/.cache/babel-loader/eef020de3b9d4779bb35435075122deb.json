{"remainingRequest":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/thread-loader/dist/cjs.js!/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js!/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/common/tokens/lineTokens.js","dependencies":[{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/common/tokens/lineTokens.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/babel.config.js","mtime":1668271197000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js","mtime":456789000000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["TokenMetadata","LineTokens","tokens","text","decoder","_lineTokensBrand","undefined","_tokens","_tokensCount","length","_text","_languageIdCodec","other","slicedEquals","sliceFromTokenIndex","sliceTokenCount","from","to","i","tokenIndex","metadata","languageId","getLanguageId","decodeLanguageId","getTokenType","getForeground","getClassNameFromMetadata","colorMap","getInlineStyleFromMetadata","getPresentationFromMetadata","offset","findIndexInTokensArray","startOffset","endOffset","deltaOffset","SliceLineTokens","insertTokens","nextOriginalTokenIdx","nextInsertTokenIdx","newTokens","Array","originalEndOffset","nextOriginalTokenEndOffset","nextInsertToken","substring","push","tokenMetadata","Uint32Array","lineContent","defaultMetadata","defaultTokenMetadata","lineTextLength","tokenCount","lastTokenIndex","desiredIndex","low","high","mid","Math","floor","source","_source","_startOffset","_endOffset","_deltaOffset","_firstTokenIndex","findTokenIndexAtOffset","len","getCount","tokenStartOffset","getStartOffset","getMetadata","getLineContent","tokenEndOffset","getEndOffset","min","getClassName","getInlineStyle","getPresentation"],"sources":["/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/common/tokens/lineTokens.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { TokenMetadata } from '../encodedTokenAttributes.js';\nexport class LineTokens {\n    constructor(tokens, text, decoder) {\n        this._lineTokensBrand = undefined;\n        this._tokens = tokens;\n        this._tokensCount = (this._tokens.length >>> 1);\n        this._text = text;\n        this._languageIdCodec = decoder;\n    }\n    static createEmpty(lineContent, decoder) {\n        const defaultMetadata = LineTokens.defaultTokenMetadata;\n        const tokens = new Uint32Array(2);\n        tokens[0] = lineContent.length;\n        tokens[1] = defaultMetadata;\n        return new LineTokens(tokens, lineContent, decoder);\n    }\n    equals(other) {\n        if (other instanceof LineTokens) {\n            return this.slicedEquals(other, 0, this._tokensCount);\n        }\n        return false;\n    }\n    slicedEquals(other, sliceFromTokenIndex, sliceTokenCount) {\n        if (this._text !== other._text) {\n            return false;\n        }\n        if (this._tokensCount !== other._tokensCount) {\n            return false;\n        }\n        const from = (sliceFromTokenIndex << 1);\n        const to = from + (sliceTokenCount << 1);\n        for (let i = from; i < to; i++) {\n            if (this._tokens[i] !== other._tokens[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    getLineContent() {\n        return this._text;\n    }\n    getCount() {\n        return this._tokensCount;\n    }\n    getStartOffset(tokenIndex) {\n        if (tokenIndex > 0) {\n            return this._tokens[(tokenIndex - 1) << 1];\n        }\n        return 0;\n    }\n    getMetadata(tokenIndex) {\n        const metadata = this._tokens[(tokenIndex << 1) + 1];\n        return metadata;\n    }\n    getLanguageId(tokenIndex) {\n        const metadata = this._tokens[(tokenIndex << 1) + 1];\n        const languageId = TokenMetadata.getLanguageId(metadata);\n        return this._languageIdCodec.decodeLanguageId(languageId);\n    }\n    getStandardTokenType(tokenIndex) {\n        const metadata = this._tokens[(tokenIndex << 1) + 1];\n        return TokenMetadata.getTokenType(metadata);\n    }\n    getForeground(tokenIndex) {\n        const metadata = this._tokens[(tokenIndex << 1) + 1];\n        return TokenMetadata.getForeground(metadata);\n    }\n    getClassName(tokenIndex) {\n        const metadata = this._tokens[(tokenIndex << 1) + 1];\n        return TokenMetadata.getClassNameFromMetadata(metadata);\n    }\n    getInlineStyle(tokenIndex, colorMap) {\n        const metadata = this._tokens[(tokenIndex << 1) + 1];\n        return TokenMetadata.getInlineStyleFromMetadata(metadata, colorMap);\n    }\n    getPresentation(tokenIndex) {\n        const metadata = this._tokens[(tokenIndex << 1) + 1];\n        return TokenMetadata.getPresentationFromMetadata(metadata);\n    }\n    getEndOffset(tokenIndex) {\n        return this._tokens[tokenIndex << 1];\n    }\n    /**\n     * Find the token containing offset `offset`.\n     * @param offset The search offset\n     * @return The index of the token containing the offset.\n     */\n    findTokenIndexAtOffset(offset) {\n        return LineTokens.findIndexInTokensArray(this._tokens, offset);\n    }\n    inflate() {\n        return this;\n    }\n    sliceAndInflate(startOffset, endOffset, deltaOffset) {\n        return new SliceLineTokens(this, startOffset, endOffset, deltaOffset);\n    }\n    static convertToEndOffset(tokens, lineTextLength) {\n        const tokenCount = (tokens.length >>> 1);\n        const lastTokenIndex = tokenCount - 1;\n        for (let tokenIndex = 0; tokenIndex < lastTokenIndex; tokenIndex++) {\n            tokens[tokenIndex << 1] = tokens[(tokenIndex + 1) << 1];\n        }\n        tokens[lastTokenIndex << 1] = lineTextLength;\n    }\n    static findIndexInTokensArray(tokens, desiredIndex) {\n        if (tokens.length <= 2) {\n            return 0;\n        }\n        let low = 0;\n        let high = (tokens.length >>> 1) - 1;\n        while (low < high) {\n            const mid = low + Math.floor((high - low) / 2);\n            const endOffset = tokens[(mid << 1)];\n            if (endOffset === desiredIndex) {\n                return mid + 1;\n            }\n            else if (endOffset < desiredIndex) {\n                low = mid + 1;\n            }\n            else if (endOffset > desiredIndex) {\n                high = mid;\n            }\n        }\n        return low;\n    }\n    /**\n     * @pure\n     * @param insertTokens Must be sorted by offset.\n    */\n    withInserted(insertTokens) {\n        if (insertTokens.length === 0) {\n            return this;\n        }\n        let nextOriginalTokenIdx = 0;\n        let nextInsertTokenIdx = 0;\n        let text = '';\n        const newTokens = new Array();\n        let originalEndOffset = 0;\n        while (true) {\n            const nextOriginalTokenEndOffset = nextOriginalTokenIdx < this._tokensCount ? this._tokens[nextOriginalTokenIdx << 1] : -1;\n            const nextInsertToken = nextInsertTokenIdx < insertTokens.length ? insertTokens[nextInsertTokenIdx] : null;\n            if (nextOriginalTokenEndOffset !== -1 && (nextInsertToken === null || nextOriginalTokenEndOffset <= nextInsertToken.offset)) {\n                // original token ends before next insert token\n                text += this._text.substring(originalEndOffset, nextOriginalTokenEndOffset);\n                const metadata = this._tokens[(nextOriginalTokenIdx << 1) + 1];\n                newTokens.push(text.length, metadata);\n                nextOriginalTokenIdx++;\n                originalEndOffset = nextOriginalTokenEndOffset;\n            }\n            else if (nextInsertToken) {\n                if (nextInsertToken.offset > originalEndOffset) {\n                    // insert token is in the middle of the next token.\n                    text += this._text.substring(originalEndOffset, nextInsertToken.offset);\n                    const metadata = this._tokens[(nextOriginalTokenIdx << 1) + 1];\n                    newTokens.push(text.length, metadata);\n                    originalEndOffset = nextInsertToken.offset;\n                }\n                text += nextInsertToken.text;\n                newTokens.push(text.length, nextInsertToken.tokenMetadata);\n                nextInsertTokenIdx++;\n            }\n            else {\n                break;\n            }\n        }\n        return new LineTokens(new Uint32Array(newTokens), text, this._languageIdCodec);\n    }\n}\nLineTokens.defaultTokenMetadata = ((0 /* FontStyle.None */ << 11 /* MetadataConsts.FONT_STYLE_OFFSET */)\n    | (1 /* ColorId.DefaultForeground */ << 15 /* MetadataConsts.FOREGROUND_OFFSET */)\n    | (2 /* ColorId.DefaultBackground */ << 24 /* MetadataConsts.BACKGROUND_OFFSET */)) >>> 0;\nclass SliceLineTokens {\n    constructor(source, startOffset, endOffset, deltaOffset) {\n        this._source = source;\n        this._startOffset = startOffset;\n        this._endOffset = endOffset;\n        this._deltaOffset = deltaOffset;\n        this._firstTokenIndex = source.findTokenIndexAtOffset(startOffset);\n        this._tokensCount = 0;\n        for (let i = this._firstTokenIndex, len = source.getCount(); i < len; i++) {\n            const tokenStartOffset = source.getStartOffset(i);\n            if (tokenStartOffset >= endOffset) {\n                break;\n            }\n            this._tokensCount++;\n        }\n    }\n    getMetadata(tokenIndex) {\n        return this._source.getMetadata(this._firstTokenIndex + tokenIndex);\n    }\n    getLanguageId(tokenIndex) {\n        return this._source.getLanguageId(this._firstTokenIndex + tokenIndex);\n    }\n    getLineContent() {\n        return this._source.getLineContent().substring(this._startOffset, this._endOffset);\n    }\n    equals(other) {\n        if (other instanceof SliceLineTokens) {\n            return (this._startOffset === other._startOffset\n                && this._endOffset === other._endOffset\n                && this._deltaOffset === other._deltaOffset\n                && this._source.slicedEquals(other._source, this._firstTokenIndex, this._tokensCount));\n        }\n        return false;\n    }\n    getCount() {\n        return this._tokensCount;\n    }\n    getForeground(tokenIndex) {\n        return this._source.getForeground(this._firstTokenIndex + tokenIndex);\n    }\n    getEndOffset(tokenIndex) {\n        const tokenEndOffset = this._source.getEndOffset(this._firstTokenIndex + tokenIndex);\n        return Math.min(this._endOffset, tokenEndOffset) - this._startOffset + this._deltaOffset;\n    }\n    getClassName(tokenIndex) {\n        return this._source.getClassName(this._firstTokenIndex + tokenIndex);\n    }\n    getInlineStyle(tokenIndex, colorMap) {\n        return this._source.getInlineStyle(this._firstTokenIndex + tokenIndex, colorMap);\n    }\n    getPresentation(tokenIndex) {\n        return this._source.getPresentation(this._firstTokenIndex + tokenIndex);\n    }\n    findTokenIndexAtOffset(offset) {\n        return this._source.findTokenIndexAtOffset(offset + this._startOffset - this._deltaOffset) - this._firstTokenIndex;\n    }\n}\n"],"mappings":"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"}]}