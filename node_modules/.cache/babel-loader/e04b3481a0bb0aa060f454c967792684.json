{"remainingRequest":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js!/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/base/common/event.js","dependencies":[{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/base/common/event.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/babel.config.js","mtime":1668271197000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js","mtime":456789000000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["onUnexpectedError","combinedDisposable","Disposable","DisposableStore","SafeDisposable","toDisposable","LinkedList","StopWatch","_enableDisposeWithListenerWarning","_enableSnapshotPotentialLeakWarning","Event","None","_addLeakageTraceLogic","options","origListenerDidAdd","onListenerDidAdd","stack","Stacktrace","create","count","console","warn","print","once","event","listener","thisArgs","disposables","didFire","result","undefined","e","dispose","call","map","disposable","snapshot","i","forEach","each","filter","signal","any","events","reduce","merge","initial","output","onFirstListenerAdd","emitter","fire","onLastListenerRemove","Emitter","add","debounce","delay","leading","leakWarningThreshold","subscription","handle","numDebouncedCalls","cur","clearTimeout","setTimeout","_output","latch","equals","a","b","firstCall","cache","value","shouldEmit","split","isT","buffer","flushAfterTimeout","_buffer","slice","push","flush","onFirstListenerDidAdd","ChainableEvent","fn","chain","fromNodeEventEmitter","eventName","id","on","removeListener","fromDOMEventEmitter","addEventListener","removeEventListener","toPromise","Promise","resolve","runAndSubscribe","handler","runAndSubscribeWithStore","store","run","EmitterObserver","obs","_counter","_hasChanged","addObserver","removeObserver","_observable","_change","get","fromObservable","observer","EventProfiling","name","_listenerCount","_invocationCount","_elapsedOverall","_name","_idPool","listenerCount","_stopWatch","elapsed","info","toFixed","_globalLeakWarningThreshold","LeakageMonitor","customThreshold","Math","random","toString","_warnCountdown","_stacks","clear","threshold","Map","set","topStack","topCount","join","_a","Error","Listener","callback","callbackThis","_b","_disposed","_options","_leakageMon","_perfMon","_profName","_deliveryQueue","deliveryQueue","_c","_d","_listeners","listeners","Array","from","queueMicrotask","isset","unset","_event","firstListener","isEmpty","removeMonitor","size","check","hasListeners","isArray","PrivateEventDeliveryQueue","start","deliver","stop","EventDeliveryQueue","_queue","EventDeliveryQueueElement","newQueue","element","shift","invoke","PauseableEmitter","_isPaused","_eventQueue","_mergeFn","DebounceEmitter","_delay","_handle","pause","resume","EventBufferer","buffers","length","r","pop","Relay","listening","inputEvent","inputEventListener"],"sources":["/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/base/common/event.js"],"sourcesContent":["import { onUnexpectedError } from './errors.js';\nimport { combinedDisposable, Disposable, DisposableStore, SafeDisposable, toDisposable } from './lifecycle.js';\nimport { LinkedList } from './linkedList.js';\nimport { StopWatch } from './stopwatch.js';\n// -----------------------------------------------------------------------------------------------------------------------\n// Uncomment the next line to print warnings whenever an emitter with listeners is disposed. That is a sign of code smell.\n// -----------------------------------------------------------------------------------------------------------------------\nconst _enableDisposeWithListenerWarning = false;\n// _enableDisposeWithListenerWarning = Boolean(\"TRUE\"); // causes a linter warning so that it cannot be pushed\n// -----------------------------------------------------------------------------------------------------------------------\n// Uncomment the next line to print warnings whenever a snapshotted event is used repeatedly without cleanup.\n// See https://github.com/microsoft/vscode/issues/142851\n// -----------------------------------------------------------------------------------------------------------------------\nconst _enableSnapshotPotentialLeakWarning = false;\nexport var Event;\n(function (Event) {\n    Event.None = () => Disposable.None;\n    function _addLeakageTraceLogic(options) {\n        if (_enableSnapshotPotentialLeakWarning) {\n            const { onListenerDidAdd: origListenerDidAdd } = options;\n            const stack = Stacktrace.create();\n            let count = 0;\n            options.onListenerDidAdd = () => {\n                if (++count === 2) {\n                    console.warn('snapshotted emitter LIKELY used public and SHOULD HAVE BEEN created with DisposableStore. snapshotted here');\n                    stack.print();\n                }\n                origListenerDidAdd === null || origListenerDidAdd === void 0 ? void 0 : origListenerDidAdd();\n            };\n        }\n    }\n    /**\n     * Given an event, returns another event which only fires once.\n     */\n    function once(event) {\n        return (listener, thisArgs = null, disposables) => {\n            // we need this, in case the event fires during the listener call\n            let didFire = false;\n            let result = undefined;\n            result = event(e => {\n                if (didFire) {\n                    return;\n                }\n                else if (result) {\n                    result.dispose();\n                }\n                else {\n                    didFire = true;\n                }\n                return listener.call(thisArgs, e);\n            }, null, disposables);\n            if (didFire) {\n                result.dispose();\n            }\n            return result;\n        };\n    }\n    Event.once = once;\n    /**\n     * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned\n     * event is accessible to \"third parties\", e.g the event is a public property. Otherwise a leaked listener on the\n     * returned event causes this utility to leak a listener on the original event.\n     */\n    function map(event, map, disposable) {\n        return snapshot((listener, thisArgs = null, disposables) => event(i => listener.call(thisArgs, map(i)), null, disposables), disposable);\n    }\n    Event.map = map;\n    /**\n     * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned\n     * event is accessible to \"third parties\", e.g the event is a public property. Otherwise a leaked listener on the\n     * returned event causes this utility to leak a listener on the original event.\n     */\n    function forEach(event, each, disposable) {\n        return snapshot((listener, thisArgs = null, disposables) => event(i => { each(i); listener.call(thisArgs, i); }, null, disposables), disposable);\n    }\n    Event.forEach = forEach;\n    function filter(event, filter, disposable) {\n        return snapshot((listener, thisArgs = null, disposables) => event(e => filter(e) && listener.call(thisArgs, e), null, disposables), disposable);\n    }\n    Event.filter = filter;\n    /**\n     * Given an event, returns the same event but typed as `Event<void>`.\n     */\n    function signal(event) {\n        return event;\n    }\n    Event.signal = signal;\n    function any(...events) {\n        return (listener, thisArgs = null, disposables) => combinedDisposable(...events.map(event => event(e => listener.call(thisArgs, e), null, disposables)));\n    }\n    Event.any = any;\n    /**\n     * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned\n     * event is accessible to \"third parties\", e.g the event is a public property. Otherwise a leaked listener on the\n     * returned event causes this utility to leak a listener on the original event.\n     */\n    function reduce(event, merge, initial, disposable) {\n        let output = initial;\n        return map(event, e => {\n            output = merge(output, e);\n            return output;\n        }, disposable);\n    }\n    Event.reduce = reduce;\n    function snapshot(event, disposable) {\n        let listener;\n        const options = {\n            onFirstListenerAdd() {\n                listener = event(emitter.fire, emitter);\n            },\n            onLastListenerRemove() {\n                listener === null || listener === void 0 ? void 0 : listener.dispose();\n            }\n        };\n        if (!disposable) {\n            _addLeakageTraceLogic(options);\n        }\n        const emitter = new Emitter(options);\n        disposable === null || disposable === void 0 ? void 0 : disposable.add(emitter);\n        return emitter.event;\n    }\n    function debounce(event, merge, delay = 100, leading = false, leakWarningThreshold, disposable) {\n        let subscription;\n        let output = undefined;\n        let handle = undefined;\n        let numDebouncedCalls = 0;\n        const options = {\n            leakWarningThreshold,\n            onFirstListenerAdd() {\n                subscription = event(cur => {\n                    numDebouncedCalls++;\n                    output = merge(output, cur);\n                    if (leading && !handle) {\n                        emitter.fire(output);\n                        output = undefined;\n                    }\n                    clearTimeout(handle);\n                    handle = setTimeout(() => {\n                        const _output = output;\n                        output = undefined;\n                        handle = undefined;\n                        if (!leading || numDebouncedCalls > 1) {\n                            emitter.fire(_output);\n                        }\n                        numDebouncedCalls = 0;\n                    }, delay);\n                });\n            },\n            onLastListenerRemove() {\n                subscription.dispose();\n            }\n        };\n        if (!disposable) {\n            _addLeakageTraceLogic(options);\n        }\n        const emitter = new Emitter(options);\n        disposable === null || disposable === void 0 ? void 0 : disposable.add(emitter);\n        return emitter.event;\n    }\n    Event.debounce = debounce;\n    /**\n     * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned\n     * event is accessible to \"third parties\", e.g the event is a public property. Otherwise a leaked listener on the\n     * returned event causes this utility to leak a listener on the original event.\n     */\n    function latch(event, equals = (a, b) => a === b, disposable) {\n        let firstCall = true;\n        let cache;\n        return filter(event, value => {\n            const shouldEmit = firstCall || !equals(value, cache);\n            firstCall = false;\n            cache = value;\n            return shouldEmit;\n        }, disposable);\n    }\n    Event.latch = latch;\n    /**\n     * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned\n     * event is accessible to \"third parties\", e.g the event is a public property. Otherwise a leaked listener on the\n     * returned event causes this utility to leak a listener on the original event.\n     */\n    function split(event, isT, disposable) {\n        return [\n            Event.filter(event, isT, disposable),\n            Event.filter(event, e => !isT(e), disposable),\n        ];\n    }\n    Event.split = split;\n    /**\n     * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned\n     * event is accessible to \"third parties\", e.g the event is a public property. Otherwise a leaked listener on the\n     * returned event causes this utility to leak a listener on the original event.\n     */\n    function buffer(event, flushAfterTimeout = false, _buffer = []) {\n        let buffer = _buffer.slice();\n        let listener = event(e => {\n            if (buffer) {\n                buffer.push(e);\n            }\n            else {\n                emitter.fire(e);\n            }\n        });\n        const flush = () => {\n            buffer === null || buffer === void 0 ? void 0 : buffer.forEach(e => emitter.fire(e));\n            buffer = null;\n        };\n        const emitter = new Emitter({\n            onFirstListenerAdd() {\n                if (!listener) {\n                    listener = event(e => emitter.fire(e));\n                }\n            },\n            onFirstListenerDidAdd() {\n                if (buffer) {\n                    if (flushAfterTimeout) {\n                        setTimeout(flush);\n                    }\n                    else {\n                        flush();\n                    }\n                }\n            },\n            onLastListenerRemove() {\n                if (listener) {\n                    listener.dispose();\n                }\n                listener = null;\n            }\n        });\n        return emitter.event;\n    }\n    Event.buffer = buffer;\n    class ChainableEvent {\n        constructor(event) {\n            this.event = event;\n            this.disposables = new DisposableStore();\n        }\n        map(fn) {\n            return new ChainableEvent(map(this.event, fn, this.disposables));\n        }\n        forEach(fn) {\n            return new ChainableEvent(forEach(this.event, fn, this.disposables));\n        }\n        filter(fn) {\n            return new ChainableEvent(filter(this.event, fn, this.disposables));\n        }\n        reduce(merge, initial) {\n            return new ChainableEvent(reduce(this.event, merge, initial, this.disposables));\n        }\n        latch() {\n            return new ChainableEvent(latch(this.event, undefined, this.disposables));\n        }\n        debounce(merge, delay = 100, leading = false, leakWarningThreshold) {\n            return new ChainableEvent(debounce(this.event, merge, delay, leading, leakWarningThreshold, this.disposables));\n        }\n        on(listener, thisArgs, disposables) {\n            return this.event(listener, thisArgs, disposables);\n        }\n        once(listener, thisArgs, disposables) {\n            return once(this.event)(listener, thisArgs, disposables);\n        }\n        dispose() {\n            this.disposables.dispose();\n        }\n    }\n    function chain(event) {\n        return new ChainableEvent(event);\n    }\n    Event.chain = chain;\n    function fromNodeEventEmitter(emitter, eventName, map = id => id) {\n        const fn = (...args) => result.fire(map(...args));\n        const onFirstListenerAdd = () => emitter.on(eventName, fn);\n        const onLastListenerRemove = () => emitter.removeListener(eventName, fn);\n        const result = new Emitter({ onFirstListenerAdd, onLastListenerRemove });\n        return result.event;\n    }\n    Event.fromNodeEventEmitter = fromNodeEventEmitter;\n    function fromDOMEventEmitter(emitter, eventName, map = id => id) {\n        const fn = (...args) => result.fire(map(...args));\n        const onFirstListenerAdd = () => emitter.addEventListener(eventName, fn);\n        const onLastListenerRemove = () => emitter.removeEventListener(eventName, fn);\n        const result = new Emitter({ onFirstListenerAdd, onLastListenerRemove });\n        return result.event;\n    }\n    Event.fromDOMEventEmitter = fromDOMEventEmitter;\n    function toPromise(event) {\n        return new Promise(resolve => once(event)(resolve));\n    }\n    Event.toPromise = toPromise;\n    function runAndSubscribe(event, handler) {\n        handler(undefined);\n        return event(e => handler(e));\n    }\n    Event.runAndSubscribe = runAndSubscribe;\n    function runAndSubscribeWithStore(event, handler) {\n        let store = null;\n        function run(e) {\n            store === null || store === void 0 ? void 0 : store.dispose();\n            store = new DisposableStore();\n            handler(e, store);\n        }\n        run(undefined);\n        const disposable = event(e => run(e));\n        return toDisposable(() => {\n            disposable.dispose();\n            store === null || store === void 0 ? void 0 : store.dispose();\n        });\n    }\n    Event.runAndSubscribeWithStore = runAndSubscribeWithStore;\n    class EmitterObserver {\n        constructor(obs, store) {\n            this.obs = obs;\n            this._counter = 0;\n            this._hasChanged = false;\n            const options = {\n                onFirstListenerAdd: () => {\n                    obs.addObserver(this);\n                },\n                onLastListenerRemove: () => {\n                    obs.removeObserver(this);\n                }\n            };\n            if (!store) {\n                _addLeakageTraceLogic(options);\n            }\n            this.emitter = new Emitter(options);\n            if (store) {\n                store.add(this.emitter);\n            }\n        }\n        beginUpdate(_observable) {\n            // console.assert(_observable === this.obs);\n            this._counter++;\n        }\n        handleChange(_observable, _change) {\n            this._hasChanged = true;\n        }\n        endUpdate(_observable) {\n            if (--this._counter === 0) {\n                if (this._hasChanged) {\n                    this._hasChanged = false;\n                    this.emitter.fire(this.obs.get());\n                }\n            }\n        }\n    }\n    function fromObservable(obs, store) {\n        const observer = new EmitterObserver(obs, store);\n        return observer.emitter.event;\n    }\n    Event.fromObservable = fromObservable;\n})(Event || (Event = {}));\nclass EventProfiling {\n    constructor(name) {\n        this._listenerCount = 0;\n        this._invocationCount = 0;\n        this._elapsedOverall = 0;\n        this._name = `${name}_${EventProfiling._idPool++}`;\n    }\n    start(listenerCount) {\n        this._stopWatch = new StopWatch(true);\n        this._listenerCount = listenerCount;\n    }\n    stop() {\n        if (this._stopWatch) {\n            const elapsed = this._stopWatch.elapsed();\n            this._elapsedOverall += elapsed;\n            this._invocationCount += 1;\n            console.info(`did FIRE ${this._name}: elapsed_ms: ${elapsed.toFixed(5)}, listener: ${this._listenerCount} (elapsed_overall: ${this._elapsedOverall.toFixed(2)}, invocations: ${this._invocationCount})`);\n            this._stopWatch = undefined;\n        }\n    }\n}\nEventProfiling._idPool = 0;\nlet _globalLeakWarningThreshold = -1;\nclass LeakageMonitor {\n    constructor(customThreshold, name = Math.random().toString(18).slice(2, 5)) {\n        this.customThreshold = customThreshold;\n        this.name = name;\n        this._warnCountdown = 0;\n    }\n    dispose() {\n        if (this._stacks) {\n            this._stacks.clear();\n        }\n    }\n    check(stack, listenerCount) {\n        let threshold = _globalLeakWarningThreshold;\n        if (typeof this.customThreshold === 'number') {\n            threshold = this.customThreshold;\n        }\n        if (threshold <= 0 || listenerCount < threshold) {\n            return undefined;\n        }\n        if (!this._stacks) {\n            this._stacks = new Map();\n        }\n        const count = (this._stacks.get(stack.value) || 0);\n        this._stacks.set(stack.value, count + 1);\n        this._warnCountdown -= 1;\n        if (this._warnCountdown <= 0) {\n            // only warn on first exceed and then every time the limit\n            // is exceeded by 50% again\n            this._warnCountdown = threshold * 0.5;\n            // find most frequent listener and print warning\n            let topStack;\n            let topCount = 0;\n            for (const [stack, count] of this._stacks) {\n                if (!topStack || topCount < count) {\n                    topStack = stack;\n                    topCount = count;\n                }\n            }\n            console.warn(`[${this.name}] potential listener LEAK detected, having ${listenerCount} listeners already. MOST frequent listener (${topCount}):`);\n            console.warn(topStack);\n        }\n        return () => {\n            const count = (this._stacks.get(stack.value) || 0);\n            this._stacks.set(stack.value, count - 1);\n        };\n    }\n}\nclass Stacktrace {\n    constructor(value) {\n        this.value = value;\n    }\n    static create() {\n        var _a;\n        return new Stacktrace((_a = new Error().stack) !== null && _a !== void 0 ? _a : '');\n    }\n    print() {\n        console.warn(this.value.split('\\n').slice(2).join('\\n'));\n    }\n}\nclass Listener {\n    constructor(callback, callbackThis, stack) {\n        this.callback = callback;\n        this.callbackThis = callbackThis;\n        this.stack = stack;\n        this.subscription = new SafeDisposable();\n    }\n    invoke(e) {\n        this.callback.call(this.callbackThis, e);\n    }\n}\n/**\n * The Emitter can be used to expose an Event to the public\n * to fire it from the insides.\n * Sample:\n    class Document {\n\n        private readonly _onDidChange = new Emitter<(value:string)=>any>();\n\n        public onDidChange = this._onDidChange.event;\n\n        // getter-style\n        // get onDidChange(): Event<(value:string)=>any> {\n        // \treturn this._onDidChange.event;\n        // }\n\n        private _doIt() {\n            //...\n            this._onDidChange.fire(value);\n        }\n    }\n */\nexport class Emitter {\n    constructor(options) {\n        var _a, _b;\n        this._disposed = false;\n        this._options = options;\n        this._leakageMon = _globalLeakWarningThreshold > 0 ? new LeakageMonitor(this._options && this._options.leakWarningThreshold) : undefined;\n        this._perfMon = ((_a = this._options) === null || _a === void 0 ? void 0 : _a._profName) ? new EventProfiling(this._options._profName) : undefined;\n        this._deliveryQueue = (_b = this._options) === null || _b === void 0 ? void 0 : _b.deliveryQueue;\n    }\n    dispose() {\n        var _a, _b, _c, _d;\n        if (!this._disposed) {\n            this._disposed = true;\n            // It is bad to have listeners at the time of disposing an emitter, it is worst to have listeners keep the emitter\n            // alive via the reference that's embedded in their disposables. Therefore we loop over all remaining listeners and\n            // unset their subscriptions/disposables. Looping and blaming remaining listeners is done on next tick because the\n            // the following programming pattern is very popular:\n            //\n            // const someModel = this._disposables.add(new ModelObject()); // (1) create and register model\n            // this._disposables.add(someModel.onDidChange(() => { ... }); // (2) subscribe and register model-event listener\n            // ...later...\n            // this._disposables.dispose(); disposes (1) then (2): don't warn after (1) but after the \"overall dispose\" is done\n            if (this._listeners) {\n                if (_enableDisposeWithListenerWarning) {\n                    const listeners = Array.from(this._listeners);\n                    queueMicrotask(() => {\n                        var _a;\n                        for (const listener of listeners) {\n                            if (listener.subscription.isset()) {\n                                listener.subscription.unset();\n                                (_a = listener.stack) === null || _a === void 0 ? void 0 : _a.print();\n                            }\n                        }\n                    });\n                }\n                this._listeners.clear();\n            }\n            (_a = this._deliveryQueue) === null || _a === void 0 ? void 0 : _a.clear(this);\n            (_c = (_b = this._options) === null || _b === void 0 ? void 0 : _b.onLastListenerRemove) === null || _c === void 0 ? void 0 : _c.call(_b);\n            (_d = this._leakageMon) === null || _d === void 0 ? void 0 : _d.dispose();\n        }\n    }\n    /**\n     * For the public to allow to subscribe\n     * to events from this Emitter\n     */\n    get event() {\n        if (!this._event) {\n            this._event = (callback, thisArgs, disposables) => {\n                var _a, _b, _c;\n                if (!this._listeners) {\n                    this._listeners = new LinkedList();\n                }\n                const firstListener = this._listeners.isEmpty();\n                if (firstListener && ((_a = this._options) === null || _a === void 0 ? void 0 : _a.onFirstListenerAdd)) {\n                    this._options.onFirstListenerAdd(this);\n                }\n                let removeMonitor;\n                let stack;\n                if (this._leakageMon && this._listeners.size >= 30) {\n                    // check and record this emitter for potential leakage\n                    stack = Stacktrace.create();\n                    removeMonitor = this._leakageMon.check(stack, this._listeners.size + 1);\n                }\n                if (_enableDisposeWithListenerWarning) {\n                    stack = stack !== null && stack !== void 0 ? stack : Stacktrace.create();\n                }\n                const listener = new Listener(callback, thisArgs, stack);\n                const removeListener = this._listeners.push(listener);\n                if (firstListener && ((_b = this._options) === null || _b === void 0 ? void 0 : _b.onFirstListenerDidAdd)) {\n                    this._options.onFirstListenerDidAdd(this);\n                }\n                if ((_c = this._options) === null || _c === void 0 ? void 0 : _c.onListenerDidAdd) {\n                    this._options.onListenerDidAdd(this, callback, thisArgs);\n                }\n                const result = listener.subscription.set(() => {\n                    removeMonitor === null || removeMonitor === void 0 ? void 0 : removeMonitor();\n                    if (!this._disposed) {\n                        removeListener();\n                        if (this._options && this._options.onLastListenerRemove) {\n                            const hasListeners = (this._listeners && !this._listeners.isEmpty());\n                            if (!hasListeners) {\n                                this._options.onLastListenerRemove(this);\n                            }\n                        }\n                    }\n                });\n                if (disposables instanceof DisposableStore) {\n                    disposables.add(result);\n                }\n                else if (Array.isArray(disposables)) {\n                    disposables.push(result);\n                }\n                return result;\n            };\n        }\n        return this._event;\n    }\n    /**\n     * To be kept private to fire an event to\n     * subscribers\n     */\n    fire(event) {\n        var _a, _b;\n        if (this._listeners) {\n            // put all [listener,event]-pairs into delivery queue\n            // then emit all event. an inner/nested event might be\n            // the driver of this\n            if (!this._deliveryQueue) {\n                this._deliveryQueue = new PrivateEventDeliveryQueue();\n            }\n            for (const listener of this._listeners) {\n                this._deliveryQueue.push(this, listener, event);\n            }\n            // start/stop performance insight collection\n            (_a = this._perfMon) === null || _a === void 0 ? void 0 : _a.start(this._deliveryQueue.size);\n            this._deliveryQueue.deliver();\n            (_b = this._perfMon) === null || _b === void 0 ? void 0 : _b.stop();\n        }\n    }\n}\nexport class EventDeliveryQueue {\n    constructor() {\n        this._queue = new LinkedList();\n    }\n    get size() {\n        return this._queue.size;\n    }\n    push(emitter, listener, event) {\n        this._queue.push(new EventDeliveryQueueElement(emitter, listener, event));\n    }\n    clear(emitter) {\n        const newQueue = new LinkedList();\n        for (const element of this._queue) {\n            if (element.emitter !== emitter) {\n                newQueue.push(element);\n            }\n        }\n        this._queue = newQueue;\n    }\n    deliver() {\n        while (this._queue.size > 0) {\n            const element = this._queue.shift();\n            try {\n                element.listener.invoke(element.event);\n            }\n            catch (e) {\n                onUnexpectedError(e);\n            }\n        }\n    }\n}\n/**\n * An `EventDeliveryQueue` that is guaranteed to be used by a single `Emitter`.\n */\nclass PrivateEventDeliveryQueue extends EventDeliveryQueue {\n    clear(emitter) {\n        // Here we can just clear the entire linked list because\n        // all elements are guaranteed to belong to this emitter\n        this._queue.clear();\n    }\n}\nclass EventDeliveryQueueElement {\n    constructor(emitter, listener, event) {\n        this.emitter = emitter;\n        this.listener = listener;\n        this.event = event;\n    }\n}\nexport class PauseableEmitter extends Emitter {\n    constructor(options) {\n        super(options);\n        this._isPaused = 0;\n        this._eventQueue = new LinkedList();\n        this._mergeFn = options === null || options === void 0 ? void 0 : options.merge;\n    }\n    pause() {\n        this._isPaused++;\n    }\n    resume() {\n        if (this._isPaused !== 0 && --this._isPaused === 0) {\n            if (this._mergeFn) {\n                // use the merge function to create a single composite\n                // event. make a copy in case firing pauses this emitter\n                const events = Array.from(this._eventQueue);\n                this._eventQueue.clear();\n                super.fire(this._mergeFn(events));\n            }\n            else {\n                // no merging, fire each event individually and test\n                // that this emitter isn't paused halfway through\n                while (!this._isPaused && this._eventQueue.size !== 0) {\n                    super.fire(this._eventQueue.shift());\n                }\n            }\n        }\n    }\n    fire(event) {\n        if (this._listeners) {\n            if (this._isPaused !== 0) {\n                this._eventQueue.push(event);\n            }\n            else {\n                super.fire(event);\n            }\n        }\n    }\n}\nexport class DebounceEmitter extends PauseableEmitter {\n    constructor(options) {\n        var _a;\n        super(options);\n        this._delay = (_a = options.delay) !== null && _a !== void 0 ? _a : 100;\n    }\n    fire(event) {\n        if (!this._handle) {\n            this.pause();\n            this._handle = setTimeout(() => {\n                this._handle = undefined;\n                this.resume();\n            }, this._delay);\n        }\n        super.fire(event);\n    }\n}\n/**\n * The EventBufferer is useful in situations in which you want\n * to delay firing your events during some code.\n * You can wrap that code and be sure that the event will not\n * be fired during that wrap.\n *\n * ```\n * const emitter: Emitter;\n * const delayer = new EventDelayer();\n * const delayedEvent = delayer.wrapEvent(emitter.event);\n *\n * delayedEvent(console.log);\n *\n * delayer.bufferEvents(() => {\n *   emitter.fire(); // event will not be fired yet\n * });\n *\n * // event will only be fired at this point\n * ```\n */\nexport class EventBufferer {\n    constructor() {\n        this.buffers = [];\n    }\n    wrapEvent(event) {\n        return (listener, thisArgs, disposables) => {\n            return event(i => {\n                const buffer = this.buffers[this.buffers.length - 1];\n                if (buffer) {\n                    buffer.push(() => listener.call(thisArgs, i));\n                }\n                else {\n                    listener.call(thisArgs, i);\n                }\n            }, undefined, disposables);\n        };\n    }\n    bufferEvents(fn) {\n        const buffer = [];\n        this.buffers.push(buffer);\n        const r = fn();\n        this.buffers.pop();\n        buffer.forEach(flush => flush());\n        return r;\n    }\n}\n/**\n * A Relay is an event forwarder which functions as a replugabble event pipe.\n * Once created, you can connect an input event to it and it will simply forward\n * events from that input event through its own `event` property. The `input`\n * can be changed at any point in time.\n */\nexport class Relay {\n    constructor() {\n        this.listening = false;\n        this.inputEvent = Event.None;\n        this.inputEventListener = Disposable.None;\n        this.emitter = new Emitter({\n            onFirstListenerDidAdd: () => {\n                this.listening = true;\n                this.inputEventListener = this.inputEvent(this.emitter.fire, this.emitter);\n            },\n            onLastListenerRemove: () => {\n                this.listening = false;\n                this.inputEventListener.dispose();\n            }\n        });\n        this.event = this.emitter.event;\n    }\n    set input(event) {\n        this.inputEvent = event;\n        if (this.listening) {\n            this.inputEventListener.dispose();\n            this.inputEventListener = event(this.emitter.fire, this.emitter);\n        }\n    }\n    dispose() {\n        this.inputEventListener.dispose();\n        this.emitter.dispose();\n    }\n}\n"],"mappings":"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"}]}