{"remainingRequest":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/thread-loader/dist/cjs.js!/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js!/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/base/common/diff/diff.js","dependencies":[{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/base/common/diff/diff.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/babel.config.js","mtime":1668271197000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js","mtime":456789000000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["DiffChange","stringHash","StringDiffSequence","source","characters","Int32Array","length","i","len","charCodeAt","stringDiff","original","modified","pretty","LcsDiff","ComputeDiff","changes","Debug","condition","message","Error","MyArray","sourceArray","sourceIndex","destinationArray","destinationIndex","DiffChangeHelper","m_changes","m_originalStart","m_modifiedStart","m_originalCount","m_modifiedCount","push","originalIndex","modifiedIndex","Math","min","MarkNextChange","reverse","originalSequence","modifiedSequence","continueProcessingPredicate","ContinueProcessingPredicate","_originalSequence","_modifiedSequence","_getElements","originalStringElements","originalElementsOrHash","originalHasStrings","modifiedStringElements","modifiedElementsOrHash","modifiedHasStrings","_hasStrings","_originalStringElements","_originalElementsOrHash","_modifiedStringElements","_modifiedElementsOrHash","m_forwardHistory","m_reverseHistory","newIndex","ElementsAreEqual","originalElement","_getStrictElement","modifiedElement","index1","index2","_ComputeDiff","originalStart","originalEnd","modifiedStart","modifiedEnd","quitEarlyArr","ComputeDiffRecursive","PrettifyChanges","quitEarly","Assert","midOriginalArr","midModifiedArr","result","ComputeRecursionPoint","midOriginal","midModified","leftChanges","rightChanges","ConcatenateChanges","diagonalForwardBase","diagonalForwardStart","diagonalForwardEnd","diagonalForwardOffset","diagonalReverseBase","diagonalReverseStart","diagonalReverseEnd","diagonalReverseOffset","forwardPoints","reversePoints","deltaIsEven","forwardChanges","reverseChanges","changeHelper","diagonalMin","diagonalMax","diagonalRelative","lastOriginalIndex","historyIndex","diagonal","AddModifiedElement","AddOriginalElement","getReverseChanges","originalStartPoint","modifiedStartPoint","lastForwardChange","max","getOriginalEnd","getModifiedEnd","getChanges","maxDifferences","numDiagonals","delta","numDifferences","furthestOriginalIndex","furthestModifiedIndex","ClipDiagonalBound","tempOriginalIndex","abs","WALKTRACE","matchLengthOfLongest","temp","Copy2","change","originalStop","modifiedStop","checkOriginal","originalLength","checkModified","modifiedLength","OriginalElementsAreEqual","ModifiedElementsAreEqual","startStrictEqual","ElementsAreStrictEqual","endStrictEqual","mergedChangeArr","ChangesOverlap","splice","prevChange","bestDelta","bestScore","_boundaryScore","touchingPreviousChange","score","aChange","bChange","matchedLength","aOriginalStart","bOriginalEnd","abOriginalLength","aModifiedStart","bModifiedEnd","abModifiedLength","t","_findBetterContiguousSequence","originalMatchStart","modifiedMatchStart","desiredLength","originalMax","modifiedMax","bestOriginalStart","bestModifiedStart","j","_contiguousSequenceScore","l","index","test","_OriginalIsBoundary","_ModifiedIsBoundary","originalScore","_OriginalRegionIsBoundary","modifiedScore","_ModifiedRegionIsBoundary","left","right","Array","Copy","diagonalBaseIndex","diagonalsBelow","diagonalsAbove","diffEven","lowerBoundEven","upperBoundEven","arr","sequence","elements","getElements","_isStringArray","hashes","getStrictElement"],"sources":["/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/base/common/diff/diff.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { DiffChange } from './diffChange.js';\nimport { stringHash } from '../hash.js';\nexport class StringDiffSequence {\n    constructor(source) {\n        this.source = source;\n    }\n    getElements() {\n        const source = this.source;\n        const characters = new Int32Array(source.length);\n        for (let i = 0, len = source.length; i < len; i++) {\n            characters[i] = source.charCodeAt(i);\n        }\n        return characters;\n    }\n}\nexport function stringDiff(original, modified, pretty) {\n    return new LcsDiff(new StringDiffSequence(original), new StringDiffSequence(modified)).ComputeDiff(pretty).changes;\n}\n//\n// The code below has been ported from a C# implementation in VS\n//\nexport class Debug {\n    static Assert(condition, message) {\n        if (!condition) {\n            throw new Error(message);\n        }\n    }\n}\nexport class MyArray {\n    /**\n     * Copies a range of elements from an Array starting at the specified source index and pastes\n     * them to another Array starting at the specified destination index. The length and the indexes\n     * are specified as 64-bit integers.\n     * sourceArray:\n     *\t\tThe Array that contains the data to copy.\n     * sourceIndex:\n     *\t\tA 64-bit integer that represents the index in the sourceArray at which copying begins.\n     * destinationArray:\n     *\t\tThe Array that receives the data.\n     * destinationIndex:\n     *\t\tA 64-bit integer that represents the index in the destinationArray at which storing begins.\n     * length:\n     *\t\tA 64-bit integer that represents the number of elements to copy.\n     */\n    static Copy(sourceArray, sourceIndex, destinationArray, destinationIndex, length) {\n        for (let i = 0; i < length; i++) {\n            destinationArray[destinationIndex + i] = sourceArray[sourceIndex + i];\n        }\n    }\n    static Copy2(sourceArray, sourceIndex, destinationArray, destinationIndex, length) {\n        for (let i = 0; i < length; i++) {\n            destinationArray[destinationIndex + i] = sourceArray[sourceIndex + i];\n        }\n    }\n}\n/**\n * A utility class which helps to create the set of DiffChanges from\n * a difference operation. This class accepts original DiffElements and\n * modified DiffElements that are involved in a particular change. The\n * MarkNextChange() method can be called to mark the separation between\n * distinct changes. At the end, the Changes property can be called to retrieve\n * the constructed changes.\n */\nclass DiffChangeHelper {\n    /**\n     * Constructs a new DiffChangeHelper for the given DiffSequences.\n     */\n    constructor() {\n        this.m_changes = [];\n        this.m_originalStart = 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */;\n        this.m_modifiedStart = 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */;\n        this.m_originalCount = 0;\n        this.m_modifiedCount = 0;\n    }\n    /**\n     * Marks the beginning of the next change in the set of differences.\n     */\n    MarkNextChange() {\n        // Only add to the list if there is something to add\n        if (this.m_originalCount > 0 || this.m_modifiedCount > 0) {\n            // Add the new change to our list\n            this.m_changes.push(new DiffChange(this.m_originalStart, this.m_originalCount, this.m_modifiedStart, this.m_modifiedCount));\n        }\n        // Reset for the next change\n        this.m_originalCount = 0;\n        this.m_modifiedCount = 0;\n        this.m_originalStart = 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */;\n        this.m_modifiedStart = 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */;\n    }\n    /**\n     * Adds the original element at the given position to the elements\n     * affected by the current change. The modified index gives context\n     * to the change position with respect to the original sequence.\n     * @param originalIndex The index of the original element to add.\n     * @param modifiedIndex The index of the modified element that provides corresponding position in the modified sequence.\n     */\n    AddOriginalElement(originalIndex, modifiedIndex) {\n        // The 'true' start index is the smallest of the ones we've seen\n        this.m_originalStart = Math.min(this.m_originalStart, originalIndex);\n        this.m_modifiedStart = Math.min(this.m_modifiedStart, modifiedIndex);\n        this.m_originalCount++;\n    }\n    /**\n     * Adds the modified element at the given position to the elements\n     * affected by the current change. The original index gives context\n     * to the change position with respect to the modified sequence.\n     * @param originalIndex The index of the original element that provides corresponding position in the original sequence.\n     * @param modifiedIndex The index of the modified element to add.\n     */\n    AddModifiedElement(originalIndex, modifiedIndex) {\n        // The 'true' start index is the smallest of the ones we've seen\n        this.m_originalStart = Math.min(this.m_originalStart, originalIndex);\n        this.m_modifiedStart = Math.min(this.m_modifiedStart, modifiedIndex);\n        this.m_modifiedCount++;\n    }\n    /**\n     * Retrieves all of the changes marked by the class.\n     */\n    getChanges() {\n        if (this.m_originalCount > 0 || this.m_modifiedCount > 0) {\n            // Finish up on whatever is left\n            this.MarkNextChange();\n        }\n        return this.m_changes;\n    }\n    /**\n     * Retrieves all of the changes marked by the class in the reverse order\n     */\n    getReverseChanges() {\n        if (this.m_originalCount > 0 || this.m_modifiedCount > 0) {\n            // Finish up on whatever is left\n            this.MarkNextChange();\n        }\n        this.m_changes.reverse();\n        return this.m_changes;\n    }\n}\n/**\n * An implementation of the difference algorithm described in\n * \"An O(ND) Difference Algorithm and its variations\" by Eugene W. Myers\n */\nexport class LcsDiff {\n    /**\n     * Constructs the DiffFinder\n     */\n    constructor(originalSequence, modifiedSequence, continueProcessingPredicate = null) {\n        this.ContinueProcessingPredicate = continueProcessingPredicate;\n        this._originalSequence = originalSequence;\n        this._modifiedSequence = modifiedSequence;\n        const [originalStringElements, originalElementsOrHash, originalHasStrings] = LcsDiff._getElements(originalSequence);\n        const [modifiedStringElements, modifiedElementsOrHash, modifiedHasStrings] = LcsDiff._getElements(modifiedSequence);\n        this._hasStrings = (originalHasStrings && modifiedHasStrings);\n        this._originalStringElements = originalStringElements;\n        this._originalElementsOrHash = originalElementsOrHash;\n        this._modifiedStringElements = modifiedStringElements;\n        this._modifiedElementsOrHash = modifiedElementsOrHash;\n        this.m_forwardHistory = [];\n        this.m_reverseHistory = [];\n    }\n    static _isStringArray(arr) {\n        return (arr.length > 0 && typeof arr[0] === 'string');\n    }\n    static _getElements(sequence) {\n        const elements = sequence.getElements();\n        if (LcsDiff._isStringArray(elements)) {\n            const hashes = new Int32Array(elements.length);\n            for (let i = 0, len = elements.length; i < len; i++) {\n                hashes[i] = stringHash(elements[i], 0);\n            }\n            return [elements, hashes, true];\n        }\n        if (elements instanceof Int32Array) {\n            return [[], elements, false];\n        }\n        return [[], new Int32Array(elements), false];\n    }\n    ElementsAreEqual(originalIndex, newIndex) {\n        if (this._originalElementsOrHash[originalIndex] !== this._modifiedElementsOrHash[newIndex]) {\n            return false;\n        }\n        return (this._hasStrings ? this._originalStringElements[originalIndex] === this._modifiedStringElements[newIndex] : true);\n    }\n    ElementsAreStrictEqual(originalIndex, newIndex) {\n        if (!this.ElementsAreEqual(originalIndex, newIndex)) {\n            return false;\n        }\n        const originalElement = LcsDiff._getStrictElement(this._originalSequence, originalIndex);\n        const modifiedElement = LcsDiff._getStrictElement(this._modifiedSequence, newIndex);\n        return (originalElement === modifiedElement);\n    }\n    static _getStrictElement(sequence, index) {\n        if (typeof sequence.getStrictElement === 'function') {\n            return sequence.getStrictElement(index);\n        }\n        return null;\n    }\n    OriginalElementsAreEqual(index1, index2) {\n        if (this._originalElementsOrHash[index1] !== this._originalElementsOrHash[index2]) {\n            return false;\n        }\n        return (this._hasStrings ? this._originalStringElements[index1] === this._originalStringElements[index2] : true);\n    }\n    ModifiedElementsAreEqual(index1, index2) {\n        if (this._modifiedElementsOrHash[index1] !== this._modifiedElementsOrHash[index2]) {\n            return false;\n        }\n        return (this._hasStrings ? this._modifiedStringElements[index1] === this._modifiedStringElements[index2] : true);\n    }\n    ComputeDiff(pretty) {\n        return this._ComputeDiff(0, this._originalElementsOrHash.length - 1, 0, this._modifiedElementsOrHash.length - 1, pretty);\n    }\n    /**\n     * Computes the differences between the original and modified input\n     * sequences on the bounded range.\n     * @returns An array of the differences between the two input sequences.\n     */\n    _ComputeDiff(originalStart, originalEnd, modifiedStart, modifiedEnd, pretty) {\n        const quitEarlyArr = [false];\n        let changes = this.ComputeDiffRecursive(originalStart, originalEnd, modifiedStart, modifiedEnd, quitEarlyArr);\n        if (pretty) {\n            // We have to clean up the computed diff to be more intuitive\n            // but it turns out this cannot be done correctly until the entire set\n            // of diffs have been computed\n            changes = this.PrettifyChanges(changes);\n        }\n        return {\n            quitEarly: quitEarlyArr[0],\n            changes: changes\n        };\n    }\n    /**\n     * Private helper method which computes the differences on the bounded range\n     * recursively.\n     * @returns An array of the differences between the two input sequences.\n     */\n    ComputeDiffRecursive(originalStart, originalEnd, modifiedStart, modifiedEnd, quitEarlyArr) {\n        quitEarlyArr[0] = false;\n        // Find the start of the differences\n        while (originalStart <= originalEnd && modifiedStart <= modifiedEnd && this.ElementsAreEqual(originalStart, modifiedStart)) {\n            originalStart++;\n            modifiedStart++;\n        }\n        // Find the end of the differences\n        while (originalEnd >= originalStart && modifiedEnd >= modifiedStart && this.ElementsAreEqual(originalEnd, modifiedEnd)) {\n            originalEnd--;\n            modifiedEnd--;\n        }\n        // In the special case where we either have all insertions or all deletions or the sequences are identical\n        if (originalStart > originalEnd || modifiedStart > modifiedEnd) {\n            let changes;\n            if (modifiedStart <= modifiedEnd) {\n                Debug.Assert(originalStart === originalEnd + 1, 'originalStart should only be one more than originalEnd');\n                // All insertions\n                changes = [\n                    new DiffChange(originalStart, 0, modifiedStart, modifiedEnd - modifiedStart + 1)\n                ];\n            }\n            else if (originalStart <= originalEnd) {\n                Debug.Assert(modifiedStart === modifiedEnd + 1, 'modifiedStart should only be one more than modifiedEnd');\n                // All deletions\n                changes = [\n                    new DiffChange(originalStart, originalEnd - originalStart + 1, modifiedStart, 0)\n                ];\n            }\n            else {\n                Debug.Assert(originalStart === originalEnd + 1, 'originalStart should only be one more than originalEnd');\n                Debug.Assert(modifiedStart === modifiedEnd + 1, 'modifiedStart should only be one more than modifiedEnd');\n                // Identical sequences - No differences\n                changes = [];\n            }\n            return changes;\n        }\n        // This problem can be solved using the Divide-And-Conquer technique.\n        const midOriginalArr = [0];\n        const midModifiedArr = [0];\n        const result = this.ComputeRecursionPoint(originalStart, originalEnd, modifiedStart, modifiedEnd, midOriginalArr, midModifiedArr, quitEarlyArr);\n        const midOriginal = midOriginalArr[0];\n        const midModified = midModifiedArr[0];\n        if (result !== null) {\n            // Result is not-null when there was enough memory to compute the changes while\n            // searching for the recursion point\n            return result;\n        }\n        else if (!quitEarlyArr[0]) {\n            // We can break the problem down recursively by finding the changes in the\n            // First Half:   (originalStart, modifiedStart) to (midOriginal, midModified)\n            // Second Half:  (midOriginal + 1, minModified + 1) to (originalEnd, modifiedEnd)\n            // NOTE: ComputeDiff() is inclusive, therefore the second range starts on the next point\n            const leftChanges = this.ComputeDiffRecursive(originalStart, midOriginal, modifiedStart, midModified, quitEarlyArr);\n            let rightChanges = [];\n            if (!quitEarlyArr[0]) {\n                rightChanges = this.ComputeDiffRecursive(midOriginal + 1, originalEnd, midModified + 1, modifiedEnd, quitEarlyArr);\n            }\n            else {\n                // We didn't have time to finish the first half, so we don't have time to compute this half.\n                // Consider the entire rest of the sequence different.\n                rightChanges = [\n                    new DiffChange(midOriginal + 1, originalEnd - (midOriginal + 1) + 1, midModified + 1, modifiedEnd - (midModified + 1) + 1)\n                ];\n            }\n            return this.ConcatenateChanges(leftChanges, rightChanges);\n        }\n        // If we hit here, we quit early, and so can't return anything meaningful\n        return [\n            new DiffChange(originalStart, originalEnd - originalStart + 1, modifiedStart, modifiedEnd - modifiedStart + 1)\n        ];\n    }\n    WALKTRACE(diagonalForwardBase, diagonalForwardStart, diagonalForwardEnd, diagonalForwardOffset, diagonalReverseBase, diagonalReverseStart, diagonalReverseEnd, diagonalReverseOffset, forwardPoints, reversePoints, originalIndex, originalEnd, midOriginalArr, modifiedIndex, modifiedEnd, midModifiedArr, deltaIsEven, quitEarlyArr) {\n        let forwardChanges = null;\n        let reverseChanges = null;\n        // First, walk backward through the forward diagonals history\n        let changeHelper = new DiffChangeHelper();\n        let diagonalMin = diagonalForwardStart;\n        let diagonalMax = diagonalForwardEnd;\n        let diagonalRelative = (midOriginalArr[0] - midModifiedArr[0]) - diagonalForwardOffset;\n        let lastOriginalIndex = -1073741824 /* Constants.MIN_SAFE_SMALL_INTEGER */;\n        let historyIndex = this.m_forwardHistory.length - 1;\n        do {\n            // Get the diagonal index from the relative diagonal number\n            const diagonal = diagonalRelative + diagonalForwardBase;\n            // Figure out where we came from\n            if (diagonal === diagonalMin || (diagonal < diagonalMax && forwardPoints[diagonal - 1] < forwardPoints[diagonal + 1])) {\n                // Vertical line (the element is an insert)\n                originalIndex = forwardPoints[diagonal + 1];\n                modifiedIndex = originalIndex - diagonalRelative - diagonalForwardOffset;\n                if (originalIndex < lastOriginalIndex) {\n                    changeHelper.MarkNextChange();\n                }\n                lastOriginalIndex = originalIndex;\n                changeHelper.AddModifiedElement(originalIndex + 1, modifiedIndex);\n                diagonalRelative = (diagonal + 1) - diagonalForwardBase; //Setup for the next iteration\n            }\n            else {\n                // Horizontal line (the element is a deletion)\n                originalIndex = forwardPoints[diagonal - 1] + 1;\n                modifiedIndex = originalIndex - diagonalRelative - diagonalForwardOffset;\n                if (originalIndex < lastOriginalIndex) {\n                    changeHelper.MarkNextChange();\n                }\n                lastOriginalIndex = originalIndex - 1;\n                changeHelper.AddOriginalElement(originalIndex, modifiedIndex + 1);\n                diagonalRelative = (diagonal - 1) - diagonalForwardBase; //Setup for the next iteration\n            }\n            if (historyIndex >= 0) {\n                forwardPoints = this.m_forwardHistory[historyIndex];\n                diagonalForwardBase = forwardPoints[0]; //We stored this in the first spot\n                diagonalMin = 1;\n                diagonalMax = forwardPoints.length - 1;\n            }\n        } while (--historyIndex >= -1);\n        // Ironically, we get the forward changes as the reverse of the\n        // order we added them since we technically added them backwards\n        forwardChanges = changeHelper.getReverseChanges();\n        if (quitEarlyArr[0]) {\n            // TODO: Calculate a partial from the reverse diagonals.\n            //       For now, just assume everything after the midOriginal/midModified point is a diff\n            let originalStartPoint = midOriginalArr[0] + 1;\n            let modifiedStartPoint = midModifiedArr[0] + 1;\n            if (forwardChanges !== null && forwardChanges.length > 0) {\n                const lastForwardChange = forwardChanges[forwardChanges.length - 1];\n                originalStartPoint = Math.max(originalStartPoint, lastForwardChange.getOriginalEnd());\n                modifiedStartPoint = Math.max(modifiedStartPoint, lastForwardChange.getModifiedEnd());\n            }\n            reverseChanges = [\n                new DiffChange(originalStartPoint, originalEnd - originalStartPoint + 1, modifiedStartPoint, modifiedEnd - modifiedStartPoint + 1)\n            ];\n        }\n        else {\n            // Now walk backward through the reverse diagonals history\n            changeHelper = new DiffChangeHelper();\n            diagonalMin = diagonalReverseStart;\n            diagonalMax = diagonalReverseEnd;\n            diagonalRelative = (midOriginalArr[0] - midModifiedArr[0]) - diagonalReverseOffset;\n            lastOriginalIndex = 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */;\n            historyIndex = (deltaIsEven) ? this.m_reverseHistory.length - 1 : this.m_reverseHistory.length - 2;\n            do {\n                // Get the diagonal index from the relative diagonal number\n                const diagonal = diagonalRelative + diagonalReverseBase;\n                // Figure out where we came from\n                if (diagonal === diagonalMin || (diagonal < diagonalMax && reversePoints[diagonal - 1] >= reversePoints[diagonal + 1])) {\n                    // Horizontal line (the element is a deletion))\n                    originalIndex = reversePoints[diagonal + 1] - 1;\n                    modifiedIndex = originalIndex - diagonalRelative - diagonalReverseOffset;\n                    if (originalIndex > lastOriginalIndex) {\n                        changeHelper.MarkNextChange();\n                    }\n                    lastOriginalIndex = originalIndex + 1;\n                    changeHelper.AddOriginalElement(originalIndex + 1, modifiedIndex + 1);\n                    diagonalRelative = (diagonal + 1) - diagonalReverseBase; //Setup for the next iteration\n                }\n                else {\n                    // Vertical line (the element is an insertion)\n                    originalIndex = reversePoints[diagonal - 1];\n                    modifiedIndex = originalIndex - diagonalRelative - diagonalReverseOffset;\n                    if (originalIndex > lastOriginalIndex) {\n                        changeHelper.MarkNextChange();\n                    }\n                    lastOriginalIndex = originalIndex;\n                    changeHelper.AddModifiedElement(originalIndex + 1, modifiedIndex + 1);\n                    diagonalRelative = (diagonal - 1) - diagonalReverseBase; //Setup for the next iteration\n                }\n                if (historyIndex >= 0) {\n                    reversePoints = this.m_reverseHistory[historyIndex];\n                    diagonalReverseBase = reversePoints[0]; //We stored this in the first spot\n                    diagonalMin = 1;\n                    diagonalMax = reversePoints.length - 1;\n                }\n            } while (--historyIndex >= -1);\n            // There are cases where the reverse history will find diffs that\n            // are correct, but not intuitive, so we need shift them.\n            reverseChanges = changeHelper.getChanges();\n        }\n        return this.ConcatenateChanges(forwardChanges, reverseChanges);\n    }\n    /**\n     * Given the range to compute the diff on, this method finds the point:\n     * (midOriginal, midModified)\n     * that exists in the middle of the LCS of the two sequences and\n     * is the point at which the LCS problem may be broken down recursively.\n     * This method will try to keep the LCS trace in memory. If the LCS recursion\n     * point is calculated and the full trace is available in memory, then this method\n     * will return the change list.\n     * @param originalStart The start bound of the original sequence range\n     * @param originalEnd The end bound of the original sequence range\n     * @param modifiedStart The start bound of the modified sequence range\n     * @param modifiedEnd The end bound of the modified sequence range\n     * @param midOriginal The middle point of the original sequence range\n     * @param midModified The middle point of the modified sequence range\n     * @returns The diff changes, if available, otherwise null\n     */\n    ComputeRecursionPoint(originalStart, originalEnd, modifiedStart, modifiedEnd, midOriginalArr, midModifiedArr, quitEarlyArr) {\n        let originalIndex = 0, modifiedIndex = 0;\n        let diagonalForwardStart = 0, diagonalForwardEnd = 0;\n        let diagonalReverseStart = 0, diagonalReverseEnd = 0;\n        // To traverse the edit graph and produce the proper LCS, our actual\n        // start position is just outside the given boundary\n        originalStart--;\n        modifiedStart--;\n        // We set these up to make the compiler happy, but they will\n        // be replaced before we return with the actual recursion point\n        midOriginalArr[0] = 0;\n        midModifiedArr[0] = 0;\n        // Clear out the history\n        this.m_forwardHistory = [];\n        this.m_reverseHistory = [];\n        // Each cell in the two arrays corresponds to a diagonal in the edit graph.\n        // The integer value in the cell represents the originalIndex of the furthest\n        // reaching point found so far that ends in that diagonal.\n        // The modifiedIndex can be computed mathematically from the originalIndex and the diagonal number.\n        const maxDifferences = (originalEnd - originalStart) + (modifiedEnd - modifiedStart);\n        const numDiagonals = maxDifferences + 1;\n        const forwardPoints = new Int32Array(numDiagonals);\n        const reversePoints = new Int32Array(numDiagonals);\n        // diagonalForwardBase: Index into forwardPoints of the diagonal which passes through (originalStart, modifiedStart)\n        // diagonalReverseBase: Index into reversePoints of the diagonal which passes through (originalEnd, modifiedEnd)\n        const diagonalForwardBase = (modifiedEnd - modifiedStart);\n        const diagonalReverseBase = (originalEnd - originalStart);\n        // diagonalForwardOffset: Geometric offset which allows modifiedIndex to be computed from originalIndex and the\n        //    diagonal number (relative to diagonalForwardBase)\n        // diagonalReverseOffset: Geometric offset which allows modifiedIndex to be computed from originalIndex and the\n        //    diagonal number (relative to diagonalReverseBase)\n        const diagonalForwardOffset = (originalStart - modifiedStart);\n        const diagonalReverseOffset = (originalEnd - modifiedEnd);\n        // delta: The difference between the end diagonal and the start diagonal. This is used to relate diagonal numbers\n        //   relative to the start diagonal with diagonal numbers relative to the end diagonal.\n        // The Even/Oddn-ness of this delta is important for determining when we should check for overlap\n        const delta = diagonalReverseBase - diagonalForwardBase;\n        const deltaIsEven = (delta % 2 === 0);\n        // Here we set up the start and end points as the furthest points found so far\n        // in both the forward and reverse directions, respectively\n        forwardPoints[diagonalForwardBase] = originalStart;\n        reversePoints[diagonalReverseBase] = originalEnd;\n        // Remember if we quit early, and thus need to do a best-effort result instead of a real result.\n        quitEarlyArr[0] = false;\n        // A couple of points:\n        // --With this method, we iterate on the number of differences between the two sequences.\n        //   The more differences there actually are, the longer this will take.\n        // --Also, as the number of differences increases, we have to search on diagonals further\n        //   away from the reference diagonal (which is diagonalForwardBase for forward, diagonalReverseBase for reverse).\n        // --We extend on even diagonals (relative to the reference diagonal) only when numDifferences\n        //   is even and odd diagonals only when numDifferences is odd.\n        for (let numDifferences = 1; numDifferences <= (maxDifferences / 2) + 1; numDifferences++) {\n            let furthestOriginalIndex = 0;\n            let furthestModifiedIndex = 0;\n            // Run the algorithm in the forward direction\n            diagonalForwardStart = this.ClipDiagonalBound(diagonalForwardBase - numDifferences, numDifferences, diagonalForwardBase, numDiagonals);\n            diagonalForwardEnd = this.ClipDiagonalBound(diagonalForwardBase + numDifferences, numDifferences, diagonalForwardBase, numDiagonals);\n            for (let diagonal = diagonalForwardStart; diagonal <= diagonalForwardEnd; diagonal += 2) {\n                // STEP 1: We extend the furthest reaching point in the present diagonal\n                // by looking at the diagonals above and below and picking the one whose point\n                // is further away from the start point (originalStart, modifiedStart)\n                if (diagonal === diagonalForwardStart || (diagonal < diagonalForwardEnd && forwardPoints[diagonal - 1] < forwardPoints[diagonal + 1])) {\n                    originalIndex = forwardPoints[diagonal + 1];\n                }\n                else {\n                    originalIndex = forwardPoints[diagonal - 1] + 1;\n                }\n                modifiedIndex = originalIndex - (diagonal - diagonalForwardBase) - diagonalForwardOffset;\n                // Save the current originalIndex so we can test for false overlap in step 3\n                const tempOriginalIndex = originalIndex;\n                // STEP 2: We can continue to extend the furthest reaching point in the present diagonal\n                // so long as the elements are equal.\n                while (originalIndex < originalEnd && modifiedIndex < modifiedEnd && this.ElementsAreEqual(originalIndex + 1, modifiedIndex + 1)) {\n                    originalIndex++;\n                    modifiedIndex++;\n                }\n                forwardPoints[diagonal] = originalIndex;\n                if (originalIndex + modifiedIndex > furthestOriginalIndex + furthestModifiedIndex) {\n                    furthestOriginalIndex = originalIndex;\n                    furthestModifiedIndex = modifiedIndex;\n                }\n                // STEP 3: If delta is odd (overlap first happens on forward when delta is odd)\n                // and diagonal is in the range of reverse diagonals computed for numDifferences-1\n                // (the previous iteration; we haven't computed reverse diagonals for numDifferences yet)\n                // then check for overlap.\n                if (!deltaIsEven && Math.abs(diagonal - diagonalReverseBase) <= (numDifferences - 1)) {\n                    if (originalIndex >= reversePoints[diagonal]) {\n                        midOriginalArr[0] = originalIndex;\n                        midModifiedArr[0] = modifiedIndex;\n                        if (tempOriginalIndex <= reversePoints[diagonal] && 1447 /* LocalConstants.MaxDifferencesHistory */ > 0 && numDifferences <= (1447 /* LocalConstants.MaxDifferencesHistory */ + 1)) {\n                            // BINGO! We overlapped, and we have the full trace in memory!\n                            return this.WALKTRACE(diagonalForwardBase, diagonalForwardStart, diagonalForwardEnd, diagonalForwardOffset, diagonalReverseBase, diagonalReverseStart, diagonalReverseEnd, diagonalReverseOffset, forwardPoints, reversePoints, originalIndex, originalEnd, midOriginalArr, modifiedIndex, modifiedEnd, midModifiedArr, deltaIsEven, quitEarlyArr);\n                        }\n                        else {\n                            // Either false overlap, or we didn't have enough memory for the full trace\n                            // Just return the recursion point\n                            return null;\n                        }\n                    }\n                }\n            }\n            // Check to see if we should be quitting early, before moving on to the next iteration.\n            const matchLengthOfLongest = ((furthestOriginalIndex - originalStart) + (furthestModifiedIndex - modifiedStart) - numDifferences) / 2;\n            if (this.ContinueProcessingPredicate !== null && !this.ContinueProcessingPredicate(furthestOriginalIndex, matchLengthOfLongest)) {\n                // We can't finish, so skip ahead to generating a result from what we have.\n                quitEarlyArr[0] = true;\n                // Use the furthest distance we got in the forward direction.\n                midOriginalArr[0] = furthestOriginalIndex;\n                midModifiedArr[0] = furthestModifiedIndex;\n                if (matchLengthOfLongest > 0 && 1447 /* LocalConstants.MaxDifferencesHistory */ > 0 && numDifferences <= (1447 /* LocalConstants.MaxDifferencesHistory */ + 1)) {\n                    // Enough of the history is in memory to walk it backwards\n                    return this.WALKTRACE(diagonalForwardBase, diagonalForwardStart, diagonalForwardEnd, diagonalForwardOffset, diagonalReverseBase, diagonalReverseStart, diagonalReverseEnd, diagonalReverseOffset, forwardPoints, reversePoints, originalIndex, originalEnd, midOriginalArr, modifiedIndex, modifiedEnd, midModifiedArr, deltaIsEven, quitEarlyArr);\n                }\n                else {\n                    // We didn't actually remember enough of the history.\n                    //Since we are quitting the diff early, we need to shift back the originalStart and modified start\n                    //back into the boundary limits since we decremented their value above beyond the boundary limit.\n                    originalStart++;\n                    modifiedStart++;\n                    return [\n                        new DiffChange(originalStart, originalEnd - originalStart + 1, modifiedStart, modifiedEnd - modifiedStart + 1)\n                    ];\n                }\n            }\n            // Run the algorithm in the reverse direction\n            diagonalReverseStart = this.ClipDiagonalBound(diagonalReverseBase - numDifferences, numDifferences, diagonalReverseBase, numDiagonals);\n            diagonalReverseEnd = this.ClipDiagonalBound(diagonalReverseBase + numDifferences, numDifferences, diagonalReverseBase, numDiagonals);\n            for (let diagonal = diagonalReverseStart; diagonal <= diagonalReverseEnd; diagonal += 2) {\n                // STEP 1: We extend the furthest reaching point in the present diagonal\n                // by looking at the diagonals above and below and picking the one whose point\n                // is further away from the start point (originalEnd, modifiedEnd)\n                if (diagonal === diagonalReverseStart || (diagonal < diagonalReverseEnd && reversePoints[diagonal - 1] >= reversePoints[diagonal + 1])) {\n                    originalIndex = reversePoints[diagonal + 1] - 1;\n                }\n                else {\n                    originalIndex = reversePoints[diagonal - 1];\n                }\n                modifiedIndex = originalIndex - (diagonal - diagonalReverseBase) - diagonalReverseOffset;\n                // Save the current originalIndex so we can test for false overlap\n                const tempOriginalIndex = originalIndex;\n                // STEP 2: We can continue to extend the furthest reaching point in the present diagonal\n                // as long as the elements are equal.\n                while (originalIndex > originalStart && modifiedIndex > modifiedStart && this.ElementsAreEqual(originalIndex, modifiedIndex)) {\n                    originalIndex--;\n                    modifiedIndex--;\n                }\n                reversePoints[diagonal] = originalIndex;\n                // STEP 4: If delta is even (overlap first happens on reverse when delta is even)\n                // and diagonal is in the range of forward diagonals computed for numDifferences\n                // then check for overlap.\n                if (deltaIsEven && Math.abs(diagonal - diagonalForwardBase) <= numDifferences) {\n                    if (originalIndex <= forwardPoints[diagonal]) {\n                        midOriginalArr[0] = originalIndex;\n                        midModifiedArr[0] = modifiedIndex;\n                        if (tempOriginalIndex >= forwardPoints[diagonal] && 1447 /* LocalConstants.MaxDifferencesHistory */ > 0 && numDifferences <= (1447 /* LocalConstants.MaxDifferencesHistory */ + 1)) {\n                            // BINGO! We overlapped, and we have the full trace in memory!\n                            return this.WALKTRACE(diagonalForwardBase, diagonalForwardStart, diagonalForwardEnd, diagonalForwardOffset, diagonalReverseBase, diagonalReverseStart, diagonalReverseEnd, diagonalReverseOffset, forwardPoints, reversePoints, originalIndex, originalEnd, midOriginalArr, modifiedIndex, modifiedEnd, midModifiedArr, deltaIsEven, quitEarlyArr);\n                        }\n                        else {\n                            // Either false overlap, or we didn't have enough memory for the full trace\n                            // Just return the recursion point\n                            return null;\n                        }\n                    }\n                }\n            }\n            // Save current vectors to history before the next iteration\n            if (numDifferences <= 1447 /* LocalConstants.MaxDifferencesHistory */) {\n                // We are allocating space for one extra int, which we fill with\n                // the index of the diagonal base index\n                let temp = new Int32Array(diagonalForwardEnd - diagonalForwardStart + 2);\n                temp[0] = diagonalForwardBase - diagonalForwardStart + 1;\n                MyArray.Copy2(forwardPoints, diagonalForwardStart, temp, 1, diagonalForwardEnd - diagonalForwardStart + 1);\n                this.m_forwardHistory.push(temp);\n                temp = new Int32Array(diagonalReverseEnd - diagonalReverseStart + 2);\n                temp[0] = diagonalReverseBase - diagonalReverseStart + 1;\n                MyArray.Copy2(reversePoints, diagonalReverseStart, temp, 1, diagonalReverseEnd - diagonalReverseStart + 1);\n                this.m_reverseHistory.push(temp);\n            }\n        }\n        // If we got here, then we have the full trace in history. We just have to convert it to a change list\n        // NOTE: This part is a bit messy\n        return this.WALKTRACE(diagonalForwardBase, diagonalForwardStart, diagonalForwardEnd, diagonalForwardOffset, diagonalReverseBase, diagonalReverseStart, diagonalReverseEnd, diagonalReverseOffset, forwardPoints, reversePoints, originalIndex, originalEnd, midOriginalArr, modifiedIndex, modifiedEnd, midModifiedArr, deltaIsEven, quitEarlyArr);\n    }\n    /**\n     * Shifts the given changes to provide a more intuitive diff.\n     * While the first element in a diff matches the first element after the diff,\n     * we shift the diff down.\n     *\n     * @param changes The list of changes to shift\n     * @returns The shifted changes\n     */\n    PrettifyChanges(changes) {\n        // Shift all the changes down first\n        for (let i = 0; i < changes.length; i++) {\n            const change = changes[i];\n            const originalStop = (i < changes.length - 1) ? changes[i + 1].originalStart : this._originalElementsOrHash.length;\n            const modifiedStop = (i < changes.length - 1) ? changes[i + 1].modifiedStart : this._modifiedElementsOrHash.length;\n            const checkOriginal = change.originalLength > 0;\n            const checkModified = change.modifiedLength > 0;\n            while (change.originalStart + change.originalLength < originalStop\n                && change.modifiedStart + change.modifiedLength < modifiedStop\n                && (!checkOriginal || this.OriginalElementsAreEqual(change.originalStart, change.originalStart + change.originalLength))\n                && (!checkModified || this.ModifiedElementsAreEqual(change.modifiedStart, change.modifiedStart + change.modifiedLength))) {\n                const startStrictEqual = this.ElementsAreStrictEqual(change.originalStart, change.modifiedStart);\n                const endStrictEqual = this.ElementsAreStrictEqual(change.originalStart + change.originalLength, change.modifiedStart + change.modifiedLength);\n                if (endStrictEqual && !startStrictEqual) {\n                    // moving the change down would create an equal change, but the elements are not strict equal\n                    break;\n                }\n                change.originalStart++;\n                change.modifiedStart++;\n            }\n            const mergedChangeArr = [null];\n            if (i < changes.length - 1 && this.ChangesOverlap(changes[i], changes[i + 1], mergedChangeArr)) {\n                changes[i] = mergedChangeArr[0];\n                changes.splice(i + 1, 1);\n                i--;\n                continue;\n            }\n        }\n        // Shift changes back up until we hit empty or whitespace-only lines\n        for (let i = changes.length - 1; i >= 0; i--) {\n            const change = changes[i];\n            let originalStop = 0;\n            let modifiedStop = 0;\n            if (i > 0) {\n                const prevChange = changes[i - 1];\n                originalStop = prevChange.originalStart + prevChange.originalLength;\n                modifiedStop = prevChange.modifiedStart + prevChange.modifiedLength;\n            }\n            const checkOriginal = change.originalLength > 0;\n            const checkModified = change.modifiedLength > 0;\n            let bestDelta = 0;\n            let bestScore = this._boundaryScore(change.originalStart, change.originalLength, change.modifiedStart, change.modifiedLength);\n            for (let delta = 1;; delta++) {\n                const originalStart = change.originalStart - delta;\n                const modifiedStart = change.modifiedStart - delta;\n                if (originalStart < originalStop || modifiedStart < modifiedStop) {\n                    break;\n                }\n                if (checkOriginal && !this.OriginalElementsAreEqual(originalStart, originalStart + change.originalLength)) {\n                    break;\n                }\n                if (checkModified && !this.ModifiedElementsAreEqual(modifiedStart, modifiedStart + change.modifiedLength)) {\n                    break;\n                }\n                const touchingPreviousChange = (originalStart === originalStop && modifiedStart === modifiedStop);\n                const score = ((touchingPreviousChange ? 5 : 0)\n                    + this._boundaryScore(originalStart, change.originalLength, modifiedStart, change.modifiedLength));\n                if (score > bestScore) {\n                    bestScore = score;\n                    bestDelta = delta;\n                }\n            }\n            change.originalStart -= bestDelta;\n            change.modifiedStart -= bestDelta;\n            const mergedChangeArr = [null];\n            if (i > 0 && this.ChangesOverlap(changes[i - 1], changes[i], mergedChangeArr)) {\n                changes[i - 1] = mergedChangeArr[0];\n                changes.splice(i, 1);\n                i++;\n                continue;\n            }\n        }\n        // There could be multiple longest common substrings.\n        // Give preference to the ones containing longer lines\n        if (this._hasStrings) {\n            for (let i = 1, len = changes.length; i < len; i++) {\n                const aChange = changes[i - 1];\n                const bChange = changes[i];\n                const matchedLength = bChange.originalStart - aChange.originalStart - aChange.originalLength;\n                const aOriginalStart = aChange.originalStart;\n                const bOriginalEnd = bChange.originalStart + bChange.originalLength;\n                const abOriginalLength = bOriginalEnd - aOriginalStart;\n                const aModifiedStart = aChange.modifiedStart;\n                const bModifiedEnd = bChange.modifiedStart + bChange.modifiedLength;\n                const abModifiedLength = bModifiedEnd - aModifiedStart;\n                // Avoid wasting a lot of time with these searches\n                if (matchedLength < 5 && abOriginalLength < 20 && abModifiedLength < 20) {\n                    const t = this._findBetterContiguousSequence(aOriginalStart, abOriginalLength, aModifiedStart, abModifiedLength, matchedLength);\n                    if (t) {\n                        const [originalMatchStart, modifiedMatchStart] = t;\n                        if (originalMatchStart !== aChange.originalStart + aChange.originalLength || modifiedMatchStart !== aChange.modifiedStart + aChange.modifiedLength) {\n                            // switch to another sequence that has a better score\n                            aChange.originalLength = originalMatchStart - aChange.originalStart;\n                            aChange.modifiedLength = modifiedMatchStart - aChange.modifiedStart;\n                            bChange.originalStart = originalMatchStart + matchedLength;\n                            bChange.modifiedStart = modifiedMatchStart + matchedLength;\n                            bChange.originalLength = bOriginalEnd - bChange.originalStart;\n                            bChange.modifiedLength = bModifiedEnd - bChange.modifiedStart;\n                        }\n                    }\n                }\n            }\n        }\n        return changes;\n    }\n    _findBetterContiguousSequence(originalStart, originalLength, modifiedStart, modifiedLength, desiredLength) {\n        if (originalLength < desiredLength || modifiedLength < desiredLength) {\n            return null;\n        }\n        const originalMax = originalStart + originalLength - desiredLength + 1;\n        const modifiedMax = modifiedStart + modifiedLength - desiredLength + 1;\n        let bestScore = 0;\n        let bestOriginalStart = 0;\n        let bestModifiedStart = 0;\n        for (let i = originalStart; i < originalMax; i++) {\n            for (let j = modifiedStart; j < modifiedMax; j++) {\n                const score = this._contiguousSequenceScore(i, j, desiredLength);\n                if (score > 0 && score > bestScore) {\n                    bestScore = score;\n                    bestOriginalStart = i;\n                    bestModifiedStart = j;\n                }\n            }\n        }\n        if (bestScore > 0) {\n            return [bestOriginalStart, bestModifiedStart];\n        }\n        return null;\n    }\n    _contiguousSequenceScore(originalStart, modifiedStart, length) {\n        let score = 0;\n        for (let l = 0; l < length; l++) {\n            if (!this.ElementsAreEqual(originalStart + l, modifiedStart + l)) {\n                return 0;\n            }\n            score += this._originalStringElements[originalStart + l].length;\n        }\n        return score;\n    }\n    _OriginalIsBoundary(index) {\n        if (index <= 0 || index >= this._originalElementsOrHash.length - 1) {\n            return true;\n        }\n        return (this._hasStrings && /^\\s*$/.test(this._originalStringElements[index]));\n    }\n    _OriginalRegionIsBoundary(originalStart, originalLength) {\n        if (this._OriginalIsBoundary(originalStart) || this._OriginalIsBoundary(originalStart - 1)) {\n            return true;\n        }\n        if (originalLength > 0) {\n            const originalEnd = originalStart + originalLength;\n            if (this._OriginalIsBoundary(originalEnd - 1) || this._OriginalIsBoundary(originalEnd)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    _ModifiedIsBoundary(index) {\n        if (index <= 0 || index >= this._modifiedElementsOrHash.length - 1) {\n            return true;\n        }\n        return (this._hasStrings && /^\\s*$/.test(this._modifiedStringElements[index]));\n    }\n    _ModifiedRegionIsBoundary(modifiedStart, modifiedLength) {\n        if (this._ModifiedIsBoundary(modifiedStart) || this._ModifiedIsBoundary(modifiedStart - 1)) {\n            return true;\n        }\n        if (modifiedLength > 0) {\n            const modifiedEnd = modifiedStart + modifiedLength;\n            if (this._ModifiedIsBoundary(modifiedEnd - 1) || this._ModifiedIsBoundary(modifiedEnd)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    _boundaryScore(originalStart, originalLength, modifiedStart, modifiedLength) {\n        const originalScore = (this._OriginalRegionIsBoundary(originalStart, originalLength) ? 1 : 0);\n        const modifiedScore = (this._ModifiedRegionIsBoundary(modifiedStart, modifiedLength) ? 1 : 0);\n        return (originalScore + modifiedScore);\n    }\n    /**\n     * Concatenates the two input DiffChange lists and returns the resulting\n     * list.\n     * @param The left changes\n     * @param The right changes\n     * @returns The concatenated list\n     */\n    ConcatenateChanges(left, right) {\n        const mergedChangeArr = [];\n        if (left.length === 0 || right.length === 0) {\n            return (right.length > 0) ? right : left;\n        }\n        else if (this.ChangesOverlap(left[left.length - 1], right[0], mergedChangeArr)) {\n            // Since we break the problem down recursively, it is possible that we\n            // might recurse in the middle of a change thereby splitting it into\n            // two changes. Here in the combining stage, we detect and fuse those\n            // changes back together\n            const result = new Array(left.length + right.length - 1);\n            MyArray.Copy(left, 0, result, 0, left.length - 1);\n            result[left.length - 1] = mergedChangeArr[0];\n            MyArray.Copy(right, 1, result, left.length, right.length - 1);\n            return result;\n        }\n        else {\n            const result = new Array(left.length + right.length);\n            MyArray.Copy(left, 0, result, 0, left.length);\n            MyArray.Copy(right, 0, result, left.length, right.length);\n            return result;\n        }\n    }\n    /**\n     * Returns true if the two changes overlap and can be merged into a single\n     * change\n     * @param left The left change\n     * @param right The right change\n     * @param mergedChange The merged change if the two overlap, null otherwise\n     * @returns True if the two changes overlap\n     */\n    ChangesOverlap(left, right, mergedChangeArr) {\n        Debug.Assert(left.originalStart <= right.originalStart, 'Left change is not less than or equal to right change');\n        Debug.Assert(left.modifiedStart <= right.modifiedStart, 'Left change is not less than or equal to right change');\n        if (left.originalStart + left.originalLength >= right.originalStart || left.modifiedStart + left.modifiedLength >= right.modifiedStart) {\n            const originalStart = left.originalStart;\n            let originalLength = left.originalLength;\n            const modifiedStart = left.modifiedStart;\n            let modifiedLength = left.modifiedLength;\n            if (left.originalStart + left.originalLength >= right.originalStart) {\n                originalLength = right.originalStart + right.originalLength - left.originalStart;\n            }\n            if (left.modifiedStart + left.modifiedLength >= right.modifiedStart) {\n                modifiedLength = right.modifiedStart + right.modifiedLength - left.modifiedStart;\n            }\n            mergedChangeArr[0] = new DiffChange(originalStart, originalLength, modifiedStart, modifiedLength);\n            return true;\n        }\n        else {\n            mergedChangeArr[0] = null;\n            return false;\n        }\n    }\n    /**\n     * Helper method used to clip a diagonal index to the range of valid\n     * diagonals. This also decides whether or not the diagonal index,\n     * if it exceeds the boundary, should be clipped to the boundary or clipped\n     * one inside the boundary depending on the Even/Odd status of the boundary\n     * and numDifferences.\n     * @param diagonal The index of the diagonal to clip.\n     * @param numDifferences The current number of differences being iterated upon.\n     * @param diagonalBaseIndex The base reference diagonal.\n     * @param numDiagonals The total number of diagonals.\n     * @returns The clipped diagonal index.\n     */\n    ClipDiagonalBound(diagonal, numDifferences, diagonalBaseIndex, numDiagonals) {\n        if (diagonal >= 0 && diagonal < numDiagonals) {\n            // Nothing to clip, its in range\n            return diagonal;\n        }\n        // diagonalsBelow: The number of diagonals below the reference diagonal\n        // diagonalsAbove: The number of diagonals above the reference diagonal\n        const diagonalsBelow = diagonalBaseIndex;\n        const diagonalsAbove = numDiagonals - diagonalBaseIndex - 1;\n        const diffEven = (numDifferences % 2 === 0);\n        if (diagonal < 0) {\n            const lowerBoundEven = (diagonalsBelow % 2 === 0);\n            return (diffEven === lowerBoundEven) ? 0 : 1;\n        }\n        else {\n            const upperBoundEven = (diagonalsAbove % 2 === 0);\n            return (diffEven === upperBoundEven) ? numDiagonals - 1 : numDiagonals - 2;\n        }\n    }\n}\n"],"mappings":"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"}]}