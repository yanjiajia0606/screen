{"remainingRequest":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js!/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/common/cursor/cursorWordOperations.js","dependencies":[{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/common/cursor/cursorWordOperations.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/babel.config.js","mtime":1668271197000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js","mtime":456789000000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["strings","SingleCursorState","DeleteOperations","getMapForWordSeparators","Position","Range","WordOperations","lineContent","wordType","nextCharClass","start","end","wordSeparators","model","position","getLineContent","lineNumber","_doFindPreviousWordOnLine","chIndex","column","chCode","charCodeAt","chClass","get","_createWord","_findEndOfWord","startIndex","len","length","_doFindNextWordOnLine","_findStartOfWord","wordNavigationType","getLineMaxColumn","prevWordOnLine","_findPreviousWordOnLine","maxColumn","left","right","isLowerAsciiLetter","isAsciiDigit","isUpperAsciiLetter","rightRight","movedDown","getLineCount","nextWordOnLine","_findNextWordOnLine","lastNonWhitespace","lastNonWhitespaceIndex","ctx","selection","whitespaceHeuristics","isEmpty","isAutoClosingPairDelete","autoClosingDelete","autoClosingBrackets","autoClosingQuotes","autoClosingPairs","autoClosingPairsOpenByEnd","autoClosedCharacters","getPosition","positionLineNumber","positionColumn","r","_deleteWordLeftWhitespace","_deleteInsideWordWhitespace","_deleteInsideWordDetermineDeleteRange","str","index","charCode","lineContentLength","leftIndex","Math","max","_charAtIsWhitespace","rightIndex","min","lineLength","touchesWord","word","createRangeWithPosition","startColumn","endColumn","deleteWordAndAdjacentWhitespace","expandedToTheRight","pos","toPosition","_moveWordPartLeft","ch","charAt","firstNonWhitespace","_findFirstNonWhitespaceChar","lineCount","_deleteWordRightWhitespace","_moveWordPartRight","range","getValueInRange","_wordSeparators","prevWord","_createWordAtPosition","nextWord","config","cursor","inSelectionMode","selectionStart","containsPosition","isBeforeOrEqual","getStartPosition","possiblePosition","move","WordPartOperations","candidates","enforceDefined","deleteWordLeft","_deleteWordPartLeft","sort","compareRangesUsingEnds","deleteWordRight","_deleteWordPartRight","compareRangesUsingStarts","moveWordLeft","compare","moveWordRight","arr","filter","el","Boolean"],"sources":["/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/common/cursor/cursorWordOperations.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../base/common/strings.js';\nimport { SingleCursorState } from '../cursorCommon.js';\nimport { DeleteOperations } from './cursorDeleteOperations.js';\nimport { getMapForWordSeparators } from '../core/wordCharacterClassifier.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nexport class WordOperations {\n    static _createWord(lineContent, wordType, nextCharClass, start, end) {\n        // console.log('WORD ==> ' + start + ' => ' + end + ':::: <<<' + lineContent.substring(start, end) + '>>>');\n        return { start: start, end: end, wordType: wordType, nextCharClass: nextCharClass };\n    }\n    static _findPreviousWordOnLine(wordSeparators, model, position) {\n        const lineContent = model.getLineContent(position.lineNumber);\n        return this._doFindPreviousWordOnLine(lineContent, wordSeparators, position);\n    }\n    static _doFindPreviousWordOnLine(lineContent, wordSeparators, position) {\n        let wordType = 0 /* WordType.None */;\n        for (let chIndex = position.column - 2; chIndex >= 0; chIndex--) {\n            const chCode = lineContent.charCodeAt(chIndex);\n            const chClass = wordSeparators.get(chCode);\n            if (chClass === 0 /* WordCharacterClass.Regular */) {\n                if (wordType === 2 /* WordType.Separator */) {\n                    return this._createWord(lineContent, wordType, chClass, chIndex + 1, this._findEndOfWord(lineContent, wordSeparators, wordType, chIndex + 1));\n                }\n                wordType = 1 /* WordType.Regular */;\n            }\n            else if (chClass === 2 /* WordCharacterClass.WordSeparator */) {\n                if (wordType === 1 /* WordType.Regular */) {\n                    return this._createWord(lineContent, wordType, chClass, chIndex + 1, this._findEndOfWord(lineContent, wordSeparators, wordType, chIndex + 1));\n                }\n                wordType = 2 /* WordType.Separator */;\n            }\n            else if (chClass === 1 /* WordCharacterClass.Whitespace */) {\n                if (wordType !== 0 /* WordType.None */) {\n                    return this._createWord(lineContent, wordType, chClass, chIndex + 1, this._findEndOfWord(lineContent, wordSeparators, wordType, chIndex + 1));\n                }\n            }\n        }\n        if (wordType !== 0 /* WordType.None */) {\n            return this._createWord(lineContent, wordType, 1 /* WordCharacterClass.Whitespace */, 0, this._findEndOfWord(lineContent, wordSeparators, wordType, 0));\n        }\n        return null;\n    }\n    static _findEndOfWord(lineContent, wordSeparators, wordType, startIndex) {\n        const len = lineContent.length;\n        for (let chIndex = startIndex; chIndex < len; chIndex++) {\n            const chCode = lineContent.charCodeAt(chIndex);\n            const chClass = wordSeparators.get(chCode);\n            if (chClass === 1 /* WordCharacterClass.Whitespace */) {\n                return chIndex;\n            }\n            if (wordType === 1 /* WordType.Regular */ && chClass === 2 /* WordCharacterClass.WordSeparator */) {\n                return chIndex;\n            }\n            if (wordType === 2 /* WordType.Separator */ && chClass === 0 /* WordCharacterClass.Regular */) {\n                return chIndex;\n            }\n        }\n        return len;\n    }\n    static _findNextWordOnLine(wordSeparators, model, position) {\n        const lineContent = model.getLineContent(position.lineNumber);\n        return this._doFindNextWordOnLine(lineContent, wordSeparators, position);\n    }\n    static _doFindNextWordOnLine(lineContent, wordSeparators, position) {\n        let wordType = 0 /* WordType.None */;\n        const len = lineContent.length;\n        for (let chIndex = position.column - 1; chIndex < len; chIndex++) {\n            const chCode = lineContent.charCodeAt(chIndex);\n            const chClass = wordSeparators.get(chCode);\n            if (chClass === 0 /* WordCharacterClass.Regular */) {\n                if (wordType === 2 /* WordType.Separator */) {\n                    return this._createWord(lineContent, wordType, chClass, this._findStartOfWord(lineContent, wordSeparators, wordType, chIndex - 1), chIndex);\n                }\n                wordType = 1 /* WordType.Regular */;\n            }\n            else if (chClass === 2 /* WordCharacterClass.WordSeparator */) {\n                if (wordType === 1 /* WordType.Regular */) {\n                    return this._createWord(lineContent, wordType, chClass, this._findStartOfWord(lineContent, wordSeparators, wordType, chIndex - 1), chIndex);\n                }\n                wordType = 2 /* WordType.Separator */;\n            }\n            else if (chClass === 1 /* WordCharacterClass.Whitespace */) {\n                if (wordType !== 0 /* WordType.None */) {\n                    return this._createWord(lineContent, wordType, chClass, this._findStartOfWord(lineContent, wordSeparators, wordType, chIndex - 1), chIndex);\n                }\n            }\n        }\n        if (wordType !== 0 /* WordType.None */) {\n            return this._createWord(lineContent, wordType, 1 /* WordCharacterClass.Whitespace */, this._findStartOfWord(lineContent, wordSeparators, wordType, len - 1), len);\n        }\n        return null;\n    }\n    static _findStartOfWord(lineContent, wordSeparators, wordType, startIndex) {\n        for (let chIndex = startIndex; chIndex >= 0; chIndex--) {\n            const chCode = lineContent.charCodeAt(chIndex);\n            const chClass = wordSeparators.get(chCode);\n            if (chClass === 1 /* WordCharacterClass.Whitespace */) {\n                return chIndex + 1;\n            }\n            if (wordType === 1 /* WordType.Regular */ && chClass === 2 /* WordCharacterClass.WordSeparator */) {\n                return chIndex + 1;\n            }\n            if (wordType === 2 /* WordType.Separator */ && chClass === 0 /* WordCharacterClass.Regular */) {\n                return chIndex + 1;\n            }\n        }\n        return 0;\n    }\n    static moveWordLeft(wordSeparators, model, position, wordNavigationType) {\n        let lineNumber = position.lineNumber;\n        let column = position.column;\n        if (column === 1) {\n            if (lineNumber > 1) {\n                lineNumber = lineNumber - 1;\n                column = model.getLineMaxColumn(lineNumber);\n            }\n        }\n        let prevWordOnLine = WordOperations._findPreviousWordOnLine(wordSeparators, model, new Position(lineNumber, column));\n        if (wordNavigationType === 0 /* WordNavigationType.WordStart */) {\n            return new Position(lineNumber, prevWordOnLine ? prevWordOnLine.start + 1 : 1);\n        }\n        if (wordNavigationType === 1 /* WordNavigationType.WordStartFast */) {\n            if (prevWordOnLine\n                && prevWordOnLine.wordType === 2 /* WordType.Separator */\n                && prevWordOnLine.end - prevWordOnLine.start === 1\n                && prevWordOnLine.nextCharClass === 0 /* WordCharacterClass.Regular */) {\n                // Skip over a word made up of one single separator and followed by a regular character\n                prevWordOnLine = WordOperations._findPreviousWordOnLine(wordSeparators, model, new Position(lineNumber, prevWordOnLine.start + 1));\n            }\n            return new Position(lineNumber, prevWordOnLine ? prevWordOnLine.start + 1 : 1);\n        }\n        if (wordNavigationType === 3 /* WordNavigationType.WordAccessibility */) {\n            while (prevWordOnLine\n                && prevWordOnLine.wordType === 2 /* WordType.Separator */) {\n                // Skip over words made up of only separators\n                prevWordOnLine = WordOperations._findPreviousWordOnLine(wordSeparators, model, new Position(lineNumber, prevWordOnLine.start + 1));\n            }\n            return new Position(lineNumber, prevWordOnLine ? prevWordOnLine.start + 1 : 1);\n        }\n        // We are stopping at the ending of words\n        if (prevWordOnLine && column <= prevWordOnLine.end + 1) {\n            prevWordOnLine = WordOperations._findPreviousWordOnLine(wordSeparators, model, new Position(lineNumber, prevWordOnLine.start + 1));\n        }\n        return new Position(lineNumber, prevWordOnLine ? prevWordOnLine.end + 1 : 1);\n    }\n    static _moveWordPartLeft(model, position) {\n        const lineNumber = position.lineNumber;\n        const maxColumn = model.getLineMaxColumn(lineNumber);\n        if (position.column === 1) {\n            return (lineNumber > 1 ? new Position(lineNumber - 1, model.getLineMaxColumn(lineNumber - 1)) : position);\n        }\n        const lineContent = model.getLineContent(lineNumber);\n        for (let column = position.column - 1; column > 1; column--) {\n            const left = lineContent.charCodeAt(column - 2);\n            const right = lineContent.charCodeAt(column - 1);\n            if (left === 95 /* CharCode.Underline */ && right !== 95 /* CharCode.Underline */) {\n                // snake_case_variables\n                return new Position(lineNumber, column);\n            }\n            if ((strings.isLowerAsciiLetter(left) || strings.isAsciiDigit(left)) && strings.isUpperAsciiLetter(right)) {\n                // camelCaseVariables\n                return new Position(lineNumber, column);\n            }\n            if (strings.isUpperAsciiLetter(left) && strings.isUpperAsciiLetter(right)) {\n                // thisIsACamelCaseWithOneLetterWords\n                if (column + 1 < maxColumn) {\n                    const rightRight = lineContent.charCodeAt(column);\n                    if (strings.isLowerAsciiLetter(rightRight) || strings.isAsciiDigit(rightRight)) {\n                        return new Position(lineNumber, column);\n                    }\n                }\n            }\n        }\n        return new Position(lineNumber, 1);\n    }\n    static moveWordRight(wordSeparators, model, position, wordNavigationType) {\n        let lineNumber = position.lineNumber;\n        let column = position.column;\n        let movedDown = false;\n        if (column === model.getLineMaxColumn(lineNumber)) {\n            if (lineNumber < model.getLineCount()) {\n                movedDown = true;\n                lineNumber = lineNumber + 1;\n                column = 1;\n            }\n        }\n        let nextWordOnLine = WordOperations._findNextWordOnLine(wordSeparators, model, new Position(lineNumber, column));\n        if (wordNavigationType === 2 /* WordNavigationType.WordEnd */) {\n            if (nextWordOnLine && nextWordOnLine.wordType === 2 /* WordType.Separator */) {\n                if (nextWordOnLine.end - nextWordOnLine.start === 1 && nextWordOnLine.nextCharClass === 0 /* WordCharacterClass.Regular */) {\n                    // Skip over a word made up of one single separator and followed by a regular character\n                    nextWordOnLine = WordOperations._findNextWordOnLine(wordSeparators, model, new Position(lineNumber, nextWordOnLine.end + 1));\n                }\n            }\n            if (nextWordOnLine) {\n                column = nextWordOnLine.end + 1;\n            }\n            else {\n                column = model.getLineMaxColumn(lineNumber);\n            }\n        }\n        else if (wordNavigationType === 3 /* WordNavigationType.WordAccessibility */) {\n            if (movedDown) {\n                // If we move to the next line, pretend that the cursor is right before the first character.\n                // This is needed when the first word starts right at the first character - and in order not to miss it,\n                // we need to start before.\n                column = 0;\n            }\n            while (nextWordOnLine\n                && (nextWordOnLine.wordType === 2 /* WordType.Separator */\n                    || nextWordOnLine.start + 1 <= column)) {\n                // Skip over a word made up of one single separator\n                // Also skip over word if it begins before current cursor position to ascertain we're moving forward at least 1 character.\n                nextWordOnLine = WordOperations._findNextWordOnLine(wordSeparators, model, new Position(lineNumber, nextWordOnLine.end + 1));\n            }\n            if (nextWordOnLine) {\n                column = nextWordOnLine.start + 1;\n            }\n            else {\n                column = model.getLineMaxColumn(lineNumber);\n            }\n        }\n        else {\n            if (nextWordOnLine && !movedDown && column >= nextWordOnLine.start + 1) {\n                nextWordOnLine = WordOperations._findNextWordOnLine(wordSeparators, model, new Position(lineNumber, nextWordOnLine.end + 1));\n            }\n            if (nextWordOnLine) {\n                column = nextWordOnLine.start + 1;\n            }\n            else {\n                column = model.getLineMaxColumn(lineNumber);\n            }\n        }\n        return new Position(lineNumber, column);\n    }\n    static _moveWordPartRight(model, position) {\n        const lineNumber = position.lineNumber;\n        const maxColumn = model.getLineMaxColumn(lineNumber);\n        if (position.column === maxColumn) {\n            return (lineNumber < model.getLineCount() ? new Position(lineNumber + 1, 1) : position);\n        }\n        const lineContent = model.getLineContent(lineNumber);\n        for (let column = position.column + 1; column < maxColumn; column++) {\n            const left = lineContent.charCodeAt(column - 2);\n            const right = lineContent.charCodeAt(column - 1);\n            if (left !== 95 /* CharCode.Underline */ && right === 95 /* CharCode.Underline */) {\n                // snake_case_variables\n                return new Position(lineNumber, column);\n            }\n            if ((strings.isLowerAsciiLetter(left) || strings.isAsciiDigit(left)) && strings.isUpperAsciiLetter(right)) {\n                // camelCaseVariables\n                return new Position(lineNumber, column);\n            }\n            if (strings.isUpperAsciiLetter(left) && strings.isUpperAsciiLetter(right)) {\n                // thisIsACamelCaseWithOneLetterWords\n                if (column + 1 < maxColumn) {\n                    const rightRight = lineContent.charCodeAt(column);\n                    if (strings.isLowerAsciiLetter(rightRight) || strings.isAsciiDigit(rightRight)) {\n                        return new Position(lineNumber, column);\n                    }\n                }\n            }\n        }\n        return new Position(lineNumber, maxColumn);\n    }\n    static _deleteWordLeftWhitespace(model, position) {\n        const lineContent = model.getLineContent(position.lineNumber);\n        const startIndex = position.column - 2;\n        const lastNonWhitespace = strings.lastNonWhitespaceIndex(lineContent, startIndex);\n        if (lastNonWhitespace + 1 < startIndex) {\n            return new Range(position.lineNumber, lastNonWhitespace + 2, position.lineNumber, position.column);\n        }\n        return null;\n    }\n    static deleteWordLeft(ctx, wordNavigationType) {\n        const wordSeparators = ctx.wordSeparators;\n        const model = ctx.model;\n        const selection = ctx.selection;\n        const whitespaceHeuristics = ctx.whitespaceHeuristics;\n        if (!selection.isEmpty()) {\n            return selection;\n        }\n        if (DeleteOperations.isAutoClosingPairDelete(ctx.autoClosingDelete, ctx.autoClosingBrackets, ctx.autoClosingQuotes, ctx.autoClosingPairs.autoClosingPairsOpenByEnd, ctx.model, [ctx.selection], ctx.autoClosedCharacters)) {\n            const position = ctx.selection.getPosition();\n            return new Range(position.lineNumber, position.column - 1, position.lineNumber, position.column + 1);\n        }\n        const position = new Position(selection.positionLineNumber, selection.positionColumn);\n        let lineNumber = position.lineNumber;\n        let column = position.column;\n        if (lineNumber === 1 && column === 1) {\n            // Ignore deleting at beginning of file\n            return null;\n        }\n        if (whitespaceHeuristics) {\n            const r = this._deleteWordLeftWhitespace(model, position);\n            if (r) {\n                return r;\n            }\n        }\n        let prevWordOnLine = WordOperations._findPreviousWordOnLine(wordSeparators, model, position);\n        if (wordNavigationType === 0 /* WordNavigationType.WordStart */) {\n            if (prevWordOnLine) {\n                column = prevWordOnLine.start + 1;\n            }\n            else {\n                if (column > 1) {\n                    column = 1;\n                }\n                else {\n                    lineNumber--;\n                    column = model.getLineMaxColumn(lineNumber);\n                }\n            }\n        }\n        else {\n            if (prevWordOnLine && column <= prevWordOnLine.end + 1) {\n                prevWordOnLine = WordOperations._findPreviousWordOnLine(wordSeparators, model, new Position(lineNumber, prevWordOnLine.start + 1));\n            }\n            if (prevWordOnLine) {\n                column = prevWordOnLine.end + 1;\n            }\n            else {\n                if (column > 1) {\n                    column = 1;\n                }\n                else {\n                    lineNumber--;\n                    column = model.getLineMaxColumn(lineNumber);\n                }\n            }\n        }\n        return new Range(lineNumber, column, position.lineNumber, position.column);\n    }\n    static deleteInsideWord(wordSeparators, model, selection) {\n        if (!selection.isEmpty()) {\n            return selection;\n        }\n        const position = new Position(selection.positionLineNumber, selection.positionColumn);\n        const r = this._deleteInsideWordWhitespace(model, position);\n        if (r) {\n            return r;\n        }\n        return this._deleteInsideWordDetermineDeleteRange(wordSeparators, model, position);\n    }\n    static _charAtIsWhitespace(str, index) {\n        const charCode = str.charCodeAt(index);\n        return (charCode === 32 /* CharCode.Space */ || charCode === 9 /* CharCode.Tab */);\n    }\n    static _deleteInsideWordWhitespace(model, position) {\n        const lineContent = model.getLineContent(position.lineNumber);\n        const lineContentLength = lineContent.length;\n        if (lineContentLength === 0) {\n            // empty line\n            return null;\n        }\n        let leftIndex = Math.max(position.column - 2, 0);\n        if (!this._charAtIsWhitespace(lineContent, leftIndex)) {\n            // touches a non-whitespace character to the left\n            return null;\n        }\n        let rightIndex = Math.min(position.column - 1, lineContentLength - 1);\n        if (!this._charAtIsWhitespace(lineContent, rightIndex)) {\n            // touches a non-whitespace character to the right\n            return null;\n        }\n        // walk over whitespace to the left\n        while (leftIndex > 0 && this._charAtIsWhitespace(lineContent, leftIndex - 1)) {\n            leftIndex--;\n        }\n        // walk over whitespace to the right\n        while (rightIndex + 1 < lineContentLength && this._charAtIsWhitespace(lineContent, rightIndex + 1)) {\n            rightIndex++;\n        }\n        return new Range(position.lineNumber, leftIndex + 1, position.lineNumber, rightIndex + 2);\n    }\n    static _deleteInsideWordDetermineDeleteRange(wordSeparators, model, position) {\n        const lineContent = model.getLineContent(position.lineNumber);\n        const lineLength = lineContent.length;\n        if (lineLength === 0) {\n            // empty line\n            if (position.lineNumber > 1) {\n                return new Range(position.lineNumber - 1, model.getLineMaxColumn(position.lineNumber - 1), position.lineNumber, 1);\n            }\n            else {\n                if (position.lineNumber < model.getLineCount()) {\n                    return new Range(position.lineNumber, 1, position.lineNumber + 1, 1);\n                }\n                else {\n                    // empty model\n                    return new Range(position.lineNumber, 1, position.lineNumber, 1);\n                }\n            }\n        }\n        const touchesWord = (word) => {\n            return (word.start + 1 <= position.column && position.column <= word.end + 1);\n        };\n        const createRangeWithPosition = (startColumn, endColumn) => {\n            startColumn = Math.min(startColumn, position.column);\n            endColumn = Math.max(endColumn, position.column);\n            return new Range(position.lineNumber, startColumn, position.lineNumber, endColumn);\n        };\n        const deleteWordAndAdjacentWhitespace = (word) => {\n            let startColumn = word.start + 1;\n            let endColumn = word.end + 1;\n            let expandedToTheRight = false;\n            while (endColumn - 1 < lineLength && this._charAtIsWhitespace(lineContent, endColumn - 1)) {\n                expandedToTheRight = true;\n                endColumn++;\n            }\n            if (!expandedToTheRight) {\n                while (startColumn > 1 && this._charAtIsWhitespace(lineContent, startColumn - 2)) {\n                    startColumn--;\n                }\n            }\n            return createRangeWithPosition(startColumn, endColumn);\n        };\n        const prevWordOnLine = WordOperations._findPreviousWordOnLine(wordSeparators, model, position);\n        if (prevWordOnLine && touchesWord(prevWordOnLine)) {\n            return deleteWordAndAdjacentWhitespace(prevWordOnLine);\n        }\n        const nextWordOnLine = WordOperations._findNextWordOnLine(wordSeparators, model, position);\n        if (nextWordOnLine && touchesWord(nextWordOnLine)) {\n            return deleteWordAndAdjacentWhitespace(nextWordOnLine);\n        }\n        if (prevWordOnLine && nextWordOnLine) {\n            return createRangeWithPosition(prevWordOnLine.end + 1, nextWordOnLine.start + 1);\n        }\n        if (prevWordOnLine) {\n            return createRangeWithPosition(prevWordOnLine.start + 1, prevWordOnLine.end + 1);\n        }\n        if (nextWordOnLine) {\n            return createRangeWithPosition(nextWordOnLine.start + 1, nextWordOnLine.end + 1);\n        }\n        return createRangeWithPosition(1, lineLength + 1);\n    }\n    static _deleteWordPartLeft(model, selection) {\n        if (!selection.isEmpty()) {\n            return selection;\n        }\n        const pos = selection.getPosition();\n        const toPosition = WordOperations._moveWordPartLeft(model, pos);\n        return new Range(pos.lineNumber, pos.column, toPosition.lineNumber, toPosition.column);\n    }\n    static _findFirstNonWhitespaceChar(str, startIndex) {\n        const len = str.length;\n        for (let chIndex = startIndex; chIndex < len; chIndex++) {\n            const ch = str.charAt(chIndex);\n            if (ch !== ' ' && ch !== '\\t') {\n                return chIndex;\n            }\n        }\n        return len;\n    }\n    static _deleteWordRightWhitespace(model, position) {\n        const lineContent = model.getLineContent(position.lineNumber);\n        const startIndex = position.column - 1;\n        const firstNonWhitespace = this._findFirstNonWhitespaceChar(lineContent, startIndex);\n        if (startIndex + 1 < firstNonWhitespace) {\n            // bingo\n            return new Range(position.lineNumber, position.column, position.lineNumber, firstNonWhitespace + 1);\n        }\n        return null;\n    }\n    static deleteWordRight(ctx, wordNavigationType) {\n        const wordSeparators = ctx.wordSeparators;\n        const model = ctx.model;\n        const selection = ctx.selection;\n        const whitespaceHeuristics = ctx.whitespaceHeuristics;\n        if (!selection.isEmpty()) {\n            return selection;\n        }\n        const position = new Position(selection.positionLineNumber, selection.positionColumn);\n        let lineNumber = position.lineNumber;\n        let column = position.column;\n        const lineCount = model.getLineCount();\n        const maxColumn = model.getLineMaxColumn(lineNumber);\n        if (lineNumber === lineCount && column === maxColumn) {\n            // Ignore deleting at end of file\n            return null;\n        }\n        if (whitespaceHeuristics) {\n            const r = this._deleteWordRightWhitespace(model, position);\n            if (r) {\n                return r;\n            }\n        }\n        let nextWordOnLine = WordOperations._findNextWordOnLine(wordSeparators, model, position);\n        if (wordNavigationType === 2 /* WordNavigationType.WordEnd */) {\n            if (nextWordOnLine) {\n                column = nextWordOnLine.end + 1;\n            }\n            else {\n                if (column < maxColumn || lineNumber === lineCount) {\n                    column = maxColumn;\n                }\n                else {\n                    lineNumber++;\n                    nextWordOnLine = WordOperations._findNextWordOnLine(wordSeparators, model, new Position(lineNumber, 1));\n                    if (nextWordOnLine) {\n                        column = nextWordOnLine.start + 1;\n                    }\n                    else {\n                        column = model.getLineMaxColumn(lineNumber);\n                    }\n                }\n            }\n        }\n        else {\n            if (nextWordOnLine && column >= nextWordOnLine.start + 1) {\n                nextWordOnLine = WordOperations._findNextWordOnLine(wordSeparators, model, new Position(lineNumber, nextWordOnLine.end + 1));\n            }\n            if (nextWordOnLine) {\n                column = nextWordOnLine.start + 1;\n            }\n            else {\n                if (column < maxColumn || lineNumber === lineCount) {\n                    column = maxColumn;\n                }\n                else {\n                    lineNumber++;\n                    nextWordOnLine = WordOperations._findNextWordOnLine(wordSeparators, model, new Position(lineNumber, 1));\n                    if (nextWordOnLine) {\n                        column = nextWordOnLine.start + 1;\n                    }\n                    else {\n                        column = model.getLineMaxColumn(lineNumber);\n                    }\n                }\n            }\n        }\n        return new Range(lineNumber, column, position.lineNumber, position.column);\n    }\n    static _deleteWordPartRight(model, selection) {\n        if (!selection.isEmpty()) {\n            return selection;\n        }\n        const pos = selection.getPosition();\n        const toPosition = WordOperations._moveWordPartRight(model, pos);\n        return new Range(pos.lineNumber, pos.column, toPosition.lineNumber, toPosition.column);\n    }\n    static _createWordAtPosition(model, lineNumber, word) {\n        const range = new Range(lineNumber, word.start + 1, lineNumber, word.end + 1);\n        return {\n            word: model.getValueInRange(range),\n            startColumn: range.startColumn,\n            endColumn: range.endColumn\n        };\n    }\n    static getWordAtPosition(model, _wordSeparators, position) {\n        const wordSeparators = getMapForWordSeparators(_wordSeparators);\n        const prevWord = WordOperations._findPreviousWordOnLine(wordSeparators, model, position);\n        if (prevWord && prevWord.wordType === 1 /* WordType.Regular */ && prevWord.start <= position.column - 1 && position.column - 1 <= prevWord.end) {\n            return WordOperations._createWordAtPosition(model, position.lineNumber, prevWord);\n        }\n        const nextWord = WordOperations._findNextWordOnLine(wordSeparators, model, position);\n        if (nextWord && nextWord.wordType === 1 /* WordType.Regular */ && nextWord.start <= position.column - 1 && position.column - 1 <= nextWord.end) {\n            return WordOperations._createWordAtPosition(model, position.lineNumber, nextWord);\n        }\n        return null;\n    }\n    static word(config, model, cursor, inSelectionMode, position) {\n        const wordSeparators = getMapForWordSeparators(config.wordSeparators);\n        const prevWord = WordOperations._findPreviousWordOnLine(wordSeparators, model, position);\n        const nextWord = WordOperations._findNextWordOnLine(wordSeparators, model, position);\n        if (!inSelectionMode) {\n            // Entering word selection for the first time\n            let startColumn;\n            let endColumn;\n            if (prevWord && prevWord.wordType === 1 /* WordType.Regular */ && prevWord.start <= position.column - 1 && position.column - 1 <= prevWord.end) {\n                // isTouchingPrevWord\n                startColumn = prevWord.start + 1;\n                endColumn = prevWord.end + 1;\n            }\n            else if (nextWord && nextWord.wordType === 1 /* WordType.Regular */ && nextWord.start <= position.column - 1 && position.column - 1 <= nextWord.end) {\n                // isTouchingNextWord\n                startColumn = nextWord.start + 1;\n                endColumn = nextWord.end + 1;\n            }\n            else {\n                if (prevWord) {\n                    startColumn = prevWord.end + 1;\n                }\n                else {\n                    startColumn = 1;\n                }\n                if (nextWord) {\n                    endColumn = nextWord.start + 1;\n                }\n                else {\n                    endColumn = model.getLineMaxColumn(position.lineNumber);\n                }\n            }\n            return new SingleCursorState(new Range(position.lineNumber, startColumn, position.lineNumber, endColumn), 0, new Position(position.lineNumber, endColumn), 0);\n        }\n        let startColumn;\n        let endColumn;\n        if (prevWord && prevWord.wordType === 1 /* WordType.Regular */ && prevWord.start < position.column - 1 && position.column - 1 < prevWord.end) {\n            // isInsidePrevWord\n            startColumn = prevWord.start + 1;\n            endColumn = prevWord.end + 1;\n        }\n        else if (nextWord && nextWord.wordType === 1 /* WordType.Regular */ && nextWord.start < position.column - 1 && position.column - 1 < nextWord.end) {\n            // isInsideNextWord\n            startColumn = nextWord.start + 1;\n            endColumn = nextWord.end + 1;\n        }\n        else {\n            startColumn = position.column;\n            endColumn = position.column;\n        }\n        const lineNumber = position.lineNumber;\n        let column;\n        if (cursor.selectionStart.containsPosition(position)) {\n            column = cursor.selectionStart.endColumn;\n        }\n        else if (position.isBeforeOrEqual(cursor.selectionStart.getStartPosition())) {\n            column = startColumn;\n            const possiblePosition = new Position(lineNumber, column);\n            if (cursor.selectionStart.containsPosition(possiblePosition)) {\n                column = cursor.selectionStart.endColumn;\n            }\n        }\n        else {\n            column = endColumn;\n            const possiblePosition = new Position(lineNumber, column);\n            if (cursor.selectionStart.containsPosition(possiblePosition)) {\n                column = cursor.selectionStart.startColumn;\n            }\n        }\n        return cursor.move(true, lineNumber, column, 0);\n    }\n}\nexport class WordPartOperations extends WordOperations {\n    static deleteWordPartLeft(ctx) {\n        const candidates = enforceDefined([\n            WordOperations.deleteWordLeft(ctx, 0 /* WordNavigationType.WordStart */),\n            WordOperations.deleteWordLeft(ctx, 2 /* WordNavigationType.WordEnd */),\n            WordOperations._deleteWordPartLeft(ctx.model, ctx.selection)\n        ]);\n        candidates.sort(Range.compareRangesUsingEnds);\n        return candidates[2];\n    }\n    static deleteWordPartRight(ctx) {\n        const candidates = enforceDefined([\n            WordOperations.deleteWordRight(ctx, 0 /* WordNavigationType.WordStart */),\n            WordOperations.deleteWordRight(ctx, 2 /* WordNavigationType.WordEnd */),\n            WordOperations._deleteWordPartRight(ctx.model, ctx.selection)\n        ]);\n        candidates.sort(Range.compareRangesUsingStarts);\n        return candidates[0];\n    }\n    static moveWordPartLeft(wordSeparators, model, position) {\n        const candidates = enforceDefined([\n            WordOperations.moveWordLeft(wordSeparators, model, position, 0 /* WordNavigationType.WordStart */),\n            WordOperations.moveWordLeft(wordSeparators, model, position, 2 /* WordNavigationType.WordEnd */),\n            WordOperations._moveWordPartLeft(model, position)\n        ]);\n        candidates.sort(Position.compare);\n        return candidates[2];\n    }\n    static moveWordPartRight(wordSeparators, model, position) {\n        const candidates = enforceDefined([\n            WordOperations.moveWordRight(wordSeparators, model, position, 0 /* WordNavigationType.WordStart */),\n            WordOperations.moveWordRight(wordSeparators, model, position, 2 /* WordNavigationType.WordEnd */),\n            WordOperations._moveWordPartRight(model, position)\n        ]);\n        candidates.sort(Position.compare);\n        return candidates[0];\n    }\n}\nfunction enforceDefined(arr) {\n    return arr.filter(el => Boolean(el));\n}\n"],"mappings":"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"}]}