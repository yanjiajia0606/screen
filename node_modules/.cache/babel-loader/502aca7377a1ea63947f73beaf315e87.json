{"remainingRequest":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js!/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/base/common/extpath.js","dependencies":[{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/base/common/extpath.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/babel.config.js","mtime":1668271197000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js","mtime":456789000000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmV4ZWMuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcucmVwbGFjZS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC50ZXN0LmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc2xpY2UuanMiOwovKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogKiAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLgogKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8KaW1wb3J0IHsgcG9zaXgsIHNlcCB9IGZyb20gJy4vcGF0aC5qcyc7CmltcG9ydCB7IGlzV2luZG93cyB9IGZyb20gJy4vcGxhdGZvcm0uanMnOwppbXBvcnQgeyBzdGFydHNXaXRoSWdub3JlQ2FzZSB9IGZyb20gJy4vc3RyaW5ncy5qcyc7CmV4cG9ydCBmdW5jdGlvbiBpc1BhdGhTZXBhcmF0b3IoY29kZSkgewogIHJldHVybiBjb2RlID09PSA0NyAvKiBDaGFyQ29kZS5TbGFzaCAqLyB8fCBjb2RlID09PSA5MiAvKiBDaGFyQ29kZS5CYWNrc2xhc2ggKi87Cn0KLyoqCiAqIFRha2VzIGEgV2luZG93cyBPUyBwYXRoIGFuZCBjaGFuZ2VzIGJhY2t3YXJkIHNsYXNoZXMgdG8gZm9yd2FyZCBzbGFzaGVzLgogKiBUaGlzIHNob3VsZCBvbmx5IGJlIGRvbmUgZm9yIE9TIHBhdGhzIGZyb20gV2luZG93cyAob3IgdXNlciBwcm92aWRlZCBwYXRocyBwb3RlbnRpYWxseSBmcm9tIFdpbmRvd3MpLgogKiBVc2luZyBpdCBvbiBhIExpbnV4IG9yIE1heE9TIHBhdGggbWlnaHQgY2hhbmdlIGl0LgogKi8KZXhwb3J0IGZ1bmN0aW9uIHRvU2xhc2hlcyhvc1BhdGgpIHsKICByZXR1cm4gb3NQYXRoLnJlcGxhY2UoL1tcXC9dL2csIHBvc2l4LnNlcCk7Cn0KLyoqCiAqIFRha2VzIGEgV2luZG93cyBPUyBwYXRoICh1c2luZyBiYWNrd2FyZCBvciBmb3J3YXJkIHNsYXNoZXMpIGFuZCB0dXJucyBpdCBpbnRvIGEgcG9zaXggcGF0aDoKICogLSB0dXJucyBiYWNrd2FyZCBzbGFzaGVzIGludG8gZm9yd2FyZCBzbGFzaGVzCiAqIC0gbWFrZXMgaXQgYWJzb2x1dGUgaWYgaXQgc3RhcnRzIHdpdGggYSBkcml2ZSBsZXR0ZXIKICogVGhpcyBzaG91bGQgb25seSBiZSBkb25lIGZvciBPUyBwYXRocyBmcm9tIFdpbmRvd3MgKG9yIHVzZXIgcHJvdmlkZWQgcGF0aHMgcG90ZW50aWFsbHkgZnJvbSBXaW5kb3dzKS4KICogVXNpbmcgaXQgb24gYSBMaW51eCBvciBNYXhPUyBwYXRoIG1pZ2h0IGNoYW5nZSBpdC4KICovCmV4cG9ydCBmdW5jdGlvbiB0b1Bvc2l4UGF0aChvc1BhdGgpIHsKICBpZiAob3NQYXRoLmluZGV4T2YoJy8nKSA9PT0gLTEpIHsKICAgIG9zUGF0aCA9IHRvU2xhc2hlcyhvc1BhdGgpOwogIH0KICBpZiAoL15bYS16QS1aXTooXC98JCkvLnRlc3Qob3NQYXRoKSkgewogICAgLy8gc3RhcnRzIHdpdGggYSBkcml2ZSBsZXR0ZXIKICAgIG9zUGF0aCA9ICcvJyArIG9zUGF0aDsKICB9CiAgcmV0dXJuIG9zUGF0aDsKfQovKioKICogQ29tcHV0ZXMgdGhlIF9yb290XyB0aGlzIHBhdGgsIGxpa2UgYGdldFJvb3QoJ2M6XGZpbGVzJykgPT09IGM6XGAsCiAqIGBnZXRSb290KCdmaWxlczovLy9maWxlcy9wYXRoJykgPT09IGZpbGVzOi8vL2AsCiAqIG9yIGBnZXRSb290KCdcXHNlcnZlclxzaGFyZXNccGF0aCcpID09PSBcXHNlcnZlclxzaGFyZXNcYAogKi8KZXhwb3J0IGZ1bmN0aW9uIGdldFJvb3QocGF0aCkgewogIHZhciBzZXAgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHBvc2l4LnNlcDsKICBpZiAoIXBhdGgpIHsKICAgIHJldHVybiAnJzsKICB9CiAgdmFyIGxlbiA9IHBhdGgubGVuZ3RoOwogIHZhciBmaXJzdExldHRlciA9IHBhdGguY2hhckNvZGVBdCgwKTsKICBpZiAoaXNQYXRoU2VwYXJhdG9yKGZpcnN0TGV0dGVyKSkgewogICAgaWYgKGlzUGF0aFNlcGFyYXRvcihwYXRoLmNoYXJDb2RlQXQoMSkpKSB7CiAgICAgIC8vIFVOQyBjYW5kaWRhdGUgXFxsb2NhbGhvc3Rcc2hhcmVzXGRkZAogICAgICAvLyAgICAgICAgICAgICAgIF5eXl5eXl5eXl5eXl5eXl5eXl4KICAgICAgaWYgKCFpc1BhdGhTZXBhcmF0b3IocGF0aC5jaGFyQ29kZUF0KDIpKSkgewogICAgICAgIHZhciBfcG9zID0gMzsKICAgICAgICB2YXIgc3RhcnQgPSBfcG9zOwogICAgICAgIGZvciAoOyBfcG9zIDwgbGVuOyBfcG9zKyspIHsKICAgICAgICAgIGlmIChpc1BhdGhTZXBhcmF0b3IocGF0aC5jaGFyQ29kZUF0KF9wb3MpKSkgewogICAgICAgICAgICBicmVhazsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgaWYgKHN0YXJ0ICE9PSBfcG9zICYmICFpc1BhdGhTZXBhcmF0b3IocGF0aC5jaGFyQ29kZUF0KF9wb3MgKyAxKSkpIHsKICAgICAgICAgIF9wb3MgKz0gMTsKICAgICAgICAgIGZvciAoOyBfcG9zIDwgbGVuOyBfcG9zKyspIHsKICAgICAgICAgICAgaWYgKGlzUGF0aFNlcGFyYXRvcihwYXRoLmNoYXJDb2RlQXQoX3BvcykpKSB7CiAgICAgICAgICAgICAgcmV0dXJuIHBhdGguc2xpY2UoMCwgX3BvcyArIDEpIC8vIGNvbnN1bWUgdGhpcyBzZXBhcmF0b3IKICAgICAgICAgICAgICAucmVwbGFjZSgvW1xcL10vZywgc2VwKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfQogICAgLy8gL3VzZXIvZmFyCiAgICAvLyBeCiAgICByZXR1cm4gc2VwOwogIH0gZWxzZSBpZiAoaXNXaW5kb3dzRHJpdmVMZXR0ZXIoZmlyc3RMZXR0ZXIpKSB7CiAgICAvLyBjaGVjayBmb3Igd2luZG93cyBkcml2ZSBsZXR0ZXIgYzpcIG9yIGM6CiAgICBpZiAocGF0aC5jaGFyQ29kZUF0KDEpID09PSA1OCAvKiBDaGFyQ29kZS5Db2xvbiAqLykgewogICAgICBpZiAoaXNQYXRoU2VwYXJhdG9yKHBhdGguY2hhckNvZGVBdCgyKSkpIHsKICAgICAgICAvLyBDOlxmZmYKICAgICAgICAvLyBeXl4KICAgICAgICByZXR1cm4gcGF0aC5zbGljZSgwLCAyKSArIHNlcDsKICAgICAgfSBlbHNlIHsKICAgICAgICAvLyBDOgogICAgICAgIC8vIF5eCiAgICAgICAgcmV0dXJuIHBhdGguc2xpY2UoMCwgMik7CiAgICAgIH0KICAgIH0KICB9CiAgLy8gY2hlY2sgZm9yIFVSSQogIC8vIHNjaGVtZTovL2F1dGhvcml0eS9wYXRoCiAgLy8gXl5eXl5eXl5eXl5eXl5eXl5eXgogIHZhciBwb3MgPSBwYXRoLmluZGV4T2YoJzovLycpOwogIGlmIChwb3MgIT09IC0xKSB7CiAgICBwb3MgKz0gMzsgLy8gMyAtPiAiOi8vIi5sZW5ndGgKICAgIGZvciAoOyBwb3MgPCBsZW47IHBvcysrKSB7CiAgICAgIGlmIChpc1BhdGhTZXBhcmF0b3IocGF0aC5jaGFyQ29kZUF0KHBvcykpKSB7CiAgICAgICAgcmV0dXJuIHBhdGguc2xpY2UoMCwgcG9zICsgMSk7IC8vIGNvbnN1bWUgdGhpcyBzZXBhcmF0b3IKICAgICAgfQogICAgfQogIH0KCiAgcmV0dXJuICcnOwp9Ci8qKgogKiBAZGVwcmVjYXRlZCBwbGVhc2UgdXNlIGBJVXJpSWRlbnRpdHlTZXJ2aWNlLmV4dFVyaS5pc0VxdWFsT3JQYXJlbnRgIGluc3RlYWQuIElmCiAqIHlvdSBhcmUgaW4gYSBjb250ZXh0IHdpdGhvdXQgc2VydmljZXMsIGNvbnNpZGVyIHRvIHBhc3MgZG93biB0aGUgYGV4dFVyaWAgZnJvbSB0aGUKICogb3V0c2lkZSwgb3IgdXNlIGBleHRVcmlCaWFzZWRJZ25vcmVQYXRoQ2FzZWAgaWYgeW91IGtub3cgd2hhdCB5b3UgYXJlIGRvaW5nLgogKi8KZXhwb3J0IGZ1bmN0aW9uIGlzRXF1YWxPclBhcmVudChiYXNlLCBwYXJlbnRDYW5kaWRhdGUsIGlnbm9yZUNhc2UpIHsKICB2YXIgc2VwYXJhdG9yID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiBzZXA7CiAgaWYgKGJhc2UgPT09IHBhcmVudENhbmRpZGF0ZSkgewogICAgcmV0dXJuIHRydWU7CiAgfQogIGlmICghYmFzZSB8fCAhcGFyZW50Q2FuZGlkYXRlKSB7CiAgICByZXR1cm4gZmFsc2U7CiAgfQogIGlmIChwYXJlbnRDYW5kaWRhdGUubGVuZ3RoID4gYmFzZS5sZW5ndGgpIHsKICAgIHJldHVybiBmYWxzZTsKICB9CiAgaWYgKGlnbm9yZUNhc2UpIHsKICAgIHZhciBiZWdpbnNXaXRoID0gc3RhcnRzV2l0aElnbm9yZUNhc2UoYmFzZSwgcGFyZW50Q2FuZGlkYXRlKTsKICAgIGlmICghYmVnaW5zV2l0aCkgewogICAgICByZXR1cm4gZmFsc2U7CiAgICB9CiAgICBpZiAocGFyZW50Q2FuZGlkYXRlLmxlbmd0aCA9PT0gYmFzZS5sZW5ndGgpIHsKICAgICAgcmV0dXJuIHRydWU7IC8vIHNhbWUgcGF0aCwgZGlmZmVyZW50IGNhc2luZwogICAgfQoKICAgIHZhciBzZXBPZmZzZXQgPSBwYXJlbnRDYW5kaWRhdGUubGVuZ3RoOwogICAgaWYgKHBhcmVudENhbmRpZGF0ZS5jaGFyQXQocGFyZW50Q2FuZGlkYXRlLmxlbmd0aCAtIDEpID09PSBzZXBhcmF0b3IpIHsKICAgICAgc2VwT2Zmc2V0LS07IC8vIGFkanVzdCB0aGUgZXhwZWN0ZWQgc2VwIG9mZnNldCBpbiBjYXNlIG91ciBjYW5kaWRhdGUgYWxyZWFkeSBlbmRzIGluIHNlcGFyYXRvciBjaGFyYWN0ZXIKICAgIH0KCiAgICByZXR1cm4gYmFzZS5jaGFyQXQoc2VwT2Zmc2V0KSA9PT0gc2VwYXJhdG9yOwogIH0KICBpZiAocGFyZW50Q2FuZGlkYXRlLmNoYXJBdChwYXJlbnRDYW5kaWRhdGUubGVuZ3RoIC0gMSkgIT09IHNlcGFyYXRvcikgewogICAgcGFyZW50Q2FuZGlkYXRlICs9IHNlcGFyYXRvcjsKICB9CiAgcmV0dXJuIGJhc2UuaW5kZXhPZihwYXJlbnRDYW5kaWRhdGUpID09PSAwOwp9CmV4cG9ydCBmdW5jdGlvbiBpc1dpbmRvd3NEcml2ZUxldHRlcihjaGFyMCkgewogIHJldHVybiBjaGFyMCA+PSA2NSAvKiBDaGFyQ29kZS5BICovICYmIGNoYXIwIDw9IDkwIC8qIENoYXJDb2RlLlogKi8gfHwgY2hhcjAgPj0gOTcgLyogQ2hhckNvZGUuYSAqLyAmJiBjaGFyMCA8PSAxMjIgLyogQ2hhckNvZGUueiAqLzsKfQoKZXhwb3J0IGZ1bmN0aW9uIGhhc0RyaXZlTGV0dGVyKHBhdGgpIHsKICB2YXIgaXNXaW5kb3dzT1MgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGlzV2luZG93czsKICBpZiAoaXNXaW5kb3dzT1MpIHsKICAgIHJldHVybiBpc1dpbmRvd3NEcml2ZUxldHRlcihwYXRoLmNoYXJDb2RlQXQoMCkpICYmIHBhdGguY2hhckNvZGVBdCgxKSA9PT0gNTggLyogQ2hhckNvZGUuQ29sb24gKi87CiAgfQoKICByZXR1cm4gZmFsc2U7Cn0="},{"version":3,"names":["posix","sep","isWindows","startsWithIgnoreCase","isPathSeparator","code","toSlashes","osPath","replace","toPosixPath","indexOf","test","getRoot","path","len","length","firstLetter","charCodeAt","pos","start","slice","isWindowsDriveLetter","isEqualOrParent","base","parentCandidate","ignoreCase","separator","beginsWith","sepOffset","charAt","char0","hasDriveLetter","isWindowsOS"],"sources":["/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/base/common/extpath.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { posix, sep } from './path.js';\nimport { isWindows } from './platform.js';\nimport { startsWithIgnoreCase } from './strings.js';\nexport function isPathSeparator(code) {\n    return code === 47 /* CharCode.Slash */ || code === 92 /* CharCode.Backslash */;\n}\n/**\n * Takes a Windows OS path and changes backward slashes to forward slashes.\n * This should only be done for OS paths from Windows (or user provided paths potentially from Windows).\n * Using it on a Linux or MaxOS path might change it.\n */\nexport function toSlashes(osPath) {\n    return osPath.replace(/[\\\\/]/g, posix.sep);\n}\n/**\n * Takes a Windows OS path (using backward or forward slashes) and turns it into a posix path:\n * - turns backward slashes into forward slashes\n * - makes it absolute if it starts with a drive letter\n * This should only be done for OS paths from Windows (or user provided paths potentially from Windows).\n * Using it on a Linux or MaxOS path might change it.\n */\nexport function toPosixPath(osPath) {\n    if (osPath.indexOf('/') === -1) {\n        osPath = toSlashes(osPath);\n    }\n    if (/^[a-zA-Z]:(\\/|$)/.test(osPath)) { // starts with a drive letter\n        osPath = '/' + osPath;\n    }\n    return osPath;\n}\n/**\n * Computes the _root_ this path, like `getRoot('c:\\files') === c:\\`,\n * `getRoot('files:///files/path') === files:///`,\n * or `getRoot('\\\\server\\shares\\path') === \\\\server\\shares\\`\n */\nexport function getRoot(path, sep = posix.sep) {\n    if (!path) {\n        return '';\n    }\n    const len = path.length;\n    const firstLetter = path.charCodeAt(0);\n    if (isPathSeparator(firstLetter)) {\n        if (isPathSeparator(path.charCodeAt(1))) {\n            // UNC candidate \\\\localhost\\shares\\ddd\n            //               ^^^^^^^^^^^^^^^^^^^\n            if (!isPathSeparator(path.charCodeAt(2))) {\n                let pos = 3;\n                const start = pos;\n                for (; pos < len; pos++) {\n                    if (isPathSeparator(path.charCodeAt(pos))) {\n                        break;\n                    }\n                }\n                if (start !== pos && !isPathSeparator(path.charCodeAt(pos + 1))) {\n                    pos += 1;\n                    for (; pos < len; pos++) {\n                        if (isPathSeparator(path.charCodeAt(pos))) {\n                            return path.slice(0, pos + 1) // consume this separator\n                                .replace(/[\\\\/]/g, sep);\n                        }\n                    }\n                }\n            }\n        }\n        // /user/far\n        // ^\n        return sep;\n    }\n    else if (isWindowsDriveLetter(firstLetter)) {\n        // check for windows drive letter c:\\ or c:\n        if (path.charCodeAt(1) === 58 /* CharCode.Colon */) {\n            if (isPathSeparator(path.charCodeAt(2))) {\n                // C:\\fff\n                // ^^^\n                return path.slice(0, 2) + sep;\n            }\n            else {\n                // C:\n                // ^^\n                return path.slice(0, 2);\n            }\n        }\n    }\n    // check for URI\n    // scheme://authority/path\n    // ^^^^^^^^^^^^^^^^^^^\n    let pos = path.indexOf('://');\n    if (pos !== -1) {\n        pos += 3; // 3 -> \"://\".length\n        for (; pos < len; pos++) {\n            if (isPathSeparator(path.charCodeAt(pos))) {\n                return path.slice(0, pos + 1); // consume this separator\n            }\n        }\n    }\n    return '';\n}\n/**\n * @deprecated please use `IUriIdentityService.extUri.isEqualOrParent` instead. If\n * you are in a context without services, consider to pass down the `extUri` from the\n * outside, or use `extUriBiasedIgnorePathCase` if you know what you are doing.\n */\nexport function isEqualOrParent(base, parentCandidate, ignoreCase, separator = sep) {\n    if (base === parentCandidate) {\n        return true;\n    }\n    if (!base || !parentCandidate) {\n        return false;\n    }\n    if (parentCandidate.length > base.length) {\n        return false;\n    }\n    if (ignoreCase) {\n        const beginsWith = startsWithIgnoreCase(base, parentCandidate);\n        if (!beginsWith) {\n            return false;\n        }\n        if (parentCandidate.length === base.length) {\n            return true; // same path, different casing\n        }\n        let sepOffset = parentCandidate.length;\n        if (parentCandidate.charAt(parentCandidate.length - 1) === separator) {\n            sepOffset--; // adjust the expected sep offset in case our candidate already ends in separator character\n        }\n        return base.charAt(sepOffset) === separator;\n    }\n    if (parentCandidate.charAt(parentCandidate.length - 1) !== separator) {\n        parentCandidate += separator;\n    }\n    return base.indexOf(parentCandidate) === 0;\n}\nexport function isWindowsDriveLetter(char0) {\n    return char0 >= 65 /* CharCode.A */ && char0 <= 90 /* CharCode.Z */ || char0 >= 97 /* CharCode.a */ && char0 <= 122 /* CharCode.z */;\n}\nexport function hasDriveLetter(path, isWindowsOS = isWindows) {\n    if (isWindowsOS) {\n        return isWindowsDriveLetter(path.charCodeAt(0)) && path.charCodeAt(1) === 58 /* CharCode.Colon */;\n    }\n    return false;\n}\n"],"mappings":"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"}]}