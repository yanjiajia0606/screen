{"remainingRequest":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/thread-loader/dist/cjs.js!/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js!/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yanjiajia/Desktop/workspace/avue-data-new/src/page/list/record.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/src/page/list/record.vue","mtime":1668271197000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/babel.config.js","mtime":1668271197000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"mappings":";;;;;;;;;AA4GA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA;AACA;AACA;EACAC;IACAC;EACA;EACAC;IACA;MACAC;MACAC;MACAC;MACAC;QACAC;QACAC;MACA;MACAC;MACAC;MACAR;MACAS;QACAC;QACAC;QACAC;QACAC;QACAC,SACA;UACAC;UACAC;UACAC;YACAC;YACAC;YACAC;UACA;QACA,GACA;UACAL;UACAC;UACAK;UACAC;UACAL;YACAC;YACAC;YACAC;UACA;QACA,GACA;UACAL;UACAC;UACAO;UACAb;UACAc;QACA;MAEA;IACA;EACA;EACAC;IACAC;MACA;IACA;IACAC;MACA;IACA;IACAC;MACA;IACA;IACAC;MACA;IACA;EACA;EACAC;IACA;MACA;MACA;IACA;EACA;EACAC;IACA;IACA;EACA;EACAC;IACAC;MAAA;MACAC;QACAC;QACAC;MACA;QACA;QACA;UACA;YACArB;YACAsB;UACA;QACA;MACA;IACA;IACAC;MACA;QACAC;QACAjC;MACA;IACA;IACAkC;MACA;IACA;IACAC;MAAA;MAAA;MACA;QACA;QACA;QACA;UACA;QACA;QAEA;MACA;MACA;QACA;QACA;MACA;QACA;QACA;QACA;UAAApC;QACA;UACAqC;UACA;YACA;YACAC;cACAC;YACA;YACAF;UACA;QACA;UACAA;QACA;QACA,4CACA;UACArC;UACAwC;UACAC;QACA,IACAJ,QACA;UACA;QACA;MACA;QACAK;UACA;QACA;MACA;QACA;QACA;QACA;QACA;QACA;UAAA;UACA;UACA;QACA;MACA;IACA;IACAC;MAAA;MACA,4BACAC;QACA;QACA;MACA;IACA;IACAC;MACA;IACA;IACAC;MACA;MACAC;IACA;IACAC;MAAA;MACA;MACA;QACAC;UACA;UACA;UACA;YACA;YACA;YACA;UACA;UACA;UACAF;QACA;MACA;QACAA;MACA;MACA;IACA;IACAG;MAAA;MACA;QACA;QACA;MACA;MACA;QACAC;QACAC;QACApC;MACA;QACAqC;UACA;UACA;QACA;MACA,sBAEA;IAEA;IACAC;MAAA;MACA;QACAP;QACA;QACA;MACA;MACA;MACAQ;QACAR;QACA;QACA;MAEA;IACA;IACAS;MAAA;MACA;MACAC;QACA;QACA;QACAV;MACA;IACA;IACAW;MAAA;MACAA;QACA5B;QACAC;MACA;QACA;QACA;MACA;IACA;EACA;AACA","names":["dicOption","components","MonacoEditor","data","tabs","box","client","DIC","method","sql","result","form","option","labelWidth","index","align","headerAlign","column","label","prop","rules","required","message","trigger","type","dicData","hide","span","computed","isStatic","isApi","isSql","isWs","watch","created","methods","init","getDbList","current","size","value","getSql","id","handleClose","handleRes","params","Object","formData","url","headers","dynamicSql","handleImport","then","vaildData","beforeClose","done","beforeOpen","getObj","rowDel","confirmButtonText","cancelButtonText","delObj","rowUpdate","updateObj","rowSave","addObj","getList"],"sourceRoot":"src/page/list","sources":["record.vue"],"sourcesContent":["<template>\n  <avue-crud :option=\"option\"\n             v-model=\"form\"\n             @row-save=\"rowSave\"\n             @row-update=\"rowUpdate\"\n             @row-del=\"rowDel\"\n             :before-close=\"beforeClose\"\n             :before-open=\"beforeOpen\"\n             :data=\"data\">\n    <template slot=\"contentForm\"\n              slot-scope=\"{}\">\n      <template v-if=\"isStatic\">\n        <el-form-item label=\"数据值\"\n                      label-position=\"top\">\n          <monaco-editor v-model=\"form.data\"\n                         language=\"javascript\"\n                         height=\"100\"></monaco-editor>\n          <br />\n          <el-upload :show-file-list=\"false\"\n                     :auto-upload=\"false\"\n                     style=\"display:inline-block\"\n                     accept=\".xls,.xlsx\"\n                     :on-change=\"handleImport\">\n            <el-button size=\"small\"\n                       icon=\"el-icon-upload\"\n                       type=\"success\">导入数据(Excel)</el-button>\n          </el-upload>\n\n        </el-form-item>\n      </template>\n      <template v-else-if=\"isSql\">\n        <el-form-item label=\"数据源选择\">\n          <avue-select :dic=\"DIC.sql\"\n                       v-model=\"form.dbId\"></avue-select>\n        </el-form-item>\n\n        <el-form-item label=\"SQL语句\"\n                      label-position=\"top\">\n          <monaco-editor v-model=\"form.dbSql\"\n                         language=\"sql\"\n                         height=\"100\"></monaco-editor>\n        </el-form-item>\n      </template>\n      <template v-else-if=\"isApi\">\n        <el-form-item label=\"接口地址\">\n          <avue-input v-model=\"form.url\"></avue-input>\n        </el-form-item>\n        <el-form-item label=\"请求方式\">\n          <avue-select v-model=\"form.dataMethod\"\n                       :dic=\"DIC.method\"></avue-select>\n        </el-form-item>\n      </template>\n      <template v-else-if=\"isWs\">\n        <el-form-item label=\"WS地址\">\n          <el-input v-model=\"form.wsUrl\">\n          </el-input>\n        </el-form-item>\n      </template>\n      <el-form-item label=\"请求配置\"\n                    v-if=\"isWs || isApi\">\n        <el-tabs class=\"menu__tabs\"\n                 v-model=\"tabs\">\n          <el-tab-pane label=\"请求参数（Body）\"\n                       name=\"0\">\n            <template v-if=\"tabs==0\">\n              <el-radio-group size=\"mini\"\n                              v-if=\"['post','put'].includes(form.dataMethod)\"\n                              v-model=\"form.dataQueryType\">\n                <el-radio label=\"json\">JSON数据</el-radio>\n                <el-radio label=\"form\">FORM表单</el-radio>\n              </el-radio-group>\n              <monaco-editor v-model=\"form.dataQuery\"\n                             language=\"javascript\"\n                             height=\"100\"></monaco-editor>\n            </template>\n          </el-tab-pane>\n          <el-tab-pane label=\"请求头（Headers）\"\n                       v-if=\"isApi\"\n                       name=\"1\">\n            <template v-if=\"tabs==1\">\n              <monaco-editor v-model=\"form.dataHeader\"\n                             language=\"javascript\"\n                             height=\"100\"></monaco-editor>\n            </template>\n          </el-tab-pane>\n\n        </el-tabs>\n      </el-form-item>\n      <el-form-item label=\"过滤器\">\n        <monaco-editor v-model=\"form.dataFormatter\"\n                       height=\"100\"></monaco-editor>\n      </el-form-item>\n      <el-form-item label=\"响应数据\">\n        <monaco-editor v-model=\"result\"\n                       disabled\n                       height=\"100\"></monaco-editor>\n      </el-form-item>\n    </template>\n    <template slot=\"menuForm\">\n      <el-button @click=\"handleRes\"\n                 size=\"small\"\n                 icon=\"el-icon-upload\"\n                 type=\"primary\">刷新数据</el-button>\n    </template>\n  </avue-crud>\n</template>\n\n<script>\nimport crypto from '@/utils/crypto'\nimport { addParam } from '@/echart/util';\nimport { getFunction, funEval } from '@/utils/utils'\nimport MonacoEditor from '@/page/components/editor'\nimport { getList, getObj, addObj, delObj, updateObj } from '@/api/record'\nimport { getList as getDbList, dynamicSql } from \"@/api/db\";\nimport { dicOption } from '@/option/config'\ndicOption.dataType.splice(4, 1)\nconst dataType = dicOption.dataType\nexport default {\n  components: {\n    MonacoEditor,\n  },\n  data () {\n    return {\n      tabs: 0,\n      box: false,\n      client: {},\n      DIC: {\n        method: dicOption.dataMethod,\n        sql: []\n      },\n      result: {},\n      form: {},\n      data: [],\n      option: {\n        labelWidth: 130,\n        index: true,\n        align: 'center',\n        headerAlign: 'center',\n        column: [\n          {\n            label: '名称',\n            prop: 'name',\n            rules: [{\n              required: true,\n              message: \"请输入名称\",\n              trigger: \"blur\"\n            }]\n          },\n          {\n            label: '类型',\n            prop: 'dataType',\n            type: 'select',\n            dicData: dataType,\n            rules: [{\n              required: true,\n              message: \"请选择类型\",\n              trigger: \"blur\"\n            }]\n          },\n          {\n            label: '',\n            prop: 'content',\n            hide: true,\n            labelWidth: 0,\n            span: 24,\n          }\n        ]\n      }\n    }\n  },\n  computed: {\n    isStatic () {\n      return this.form.dataType === 0\n    },\n    isApi () {\n      return this.form.dataType == 1\n    },\n    isSql () {\n      return this.form.dataType == 2\n    },\n    isWs () {\n      return this.form.dataType === 3\n    },\n  },\n  watch: {\n    'form.dataType' () {\n      this.result = ''\n      this.tabs = '0'\n    }\n  },\n  created () {\n    this.init()\n    this.getList()\n  },\n  methods: {\n    init () {\n      getDbList({\n        current: 1,\n        size: 100,\n      }).then(res => {\n        const data = res.data.data;\n        this.DIC.sql = data.records.map(ele => {\n          return {\n            label: ele.name,\n            value: ele.id\n          }\n        })\n      });\n    },\n    getSql (row) {\n      return crypto.encrypt(JSON.stringify({\n        id: row.dbId,\n        sql: row.dbSql\n      }))\n    },\n    handleClose () {\n      this.client.close && this.client.close()\n    },\n    handleRes (tip = true) {\n      const formatter = (data) => {\n        const dataFormatter = getFunction(this.form.dataFormatter)\n        if (tip) this.$message.success('数据刷新成功')\n        if (typeof dataFormatter == 'function') {\n          return dataFormatter(data)\n        }\n\n        return data\n      }\n      if (this.isStatic) {\n        let result = funEval(this.form.data)\n        this.result = formatter(result);\n      } else if (this.isApi) {\n        let dataQuery = this.form.dataQuery ? getFunction(this.form.dataQuery)() : {}\n        let dataHeader = this.form.dataHeader ? getFunction(this.form.dataHeader)() : {}\n        let params = {}, method = this.form.dataMethod\n        if (['post', 'put'].includes(method)) {\n          params.data = dataQuery\n          if (this.form.dataQueryType == 'form') {\n            let formData = new FormData()\n            Object.keys(dataQuery).forEach(ele => {\n              formData.append(ele, dataQuery[ele])\n            })\n            params.data = formData\n          }\n        } else if (['get', 'delete'].includes(method)) {\n          params.params = dataQuery\n        }\n        this.$axios({\n          ...{\n            method: this.form.dataMethod,\n            url: this.form.url,\n            headers: dataHeader\n          },\n          ...params\n        }).then(res => {\n          this.result = formatter(res.data)\n        })\n      } else if (this.isSql) {\n        dynamicSql(this.getSql(this.form)).then(res => {\n          this.result = formatter(res.data.data)\n        })\n      } else if (this.isWs) {\n        this.handleClose()\n        let dataQuery = this.form.dataQuery ? getFunction(this.form.dataQuery)() : {}\n        let url = this.form.wsUrl + addParam(dataQuery)\n        this.client = new WebSocket(url)\n        this.client.onmessage = (msgEvent = {}) => {\n          const data = JSON.parse(msgEvent.data)\n          this.result = formatter(data)\n        }\n      }\n    },\n    handleImport (file, fileLis) {\n      this.$Export.xlsx(file.raw)\n        .then(data => {\n          this.form.data = data.results;\n          this.$message.success('导入成功')\n        })\n    },\n    vaildData (id) {\n      return [0, 1, 2].includes(id)\n    },\n    beforeClose (done) {\n      this.handleClose()\n      done()\n    },\n    beforeOpen (done, type) {\n      this.result = '';\n      if (type == 'edit') {\n        getObj(this.form.id).then(res => {\n          const data = res.data.data;\n          this.form = data\n          if (this.isSql) {\n            let mode = JSON.parse(crypto.decrypt(this.form.data));\n            this.form.dbId = mode.id;\n            this.form.dbSql = mode.sql;\n          }\n          this.handleRes(false)\n          done()\n        })\n      } else {\n        done()\n      }\n      this.form.dataFormatter = this.form.dataFormatter || \"(data)=>{\\n    return {\\n        data\\n    }\\n}\"\n    },\n    rowDel (row, index) {\n      if (this.vaildData(index) && this.$website.isDemo) {\n        this.$message.error(this.$website.isDemoTip)\n        return false;\n      }\n      this.$confirm('此操作将永久删除, 是否继续?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        delObj(row.id).then(() => {\n          this.$message.success('删除成功');\n          this.getList()\n        })\n      }).catch(() => {\n\n      });\n\n    },\n    rowUpdate (row, index, done) {\n      if (this.vaildData(index) && this.$website.isDemo) {\n        done();\n        this.$message.error(this.$website.isDemoTip)\n        return false;\n      }\n      if (this.isSql) row.data = this.getSql(row)\n      updateObj(row).then(() => {\n        done();\n        this.$message.success('修改成功');\n        this.getList()\n\n      })\n    },\n    rowSave (row, done) {\n      if (this.isSql) row.data = this.getSql(row)\n      addObj(row).then(() => {\n        this.$message.success('新增成功');\n        this.getList()\n        done();\n      })\n    },\n    getList () {\n      getList({\n        current: 1,\n        size: 100,\n      }).then(res => {\n        const data = res.data.data;\n        this.data = data.records;\n      })\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n</style>"]}]}