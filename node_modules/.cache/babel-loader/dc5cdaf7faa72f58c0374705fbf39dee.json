{"remainingRequest":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js!/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/common/cursor/cursorCollection.js","dependencies":[{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/common/cursor/cursorCollection.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/babel.config.js","mtime":1668271197000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js","mtime":456789000000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["compareBy","findLastMaxBy","findMinBy","CursorState","Cursor","Position","Range","Selection","CursorCollection","context","cursors","lastAddedCursorIndex","cursor","dispose","startTrackingSelection","stopTrackingSelection","ensureValidState","map","c","readSelectionFromMarkers","asCursorState","viewState","position","compare","modelState","selection","selections","setStates","fromModelSelections","states","setState","_setSecondaryStates","slice","secondaryStates","secondaryCursorsLength","length","secondaryStatesLength","createCnt","i","_addSecondaryCursor","removeCnt","_removeSecondaryCursor","push","removeIndex","splice","sortedCursors","len","index","sort","s","compareRangesUsingStarts","sortedCursorIndex","current","next","currentSelection","nextSelection","cursorConfig","multiCursorMergeOverlapping","shouldMergeCursors","isEmpty","getStartPosition","isBeforeOrEqual","getEndPosition","isBefore","winnerSortedCursorIndex","looserSortedCursorIndex","looserIndex","winnerIndex","looserSelection","winnerSelection","equalsSelection","resultingRange","plusRange","looserSelectionIsLTR","selectionStartLineNumber","startLineNumber","selectionStartColumn","startColumn","winnerSelectionIsLTR","resultingSelectionIsLTR","resultingSelection","endLineNumber","endColumn","resultingState","fromModelSelection","sortedCursor"],"sources":["/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/common/cursor/cursorCollection.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { compareBy, findLastMaxBy, findMinBy } from '../../../base/common/arrays.js';\nimport { CursorState } from '../cursorCommon.js';\nimport { Cursor } from './oneCursor.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { Selection } from '../core/selection.js';\nexport class CursorCollection {\n    constructor(context) {\n        this.context = context;\n        this.cursors = [new Cursor(context)];\n        this.lastAddedCursorIndex = 0;\n    }\n    dispose() {\n        for (const cursor of this.cursors) {\n            cursor.dispose(this.context);\n        }\n    }\n    startTrackingSelections() {\n        for (const cursor of this.cursors) {\n            cursor.startTrackingSelection(this.context);\n        }\n    }\n    stopTrackingSelections() {\n        for (const cursor of this.cursors) {\n            cursor.stopTrackingSelection(this.context);\n        }\n    }\n    updateContext(context) {\n        this.context = context;\n    }\n    ensureValidState() {\n        for (const cursor of this.cursors) {\n            cursor.ensureValidState(this.context);\n        }\n    }\n    readSelectionFromMarkers() {\n        return this.cursors.map(c => c.readSelectionFromMarkers(this.context));\n    }\n    getAll() {\n        return this.cursors.map(c => c.asCursorState());\n    }\n    getViewPositions() {\n        return this.cursors.map(c => c.viewState.position);\n    }\n    getTopMostViewPosition() {\n        return findMinBy(this.cursors, compareBy(c => c.viewState.position, Position.compare)).viewState.position;\n    }\n    getBottomMostViewPosition() {\n        return findLastMaxBy(this.cursors, compareBy(c => c.viewState.position, Position.compare)).viewState.position;\n    }\n    getSelections() {\n        return this.cursors.map(c => c.modelState.selection);\n    }\n    getViewSelections() {\n        return this.cursors.map(c => c.viewState.selection);\n    }\n    setSelections(selections) {\n        this.setStates(CursorState.fromModelSelections(selections));\n    }\n    getPrimaryCursor() {\n        return this.cursors[0].asCursorState();\n    }\n    setStates(states) {\n        if (states === null) {\n            return;\n        }\n        this.cursors[0].setState(this.context, states[0].modelState, states[0].viewState);\n        this._setSecondaryStates(states.slice(1));\n    }\n    /**\n     * Creates or disposes secondary cursors as necessary to match the number of `secondarySelections`.\n     */\n    _setSecondaryStates(secondaryStates) {\n        const secondaryCursorsLength = this.cursors.length - 1;\n        const secondaryStatesLength = secondaryStates.length;\n        if (secondaryCursorsLength < secondaryStatesLength) {\n            const createCnt = secondaryStatesLength - secondaryCursorsLength;\n            for (let i = 0; i < createCnt; i++) {\n                this._addSecondaryCursor();\n            }\n        }\n        else if (secondaryCursorsLength > secondaryStatesLength) {\n            const removeCnt = secondaryCursorsLength - secondaryStatesLength;\n            for (let i = 0; i < removeCnt; i++) {\n                this._removeSecondaryCursor(this.cursors.length - 2);\n            }\n        }\n        for (let i = 0; i < secondaryStatesLength; i++) {\n            this.cursors[i + 1].setState(this.context, secondaryStates[i].modelState, secondaryStates[i].viewState);\n        }\n    }\n    killSecondaryCursors() {\n        this._setSecondaryStates([]);\n    }\n    _addSecondaryCursor() {\n        this.cursors.push(new Cursor(this.context));\n        this.lastAddedCursorIndex = this.cursors.length - 1;\n    }\n    getLastAddedCursorIndex() {\n        if (this.cursors.length === 1 || this.lastAddedCursorIndex === 0) {\n            return 0;\n        }\n        return this.lastAddedCursorIndex;\n    }\n    _removeSecondaryCursor(removeIndex) {\n        if (this.lastAddedCursorIndex >= removeIndex + 1) {\n            this.lastAddedCursorIndex--;\n        }\n        this.cursors[removeIndex + 1].dispose(this.context);\n        this.cursors.splice(removeIndex + 1, 1);\n    }\n    normalize() {\n        if (this.cursors.length === 1) {\n            return;\n        }\n        const cursors = this.cursors.slice(0);\n        const sortedCursors = [];\n        for (let i = 0, len = cursors.length; i < len; i++) {\n            sortedCursors.push({\n                index: i,\n                selection: cursors[i].modelState.selection,\n            });\n        }\n        sortedCursors.sort(compareBy(s => s.selection, Range.compareRangesUsingStarts));\n        for (let sortedCursorIndex = 0; sortedCursorIndex < sortedCursors.length - 1; sortedCursorIndex++) {\n            const current = sortedCursors[sortedCursorIndex];\n            const next = sortedCursors[sortedCursorIndex + 1];\n            const currentSelection = current.selection;\n            const nextSelection = next.selection;\n            if (!this.context.cursorConfig.multiCursorMergeOverlapping) {\n                continue;\n            }\n            let shouldMergeCursors;\n            if (nextSelection.isEmpty() || currentSelection.isEmpty()) {\n                // Merge touching cursors if one of them is collapsed\n                shouldMergeCursors = nextSelection.getStartPosition().isBeforeOrEqual(currentSelection.getEndPosition());\n            }\n            else {\n                // Merge only overlapping cursors (i.e. allow touching ranges)\n                shouldMergeCursors = nextSelection.getStartPosition().isBefore(currentSelection.getEndPosition());\n            }\n            if (shouldMergeCursors) {\n                const winnerSortedCursorIndex = current.index < next.index ? sortedCursorIndex : sortedCursorIndex + 1;\n                const looserSortedCursorIndex = current.index < next.index ? sortedCursorIndex + 1 : sortedCursorIndex;\n                const looserIndex = sortedCursors[looserSortedCursorIndex].index;\n                const winnerIndex = sortedCursors[winnerSortedCursorIndex].index;\n                const looserSelection = sortedCursors[looserSortedCursorIndex].selection;\n                const winnerSelection = sortedCursors[winnerSortedCursorIndex].selection;\n                if (!looserSelection.equalsSelection(winnerSelection)) {\n                    const resultingRange = looserSelection.plusRange(winnerSelection);\n                    const looserSelectionIsLTR = (looserSelection.selectionStartLineNumber === looserSelection.startLineNumber && looserSelection.selectionStartColumn === looserSelection.startColumn);\n                    const winnerSelectionIsLTR = (winnerSelection.selectionStartLineNumber === winnerSelection.startLineNumber && winnerSelection.selectionStartColumn === winnerSelection.startColumn);\n                    // Give more importance to the last added cursor (think Ctrl-dragging + hitting another cursor)\n                    let resultingSelectionIsLTR;\n                    if (looserIndex === this.lastAddedCursorIndex) {\n                        resultingSelectionIsLTR = looserSelectionIsLTR;\n                        this.lastAddedCursorIndex = winnerIndex;\n                    }\n                    else {\n                        // Winner takes it all\n                        resultingSelectionIsLTR = winnerSelectionIsLTR;\n                    }\n                    let resultingSelection;\n                    if (resultingSelectionIsLTR) {\n                        resultingSelection = new Selection(resultingRange.startLineNumber, resultingRange.startColumn, resultingRange.endLineNumber, resultingRange.endColumn);\n                    }\n                    else {\n                        resultingSelection = new Selection(resultingRange.endLineNumber, resultingRange.endColumn, resultingRange.startLineNumber, resultingRange.startColumn);\n                    }\n                    sortedCursors[winnerSortedCursorIndex].selection = resultingSelection;\n                    const resultingState = CursorState.fromModelSelection(resultingSelection);\n                    cursors[winnerIndex].setState(this.context, resultingState.modelState, resultingState.viewState);\n                }\n                for (const sortedCursor of sortedCursors) {\n                    if (sortedCursor.index > looserIndex) {\n                        sortedCursor.index--;\n                    }\n                }\n                cursors.splice(looserIndex, 1);\n                sortedCursors.splice(looserSortedCursorIndex, 1);\n                this._removeSecondaryCursor(looserIndex - 1);\n                sortedCursorIndex--;\n            }\n        }\n    }\n}\n"],"mappings":"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"}]}