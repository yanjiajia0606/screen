{"remainingRequest":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/thread-loader/dist/cjs.js!/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js!/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/common/diff/diffComputer.js","dependencies":[{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/common/diff/diffComputer.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/babel.config.js","mtime":1668271197000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js","mtime":456789000000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["LcsDiff","strings","MINIMUM_MATCHING_CHARACTER_LENGTH","computeDiff","originalSequence","modifiedSequence","continueProcessingPredicate","pretty","diffAlgo","ComputeDiff","LineSequence","lines","startColumns","endColumns","i","length","getFirstNonBlankColumn","getLastNonBlankColumn","_startColumns","_endColumns","elements","len","substring","index","shouldIgnoreTrimWhitespace","startIndex","endIndex","charCodes","lineNumbers","columns","lineContent","startColumn","endColumn","col","charCodeAt","CharSequence","_charCodes","_lineNumbers","_columns","map","s","idx","String","fromCharCode","join","arr","Error","getEndLineNumber","_assertIndex","getStartLineNumber","getEndColumn","getStartColumn","CharChange","originalStartLineNumber","originalStartColumn","originalEndLineNumber","originalEndColumn","modifiedStartLineNumber","modifiedStartColumn","modifiedEndLineNumber","modifiedEndColumn","diffChange","originalCharSequence","modifiedCharSequence","originalStart","originalLength","modifiedStart","modifiedLength","postProcessCharChanges","rawChanges","result","prevChange","currChange","originalMatchingLength","modifiedMatchingLength","matchingLength","Math","min","push","LineChange","charChanges","originalLineSequence","modifiedLineSequence","continueCharDiff","shouldComputeCharChanges","shouldPostProcessCharChanges","undefined","createCharSequence","getElements","changes","createFromDiffChange","DiffComputer","originalLines","modifiedLines","opts","shouldMakePrettyDiff","original","modified","continueLineDiff","createContinueProcessingPredicate","maxComputationTime","quitEarly","diffResult","lineChanges","createFromDiffResult","originalLineIndex","modifiedLineIndex","nextChange","originalStop","modifiedStop","originalLine","modifiedLine","originalChar","modifiedChar","_pushTrimWhitespaceCharChange","originalMaxColumn","modifiedMaxColumn","originalLineNumber","modifiedLineNumber","_mergeTrimWhitespaceCharChange","txt","defaultValue","r","firstNonWhitespaceIndex","lastNonWhitespaceIndex","maximumRuntime","startTime","Date","now"],"sources":["/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/common/diff/diffComputer.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { LcsDiff } from '../../../base/common/diff/diff.js';\nimport * as strings from '../../../base/common/strings.js';\nconst MINIMUM_MATCHING_CHARACTER_LENGTH = 3;\nfunction computeDiff(originalSequence, modifiedSequence, continueProcessingPredicate, pretty) {\n    const diffAlgo = new LcsDiff(originalSequence, modifiedSequence, continueProcessingPredicate);\n    return diffAlgo.ComputeDiff(pretty);\n}\nclass LineSequence {\n    constructor(lines) {\n        const startColumns = [];\n        const endColumns = [];\n        for (let i = 0, length = lines.length; i < length; i++) {\n            startColumns[i] = getFirstNonBlankColumn(lines[i], 1);\n            endColumns[i] = getLastNonBlankColumn(lines[i], 1);\n        }\n        this.lines = lines;\n        this._startColumns = startColumns;\n        this._endColumns = endColumns;\n    }\n    getElements() {\n        const elements = [];\n        for (let i = 0, len = this.lines.length; i < len; i++) {\n            elements[i] = this.lines[i].substring(this._startColumns[i] - 1, this._endColumns[i] - 1);\n        }\n        return elements;\n    }\n    getStrictElement(index) {\n        return this.lines[index];\n    }\n    getStartLineNumber(i) {\n        return i + 1;\n    }\n    getEndLineNumber(i) {\n        return i + 1;\n    }\n    createCharSequence(shouldIgnoreTrimWhitespace, startIndex, endIndex) {\n        const charCodes = [];\n        const lineNumbers = [];\n        const columns = [];\n        let len = 0;\n        for (let index = startIndex; index <= endIndex; index++) {\n            const lineContent = this.lines[index];\n            const startColumn = (shouldIgnoreTrimWhitespace ? this._startColumns[index] : 1);\n            const endColumn = (shouldIgnoreTrimWhitespace ? this._endColumns[index] : lineContent.length + 1);\n            for (let col = startColumn; col < endColumn; col++) {\n                charCodes[len] = lineContent.charCodeAt(col - 1);\n                lineNumbers[len] = index + 1;\n                columns[len] = col;\n                len++;\n            }\n            if (!shouldIgnoreTrimWhitespace && index < endIndex) {\n                // Add \\n if trim whitespace is not ignored\n                charCodes[len] = 10 /* CharCode.LineFeed */;\n                lineNumbers[len] = index + 1;\n                columns[len] = lineContent.length + 1;\n                len++;\n            }\n        }\n        return new CharSequence(charCodes, lineNumbers, columns);\n    }\n}\nclass CharSequence {\n    constructor(charCodes, lineNumbers, columns) {\n        this._charCodes = charCodes;\n        this._lineNumbers = lineNumbers;\n        this._columns = columns;\n    }\n    toString() {\n        return ('[' + this._charCodes.map((s, idx) => (s === 10 /* CharCode.LineFeed */ ? '\\\\n' : String.fromCharCode(s)) + `-(${this._lineNumbers[idx]},${this._columns[idx]})`).join(', ') + ']');\n    }\n    _assertIndex(index, arr) {\n        if (index < 0 || index >= arr.length) {\n            throw new Error(`Illegal index`);\n        }\n    }\n    getElements() {\n        return this._charCodes;\n    }\n    getStartLineNumber(i) {\n        if (i > 0 && i === this._lineNumbers.length) {\n            // the start line number of the element after the last element\n            // is the end line number of the last element\n            return this.getEndLineNumber(i - 1);\n        }\n        this._assertIndex(i, this._lineNumbers);\n        return this._lineNumbers[i];\n    }\n    getEndLineNumber(i) {\n        if (i === -1) {\n            // the end line number of the element before the first element\n            // is the start line number of the first element\n            return this.getStartLineNumber(i + 1);\n        }\n        this._assertIndex(i, this._lineNumbers);\n        if (this._charCodes[i] === 10 /* CharCode.LineFeed */) {\n            return this._lineNumbers[i] + 1;\n        }\n        return this._lineNumbers[i];\n    }\n    getStartColumn(i) {\n        if (i > 0 && i === this._columns.length) {\n            // the start column of the element after the last element\n            // is the end column of the last element\n            return this.getEndColumn(i - 1);\n        }\n        this._assertIndex(i, this._columns);\n        return this._columns[i];\n    }\n    getEndColumn(i) {\n        if (i === -1) {\n            // the end column of the element before the first element\n            // is the start column of the first element\n            return this.getStartColumn(i + 1);\n        }\n        this._assertIndex(i, this._columns);\n        if (this._charCodes[i] === 10 /* CharCode.LineFeed */) {\n            return 1;\n        }\n        return this._columns[i] + 1;\n    }\n}\nclass CharChange {\n    constructor(originalStartLineNumber, originalStartColumn, originalEndLineNumber, originalEndColumn, modifiedStartLineNumber, modifiedStartColumn, modifiedEndLineNumber, modifiedEndColumn) {\n        this.originalStartLineNumber = originalStartLineNumber;\n        this.originalStartColumn = originalStartColumn;\n        this.originalEndLineNumber = originalEndLineNumber;\n        this.originalEndColumn = originalEndColumn;\n        this.modifiedStartLineNumber = modifiedStartLineNumber;\n        this.modifiedStartColumn = modifiedStartColumn;\n        this.modifiedEndLineNumber = modifiedEndLineNumber;\n        this.modifiedEndColumn = modifiedEndColumn;\n    }\n    static createFromDiffChange(diffChange, originalCharSequence, modifiedCharSequence) {\n        const originalStartLineNumber = originalCharSequence.getStartLineNumber(diffChange.originalStart);\n        const originalStartColumn = originalCharSequence.getStartColumn(diffChange.originalStart);\n        const originalEndLineNumber = originalCharSequence.getEndLineNumber(diffChange.originalStart + diffChange.originalLength - 1);\n        const originalEndColumn = originalCharSequence.getEndColumn(diffChange.originalStart + diffChange.originalLength - 1);\n        const modifiedStartLineNumber = modifiedCharSequence.getStartLineNumber(diffChange.modifiedStart);\n        const modifiedStartColumn = modifiedCharSequence.getStartColumn(diffChange.modifiedStart);\n        const modifiedEndLineNumber = modifiedCharSequence.getEndLineNumber(diffChange.modifiedStart + diffChange.modifiedLength - 1);\n        const modifiedEndColumn = modifiedCharSequence.getEndColumn(diffChange.modifiedStart + diffChange.modifiedLength - 1);\n        return new CharChange(originalStartLineNumber, originalStartColumn, originalEndLineNumber, originalEndColumn, modifiedStartLineNumber, modifiedStartColumn, modifiedEndLineNumber, modifiedEndColumn);\n    }\n}\nfunction postProcessCharChanges(rawChanges) {\n    if (rawChanges.length <= 1) {\n        return rawChanges;\n    }\n    const result = [rawChanges[0]];\n    let prevChange = result[0];\n    for (let i = 1, len = rawChanges.length; i < len; i++) {\n        const currChange = rawChanges[i];\n        const originalMatchingLength = currChange.originalStart - (prevChange.originalStart + prevChange.originalLength);\n        const modifiedMatchingLength = currChange.modifiedStart - (prevChange.modifiedStart + prevChange.modifiedLength);\n        // Both of the above should be equal, but the continueProcessingPredicate may prevent this from being true\n        const matchingLength = Math.min(originalMatchingLength, modifiedMatchingLength);\n        if (matchingLength < MINIMUM_MATCHING_CHARACTER_LENGTH) {\n            // Merge the current change into the previous one\n            prevChange.originalLength = (currChange.originalStart + currChange.originalLength) - prevChange.originalStart;\n            prevChange.modifiedLength = (currChange.modifiedStart + currChange.modifiedLength) - prevChange.modifiedStart;\n        }\n        else {\n            // Add the current change\n            result.push(currChange);\n            prevChange = currChange;\n        }\n    }\n    return result;\n}\nclass LineChange {\n    constructor(originalStartLineNumber, originalEndLineNumber, modifiedStartLineNumber, modifiedEndLineNumber, charChanges) {\n        this.originalStartLineNumber = originalStartLineNumber;\n        this.originalEndLineNumber = originalEndLineNumber;\n        this.modifiedStartLineNumber = modifiedStartLineNumber;\n        this.modifiedEndLineNumber = modifiedEndLineNumber;\n        this.charChanges = charChanges;\n    }\n    static createFromDiffResult(shouldIgnoreTrimWhitespace, diffChange, originalLineSequence, modifiedLineSequence, continueCharDiff, shouldComputeCharChanges, shouldPostProcessCharChanges) {\n        let originalStartLineNumber;\n        let originalEndLineNumber;\n        let modifiedStartLineNumber;\n        let modifiedEndLineNumber;\n        let charChanges = undefined;\n        if (diffChange.originalLength === 0) {\n            originalStartLineNumber = originalLineSequence.getStartLineNumber(diffChange.originalStart) - 1;\n            originalEndLineNumber = 0;\n        }\n        else {\n            originalStartLineNumber = originalLineSequence.getStartLineNumber(diffChange.originalStart);\n            originalEndLineNumber = originalLineSequence.getEndLineNumber(diffChange.originalStart + diffChange.originalLength - 1);\n        }\n        if (diffChange.modifiedLength === 0) {\n            modifiedStartLineNumber = modifiedLineSequence.getStartLineNumber(diffChange.modifiedStart) - 1;\n            modifiedEndLineNumber = 0;\n        }\n        else {\n            modifiedStartLineNumber = modifiedLineSequence.getStartLineNumber(diffChange.modifiedStart);\n            modifiedEndLineNumber = modifiedLineSequence.getEndLineNumber(diffChange.modifiedStart + diffChange.modifiedLength - 1);\n        }\n        if (shouldComputeCharChanges && diffChange.originalLength > 0 && diffChange.originalLength < 20 && diffChange.modifiedLength > 0 && diffChange.modifiedLength < 20 && continueCharDiff()) {\n            // Compute character changes for diff chunks of at most 20 lines...\n            const originalCharSequence = originalLineSequence.createCharSequence(shouldIgnoreTrimWhitespace, diffChange.originalStart, diffChange.originalStart + diffChange.originalLength - 1);\n            const modifiedCharSequence = modifiedLineSequence.createCharSequence(shouldIgnoreTrimWhitespace, diffChange.modifiedStart, diffChange.modifiedStart + diffChange.modifiedLength - 1);\n            if (originalCharSequence.getElements().length > 0 && modifiedCharSequence.getElements().length > 0) {\n                let rawChanges = computeDiff(originalCharSequence, modifiedCharSequence, continueCharDiff, true).changes;\n                if (shouldPostProcessCharChanges) {\n                    rawChanges = postProcessCharChanges(rawChanges);\n                }\n                charChanges = [];\n                for (let i = 0, length = rawChanges.length; i < length; i++) {\n                    charChanges.push(CharChange.createFromDiffChange(rawChanges[i], originalCharSequence, modifiedCharSequence));\n                }\n            }\n        }\n        return new LineChange(originalStartLineNumber, originalEndLineNumber, modifiedStartLineNumber, modifiedEndLineNumber, charChanges);\n    }\n}\nexport class DiffComputer {\n    constructor(originalLines, modifiedLines, opts) {\n        this.shouldComputeCharChanges = opts.shouldComputeCharChanges;\n        this.shouldPostProcessCharChanges = opts.shouldPostProcessCharChanges;\n        this.shouldIgnoreTrimWhitespace = opts.shouldIgnoreTrimWhitespace;\n        this.shouldMakePrettyDiff = opts.shouldMakePrettyDiff;\n        this.originalLines = originalLines;\n        this.modifiedLines = modifiedLines;\n        this.original = new LineSequence(originalLines);\n        this.modified = new LineSequence(modifiedLines);\n        this.continueLineDiff = createContinueProcessingPredicate(opts.maxComputationTime);\n        this.continueCharDiff = createContinueProcessingPredicate(opts.maxComputationTime === 0 ? 0 : Math.min(opts.maxComputationTime, 5000)); // never run after 5s for character changes...\n    }\n    computeDiff() {\n        if (this.original.lines.length === 1 && this.original.lines[0].length === 0) {\n            // empty original => fast path\n            if (this.modified.lines.length === 1 && this.modified.lines[0].length === 0) {\n                return {\n                    quitEarly: false,\n                    changes: []\n                };\n            }\n            return {\n                quitEarly: false,\n                changes: [{\n                        originalStartLineNumber: 1,\n                        originalEndLineNumber: 1,\n                        modifiedStartLineNumber: 1,\n                        modifiedEndLineNumber: this.modified.lines.length,\n                        charChanges: [{\n                                modifiedEndColumn: 0,\n                                modifiedEndLineNumber: 0,\n                                modifiedStartColumn: 0,\n                                modifiedStartLineNumber: 0,\n                                originalEndColumn: 0,\n                                originalEndLineNumber: 0,\n                                originalStartColumn: 0,\n                                originalStartLineNumber: 0\n                            }]\n                    }]\n            };\n        }\n        if (this.modified.lines.length === 1 && this.modified.lines[0].length === 0) {\n            // empty modified => fast path\n            return {\n                quitEarly: false,\n                changes: [{\n                        originalStartLineNumber: 1,\n                        originalEndLineNumber: this.original.lines.length,\n                        modifiedStartLineNumber: 1,\n                        modifiedEndLineNumber: 1,\n                        charChanges: [{\n                                modifiedEndColumn: 0,\n                                modifiedEndLineNumber: 0,\n                                modifiedStartColumn: 0,\n                                modifiedStartLineNumber: 0,\n                                originalEndColumn: 0,\n                                originalEndLineNumber: 0,\n                                originalStartColumn: 0,\n                                originalStartLineNumber: 0\n                            }]\n                    }]\n            };\n        }\n        const diffResult = computeDiff(this.original, this.modified, this.continueLineDiff, this.shouldMakePrettyDiff);\n        const rawChanges = diffResult.changes;\n        const quitEarly = diffResult.quitEarly;\n        // The diff is always computed with ignoring trim whitespace\n        // This ensures we get the prettiest diff\n        if (this.shouldIgnoreTrimWhitespace) {\n            const lineChanges = [];\n            for (let i = 0, length = rawChanges.length; i < length; i++) {\n                lineChanges.push(LineChange.createFromDiffResult(this.shouldIgnoreTrimWhitespace, rawChanges[i], this.original, this.modified, this.continueCharDiff, this.shouldComputeCharChanges, this.shouldPostProcessCharChanges));\n            }\n            return {\n                quitEarly: quitEarly,\n                changes: lineChanges\n            };\n        }\n        // Need to post-process and introduce changes where the trim whitespace is different\n        // Note that we are looping starting at -1 to also cover the lines before the first change\n        const result = [];\n        let originalLineIndex = 0;\n        let modifiedLineIndex = 0;\n        for (let i = -1 /* !!!! */, len = rawChanges.length; i < len; i++) {\n            const nextChange = (i + 1 < len ? rawChanges[i + 1] : null);\n            const originalStop = (nextChange ? nextChange.originalStart : this.originalLines.length);\n            const modifiedStop = (nextChange ? nextChange.modifiedStart : this.modifiedLines.length);\n            while (originalLineIndex < originalStop && modifiedLineIndex < modifiedStop) {\n                const originalLine = this.originalLines[originalLineIndex];\n                const modifiedLine = this.modifiedLines[modifiedLineIndex];\n                if (originalLine !== modifiedLine) {\n                    // These lines differ only in trim whitespace\n                    // Check the leading whitespace\n                    {\n                        let originalStartColumn = getFirstNonBlankColumn(originalLine, 1);\n                        let modifiedStartColumn = getFirstNonBlankColumn(modifiedLine, 1);\n                        while (originalStartColumn > 1 && modifiedStartColumn > 1) {\n                            const originalChar = originalLine.charCodeAt(originalStartColumn - 2);\n                            const modifiedChar = modifiedLine.charCodeAt(modifiedStartColumn - 2);\n                            if (originalChar !== modifiedChar) {\n                                break;\n                            }\n                            originalStartColumn--;\n                            modifiedStartColumn--;\n                        }\n                        if (originalStartColumn > 1 || modifiedStartColumn > 1) {\n                            this._pushTrimWhitespaceCharChange(result, originalLineIndex + 1, 1, originalStartColumn, modifiedLineIndex + 1, 1, modifiedStartColumn);\n                        }\n                    }\n                    // Check the trailing whitespace\n                    {\n                        let originalEndColumn = getLastNonBlankColumn(originalLine, 1);\n                        let modifiedEndColumn = getLastNonBlankColumn(modifiedLine, 1);\n                        const originalMaxColumn = originalLine.length + 1;\n                        const modifiedMaxColumn = modifiedLine.length + 1;\n                        while (originalEndColumn < originalMaxColumn && modifiedEndColumn < modifiedMaxColumn) {\n                            const originalChar = originalLine.charCodeAt(originalEndColumn - 1);\n                            const modifiedChar = originalLine.charCodeAt(modifiedEndColumn - 1);\n                            if (originalChar !== modifiedChar) {\n                                break;\n                            }\n                            originalEndColumn++;\n                            modifiedEndColumn++;\n                        }\n                        if (originalEndColumn < originalMaxColumn || modifiedEndColumn < modifiedMaxColumn) {\n                            this._pushTrimWhitespaceCharChange(result, originalLineIndex + 1, originalEndColumn, originalMaxColumn, modifiedLineIndex + 1, modifiedEndColumn, modifiedMaxColumn);\n                        }\n                    }\n                }\n                originalLineIndex++;\n                modifiedLineIndex++;\n            }\n            if (nextChange) {\n                // Emit the actual change\n                result.push(LineChange.createFromDiffResult(this.shouldIgnoreTrimWhitespace, nextChange, this.original, this.modified, this.continueCharDiff, this.shouldComputeCharChanges, this.shouldPostProcessCharChanges));\n                originalLineIndex += nextChange.originalLength;\n                modifiedLineIndex += nextChange.modifiedLength;\n            }\n        }\n        return {\n            quitEarly: quitEarly,\n            changes: result\n        };\n    }\n    _pushTrimWhitespaceCharChange(result, originalLineNumber, originalStartColumn, originalEndColumn, modifiedLineNumber, modifiedStartColumn, modifiedEndColumn) {\n        if (this._mergeTrimWhitespaceCharChange(result, originalLineNumber, originalStartColumn, originalEndColumn, modifiedLineNumber, modifiedStartColumn, modifiedEndColumn)) {\n            // Merged into previous\n            return;\n        }\n        let charChanges = undefined;\n        if (this.shouldComputeCharChanges) {\n            charChanges = [new CharChange(originalLineNumber, originalStartColumn, originalLineNumber, originalEndColumn, modifiedLineNumber, modifiedStartColumn, modifiedLineNumber, modifiedEndColumn)];\n        }\n        result.push(new LineChange(originalLineNumber, originalLineNumber, modifiedLineNumber, modifiedLineNumber, charChanges));\n    }\n    _mergeTrimWhitespaceCharChange(result, originalLineNumber, originalStartColumn, originalEndColumn, modifiedLineNumber, modifiedStartColumn, modifiedEndColumn) {\n        const len = result.length;\n        if (len === 0) {\n            return false;\n        }\n        const prevChange = result[len - 1];\n        if (prevChange.originalEndLineNumber === 0 || prevChange.modifiedEndLineNumber === 0) {\n            // Don't merge with inserts/deletes\n            return false;\n        }\n        if (prevChange.originalEndLineNumber + 1 === originalLineNumber && prevChange.modifiedEndLineNumber + 1 === modifiedLineNumber) {\n            prevChange.originalEndLineNumber = originalLineNumber;\n            prevChange.modifiedEndLineNumber = modifiedLineNumber;\n            if (this.shouldComputeCharChanges && prevChange.charChanges) {\n                prevChange.charChanges.push(new CharChange(originalLineNumber, originalStartColumn, originalLineNumber, originalEndColumn, modifiedLineNumber, modifiedStartColumn, modifiedLineNumber, modifiedEndColumn));\n            }\n            return true;\n        }\n        return false;\n    }\n}\nfunction getFirstNonBlankColumn(txt, defaultValue) {\n    const r = strings.firstNonWhitespaceIndex(txt);\n    if (r === -1) {\n        return defaultValue;\n    }\n    return r + 1;\n}\nfunction getLastNonBlankColumn(txt, defaultValue) {\n    const r = strings.lastNonWhitespaceIndex(txt);\n    if (r === -1) {\n        return defaultValue;\n    }\n    return r + 2;\n}\nfunction createContinueProcessingPredicate(maximumRuntime) {\n    if (maximumRuntime === 0) {\n        return () => true;\n    }\n    const startTime = Date.now();\n    return () => {\n        return Date.now() - startTime < maximumRuntime;\n    };\n}\n"],"mappings":"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"}]}