{"remainingRequest":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js!/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/platform/keybinding/common/abstractKeybindingService.js","dependencies":[{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/platform/keybinding/common/abstractKeybindingService.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/babel.config.js","mtime":1668271197000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js","mtime":456789000000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["IntervalTimer","TimeoutTimer","Emitter","Event","Disposable","nls","HIGH_FREQ_COMMANDS","AbstractKeybindingService","_contextKeyService","_commandService","_telemetryService","_notificationService","_logService","_onDidUpdateKeybindings","_register","_currentChord","_currentChordChecker","_currentChordStatusMessage","_ignoreSingleModifiers","KeybindingModifierSet","EMPTY","_currentSingleModifier","_currentSingleModifierClearTimeout","_logging","event","None","str","info","_getResolver","getKeybindings","commandId","context","result","lookupPrimaryKeybinding","undefined","resolvedKeybinding","e","target","_dispatch","_log","keybinding","resolveKeyboardEvent","isChord","console","warn","getDispatchParts","firstPart","contextValue","getContext","currentChord","keypress","resolve","keypressLabel","label","status","localize","chordEnterTime","Date","now","cancelAndSet","_documentHasFocus","_leaveChordMode","dispose","cancel","_doDispatch","getSingleModifierDispatchParts","singleModifier","has","getParts","isSingleModiferChord","shouldPreventDefault","dispatchKeyname","getLabel","resolveResult","trace","enterChord","_enterChordMode","hideAfter","bubble","commandArgs","executeCommand","then","err","test","publicLog2","id","from","ctrlKey","metaKey","keyCode","source","_ctrlKey","_shiftKey","shiftKey","_altKey","altKey","_metaKey","modifier"],"sources":["/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/platform/keybinding/common/abstractKeybindingService.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { IntervalTimer, TimeoutTimer } from '../../../base/common/async.js';\nimport { Emitter, Event } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport * as nls from '../../../nls.js';\nconst HIGH_FREQ_COMMANDS = /^(cursor|delete)/;\nexport class AbstractKeybindingService extends Disposable {\n    constructor(_contextKeyService, _commandService, _telemetryService, _notificationService, _logService) {\n        super();\n        this._contextKeyService = _contextKeyService;\n        this._commandService = _commandService;\n        this._telemetryService = _telemetryService;\n        this._notificationService = _notificationService;\n        this._logService = _logService;\n        this._onDidUpdateKeybindings = this._register(new Emitter());\n        this._currentChord = null;\n        this._currentChordChecker = new IntervalTimer();\n        this._currentChordStatusMessage = null;\n        this._ignoreSingleModifiers = KeybindingModifierSet.EMPTY;\n        this._currentSingleModifier = null;\n        this._currentSingleModifierClearTimeout = new TimeoutTimer();\n        this._logging = false;\n    }\n    get onDidUpdateKeybindings() {\n        return this._onDidUpdateKeybindings ? this._onDidUpdateKeybindings.event : Event.None; // Sinon stubbing walks properties on prototype\n    }\n    dispose() {\n        super.dispose();\n    }\n    _log(str) {\n        if (this._logging) {\n            this._logService.info(`[KeybindingService]: ${str}`);\n        }\n    }\n    getKeybindings() {\n        return this._getResolver().getKeybindings();\n    }\n    lookupKeybinding(commandId, context) {\n        const result = this._getResolver().lookupPrimaryKeybinding(commandId, context || this._contextKeyService);\n        if (!result) {\n            return undefined;\n        }\n        return result.resolvedKeybinding;\n    }\n    dispatchEvent(e, target) {\n        return this._dispatch(e, target);\n    }\n    softDispatch(e, target) {\n        this._log(`/ Soft dispatching keyboard event`);\n        const keybinding = this.resolveKeyboardEvent(e);\n        if (keybinding.isChord()) {\n            console.warn('Unexpected keyboard event mapped to a chord');\n            return null;\n        }\n        const [firstPart,] = keybinding.getDispatchParts();\n        if (firstPart === null) {\n            // cannot be dispatched, probably only modifier keys\n            this._log(`\\\\ Keyboard event cannot be dispatched`);\n            return null;\n        }\n        const contextValue = this._contextKeyService.getContext(target);\n        const currentChord = this._currentChord ? this._currentChord.keypress : null;\n        return this._getResolver().resolve(contextValue, currentChord, firstPart);\n    }\n    _enterChordMode(firstPart, keypressLabel) {\n        this._currentChord = {\n            keypress: firstPart,\n            label: keypressLabel\n        };\n        this._currentChordStatusMessage = this._notificationService.status(nls.localize('first.chord', \"({0}) was pressed. Waiting for second key of chord...\", keypressLabel));\n        const chordEnterTime = Date.now();\n        this._currentChordChecker.cancelAndSet(() => {\n            if (!this._documentHasFocus()) {\n                // Focus has been lost => leave chord mode\n                this._leaveChordMode();\n                return;\n            }\n            if (Date.now() - chordEnterTime > 5000) {\n                // 5 seconds elapsed => leave chord mode\n                this._leaveChordMode();\n            }\n        }, 500);\n    }\n    _leaveChordMode() {\n        if (this._currentChordStatusMessage) {\n            this._currentChordStatusMessage.dispose();\n            this._currentChordStatusMessage = null;\n        }\n        this._currentChordChecker.cancel();\n        this._currentChord = null;\n    }\n    _dispatch(e, target) {\n        return this._doDispatch(this.resolveKeyboardEvent(e), target, /*isSingleModiferChord*/ false);\n    }\n    _singleModifierDispatch(e, target) {\n        const keybinding = this.resolveKeyboardEvent(e);\n        const [singleModifier,] = keybinding.getSingleModifierDispatchParts();\n        if (singleModifier) {\n            if (this._ignoreSingleModifiers.has(singleModifier)) {\n                this._log(`+ Ignoring single modifier ${singleModifier} due to it being pressed together with other keys.`);\n                this._ignoreSingleModifiers = KeybindingModifierSet.EMPTY;\n                this._currentSingleModifierClearTimeout.cancel();\n                this._currentSingleModifier = null;\n                return false;\n            }\n            this._ignoreSingleModifiers = KeybindingModifierSet.EMPTY;\n            if (this._currentSingleModifier === null) {\n                // we have a valid `singleModifier`, store it for the next keyup, but clear it in 300ms\n                this._log(`+ Storing single modifier for possible chord ${singleModifier}.`);\n                this._currentSingleModifier = singleModifier;\n                this._currentSingleModifierClearTimeout.cancelAndSet(() => {\n                    this._log(`+ Clearing single modifier due to 300ms elapsed.`);\n                    this._currentSingleModifier = null;\n                }, 300);\n                return false;\n            }\n            if (singleModifier === this._currentSingleModifier) {\n                // bingo!\n                this._log(`/ Dispatching single modifier chord ${singleModifier} ${singleModifier}`);\n                this._currentSingleModifierClearTimeout.cancel();\n                this._currentSingleModifier = null;\n                return this._doDispatch(keybinding, target, /*isSingleModiferChord*/ true);\n            }\n            this._log(`+ Clearing single modifier due to modifier mismatch: ${this._currentSingleModifier} ${singleModifier}`);\n            this._currentSingleModifierClearTimeout.cancel();\n            this._currentSingleModifier = null;\n            return false;\n        }\n        // When pressing a modifier and holding it pressed with any other modifier or key combination,\n        // the pressed modifiers should no longer be considered for single modifier dispatch.\n        const [firstPart,] = keybinding.getParts();\n        this._ignoreSingleModifiers = new KeybindingModifierSet(firstPart);\n        if (this._currentSingleModifier !== null) {\n            this._log(`+ Clearing single modifier due to other key up.`);\n        }\n        this._currentSingleModifierClearTimeout.cancel();\n        this._currentSingleModifier = null;\n        return false;\n    }\n    _doDispatch(keybinding, target, isSingleModiferChord = false) {\n        let shouldPreventDefault = false;\n        if (keybinding.isChord()) {\n            console.warn('Unexpected keyboard event mapped to a chord');\n            return false;\n        }\n        let firstPart = null; // the first keybinding i.e. Ctrl+K\n        let currentChord = null; // the \"second\" keybinding i.e. Ctrl+K \"Ctrl+D\"\n        if (isSingleModiferChord) {\n            const [dispatchKeyname,] = keybinding.getSingleModifierDispatchParts();\n            firstPart = dispatchKeyname;\n            currentChord = dispatchKeyname;\n        }\n        else {\n            [firstPart,] = keybinding.getDispatchParts();\n            currentChord = this._currentChord ? this._currentChord.keypress : null;\n        }\n        if (firstPart === null) {\n            this._log(`\\\\ Keyboard event cannot be dispatched in keydown phase.`);\n            // cannot be dispatched, probably only modifier keys\n            return shouldPreventDefault;\n        }\n        const contextValue = this._contextKeyService.getContext(target);\n        const keypressLabel = keybinding.getLabel();\n        const resolveResult = this._getResolver().resolve(contextValue, currentChord, firstPart);\n        this._logService.trace('KeybindingService#dispatch', keypressLabel, resolveResult === null || resolveResult === void 0 ? void 0 : resolveResult.commandId);\n        if (resolveResult && resolveResult.enterChord) {\n            shouldPreventDefault = true;\n            this._enterChordMode(firstPart, keypressLabel);\n            this._log(`+ Entering chord mode...`);\n            return shouldPreventDefault;\n        }\n        if (this._currentChord) {\n            if (!resolveResult || !resolveResult.commandId) {\n                this._log(`+ Leaving chord mode: Nothing bound to \"${this._currentChord.label} ${keypressLabel}\".`);\n                this._notificationService.status(nls.localize('missing.chord', \"The key combination ({0}, {1}) is not a command.\", this._currentChord.label, keypressLabel), { hideAfter: 10 * 1000 /* 10s */ });\n                shouldPreventDefault = true;\n            }\n        }\n        this._leaveChordMode();\n        if (resolveResult && resolveResult.commandId) {\n            if (!resolveResult.bubble) {\n                shouldPreventDefault = true;\n            }\n            this._log(`+ Invoking command ${resolveResult.commandId}.`);\n            if (typeof resolveResult.commandArgs === 'undefined') {\n                this._commandService.executeCommand(resolveResult.commandId).then(undefined, err => this._notificationService.warn(err));\n            }\n            else {\n                this._commandService.executeCommand(resolveResult.commandId, resolveResult.commandArgs).then(undefined, err => this._notificationService.warn(err));\n            }\n            if (!HIGH_FREQ_COMMANDS.test(resolveResult.commandId)) {\n                this._telemetryService.publicLog2('workbenchActionExecuted', { id: resolveResult.commandId, from: 'keybinding' });\n            }\n        }\n        return shouldPreventDefault;\n    }\n    mightProducePrintableCharacter(event) {\n        if (event.ctrlKey || event.metaKey) {\n            // ignore ctrl/cmd-combination but not shift/alt-combinatios\n            return false;\n        }\n        // weak check for certain ranges. this is properly implemented in a subclass\n        // with access to the KeyboardMapperFactory.\n        if ((event.keyCode >= 31 /* KeyCode.KeyA */ && event.keyCode <= 56 /* KeyCode.KeyZ */)\n            || (event.keyCode >= 21 /* KeyCode.Digit0 */ && event.keyCode <= 30 /* KeyCode.Digit9 */)) {\n            return true;\n        }\n        return false;\n    }\n}\nclass KeybindingModifierSet {\n    constructor(source) {\n        this._ctrlKey = source ? source.ctrlKey : false;\n        this._shiftKey = source ? source.shiftKey : false;\n        this._altKey = source ? source.altKey : false;\n        this._metaKey = source ? source.metaKey : false;\n    }\n    has(modifier) {\n        switch (modifier) {\n            case 'ctrl': return this._ctrlKey;\n            case 'shift': return this._shiftKey;\n            case 'alt': return this._altKey;\n            case 'meta': return this._metaKey;\n        }\n    }\n}\nKeybindingModifierSet.EMPTY = new KeybindingModifierSet(null);\n"],"mappings":"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"}]}