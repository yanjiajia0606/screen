{"remainingRequest":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/thread-loader/dist/cjs.js!/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js!/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/base/common/iconLabels.js","dependencies":[{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/base/common/iconLabels.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/babel.config.js","mtime":1668271197000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js","mtime":456789000000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["CSSIcon","matchesFuzzy","ltrim","iconStartMarker","iconsRegex","RegExp","iconNameExpression","iconModifierExpression","iconNameCharacterRegexp","iconNameCharacter","escapeIconsRegex","source","escapeIcons","text","replace","match","escaped","markdownEscapedIconsRegex","markdownEscapeEscapedIcons","stripIconsRegex","stripIcons","indexOf","preWhitespace","postWhitespace","parseLabelWithIcons","firstIconIndex","doParseLabelWithIcons","iconOffsets","textWithoutIcons","appendChars","chars","_","push","iconsOffset","currentIconStart","currentIconValue","char","nextChar","offset","length","substr","currentIconLength","test","matchesFuzzyIconAware","query","target","enableSeparateSubstringMatching","wordToMatchAgainstWithoutIconsTrimmed","leadingWhitespaceOffset","matches","iconOffset","start","end"],"sources":["/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/base/common/iconLabels.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { CSSIcon } from './codicons.js';\nimport { matchesFuzzy } from './filters.js';\nimport { ltrim } from './strings.js';\nexport const iconStartMarker = '$(';\nconst iconsRegex = new RegExp(`\\\\$\\\\(${CSSIcon.iconNameExpression}(?:${CSSIcon.iconModifierExpression})?\\\\)`, 'g'); // no capturing groups\nconst iconNameCharacterRegexp = new RegExp(CSSIcon.iconNameCharacter);\nconst escapeIconsRegex = new RegExp(`(\\\\\\\\)?${iconsRegex.source}`, 'g');\nexport function escapeIcons(text) {\n    return text.replace(escapeIconsRegex, (match, escaped) => escaped ? match : `\\\\${match}`);\n}\nconst markdownEscapedIconsRegex = new RegExp(`\\\\\\\\${iconsRegex.source}`, 'g');\nexport function markdownEscapeEscapedIcons(text) {\n    // Need to add an extra \\ for escaping in markdown\n    return text.replace(markdownEscapedIconsRegex, match => `\\\\${match}`);\n}\nconst stripIconsRegex = new RegExp(`(\\\\s)?(\\\\\\\\)?${iconsRegex.source}(\\\\s)?`, 'g');\nexport function stripIcons(text) {\n    if (text.indexOf(iconStartMarker) === -1) {\n        return text;\n    }\n    return text.replace(stripIconsRegex, (match, preWhitespace, escaped, postWhitespace) => escaped ? match : preWhitespace || postWhitespace || '');\n}\nexport function parseLabelWithIcons(text) {\n    const firstIconIndex = text.indexOf(iconStartMarker);\n    if (firstIconIndex === -1) {\n        return { text }; // return early if the word does not include an icon\n    }\n    return doParseLabelWithIcons(text, firstIconIndex);\n}\nfunction doParseLabelWithIcons(text, firstIconIndex) {\n    const iconOffsets = [];\n    let textWithoutIcons = '';\n    function appendChars(chars) {\n        if (chars) {\n            textWithoutIcons += chars;\n            for (const _ of chars) {\n                iconOffsets.push(iconsOffset); // make sure to fill in icon offsets\n            }\n        }\n    }\n    let currentIconStart = -1;\n    let currentIconValue = '';\n    let iconsOffset = 0;\n    let char;\n    let nextChar;\n    let offset = firstIconIndex;\n    const length = text.length;\n    // Append all characters until the first icon\n    appendChars(text.substr(0, firstIconIndex));\n    // example: $(file-symlink-file) my cool $(other-icon) entry\n    while (offset < length) {\n        char = text[offset];\n        nextChar = text[offset + 1];\n        // beginning of icon: some value $( <--\n        if (char === iconStartMarker[0] && nextChar === iconStartMarker[1]) {\n            currentIconStart = offset;\n            // if we had a previous potential icon value without\n            // the closing ')', it was actually not an icon and\n            // so we have to add it to the actual value\n            appendChars(currentIconValue);\n            currentIconValue = iconStartMarker;\n            offset++; // jump over '('\n        }\n        // end of icon: some value $(some-icon) <--\n        else if (char === ')' && currentIconStart !== -1) {\n            const currentIconLength = offset - currentIconStart + 1; // +1 to include the closing ')'\n            iconsOffset += currentIconLength;\n            currentIconStart = -1;\n            currentIconValue = '';\n        }\n        // within icon\n        else if (currentIconStart !== -1) {\n            // Make sure this is a real icon name\n            if (iconNameCharacterRegexp.test(char)) {\n                currentIconValue += char;\n            }\n            else {\n                // This is not a real icon, treat it as text\n                appendChars(currentIconValue);\n                currentIconStart = -1;\n                currentIconValue = '';\n            }\n        }\n        // any value outside of icon\n        else {\n            appendChars(char);\n        }\n        offset++;\n    }\n    // if we had a previous potential icon value without\n    // the closing ')', it was actually not an icon and\n    // so we have to add it to the actual value\n    appendChars(currentIconValue);\n    return { text: textWithoutIcons, iconOffsets };\n}\nexport function matchesFuzzyIconAware(query, target, enableSeparateSubstringMatching = false) {\n    const { text, iconOffsets } = target;\n    // Return early if there are no icon markers in the word to match against\n    if (!iconOffsets || iconOffsets.length === 0) {\n        return matchesFuzzy(query, text, enableSeparateSubstringMatching);\n    }\n    // Trim the word to match against because it could have leading\n    // whitespace now if the word started with an icon\n    const wordToMatchAgainstWithoutIconsTrimmed = ltrim(text, ' ');\n    const leadingWhitespaceOffset = text.length - wordToMatchAgainstWithoutIconsTrimmed.length;\n    // match on value without icon\n    const matches = matchesFuzzy(query, wordToMatchAgainstWithoutIconsTrimmed, enableSeparateSubstringMatching);\n    // Map matches back to offsets with icon and trimming\n    if (matches) {\n        for (const match of matches) {\n            const iconOffset = iconOffsets[match.start + leadingWhitespaceOffset] /* icon offsets at index */ + leadingWhitespaceOffset /* overall leading whitespace offset */;\n            match.start += iconOffset;\n            match.end += iconOffset;\n        }\n    }\n    return matches;\n}\n"],"mappings":";;;;;;;;;;AAAA;AACA;AACA;AACA;AACA,SAASA,OAAO,QAAQ,eAAe;AACvC,SAASC,YAAY,QAAQ,cAAc;AAC3C,SAASC,KAAK,QAAQ,cAAc;AACpC,OAAO,IAAMC,eAAe,GAAG,IAAI;AACnC,IAAMC,UAAU,GAAG,IAAIC,MAAM,iBAAUL,OAAO,CAACM,kBAAkB,gBAAMN,OAAO,CAACO,sBAAsB,YAAS,GAAG,CAAC,CAAC,CAAC;AACpH,IAAMC,uBAAuB,GAAG,IAAIH,MAAM,CAACL,OAAO,CAACS,iBAAiB,CAAC;AACrE,IAAMC,gBAAgB,GAAG,IAAIL,MAAM,kBAAWD,UAAU,CAACO,MAAM,GAAI,GAAG,CAAC;AACvE,OAAO,SAASC,WAAW,CAACC,IAAI,EAAE;EAC9B,OAAOA,IAAI,CAACC,OAAO,CAACJ,gBAAgB,EAAE,UAACK,KAAK,EAAEC,OAAO;IAAA,OAAKA,OAAO,GAAGD,KAAK,eAAQA,KAAK,CAAE;EAAA,EAAC;AAC7F;AACA,IAAME,yBAAyB,GAAG,IAAIZ,MAAM,eAAQD,UAAU,CAACO,MAAM,GAAI,GAAG,CAAC;AAC7E,OAAO,SAASO,0BAA0B,CAACL,IAAI,EAAE;EAC7C;EACA,OAAOA,IAAI,CAACC,OAAO,CAACG,yBAAyB,EAAE,UAAAF,KAAK;IAAA,mBAASA,KAAK;EAAA,CAAE,CAAC;AACzE;AACA,IAAMI,eAAe,GAAG,IAAId,MAAM,wBAAiBD,UAAU,CAACO,MAAM,aAAU,GAAG,CAAC;AAClF,OAAO,SAASS,UAAU,CAACP,IAAI,EAAE;EAC7B,IAAIA,IAAI,CAACQ,OAAO,CAAClB,eAAe,CAAC,KAAK,CAAC,CAAC,EAAE;IACtC,OAAOU,IAAI;EACf;EACA,OAAOA,IAAI,CAACC,OAAO,CAACK,eAAe,EAAE,UAACJ,KAAK,EAAEO,aAAa,EAAEN,OAAO,EAAEO,cAAc;IAAA,OAAKP,OAAO,GAAGD,KAAK,GAAGO,aAAa,IAAIC,cAAc,IAAI,EAAE;EAAA,EAAC;AACpJ;AACA,OAAO,SAASC,mBAAmB,CAACX,IAAI,EAAE;EACtC,IAAMY,cAAc,GAAGZ,IAAI,CAACQ,OAAO,CAAClB,eAAe,CAAC;EACpD,IAAIsB,cAAc,KAAK,CAAC,CAAC,EAAE;IACvB,OAAO;MAAEZ,IAAI,EAAJA;IAAK,CAAC,CAAC,CAAC;EACrB;;EACA,OAAOa,qBAAqB,CAACb,IAAI,EAAEY,cAAc,CAAC;AACtD;AACA,SAASC,qBAAqB,CAACb,IAAI,EAAEY,cAAc,EAAE;EACjD,IAAME,WAAW,GAAG,EAAE;EACtB,IAAIC,gBAAgB,GAAG,EAAE;EACzB,SAASC,WAAW,CAACC,KAAK,EAAE;IACxB,IAAIA,KAAK,EAAE;MACPF,gBAAgB,IAAIE,KAAK;MAAC,2CACVA,KAAK;QAAA;MAAA;QAArB,oDAAuB;UAAA,IAAZC,CAAC;UACRJ,WAAW,CAACK,IAAI,CAACC,WAAW,CAAC,CAAC,CAAC;QACnC;MAAC;QAAA;MAAA;QAAA;MAAA;IACL;EACJ;EACA,IAAIC,gBAAgB,GAAG,CAAC,CAAC;EACzB,IAAIC,gBAAgB,GAAG,EAAE;EACzB,IAAIF,WAAW,GAAG,CAAC;EACnB,IAAIG,IAAI;EACR,IAAIC,QAAQ;EACZ,IAAIC,MAAM,GAAGb,cAAc;EAC3B,IAAMc,MAAM,GAAG1B,IAAI,CAAC0B,MAAM;EAC1B;EACAV,WAAW,CAAChB,IAAI,CAAC2B,MAAM,CAAC,CAAC,EAAEf,cAAc,CAAC,CAAC;EAC3C;EACA,OAAOa,MAAM,GAAGC,MAAM,EAAE;IACpBH,IAAI,GAAGvB,IAAI,CAACyB,MAAM,CAAC;IACnBD,QAAQ,GAAGxB,IAAI,CAACyB,MAAM,GAAG,CAAC,CAAC;IAC3B;IACA,IAAIF,IAAI,KAAKjC,eAAe,CAAC,CAAC,CAAC,IAAIkC,QAAQ,KAAKlC,eAAe,CAAC,CAAC,CAAC,EAAE;MAChE+B,gBAAgB,GAAGI,MAAM;MACzB;MACA;MACA;MACAT,WAAW,CAACM,gBAAgB,CAAC;MAC7BA,gBAAgB,GAAGhC,eAAe;MAClCmC,MAAM,EAAE,CAAC,CAAC;IACd;IACA;IAAA,KACK,IAAIF,IAAI,KAAK,GAAG,IAAIF,gBAAgB,KAAK,CAAC,CAAC,EAAE;MAC9C,IAAMO,iBAAiB,GAAGH,MAAM,GAAGJ,gBAAgB,GAAG,CAAC,CAAC,CAAC;MACzDD,WAAW,IAAIQ,iBAAiB;MAChCP,gBAAgB,GAAG,CAAC,CAAC;MACrBC,gBAAgB,GAAG,EAAE;IACzB;IACA;IAAA,KACK,IAAID,gBAAgB,KAAK,CAAC,CAAC,EAAE;MAC9B;MACA,IAAI1B,uBAAuB,CAACkC,IAAI,CAACN,IAAI,CAAC,EAAE;QACpCD,gBAAgB,IAAIC,IAAI;MAC5B,CAAC,MACI;QACD;QACAP,WAAW,CAACM,gBAAgB,CAAC;QAC7BD,gBAAgB,GAAG,CAAC,CAAC;QACrBC,gBAAgB,GAAG,EAAE;MACzB;IACJ;IACA;IAAA,KACK;MACDN,WAAW,CAACO,IAAI,CAAC;IACrB;IACAE,MAAM,EAAE;EACZ;EACA;EACA;EACA;EACAT,WAAW,CAACM,gBAAgB,CAAC;EAC7B,OAAO;IAAEtB,IAAI,EAAEe,gBAAgB;IAAED,WAAW,EAAXA;EAAY,CAAC;AAClD;AACA,OAAO,SAASgB,qBAAqB,CAACC,KAAK,EAAEC,MAAM,EAA2C;EAAA,IAAzCC,+BAA+B,uEAAG,KAAK;EACxF,IAAQjC,IAAI,GAAkBgC,MAAM,CAA5BhC,IAAI;IAAEc,WAAW,GAAKkB,MAAM,CAAtBlB,WAAW;EACzB;EACA,IAAI,CAACA,WAAW,IAAIA,WAAW,CAACY,MAAM,KAAK,CAAC,EAAE;IAC1C,OAAOtC,YAAY,CAAC2C,KAAK,EAAE/B,IAAI,EAAEiC,+BAA+B,CAAC;EACrE;EACA;EACA;EACA,IAAMC,qCAAqC,GAAG7C,KAAK,CAACW,IAAI,EAAE,GAAG,CAAC;EAC9D,IAAMmC,uBAAuB,GAAGnC,IAAI,CAAC0B,MAAM,GAAGQ,qCAAqC,CAACR,MAAM;EAC1F;EACA,IAAMU,OAAO,GAAGhD,YAAY,CAAC2C,KAAK,EAAEG,qCAAqC,EAAED,+BAA+B,CAAC;EAC3G;EACA,IAAIG,OAAO,EAAE;IAAA,4CACWA,OAAO;MAAA;IAAA;MAA3B,uDAA6B;QAAA,IAAlBlC,KAAK;QACZ,IAAMmC,UAAU,GAAGvB,WAAW,CAACZ,KAAK,CAACoC,KAAK,GAAGH,uBAAuB,CAAC,CAAC,8BAA8BA,uBAAuB,CAAC;QAC5HjC,KAAK,CAACoC,KAAK,IAAID,UAAU;QACzBnC,KAAK,CAACqC,GAAG,IAAIF,UAAU;MAC3B;IAAC;MAAA;IAAA;MAAA;IAAA;EACL;EACA,OAAOD,OAAO;AAClB"}]}