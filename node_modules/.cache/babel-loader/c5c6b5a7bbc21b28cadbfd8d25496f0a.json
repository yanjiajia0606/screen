{"remainingRequest":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js!/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/platform/keybinding/common/keybindingResolver.js","dependencies":[{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/platform/keybinding/common/keybindingResolver.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/babel.config.js","mtime":1668271197000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js","mtime":456789000000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["implies","expressionsAreEqualWithConstantSubstitution","KeybindingResolver","defaultKeybindings","overrides","log","_log","_defaultKeybindings","_defaultBoundCommands","Map","defaultKeybinding","command","charAt","set","_map","_lookupMap","_keybindings","handleRemovals","concat","i","len","length","k","keypressParts","when","type","_addKeyPress","keypress","item","conflicts","get","_addToLookupMap","conflict","conflictIsChord","itemIsChord","whenIsEntirelyIncluded","_removeFromLookupMap","push","arr","splice","commandId","context","items","contextMatchesRules","currentChord","lookupMap","candidates","candidate","result","_findCommand","printWhenExplanation","printSourceExplanation","enterChord","leaveChord","commandArgs","bubble","matches","_contextMatchesRules","defaultKb","keypressFirstPart","keypressChordPart","rules","removals","rule","substring","has","size","commandRemovals","isDefault","isRemoved","commandRemoval","_isTargetedForRemoval","a","b","evaluate","serialize","kb","extensionId","isBuiltinExtension"],"sources":["/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/platform/keybinding/common/keybindingResolver.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { implies, expressionsAreEqualWithConstantSubstitution } from '../../contextkey/common/contextkey.js';\nexport class KeybindingResolver {\n    constructor(defaultKeybindings, overrides, log) {\n        this._log = log;\n        this._defaultKeybindings = defaultKeybindings;\n        this._defaultBoundCommands = new Map();\n        for (const defaultKeybinding of defaultKeybindings) {\n            const command = defaultKeybinding.command;\n            if (command && command.charAt(0) !== '-') {\n                this._defaultBoundCommands.set(command, true);\n            }\n        }\n        this._map = new Map();\n        this._lookupMap = new Map();\n        this._keybindings = KeybindingResolver.handleRemovals([].concat(defaultKeybindings).concat(overrides));\n        for (let i = 0, len = this._keybindings.length; i < len; i++) {\n            const k = this._keybindings[i];\n            if (k.keypressParts.length === 0) {\n                // unbound\n                continue;\n            }\n            if (k.when && k.when.type === 0 /* ContextKeyExprType.False */) {\n                // when condition is false\n                continue;\n            }\n            // TODO@chords\n            this._addKeyPress(k.keypressParts[0], k);\n        }\n    }\n    static _isTargetedForRemoval(defaultKb, keypressFirstPart, keypressChordPart, when) {\n        // TODO@chords\n        if (keypressFirstPart && defaultKb.keypressParts[0] !== keypressFirstPart) {\n            return false;\n        }\n        // TODO@chords\n        if (keypressChordPart && defaultKb.keypressParts[1] !== keypressChordPart) {\n            return false;\n        }\n        if (when) {\n            if (!defaultKb.when) {\n                return false;\n            }\n            if (!expressionsAreEqualWithConstantSubstitution(when, defaultKb.when)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Looks for rules containing \"-commandId\" and removes them.\n     */\n    static handleRemovals(rules) {\n        // Do a first pass and construct a hash-map for removals\n        const removals = new Map();\n        for (let i = 0, len = rules.length; i < len; i++) {\n            const rule = rules[i];\n            if (rule.command && rule.command.charAt(0) === '-') {\n                const command = rule.command.substring(1);\n                if (!removals.has(command)) {\n                    removals.set(command, [rule]);\n                }\n                else {\n                    removals.get(command).push(rule);\n                }\n            }\n        }\n        if (removals.size === 0) {\n            // There are no removals\n            return rules;\n        }\n        // Do a second pass and keep only non-removed keybindings\n        const result = [];\n        for (let i = 0, len = rules.length; i < len; i++) {\n            const rule = rules[i];\n            if (!rule.command || rule.command.length === 0) {\n                result.push(rule);\n                continue;\n            }\n            if (rule.command.charAt(0) === '-') {\n                continue;\n            }\n            const commandRemovals = removals.get(rule.command);\n            if (!commandRemovals || !rule.isDefault) {\n                result.push(rule);\n                continue;\n            }\n            let isRemoved = false;\n            for (const commandRemoval of commandRemovals) {\n                // TODO@chords\n                const keypressFirstPart = commandRemoval.keypressParts[0];\n                const keypressChordPart = commandRemoval.keypressParts[1];\n                const when = commandRemoval.when;\n                if (this._isTargetedForRemoval(rule, keypressFirstPart, keypressChordPart, when)) {\n                    isRemoved = true;\n                    break;\n                }\n            }\n            if (!isRemoved) {\n                result.push(rule);\n                continue;\n            }\n        }\n        return result;\n    }\n    _addKeyPress(keypress, item) {\n        const conflicts = this._map.get(keypress);\n        if (typeof conflicts === 'undefined') {\n            // There is no conflict so far\n            this._map.set(keypress, [item]);\n            this._addToLookupMap(item);\n            return;\n        }\n        for (let i = conflicts.length - 1; i >= 0; i--) {\n            const conflict = conflicts[i];\n            if (conflict.command === item.command) {\n                continue;\n            }\n            const conflictIsChord = (conflict.keypressParts.length > 1);\n            const itemIsChord = (item.keypressParts.length > 1);\n            // TODO@chords\n            if (conflictIsChord && itemIsChord && conflict.keypressParts[1] !== item.keypressParts[1]) {\n                // The conflict only shares the chord start with this command\n                continue;\n            }\n            if (KeybindingResolver.whenIsEntirelyIncluded(conflict.when, item.when)) {\n                // `item` completely overwrites `conflict`\n                // Remove conflict from the lookupMap\n                this._removeFromLookupMap(conflict);\n            }\n        }\n        conflicts.push(item);\n        this._addToLookupMap(item);\n    }\n    _addToLookupMap(item) {\n        if (!item.command) {\n            return;\n        }\n        let arr = this._lookupMap.get(item.command);\n        if (typeof arr === 'undefined') {\n            arr = [item];\n            this._lookupMap.set(item.command, arr);\n        }\n        else {\n            arr.push(item);\n        }\n    }\n    _removeFromLookupMap(item) {\n        if (!item.command) {\n            return;\n        }\n        const arr = this._lookupMap.get(item.command);\n        if (typeof arr === 'undefined') {\n            return;\n        }\n        for (let i = 0, len = arr.length; i < len; i++) {\n            if (arr[i] === item) {\n                arr.splice(i, 1);\n                return;\n            }\n        }\n    }\n    /**\n     * Returns true if it is provable `a` implies `b`.\n     */\n    static whenIsEntirelyIncluded(a, b) {\n        if (!b || b.type === 1 /* ContextKeyExprType.True */) {\n            return true;\n        }\n        if (!a || a.type === 1 /* ContextKeyExprType.True */) {\n            return false;\n        }\n        return implies(a, b);\n    }\n    getKeybindings() {\n        return this._keybindings;\n    }\n    lookupPrimaryKeybinding(commandId, context) {\n        const items = this._lookupMap.get(commandId);\n        if (typeof items === 'undefined' || items.length === 0) {\n            return null;\n        }\n        if (items.length === 1) {\n            return items[0];\n        }\n        for (let i = items.length - 1; i >= 0; i--) {\n            const item = items[i];\n            if (context.contextMatchesRules(item.when)) {\n                return item;\n            }\n        }\n        return items[items.length - 1];\n    }\n    resolve(context, currentChord, keypress) {\n        this._log(`| Resolving ${keypress}${currentChord ? ` chorded from ${currentChord}` : ``}`);\n        let lookupMap = null;\n        if (currentChord !== null) {\n            // Fetch all chord bindings for `currentChord`\n            const candidates = this._map.get(currentChord);\n            if (typeof candidates === 'undefined') {\n                // No chords starting with `currentChord`\n                this._log(`\\\\ No keybinding entries.`);\n                return null;\n            }\n            lookupMap = [];\n            for (let i = 0, len = candidates.length; i < len; i++) {\n                const candidate = candidates[i];\n                // TODO@chords\n                if (candidate.keypressParts[1] === keypress) {\n                    lookupMap.push(candidate);\n                }\n            }\n        }\n        else {\n            const candidates = this._map.get(keypress);\n            if (typeof candidates === 'undefined') {\n                // No bindings with `keypress`\n                this._log(`\\\\ No keybinding entries.`);\n                return null;\n            }\n            lookupMap = candidates;\n        }\n        const result = this._findCommand(context, lookupMap);\n        if (!result) {\n            this._log(`\\\\ From ${lookupMap.length} keybinding entries, no when clauses matched the context.`);\n            return null;\n        }\n        // TODO@chords\n        if (currentChord === null && result.keypressParts.length > 1 && result.keypressParts[1] !== null) {\n            this._log(`\\\\ From ${lookupMap.length} keybinding entries, matched chord, when: ${printWhenExplanation(result.when)}, source: ${printSourceExplanation(result)}.`);\n            return {\n                enterChord: true,\n                leaveChord: false,\n                commandId: null,\n                commandArgs: null,\n                bubble: false\n            };\n        }\n        this._log(`\\\\ From ${lookupMap.length} keybinding entries, matched ${result.command}, when: ${printWhenExplanation(result.when)}, source: ${printSourceExplanation(result)}.`);\n        return {\n            enterChord: false,\n            leaveChord: result.keypressParts.length > 1,\n            commandId: result.command,\n            commandArgs: result.commandArgs,\n            bubble: result.bubble\n        };\n    }\n    _findCommand(context, matches) {\n        for (let i = matches.length - 1; i >= 0; i--) {\n            const k = matches[i];\n            if (!KeybindingResolver._contextMatchesRules(context, k.when)) {\n                continue;\n            }\n            return k;\n        }\n        return null;\n    }\n    static _contextMatchesRules(context, rules) {\n        if (!rules) {\n            return true;\n        }\n        return rules.evaluate(context);\n    }\n}\nfunction printWhenExplanation(when) {\n    if (!when) {\n        return `no when condition`;\n    }\n    return `${when.serialize()}`;\n}\nfunction printSourceExplanation(kb) {\n    return (kb.extensionId\n        ? (kb.isBuiltinExtension ? `built-in extension ${kb.extensionId}` : `user extension ${kb.extensionId}`)\n        : (kb.isDefault ? `built-in` : `user`));\n}\n"],"mappings":";;;;;;;;;;AAAA;AACA;AACA;AACA;AACA,SAASA,OAAO,EAAEC,2CAA2C,QAAQ,uCAAuC;AAC5G,WAAaC,kBAAkB;EAC3B,4BAAYC,kBAAkB,EAAEC,SAAS,EAAEC,GAAG,EAAE;IAAA;IAC5C,IAAI,CAACC,IAAI,GAAGD,GAAG;IACf,IAAI,CAACE,mBAAmB,GAAGJ,kBAAkB;IAC7C,IAAI,CAACK,qBAAqB,GAAG,IAAIC,GAAG,EAAE;IAAC,2CACPN,kBAAkB;MAAA;IAAA;MAAlD,oDAAoD;QAAA,IAAzCO,iBAAiB;QACxB,IAAMC,OAAO,GAAGD,iBAAiB,CAACC,OAAO;QACzC,IAAIA,OAAO,IAAIA,OAAO,CAACC,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;UACtC,IAAI,CAACJ,qBAAqB,CAACK,GAAG,CAACF,OAAO,EAAE,IAAI,CAAC;QACjD;MACJ;IAAC;MAAA;IAAA;MAAA;IAAA;IACD,IAAI,CAACG,IAAI,GAAG,IAAIL,GAAG,EAAE;IACrB,IAAI,CAACM,UAAU,GAAG,IAAIN,GAAG,EAAE;IAC3B,IAAI,CAACO,YAAY,GAAGd,kBAAkB,CAACe,cAAc,CAAC,EAAE,CAACC,MAAM,CAACf,kBAAkB,CAAC,CAACe,MAAM,CAACd,SAAS,CAAC,CAAC;IACtG,KAAK,IAAIe,CAAC,GAAG,CAAC,EAAEC,GAAG,GAAG,IAAI,CAACJ,YAAY,CAACK,MAAM,EAAEF,CAAC,GAAGC,GAAG,EAAED,CAAC,EAAE,EAAE;MAC1D,IAAMG,CAAC,GAAG,IAAI,CAACN,YAAY,CAACG,CAAC,CAAC;MAC9B,IAAIG,CAAC,CAACC,aAAa,CAACF,MAAM,KAAK,CAAC,EAAE;QAC9B;QACA;MACJ;MACA,IAAIC,CAAC,CAACE,IAAI,IAAIF,CAAC,CAACE,IAAI,CAACC,IAAI,KAAK,CAAC,CAAC,gCAAgC;QAC5D;QACA;MACJ;MACA;MACA,IAAI,CAACC,YAAY,CAACJ,CAAC,CAACC,aAAa,CAAC,CAAC,CAAC,EAAED,CAAC,CAAC;IAC5C;EACJ;EAAC;IAAA;IAAA,OA4ED,sBAAaK,QAAQ,EAAEC,IAAI,EAAE;MACzB,IAAMC,SAAS,GAAG,IAAI,CAACf,IAAI,CAACgB,GAAG,CAACH,QAAQ,CAAC;MACzC,IAAI,OAAOE,SAAS,KAAK,WAAW,EAAE;QAClC;QACA,IAAI,CAACf,IAAI,CAACD,GAAG,CAACc,QAAQ,EAAE,CAACC,IAAI,CAAC,CAAC;QAC/B,IAAI,CAACG,eAAe,CAACH,IAAI,CAAC;QAC1B;MACJ;MACA,KAAK,IAAIT,CAAC,GAAGU,SAAS,CAACR,MAAM,GAAG,CAAC,EAAEF,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;QAC5C,IAAMa,QAAQ,GAAGH,SAAS,CAACV,CAAC,CAAC;QAC7B,IAAIa,QAAQ,CAACrB,OAAO,KAAKiB,IAAI,CAACjB,OAAO,EAAE;UACnC;QACJ;QACA,IAAMsB,eAAe,GAAID,QAAQ,CAACT,aAAa,CAACF,MAAM,GAAG,CAAE;QAC3D,IAAMa,WAAW,GAAIN,IAAI,CAACL,aAAa,CAACF,MAAM,GAAG,CAAE;QACnD;QACA,IAAIY,eAAe,IAAIC,WAAW,IAAIF,QAAQ,CAACT,aAAa,CAAC,CAAC,CAAC,KAAKK,IAAI,CAACL,aAAa,CAAC,CAAC,CAAC,EAAE;UACvF;UACA;QACJ;QACA,IAAIrB,kBAAkB,CAACiC,sBAAsB,CAACH,QAAQ,CAACR,IAAI,EAAEI,IAAI,CAACJ,IAAI,CAAC,EAAE;UACrE;UACA;UACA,IAAI,CAACY,oBAAoB,CAACJ,QAAQ,CAAC;QACvC;MACJ;MACAH,SAAS,CAACQ,IAAI,CAACT,IAAI,CAAC;MACpB,IAAI,CAACG,eAAe,CAACH,IAAI,CAAC;IAC9B;EAAC;IAAA;IAAA,OACD,yBAAgBA,IAAI,EAAE;MAClB,IAAI,CAACA,IAAI,CAACjB,OAAO,EAAE;QACf;MACJ;MACA,IAAI2B,GAAG,GAAG,IAAI,CAACvB,UAAU,CAACe,GAAG,CAACF,IAAI,CAACjB,OAAO,CAAC;MAC3C,IAAI,OAAO2B,GAAG,KAAK,WAAW,EAAE;QAC5BA,GAAG,GAAG,CAACV,IAAI,CAAC;QACZ,IAAI,CAACb,UAAU,CAACF,GAAG,CAACe,IAAI,CAACjB,OAAO,EAAE2B,GAAG,CAAC;MAC1C,CAAC,MACI;QACDA,GAAG,CAACD,IAAI,CAACT,IAAI,CAAC;MAClB;IACJ;EAAC;IAAA;IAAA,OACD,8BAAqBA,IAAI,EAAE;MACvB,IAAI,CAACA,IAAI,CAACjB,OAAO,EAAE;QACf;MACJ;MACA,IAAM2B,GAAG,GAAG,IAAI,CAACvB,UAAU,CAACe,GAAG,CAACF,IAAI,CAACjB,OAAO,CAAC;MAC7C,IAAI,OAAO2B,GAAG,KAAK,WAAW,EAAE;QAC5B;MACJ;MACA,KAAK,IAAInB,CAAC,GAAG,CAAC,EAAEC,GAAG,GAAGkB,GAAG,CAACjB,MAAM,EAAEF,CAAC,GAAGC,GAAG,EAAED,CAAC,EAAE,EAAE;QAC5C,IAAImB,GAAG,CAACnB,CAAC,CAAC,KAAKS,IAAI,EAAE;UACjBU,GAAG,CAACC,MAAM,CAACpB,CAAC,EAAE,CAAC,CAAC;UAChB;QACJ;MACJ;IACJ;IACA;AACJ;AACA;EAFI;IAAA;IAAA,OAYA,0BAAiB;MACb,OAAO,IAAI,CAACH,YAAY;IAC5B;EAAC;IAAA;IAAA,OACD,iCAAwBwB,SAAS,EAAEC,OAAO,EAAE;MACxC,IAAMC,KAAK,GAAG,IAAI,CAAC3B,UAAU,CAACe,GAAG,CAACU,SAAS,CAAC;MAC5C,IAAI,OAAOE,KAAK,KAAK,WAAW,IAAIA,KAAK,CAACrB,MAAM,KAAK,CAAC,EAAE;QACpD,OAAO,IAAI;MACf;MACA,IAAIqB,KAAK,CAACrB,MAAM,KAAK,CAAC,EAAE;QACpB,OAAOqB,KAAK,CAAC,CAAC,CAAC;MACnB;MACA,KAAK,IAAIvB,CAAC,GAAGuB,KAAK,CAACrB,MAAM,GAAG,CAAC,EAAEF,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;QACxC,IAAMS,IAAI,GAAGc,KAAK,CAACvB,CAAC,CAAC;QACrB,IAAIsB,OAAO,CAACE,mBAAmB,CAACf,IAAI,CAACJ,IAAI,CAAC,EAAE;UACxC,OAAOI,IAAI;QACf;MACJ;MACA,OAAOc,KAAK,CAACA,KAAK,CAACrB,MAAM,GAAG,CAAC,CAAC;IAClC;EAAC;IAAA;IAAA,OACD,iBAAQoB,OAAO,EAAEG,YAAY,EAAEjB,QAAQ,EAAE;MACrC,IAAI,CAACrB,IAAI,uBAAgBqB,QAAQ,SAAGiB,YAAY,2BAAoBA,YAAY,MAAO,EAAG;MAC1F,IAAIC,SAAS,GAAG,IAAI;MACpB,IAAID,YAAY,KAAK,IAAI,EAAE;QACvB;QACA,IAAME,UAAU,GAAG,IAAI,CAAChC,IAAI,CAACgB,GAAG,CAACc,YAAY,CAAC;QAC9C,IAAI,OAAOE,UAAU,KAAK,WAAW,EAAE;UACnC;UACA,IAAI,CAACxC,IAAI,6BAA6B;UACtC,OAAO,IAAI;QACf;QACAuC,SAAS,GAAG,EAAE;QACd,KAAK,IAAI1B,CAAC,GAAG,CAAC,EAAEC,GAAG,GAAG0B,UAAU,CAACzB,MAAM,EAAEF,CAAC,GAAGC,GAAG,EAAED,CAAC,EAAE,EAAE;UACnD,IAAM4B,SAAS,GAAGD,UAAU,CAAC3B,CAAC,CAAC;UAC/B;UACA,IAAI4B,SAAS,CAACxB,aAAa,CAAC,CAAC,CAAC,KAAKI,QAAQ,EAAE;YACzCkB,SAAS,CAACR,IAAI,CAACU,SAAS,CAAC;UAC7B;QACJ;MACJ,CAAC,MACI;QACD,IAAMD,WAAU,GAAG,IAAI,CAAChC,IAAI,CAACgB,GAAG,CAACH,QAAQ,CAAC;QAC1C,IAAI,OAAOmB,WAAU,KAAK,WAAW,EAAE;UACnC;UACA,IAAI,CAACxC,IAAI,6BAA6B;UACtC,OAAO,IAAI;QACf;QACAuC,SAAS,GAAGC,WAAU;MAC1B;MACA,IAAME,MAAM,GAAG,IAAI,CAACC,YAAY,CAACR,OAAO,EAAEI,SAAS,CAAC;MACpD,IAAI,CAACG,MAAM,EAAE;QACT,IAAI,CAAC1C,IAAI,mBAAYuC,SAAS,CAACxB,MAAM,+DAA4D;QACjG,OAAO,IAAI;MACf;MACA;MACA,IAAIuB,YAAY,KAAK,IAAI,IAAII,MAAM,CAACzB,aAAa,CAACF,MAAM,GAAG,CAAC,IAAI2B,MAAM,CAACzB,aAAa,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE;QAC9F,IAAI,CAACjB,IAAI,mBAAYuC,SAAS,CAACxB,MAAM,uDAA6C6B,oBAAoB,CAACF,MAAM,CAACxB,IAAI,CAAC,uBAAa2B,sBAAsB,CAACH,MAAM,CAAC,OAAI;QAClK,OAAO;UACHI,UAAU,EAAE,IAAI;UAChBC,UAAU,EAAE,KAAK;UACjBb,SAAS,EAAE,IAAI;UACfc,WAAW,EAAE,IAAI;UACjBC,MAAM,EAAE;QACZ,CAAC;MACL;MACA,IAAI,CAACjD,IAAI,mBAAYuC,SAAS,CAACxB,MAAM,0CAAgC2B,MAAM,CAACrC,OAAO,qBAAWuC,oBAAoB,CAACF,MAAM,CAACxB,IAAI,CAAC,uBAAa2B,sBAAsB,CAACH,MAAM,CAAC,OAAI;MAC9K,OAAO;QACHI,UAAU,EAAE,KAAK;QACjBC,UAAU,EAAEL,MAAM,CAACzB,aAAa,CAACF,MAAM,GAAG,CAAC;QAC3CmB,SAAS,EAAEQ,MAAM,CAACrC,OAAO;QACzB2C,WAAW,EAAEN,MAAM,CAACM,WAAW;QAC/BC,MAAM,EAAEP,MAAM,CAACO;MACnB,CAAC;IACL;EAAC;IAAA;IAAA,OACD,sBAAad,OAAO,EAAEe,OAAO,EAAE;MAC3B,KAAK,IAAIrC,CAAC,GAAGqC,OAAO,CAACnC,MAAM,GAAG,CAAC,EAAEF,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;QAC1C,IAAMG,CAAC,GAAGkC,OAAO,CAACrC,CAAC,CAAC;QACpB,IAAI,CAACjB,kBAAkB,CAACuD,oBAAoB,CAAChB,OAAO,EAAEnB,CAAC,CAACE,IAAI,CAAC,EAAE;UAC3D;QACJ;QACA,OAAOF,CAAC;MACZ;MACA,OAAO,IAAI;IACf;EAAC;IAAA;IAAA,OAlOD,+BAA6BoC,SAAS,EAAEC,iBAAiB,EAAEC,iBAAiB,EAAEpC,IAAI,EAAE;MAChF;MACA,IAAImC,iBAAiB,IAAID,SAAS,CAACnC,aAAa,CAAC,CAAC,CAAC,KAAKoC,iBAAiB,EAAE;QACvE,OAAO,KAAK;MAChB;MACA;MACA,IAAIC,iBAAiB,IAAIF,SAAS,CAACnC,aAAa,CAAC,CAAC,CAAC,KAAKqC,iBAAiB,EAAE;QACvE,OAAO,KAAK;MAChB;MACA,IAAIpC,IAAI,EAAE;QACN,IAAI,CAACkC,SAAS,CAAClC,IAAI,EAAE;UACjB,OAAO,KAAK;QAChB;QACA,IAAI,CAACvB,2CAA2C,CAACuB,IAAI,EAAEkC,SAAS,CAAClC,IAAI,CAAC,EAAE;UACpE,OAAO,KAAK;QAChB;MACJ;MACA,OAAO,IAAI;IACf;IACA;AACJ;AACA;EAFI;IAAA;IAAA,OAGA,wBAAsBqC,KAAK,EAAE;MACzB;MACA,IAAMC,QAAQ,GAAG,IAAIrD,GAAG,EAAE;MAC1B,KAAK,IAAIU,CAAC,GAAG,CAAC,EAAEC,GAAG,GAAGyC,KAAK,CAACxC,MAAM,EAAEF,CAAC,GAAGC,GAAG,EAAED,CAAC,EAAE,EAAE;QAC9C,IAAM4C,IAAI,GAAGF,KAAK,CAAC1C,CAAC,CAAC;QACrB,IAAI4C,IAAI,CAACpD,OAAO,IAAIoD,IAAI,CAACpD,OAAO,CAACC,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;UAChD,IAAMD,OAAO,GAAGoD,IAAI,CAACpD,OAAO,CAACqD,SAAS,CAAC,CAAC,CAAC;UACzC,IAAI,CAACF,QAAQ,CAACG,GAAG,CAACtD,OAAO,CAAC,EAAE;YACxBmD,QAAQ,CAACjD,GAAG,CAACF,OAAO,EAAE,CAACoD,IAAI,CAAC,CAAC;UACjC,CAAC,MACI;YACDD,QAAQ,CAAChC,GAAG,CAACnB,OAAO,CAAC,CAAC0B,IAAI,CAAC0B,IAAI,CAAC;UACpC;QACJ;MACJ;MACA,IAAID,QAAQ,CAACI,IAAI,KAAK,CAAC,EAAE;QACrB;QACA,OAAOL,KAAK;MAChB;MACA;MACA,IAAMb,MAAM,GAAG,EAAE;MACjB,KAAK,IAAI7B,EAAC,GAAG,CAAC,EAAEC,IAAG,GAAGyC,KAAK,CAACxC,MAAM,EAAEF,EAAC,GAAGC,IAAG,EAAED,EAAC,EAAE,EAAE;QAC9C,IAAM4C,KAAI,GAAGF,KAAK,CAAC1C,EAAC,CAAC;QACrB,IAAI,CAAC4C,KAAI,CAACpD,OAAO,IAAIoD,KAAI,CAACpD,OAAO,CAACU,MAAM,KAAK,CAAC,EAAE;UAC5C2B,MAAM,CAACX,IAAI,CAAC0B,KAAI,CAAC;UACjB;QACJ;QACA,IAAIA,KAAI,CAACpD,OAAO,CAACC,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;UAChC;QACJ;QACA,IAAMuD,eAAe,GAAGL,QAAQ,CAAChC,GAAG,CAACiC,KAAI,CAACpD,OAAO,CAAC;QAClD,IAAI,CAACwD,eAAe,IAAI,CAACJ,KAAI,CAACK,SAAS,EAAE;UACrCpB,MAAM,CAACX,IAAI,CAAC0B,KAAI,CAAC;UACjB;QACJ;QACA,IAAIM,SAAS,GAAG,KAAK;QAAC,4CACOF,eAAe;UAAA;QAAA;UAA5C,uDAA8C;YAAA,IAAnCG,cAAc;YACrB;YACA,IAAMX,iBAAiB,GAAGW,cAAc,CAAC/C,aAAa,CAAC,CAAC,CAAC;YACzD,IAAMqC,iBAAiB,GAAGU,cAAc,CAAC/C,aAAa,CAAC,CAAC,CAAC;YACzD,IAAMC,IAAI,GAAG8C,cAAc,CAAC9C,IAAI;YAChC,IAAI,IAAI,CAAC+C,qBAAqB,CAACR,KAAI,EAAEJ,iBAAiB,EAAEC,iBAAiB,EAAEpC,IAAI,CAAC,EAAE;cAC9E6C,SAAS,GAAG,IAAI;cAChB;YACJ;UACJ;QAAC;UAAA;QAAA;UAAA;QAAA;QACD,IAAI,CAACA,SAAS,EAAE;UACZrB,MAAM,CAACX,IAAI,CAAC0B,KAAI,CAAC;UACjB;QACJ;MACJ;MACA,OAAOf,MAAM;IACjB;EAAC;IAAA;IAAA,OA6DD,gCAA8BwB,CAAC,EAAEC,CAAC,EAAE;MAChC,IAAI,CAACA,CAAC,IAAIA,CAAC,CAAChD,IAAI,KAAK,CAAC,CAAC,+BAA+B;QAClD,OAAO,IAAI;MACf;MACA,IAAI,CAAC+C,CAAC,IAAIA,CAAC,CAAC/C,IAAI,KAAK,CAAC,CAAC,+BAA+B;QAClD,OAAO,KAAK;MAChB;MACA,OAAOzB,OAAO,CAACwE,CAAC,EAAEC,CAAC,CAAC;IACxB;EAAC;IAAA;IAAA,OAoFD,8BAA4BhC,OAAO,EAAEoB,KAAK,EAAE;MACxC,IAAI,CAACA,KAAK,EAAE;QACR,OAAO,IAAI;MACf;MACA,OAAOA,KAAK,CAACa,QAAQ,CAACjC,OAAO,CAAC;IAClC;EAAC;EAAA;AAAA;AAEL,SAASS,oBAAoB,CAAC1B,IAAI,EAAE;EAChC,IAAI,CAACA,IAAI,EAAE;IACP;EACJ;EACA,iBAAUA,IAAI,CAACmD,SAAS,EAAE;AAC9B;AACA,SAASxB,sBAAsB,CAACyB,EAAE,EAAE;EAChC,OAAQA,EAAE,CAACC,WAAW,GACfD,EAAE,CAACE,kBAAkB,gCAAyBF,EAAE,CAACC,WAAW,6BAAuBD,EAAE,CAACC,WAAW,CAAE,GACnGD,EAAE,CAACR,SAAS,sBAAuB;AAC9C"}]}