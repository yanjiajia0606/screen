{"remainingRequest":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/thread-loader/dist/cjs.js!/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js!/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/common/viewModel/modelLineProjection.js","dependencies":[{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/common/viewModel/modelLineProjection.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/babel.config.js","mtime":1668271197000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js","mtime":456789000000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["LineTokens","Position","LineInjectedText","SingleLineInlineDecoration","ViewLineData","createModelLineProjection","lineBreakData","isVisible","IdentityModelLineProjection","INSTANCE","HiddenModelLineProjection","ModelLineProjection","_projectionData","_isVisible","getOutputLineCount","model","modelLineNumber","outputLineIndex","_assertVisible","startOffsetInInputWithInjections","breakOffsets","endOffsetInInputWithInjections","r","injectionOffsets","injectedTexts","map","offset","idx","injectionOptions","lineWithInjections","applyInjectedText","getLineContent","substring","getValueInRange","startLineNumber","startColumn","endLineNumber","endColumn","spaces","wrappedTextIndentLength","getLineLength","_model","_modelLineNumber","getMinOutputOffset","getMaxOutputOffset","arr","Array","getViewLinesData","outputLineIdx","lineCount","globalStartIndex","needed","result","inlineDecorationsPerOutputLine","totalInjectedTextLengthBefore","currentInjectedOffset","inlineDecorations","lineStartOffsetInInputWithInjections","lineEndOffsetInInputWithInjections","length","content","injectedTextStartOffsetInInputWithInjections","injectedTextEndOffsetInInputWithInjections","options","inlineClassName","start","Math","max","end","min","push","inlineClassNameAffectsLetterSpacing","tokenization","getLineTokens","withInserted","text","tokenMetadata","defaultTokenMetadata","globalIndex","_getViewLineData","deltaStartIndex","tokens","sliceAndInflate","lineContent","minColumn","maxColumn","continuesWithWrappedLine","getViewLineCount","startVisibleColumn","breakOffsetsVisibleColumn","outputColumn","translateToInputOffset","deltaLineNumber","inputColumn","affinity","translateToOutputPosition","toPosition","outputPosition","baseViewLineNumber","lineNumber","normalizedOutputPosition","normalizeOutputPosition","column","getInjectedText","Error","_outputLineIndex","getLineMinColumn","getLineMaxColumn","lineTokens","inflate","_fromOuputLineIndex","_toOutputLineIndex","getViewLineData","_inputColumn","_outputColumn","_globalStartIndex","_needed","_result","_deltaLineNumber","_spaces","count","i","_makeSpaces","join"],"sources":["/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/common/viewModel/modelLineProjection.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { LineTokens } from '../tokens/lineTokens.js';\nimport { Position } from '../core/position.js';\nimport { LineInjectedText } from '../textModelEvents.js';\nimport { SingleLineInlineDecoration, ViewLineData } from '../viewModel.js';\nexport function createModelLineProjection(lineBreakData, isVisible) {\n    if (lineBreakData === null) {\n        // No mapping needed\n        if (isVisible) {\n            return IdentityModelLineProjection.INSTANCE;\n        }\n        return HiddenModelLineProjection.INSTANCE;\n    }\n    else {\n        return new ModelLineProjection(lineBreakData, isVisible);\n    }\n}\n/**\n * This projection is used to\n * * wrap model lines\n * * inject text\n */\nclass ModelLineProjection {\n    constructor(lineBreakData, isVisible) {\n        this._projectionData = lineBreakData;\n        this._isVisible = isVisible;\n    }\n    isVisible() {\n        return this._isVisible;\n    }\n    setVisible(isVisible) {\n        this._isVisible = isVisible;\n        return this;\n    }\n    getProjectionData() {\n        return this._projectionData;\n    }\n    getViewLineCount() {\n        if (!this._isVisible) {\n            return 0;\n        }\n        return this._projectionData.getOutputLineCount();\n    }\n    getViewLineContent(model, modelLineNumber, outputLineIndex) {\n        this._assertVisible();\n        const startOffsetInInputWithInjections = outputLineIndex > 0 ? this._projectionData.breakOffsets[outputLineIndex - 1] : 0;\n        const endOffsetInInputWithInjections = this._projectionData.breakOffsets[outputLineIndex];\n        let r;\n        if (this._projectionData.injectionOffsets !== null) {\n            const injectedTexts = this._projectionData.injectionOffsets.map((offset, idx) => new LineInjectedText(0, 0, offset + 1, this._projectionData.injectionOptions[idx], 0));\n            const lineWithInjections = LineInjectedText.applyInjectedText(model.getLineContent(modelLineNumber), injectedTexts);\n            r = lineWithInjections.substring(startOffsetInInputWithInjections, endOffsetInInputWithInjections);\n        }\n        else {\n            r = model.getValueInRange({\n                startLineNumber: modelLineNumber,\n                startColumn: startOffsetInInputWithInjections + 1,\n                endLineNumber: modelLineNumber,\n                endColumn: endOffsetInInputWithInjections + 1\n            });\n        }\n        if (outputLineIndex > 0) {\n            r = spaces(this._projectionData.wrappedTextIndentLength) + r;\n        }\n        return r;\n    }\n    getViewLineLength(model, modelLineNumber, outputLineIndex) {\n        this._assertVisible();\n        return this._projectionData.getLineLength(outputLineIndex);\n    }\n    getViewLineMinColumn(_model, _modelLineNumber, outputLineIndex) {\n        this._assertVisible();\n        return this._projectionData.getMinOutputOffset(outputLineIndex) + 1;\n    }\n    getViewLineMaxColumn(model, modelLineNumber, outputLineIndex) {\n        this._assertVisible();\n        return this._projectionData.getMaxOutputOffset(outputLineIndex) + 1;\n    }\n    /**\n     * Try using {@link getViewLinesData} instead.\n    */\n    getViewLineData(model, modelLineNumber, outputLineIndex) {\n        const arr = new Array();\n        this.getViewLinesData(model, modelLineNumber, outputLineIndex, 1, 0, [true], arr);\n        return arr[0];\n    }\n    getViewLinesData(model, modelLineNumber, outputLineIdx, lineCount, globalStartIndex, needed, result) {\n        this._assertVisible();\n        const lineBreakData = this._projectionData;\n        const injectionOffsets = lineBreakData.injectionOffsets;\n        const injectionOptions = lineBreakData.injectionOptions;\n        let inlineDecorationsPerOutputLine = null;\n        if (injectionOffsets) {\n            inlineDecorationsPerOutputLine = [];\n            let totalInjectedTextLengthBefore = 0;\n            let currentInjectedOffset = 0;\n            for (let outputLineIndex = 0; outputLineIndex < lineBreakData.getOutputLineCount(); outputLineIndex++) {\n                const inlineDecorations = new Array();\n                inlineDecorationsPerOutputLine[outputLineIndex] = inlineDecorations;\n                const lineStartOffsetInInputWithInjections = outputLineIndex > 0 ? lineBreakData.breakOffsets[outputLineIndex - 1] : 0;\n                const lineEndOffsetInInputWithInjections = lineBreakData.breakOffsets[outputLineIndex];\n                while (currentInjectedOffset < injectionOffsets.length) {\n                    const length = injectionOptions[currentInjectedOffset].content.length;\n                    const injectedTextStartOffsetInInputWithInjections = injectionOffsets[currentInjectedOffset] + totalInjectedTextLengthBefore;\n                    const injectedTextEndOffsetInInputWithInjections = injectedTextStartOffsetInInputWithInjections + length;\n                    if (injectedTextStartOffsetInInputWithInjections > lineEndOffsetInInputWithInjections) {\n                        // Injected text only starts in later wrapped lines.\n                        break;\n                    }\n                    if (lineStartOffsetInInputWithInjections < injectedTextEndOffsetInInputWithInjections) {\n                        // Injected text ends after or in this line (but also starts in or before this line).\n                        const options = injectionOptions[currentInjectedOffset];\n                        if (options.inlineClassName) {\n                            const offset = (outputLineIndex > 0 ? lineBreakData.wrappedTextIndentLength : 0);\n                            const start = offset + Math.max(injectedTextStartOffsetInInputWithInjections - lineStartOffsetInInputWithInjections, 0);\n                            const end = offset + Math.min(injectedTextEndOffsetInInputWithInjections - lineStartOffsetInInputWithInjections, lineEndOffsetInInputWithInjections);\n                            if (start !== end) {\n                                inlineDecorations.push(new SingleLineInlineDecoration(start, end, options.inlineClassName, options.inlineClassNameAffectsLetterSpacing));\n                            }\n                        }\n                    }\n                    if (injectedTextEndOffsetInInputWithInjections <= lineEndOffsetInInputWithInjections) {\n                        totalInjectedTextLengthBefore += length;\n                        currentInjectedOffset++;\n                    }\n                    else {\n                        // injected text breaks into next line, process it again\n                        break;\n                    }\n                }\n            }\n        }\n        let lineWithInjections;\n        if (injectionOffsets) {\n            lineWithInjections = model.tokenization.getLineTokens(modelLineNumber).withInserted(injectionOffsets.map((offset, idx) => ({\n                offset,\n                text: injectionOptions[idx].content,\n                tokenMetadata: LineTokens.defaultTokenMetadata\n            })));\n        }\n        else {\n            lineWithInjections = model.tokenization.getLineTokens(modelLineNumber);\n        }\n        for (let outputLineIndex = outputLineIdx; outputLineIndex < outputLineIdx + lineCount; outputLineIndex++) {\n            const globalIndex = globalStartIndex + outputLineIndex - outputLineIdx;\n            if (!needed[globalIndex]) {\n                result[globalIndex] = null;\n                continue;\n            }\n            result[globalIndex] = this._getViewLineData(lineWithInjections, inlineDecorationsPerOutputLine ? inlineDecorationsPerOutputLine[outputLineIndex] : null, outputLineIndex);\n        }\n    }\n    _getViewLineData(lineWithInjections, inlineDecorations, outputLineIndex) {\n        this._assertVisible();\n        const lineBreakData = this._projectionData;\n        const deltaStartIndex = (outputLineIndex > 0 ? lineBreakData.wrappedTextIndentLength : 0);\n        const lineStartOffsetInInputWithInjections = outputLineIndex > 0 ? lineBreakData.breakOffsets[outputLineIndex - 1] : 0;\n        const lineEndOffsetInInputWithInjections = lineBreakData.breakOffsets[outputLineIndex];\n        const tokens = lineWithInjections.sliceAndInflate(lineStartOffsetInInputWithInjections, lineEndOffsetInInputWithInjections, deltaStartIndex);\n        let lineContent = tokens.getLineContent();\n        if (outputLineIndex > 0) {\n            lineContent = spaces(lineBreakData.wrappedTextIndentLength) + lineContent;\n        }\n        const minColumn = this._projectionData.getMinOutputOffset(outputLineIndex) + 1;\n        const maxColumn = lineContent.length + 1;\n        const continuesWithWrappedLine = (outputLineIndex + 1 < this.getViewLineCount());\n        const startVisibleColumn = (outputLineIndex === 0 ? 0 : lineBreakData.breakOffsetsVisibleColumn[outputLineIndex - 1]);\n        return new ViewLineData(lineContent, continuesWithWrappedLine, minColumn, maxColumn, startVisibleColumn, tokens, inlineDecorations);\n    }\n    getModelColumnOfViewPosition(outputLineIndex, outputColumn) {\n        this._assertVisible();\n        return this._projectionData.translateToInputOffset(outputLineIndex, outputColumn - 1) + 1;\n    }\n    getViewPositionOfModelPosition(deltaLineNumber, inputColumn, affinity = 2 /* PositionAffinity.None */) {\n        this._assertVisible();\n        const r = this._projectionData.translateToOutputPosition(inputColumn - 1, affinity);\n        return r.toPosition(deltaLineNumber);\n    }\n    getViewLineNumberOfModelPosition(deltaLineNumber, inputColumn) {\n        this._assertVisible();\n        const r = this._projectionData.translateToOutputPosition(inputColumn - 1);\n        return deltaLineNumber + r.outputLineIndex;\n    }\n    normalizePosition(outputLineIndex, outputPosition, affinity) {\n        const baseViewLineNumber = outputPosition.lineNumber - outputLineIndex;\n        const normalizedOutputPosition = this._projectionData.normalizeOutputPosition(outputLineIndex, outputPosition.column - 1, affinity);\n        const result = normalizedOutputPosition.toPosition(baseViewLineNumber);\n        return result;\n    }\n    getInjectedTextAt(outputLineIndex, outputColumn) {\n        return this._projectionData.getInjectedText(outputLineIndex, outputColumn - 1);\n    }\n    _assertVisible() {\n        if (!this._isVisible) {\n            throw new Error('Not supported');\n        }\n    }\n}\n/**\n * This projection does not change the model line.\n*/\nclass IdentityModelLineProjection {\n    constructor() { }\n    isVisible() {\n        return true;\n    }\n    setVisible(isVisible) {\n        if (isVisible) {\n            return this;\n        }\n        return HiddenModelLineProjection.INSTANCE;\n    }\n    getProjectionData() {\n        return null;\n    }\n    getViewLineCount() {\n        return 1;\n    }\n    getViewLineContent(model, modelLineNumber, _outputLineIndex) {\n        return model.getLineContent(modelLineNumber);\n    }\n    getViewLineLength(model, modelLineNumber, _outputLineIndex) {\n        return model.getLineLength(modelLineNumber);\n    }\n    getViewLineMinColumn(model, modelLineNumber, _outputLineIndex) {\n        return model.getLineMinColumn(modelLineNumber);\n    }\n    getViewLineMaxColumn(model, modelLineNumber, _outputLineIndex) {\n        return model.getLineMaxColumn(modelLineNumber);\n    }\n    getViewLineData(model, modelLineNumber, _outputLineIndex) {\n        const lineTokens = model.tokenization.getLineTokens(modelLineNumber);\n        const lineContent = lineTokens.getLineContent();\n        return new ViewLineData(lineContent, false, 1, lineContent.length + 1, 0, lineTokens.inflate(), null);\n    }\n    getViewLinesData(model, modelLineNumber, _fromOuputLineIndex, _toOutputLineIndex, globalStartIndex, needed, result) {\n        if (!needed[globalStartIndex]) {\n            result[globalStartIndex] = null;\n            return;\n        }\n        result[globalStartIndex] = this.getViewLineData(model, modelLineNumber, 0);\n    }\n    getModelColumnOfViewPosition(_outputLineIndex, outputColumn) {\n        return outputColumn;\n    }\n    getViewPositionOfModelPosition(deltaLineNumber, inputColumn) {\n        return new Position(deltaLineNumber, inputColumn);\n    }\n    getViewLineNumberOfModelPosition(deltaLineNumber, _inputColumn) {\n        return deltaLineNumber;\n    }\n    normalizePosition(outputLineIndex, outputPosition, affinity) {\n        return outputPosition;\n    }\n    getInjectedTextAt(_outputLineIndex, _outputColumn) {\n        return null;\n    }\n}\nIdentityModelLineProjection.INSTANCE = new IdentityModelLineProjection();\n/**\n * This projection hides the model line.\n */\nclass HiddenModelLineProjection {\n    constructor() { }\n    isVisible() {\n        return false;\n    }\n    setVisible(isVisible) {\n        if (!isVisible) {\n            return this;\n        }\n        return IdentityModelLineProjection.INSTANCE;\n    }\n    getProjectionData() {\n        return null;\n    }\n    getViewLineCount() {\n        return 0;\n    }\n    getViewLineContent(_model, _modelLineNumber, _outputLineIndex) {\n        throw new Error('Not supported');\n    }\n    getViewLineLength(_model, _modelLineNumber, _outputLineIndex) {\n        throw new Error('Not supported');\n    }\n    getViewLineMinColumn(_model, _modelLineNumber, _outputLineIndex) {\n        throw new Error('Not supported');\n    }\n    getViewLineMaxColumn(_model, _modelLineNumber, _outputLineIndex) {\n        throw new Error('Not supported');\n    }\n    getViewLineData(_model, _modelLineNumber, _outputLineIndex) {\n        throw new Error('Not supported');\n    }\n    getViewLinesData(_model, _modelLineNumber, _fromOuputLineIndex, _toOutputLineIndex, _globalStartIndex, _needed, _result) {\n        throw new Error('Not supported');\n    }\n    getModelColumnOfViewPosition(_outputLineIndex, _outputColumn) {\n        throw new Error('Not supported');\n    }\n    getViewPositionOfModelPosition(_deltaLineNumber, _inputColumn) {\n        throw new Error('Not supported');\n    }\n    getViewLineNumberOfModelPosition(_deltaLineNumber, _inputColumn) {\n        throw new Error('Not supported');\n    }\n    normalizePosition(outputLineIndex, outputPosition, affinity) {\n        throw new Error('Not supported');\n    }\n    getInjectedTextAt(_outputLineIndex, _outputColumn) {\n        throw new Error('Not supported');\n    }\n}\nHiddenModelLineProjection.INSTANCE = new HiddenModelLineProjection();\nconst _spaces = [''];\nfunction spaces(count) {\n    if (count >= _spaces.length) {\n        for (let i = 1; i <= count; i++) {\n            _spaces[i] = _makeSpaces(i);\n        }\n    }\n    return _spaces[count];\n}\nfunction _makeSpaces(count) {\n    return new Array(count + 1).join(' ');\n}\n"],"mappings":"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"}]}