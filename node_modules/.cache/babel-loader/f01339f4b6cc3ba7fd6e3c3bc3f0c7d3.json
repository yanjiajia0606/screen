{"remainingRequest":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js!/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/base/browser/ui/tree/asyncDataTree.js","dependencies":[{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/base/browser/ui/tree/asyncDataTree.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/babel.config.js","mtime":1668271197000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js","mtime":456789000000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","ElementsDragAndDropData","ComposedTreeDelegate","getVisibleState","isFilterResult","CompressibleObjectTree","ObjectTree","TreeError","WeakMapper","createCancelablePromise","Promises","timeout","Codicon","isCancellationError","onUnexpectedError","Emitter","Event","Iterable","DisposableStore","dispose","isIterable","createAsyncDataTreeNode","props","Object","assign","children","refreshPromise","undefined","stale","slow","collapsedByDefault","isAncestor","ancestor","descendant","parent","intersects","node","other","AsyncDataTreeNodeWrapper","element","map","depth","visibleChildrenCount","visibleChildIndex","collapsible","collapsed","visible","filterData","AsyncDataTreeRenderer","renderer","nodeMapper","onDidChangeTwistieState","renderedNodes","Map","templateId","container","templateData","renderTemplate","index","height","renderElement","twistieElement","classList","add","treeItemLoading","classNamesArray","remove","_a","_b","disposeElement","call","disposeTemplate","clear","asTreeEvent","browserEvent","elements","asTreeMouseEvent","target","AsyncDataTreeElementsDragAndDropData","data","asAsyncDataTreeDragAndDropData","AsyncDataTreeNodeListDragAndDrop","dnd","getDragURI","nodes","originalEvent","getDragLabel","onDragStart","targetNode","targetIndex","raw","onDragOver","drop","onDragEnd","asObjectTreeOptions","options","collapseByDefault","identityProvider","getId","el","multipleSelectionController","isSelectionSingleChangeEvent","isSelectionRangeChangeEvent","accessibilityProvider","getPosInSet","getSetSize","getRole","isChecked","getAriaLabel","getWidgetAriaLabel","getWidgetRole","getAriaLevel","getActiveDescendantId","filter","parentVisibility","keyboardNavigationLabelProvider","getKeyboardNavigationLabel","sorter","expandOnlyOnTwistieClick","additionalScrollHeight","dfs","fn","forEach","child","AsyncDataTree","user","delegate","renderers","dataSource","subTreeRefreshPromises","refreshPromises","_onDidRender","_onDidChangeNodeSlowState","disposables","autoExpandSingleChildren","tree","createTree","onDidChangeFindMode","root","hasChildren","id","set","onDidChangeCollapseState","_onDidChangeCollapseState","onDidChangeFocus","onDidChangeSelection","onMouseDblClick","onPointer","onDidFocus","onDidChangeModel","onDidChangeFindOpenState","onDidDispose","objectTreeDelegate","objectTreeRenderers","r","event","objectTreeOptions","updateOptions","getHTMLElement","scrollTop","domFocus","width","layout","styles","style","input","viewState","promise","cancel","viewStateContext","focus","selection","_updateChildren","setFocus","setSelection","recursive","rerender","toPromise","getDataNode","refreshAndRenderNode","dataNode","getNode","collapse","hasElement","isCollapsible","isCollapsed","expand","getSelection","n","getFocus","relativeTop","reveal","getParentElement","getFirstElementChild","get","refreshNode","render","treeNode","doRefreshSubTree","c","finally","delete","doRefreshNode","childrenToRefresh","settled","childrenPromise","empty","doGetChildren","slowTimeout","fire","_","setChildren","getChildren","processChildren","deep","catch","childrenElementsIterable","childrenElements","length","nodesToForget","childrenTreeNodesById","asyncDataTreeNode","push","toString","splice","childAsyncDataTreeNode","indexOf","expanded","values","asTreeElement","diffIdentityProvider","setCollapsible","sort","compare","bind","CompressibleAsyncDataTreeNodeWrapper","incompressible","CompressibleAsyncDataTreeRenderer","compressibleNodeMapperProvider","renderCompressedElements","disposeCompressedElements","asCompressibleObjectTreeOptions","getCompressedNodeKeyboardNavigationLabel","els","CompressibleAsyncDataTree","virtualDelegate","compressionDelegate","compressibleNodeMapper","isIncompressible","getUncompressedIds","Set","compressedNode","getCompressedTreeNode","oldSelection","oldFocus","didChangeSelection","didChangeFocus","visit","i","has","visibility","getVisibility","Error","filterResult"],"sources":["/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/base/browser/ui/tree/asyncDataTree.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { ElementsDragAndDropData } from '../list/listView.js';\nimport { ComposedTreeDelegate } from './abstractTree.js';\nimport { getVisibleState, isFilterResult } from './indexTreeModel.js';\nimport { CompressibleObjectTree, ObjectTree } from './objectTree.js';\nimport { TreeError, WeakMapper } from './tree.js';\nimport { createCancelablePromise, Promises, timeout } from '../../../common/async.js';\nimport { Codicon } from '../../../common/codicons.js';\nimport { isCancellationError, onUnexpectedError } from '../../../common/errors.js';\nimport { Emitter, Event } from '../../../common/event.js';\nimport { Iterable } from '../../../common/iterator.js';\nimport { DisposableStore, dispose } from '../../../common/lifecycle.js';\nimport { isIterable } from '../../../common/types.js';\nfunction createAsyncDataTreeNode(props) {\n    return Object.assign(Object.assign({}, props), { children: [], refreshPromise: undefined, stale: true, slow: false, collapsedByDefault: undefined });\n}\nfunction isAncestor(ancestor, descendant) {\n    if (!descendant.parent) {\n        return false;\n    }\n    else if (descendant.parent === ancestor) {\n        return true;\n    }\n    else {\n        return isAncestor(ancestor, descendant.parent);\n    }\n}\nfunction intersects(node, other) {\n    return node === other || isAncestor(node, other) || isAncestor(other, node);\n}\nclass AsyncDataTreeNodeWrapper {\n    constructor(node) {\n        this.node = node;\n    }\n    get element() { return this.node.element.element; }\n    get children() { return this.node.children.map(node => new AsyncDataTreeNodeWrapper(node)); }\n    get depth() { return this.node.depth; }\n    get visibleChildrenCount() { return this.node.visibleChildrenCount; }\n    get visibleChildIndex() { return this.node.visibleChildIndex; }\n    get collapsible() { return this.node.collapsible; }\n    get collapsed() { return this.node.collapsed; }\n    get visible() { return this.node.visible; }\n    get filterData() { return this.node.filterData; }\n}\nclass AsyncDataTreeRenderer {\n    constructor(renderer, nodeMapper, onDidChangeTwistieState) {\n        this.renderer = renderer;\n        this.nodeMapper = nodeMapper;\n        this.onDidChangeTwistieState = onDidChangeTwistieState;\n        this.renderedNodes = new Map();\n        this.templateId = renderer.templateId;\n    }\n    renderTemplate(container) {\n        const templateData = this.renderer.renderTemplate(container);\n        return { templateData };\n    }\n    renderElement(node, index, templateData, height) {\n        this.renderer.renderElement(this.nodeMapper.map(node), index, templateData.templateData, height);\n    }\n    renderTwistie(element, twistieElement) {\n        if (element.slow) {\n            twistieElement.classList.add(...Codicon.treeItemLoading.classNamesArray);\n            return true;\n        }\n        else {\n            twistieElement.classList.remove(...Codicon.treeItemLoading.classNamesArray);\n            return false;\n        }\n    }\n    disposeElement(node, index, templateData, height) {\n        var _a, _b;\n        (_b = (_a = this.renderer).disposeElement) === null || _b === void 0 ? void 0 : _b.call(_a, this.nodeMapper.map(node), index, templateData.templateData, height);\n    }\n    disposeTemplate(templateData) {\n        this.renderer.disposeTemplate(templateData.templateData);\n    }\n    dispose() {\n        this.renderedNodes.clear();\n    }\n}\nfunction asTreeEvent(e) {\n    return {\n        browserEvent: e.browserEvent,\n        elements: e.elements.map(e => e.element)\n    };\n}\nfunction asTreeMouseEvent(e) {\n    return {\n        browserEvent: e.browserEvent,\n        element: e.element && e.element.element,\n        target: e.target\n    };\n}\nclass AsyncDataTreeElementsDragAndDropData extends ElementsDragAndDropData {\n    constructor(data) {\n        super(data.elements.map(node => node.element));\n        this.data = data;\n    }\n}\nfunction asAsyncDataTreeDragAndDropData(data) {\n    if (data instanceof ElementsDragAndDropData) {\n        return new AsyncDataTreeElementsDragAndDropData(data);\n    }\n    return data;\n}\nclass AsyncDataTreeNodeListDragAndDrop {\n    constructor(dnd) {\n        this.dnd = dnd;\n    }\n    getDragURI(node) {\n        return this.dnd.getDragURI(node.element);\n    }\n    getDragLabel(nodes, originalEvent) {\n        if (this.dnd.getDragLabel) {\n            return this.dnd.getDragLabel(nodes.map(node => node.element), originalEvent);\n        }\n        return undefined;\n    }\n    onDragStart(data, originalEvent) {\n        var _a, _b;\n        (_b = (_a = this.dnd).onDragStart) === null || _b === void 0 ? void 0 : _b.call(_a, asAsyncDataTreeDragAndDropData(data), originalEvent);\n    }\n    onDragOver(data, targetNode, targetIndex, originalEvent, raw = true) {\n        return this.dnd.onDragOver(asAsyncDataTreeDragAndDropData(data), targetNode && targetNode.element, targetIndex, originalEvent);\n    }\n    drop(data, targetNode, targetIndex, originalEvent) {\n        this.dnd.drop(asAsyncDataTreeDragAndDropData(data), targetNode && targetNode.element, targetIndex, originalEvent);\n    }\n    onDragEnd(originalEvent) {\n        var _a, _b;\n        (_b = (_a = this.dnd).onDragEnd) === null || _b === void 0 ? void 0 : _b.call(_a, originalEvent);\n    }\n}\nfunction asObjectTreeOptions(options) {\n    return options && Object.assign(Object.assign({}, options), { collapseByDefault: true, identityProvider: options.identityProvider && {\n            getId(el) {\n                return options.identityProvider.getId(el.element);\n            }\n        }, dnd: options.dnd && new AsyncDataTreeNodeListDragAndDrop(options.dnd), multipleSelectionController: options.multipleSelectionController && {\n            isSelectionSingleChangeEvent(e) {\n                return options.multipleSelectionController.isSelectionSingleChangeEvent(Object.assign(Object.assign({}, e), { element: e.element }));\n            },\n            isSelectionRangeChangeEvent(e) {\n                return options.multipleSelectionController.isSelectionRangeChangeEvent(Object.assign(Object.assign({}, e), { element: e.element }));\n            }\n        }, accessibilityProvider: options.accessibilityProvider && Object.assign(Object.assign({}, options.accessibilityProvider), { getPosInSet: undefined, getSetSize: undefined, getRole: options.accessibilityProvider.getRole ? (el) => {\n                return options.accessibilityProvider.getRole(el.element);\n            } : () => 'treeitem', isChecked: options.accessibilityProvider.isChecked ? (e) => {\n                var _a;\n                return !!((_a = options.accessibilityProvider) === null || _a === void 0 ? void 0 : _a.isChecked(e.element));\n            } : undefined, getAriaLabel(e) {\n                return options.accessibilityProvider.getAriaLabel(e.element);\n            },\n            getWidgetAriaLabel() {\n                return options.accessibilityProvider.getWidgetAriaLabel();\n            }, getWidgetRole: options.accessibilityProvider.getWidgetRole ? () => options.accessibilityProvider.getWidgetRole() : () => 'tree', getAriaLevel: options.accessibilityProvider.getAriaLevel && (node => {\n                return options.accessibilityProvider.getAriaLevel(node.element);\n            }), getActiveDescendantId: options.accessibilityProvider.getActiveDescendantId && (node => {\n                return options.accessibilityProvider.getActiveDescendantId(node.element);\n            }) }), filter: options.filter && {\n            filter(e, parentVisibility) {\n                return options.filter.filter(e.element, parentVisibility);\n            }\n        }, keyboardNavigationLabelProvider: options.keyboardNavigationLabelProvider && Object.assign(Object.assign({}, options.keyboardNavigationLabelProvider), { getKeyboardNavigationLabel(e) {\n                return options.keyboardNavigationLabelProvider.getKeyboardNavigationLabel(e.element);\n            } }), sorter: undefined, expandOnlyOnTwistieClick: typeof options.expandOnlyOnTwistieClick === 'undefined' ? undefined : (typeof options.expandOnlyOnTwistieClick !== 'function' ? options.expandOnlyOnTwistieClick : (e => options.expandOnlyOnTwistieClick(e.element))), additionalScrollHeight: options.additionalScrollHeight });\n}\nfunction dfs(node, fn) {\n    fn(node);\n    node.children.forEach(child => dfs(child, fn));\n}\nexport class AsyncDataTree {\n    constructor(user, container, delegate, renderers, dataSource, options = {}) {\n        this.user = user;\n        this.dataSource = dataSource;\n        this.nodes = new Map();\n        this.subTreeRefreshPromises = new Map();\n        this.refreshPromises = new Map();\n        this._onDidRender = new Emitter();\n        this._onDidChangeNodeSlowState = new Emitter();\n        this.nodeMapper = new WeakMapper(node => new AsyncDataTreeNodeWrapper(node));\n        this.disposables = new DisposableStore();\n        this.identityProvider = options.identityProvider;\n        this.autoExpandSingleChildren = typeof options.autoExpandSingleChildren === 'undefined' ? false : options.autoExpandSingleChildren;\n        this.sorter = options.sorter;\n        this.collapseByDefault = options.collapseByDefault;\n        this.tree = this.createTree(user, container, delegate, renderers, options);\n        this.onDidChangeFindMode = this.tree.onDidChangeFindMode;\n        this.root = createAsyncDataTreeNode({\n            element: undefined,\n            parent: null,\n            hasChildren: true\n        });\n        if (this.identityProvider) {\n            this.root = Object.assign(Object.assign({}, this.root), { id: null });\n        }\n        this.nodes.set(null, this.root);\n        this.tree.onDidChangeCollapseState(this._onDidChangeCollapseState, this, this.disposables);\n    }\n    get onDidChangeFocus() { return Event.map(this.tree.onDidChangeFocus, asTreeEvent); }\n    get onDidChangeSelection() { return Event.map(this.tree.onDidChangeSelection, asTreeEvent); }\n    get onMouseDblClick() { return Event.map(this.tree.onMouseDblClick, asTreeMouseEvent); }\n    get onPointer() { return Event.map(this.tree.onPointer, asTreeMouseEvent); }\n    get onDidFocus() { return this.tree.onDidFocus; }\n    get onDidChangeModel() { return this.tree.onDidChangeModel; }\n    get onDidChangeCollapseState() { return this.tree.onDidChangeCollapseState; }\n    get onDidChangeFindOpenState() { return this.tree.onDidChangeFindOpenState; }\n    get onDidDispose() { return this.tree.onDidDispose; }\n    createTree(user, container, delegate, renderers, options) {\n        const objectTreeDelegate = new ComposedTreeDelegate(delegate);\n        const objectTreeRenderers = renderers.map(r => new AsyncDataTreeRenderer(r, this.nodeMapper, this._onDidChangeNodeSlowState.event));\n        const objectTreeOptions = asObjectTreeOptions(options) || {};\n        return new ObjectTree(user, container, objectTreeDelegate, objectTreeRenderers, objectTreeOptions);\n    }\n    updateOptions(options = {}) {\n        this.tree.updateOptions(options);\n    }\n    // Widget\n    getHTMLElement() {\n        return this.tree.getHTMLElement();\n    }\n    get scrollTop() {\n        return this.tree.scrollTop;\n    }\n    set scrollTop(scrollTop) {\n        this.tree.scrollTop = scrollTop;\n    }\n    domFocus() {\n        this.tree.domFocus();\n    }\n    layout(height, width) {\n        this.tree.layout(height, width);\n    }\n    style(styles) {\n        this.tree.style(styles);\n    }\n    // Model\n    getInput() {\n        return this.root.element;\n    }\n    setInput(input, viewState) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.refreshPromises.forEach(promise => promise.cancel());\n            this.refreshPromises.clear();\n            this.root.element = input;\n            const viewStateContext = viewState && { viewState, focus: [], selection: [] };\n            yield this._updateChildren(input, true, false, viewStateContext);\n            if (viewStateContext) {\n                this.tree.setFocus(viewStateContext.focus);\n                this.tree.setSelection(viewStateContext.selection);\n            }\n            if (viewState && typeof viewState.scrollTop === 'number') {\n                this.scrollTop = viewState.scrollTop;\n            }\n        });\n    }\n    _updateChildren(element = this.root.element, recursive = true, rerender = false, viewStateContext, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (typeof this.root.element === 'undefined') {\n                throw new TreeError(this.user, 'Tree input not set');\n            }\n            if (this.root.refreshPromise) {\n                yield this.root.refreshPromise;\n                yield Event.toPromise(this._onDidRender.event);\n            }\n            const node = this.getDataNode(element);\n            yield this.refreshAndRenderNode(node, recursive, viewStateContext, options);\n            if (rerender) {\n                try {\n                    this.tree.rerender(node);\n                }\n                catch (_a) {\n                    // missing nodes are fine, this could've resulted from\n                    // parallel refresh calls, removing `node` altogether\n                }\n            }\n        });\n    }\n    // View\n    rerender(element) {\n        if (element === undefined || element === this.root.element) {\n            this.tree.rerender();\n            return;\n        }\n        const node = this.getDataNode(element);\n        this.tree.rerender(node);\n    }\n    // Tree\n    getNode(element = this.root.element) {\n        const dataNode = this.getDataNode(element);\n        const node = this.tree.getNode(dataNode === this.root ? null : dataNode);\n        return this.nodeMapper.map(node);\n    }\n    collapse(element, recursive = false) {\n        const node = this.getDataNode(element);\n        return this.tree.collapse(node === this.root ? null : node, recursive);\n    }\n    expand(element, recursive = false) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (typeof this.root.element === 'undefined') {\n                throw new TreeError(this.user, 'Tree input not set');\n            }\n            if (this.root.refreshPromise) {\n                yield this.root.refreshPromise;\n                yield Event.toPromise(this._onDidRender.event);\n            }\n            const node = this.getDataNode(element);\n            if (this.tree.hasElement(node) && !this.tree.isCollapsible(node)) {\n                return false;\n            }\n            if (node.refreshPromise) {\n                yield this.root.refreshPromise;\n                yield Event.toPromise(this._onDidRender.event);\n            }\n            if (node !== this.root && !node.refreshPromise && !this.tree.isCollapsed(node)) {\n                return false;\n            }\n            const result = this.tree.expand(node === this.root ? null : node, recursive);\n            if (node.refreshPromise) {\n                yield this.root.refreshPromise;\n                yield Event.toPromise(this._onDidRender.event);\n            }\n            return result;\n        });\n    }\n    setSelection(elements, browserEvent) {\n        const nodes = elements.map(e => this.getDataNode(e));\n        this.tree.setSelection(nodes, browserEvent);\n    }\n    getSelection() {\n        const nodes = this.tree.getSelection();\n        return nodes.map(n => n.element);\n    }\n    setFocus(elements, browserEvent) {\n        const nodes = elements.map(e => this.getDataNode(e));\n        this.tree.setFocus(nodes, browserEvent);\n    }\n    getFocus() {\n        const nodes = this.tree.getFocus();\n        return nodes.map(n => n.element);\n    }\n    reveal(element, relativeTop) {\n        this.tree.reveal(this.getDataNode(element), relativeTop);\n    }\n    // Tree navigation\n    getParentElement(element) {\n        const node = this.tree.getParentElement(this.getDataNode(element));\n        return (node && node.element);\n    }\n    getFirstElementChild(element = this.root.element) {\n        const dataNode = this.getDataNode(element);\n        const node = this.tree.getFirstElementChild(dataNode === this.root ? null : dataNode);\n        return (node && node.element);\n    }\n    // Implementation\n    getDataNode(element) {\n        const node = this.nodes.get((element === this.root.element ? null : element));\n        if (!node) {\n            throw new TreeError(this.user, `Data tree node not found: ${element}`);\n        }\n        return node;\n    }\n    refreshAndRenderNode(node, recursive, viewStateContext, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.refreshNode(node, recursive, viewStateContext);\n            this.render(node, viewStateContext, options);\n        });\n    }\n    refreshNode(node, recursive, viewStateContext) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let result;\n            this.subTreeRefreshPromises.forEach((refreshPromise, refreshNode) => {\n                if (!result && intersects(refreshNode, node)) {\n                    result = refreshPromise.then(() => this.refreshNode(node, recursive, viewStateContext));\n                }\n            });\n            if (result) {\n                return result;\n            }\n            if (node !== this.root) {\n                const treeNode = this.tree.getNode(node);\n                if (treeNode.collapsed) {\n                    node.hasChildren = !!this.dataSource.hasChildren(node.element);\n                    node.stale = true;\n                    return;\n                }\n            }\n            return this.doRefreshSubTree(node, recursive, viewStateContext);\n        });\n    }\n    doRefreshSubTree(node, recursive, viewStateContext) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let done;\n            node.refreshPromise = new Promise(c => done = c);\n            this.subTreeRefreshPromises.set(node, node.refreshPromise);\n            node.refreshPromise.finally(() => {\n                node.refreshPromise = undefined;\n                this.subTreeRefreshPromises.delete(node);\n            });\n            try {\n                const childrenToRefresh = yield this.doRefreshNode(node, recursive, viewStateContext);\n                node.stale = false;\n                yield Promises.settled(childrenToRefresh.map(child => this.doRefreshSubTree(child, recursive, viewStateContext)));\n            }\n            finally {\n                done();\n            }\n        });\n    }\n    doRefreshNode(node, recursive, viewStateContext) {\n        return __awaiter(this, void 0, void 0, function* () {\n            node.hasChildren = !!this.dataSource.hasChildren(node.element);\n            let childrenPromise;\n            if (!node.hasChildren) {\n                childrenPromise = Promise.resolve(Iterable.empty());\n            }\n            else {\n                const children = this.doGetChildren(node);\n                if (isIterable(children)) {\n                    childrenPromise = Promise.resolve(children);\n                }\n                else {\n                    const slowTimeout = timeout(800);\n                    slowTimeout.then(() => {\n                        node.slow = true;\n                        this._onDidChangeNodeSlowState.fire(node);\n                    }, _ => null);\n                    childrenPromise = children.finally(() => slowTimeout.cancel());\n                }\n            }\n            try {\n                const children = yield childrenPromise;\n                return this.setChildren(node, children, recursive, viewStateContext);\n            }\n            catch (err) {\n                if (node !== this.root && this.tree.hasElement(node)) {\n                    this.tree.collapse(node);\n                }\n                if (isCancellationError(err)) {\n                    return [];\n                }\n                throw err;\n            }\n            finally {\n                if (node.slow) {\n                    node.slow = false;\n                    this._onDidChangeNodeSlowState.fire(node);\n                }\n            }\n        });\n    }\n    doGetChildren(node) {\n        let result = this.refreshPromises.get(node);\n        if (result) {\n            return result;\n        }\n        const children = this.dataSource.getChildren(node.element);\n        if (isIterable(children)) {\n            return this.processChildren(children);\n        }\n        else {\n            result = createCancelablePromise(() => __awaiter(this, void 0, void 0, function* () { return this.processChildren(yield children); }));\n            this.refreshPromises.set(node, result);\n            return result.finally(() => { this.refreshPromises.delete(node); });\n        }\n    }\n    _onDidChangeCollapseState({ node, deep }) {\n        if (node.element === null) {\n            return;\n        }\n        if (!node.collapsed && node.element.stale) {\n            if (deep) {\n                this.collapse(node.element.element);\n            }\n            else {\n                this.refreshAndRenderNode(node.element, false)\n                    .catch(onUnexpectedError);\n            }\n        }\n    }\n    setChildren(node, childrenElementsIterable, recursive, viewStateContext) {\n        const childrenElements = [...childrenElementsIterable];\n        // perf: if the node was and still is a leaf, avoid all this hassle\n        if (node.children.length === 0 && childrenElements.length === 0) {\n            return [];\n        }\n        const nodesToForget = new Map();\n        const childrenTreeNodesById = new Map();\n        for (const child of node.children) {\n            nodesToForget.set(child.element, child);\n            if (this.identityProvider) {\n                const collapsed = this.tree.isCollapsed(child);\n                childrenTreeNodesById.set(child.id, { node: child, collapsed });\n            }\n        }\n        const childrenToRefresh = [];\n        const children = childrenElements.map(element => {\n            const hasChildren = !!this.dataSource.hasChildren(element);\n            if (!this.identityProvider) {\n                const asyncDataTreeNode = createAsyncDataTreeNode({ element, parent: node, hasChildren });\n                if (hasChildren && this.collapseByDefault && !this.collapseByDefault(element)) {\n                    asyncDataTreeNode.collapsedByDefault = false;\n                    childrenToRefresh.push(asyncDataTreeNode);\n                }\n                return asyncDataTreeNode;\n            }\n            const id = this.identityProvider.getId(element).toString();\n            const result = childrenTreeNodesById.get(id);\n            if (result) {\n                const asyncDataTreeNode = result.node;\n                nodesToForget.delete(asyncDataTreeNode.element);\n                this.nodes.delete(asyncDataTreeNode.element);\n                this.nodes.set(element, asyncDataTreeNode);\n                asyncDataTreeNode.element = element;\n                asyncDataTreeNode.hasChildren = hasChildren;\n                if (recursive) {\n                    if (result.collapsed) {\n                        asyncDataTreeNode.children.forEach(node => dfs(node, node => this.nodes.delete(node.element)));\n                        asyncDataTreeNode.children.splice(0, asyncDataTreeNode.children.length);\n                        asyncDataTreeNode.stale = true;\n                    }\n                    else {\n                        childrenToRefresh.push(asyncDataTreeNode);\n                    }\n                }\n                else if (hasChildren && this.collapseByDefault && !this.collapseByDefault(element)) {\n                    asyncDataTreeNode.collapsedByDefault = false;\n                    childrenToRefresh.push(asyncDataTreeNode);\n                }\n                return asyncDataTreeNode;\n            }\n            const childAsyncDataTreeNode = createAsyncDataTreeNode({ element, parent: node, id, hasChildren });\n            if (viewStateContext && viewStateContext.viewState.focus && viewStateContext.viewState.focus.indexOf(id) > -1) {\n                viewStateContext.focus.push(childAsyncDataTreeNode);\n            }\n            if (viewStateContext && viewStateContext.viewState.selection && viewStateContext.viewState.selection.indexOf(id) > -1) {\n                viewStateContext.selection.push(childAsyncDataTreeNode);\n            }\n            if (viewStateContext && viewStateContext.viewState.expanded && viewStateContext.viewState.expanded.indexOf(id) > -1) {\n                childrenToRefresh.push(childAsyncDataTreeNode);\n            }\n            else if (hasChildren && this.collapseByDefault && !this.collapseByDefault(element)) {\n                childAsyncDataTreeNode.collapsedByDefault = false;\n                childrenToRefresh.push(childAsyncDataTreeNode);\n            }\n            return childAsyncDataTreeNode;\n        });\n        for (const node of nodesToForget.values()) {\n            dfs(node, node => this.nodes.delete(node.element));\n        }\n        for (const child of children) {\n            this.nodes.set(child.element, child);\n        }\n        node.children.splice(0, node.children.length, ...children);\n        // TODO@joao this doesn't take filter into account\n        if (node !== this.root && this.autoExpandSingleChildren && children.length === 1 && childrenToRefresh.length === 0) {\n            children[0].collapsedByDefault = false;\n            childrenToRefresh.push(children[0]);\n        }\n        return childrenToRefresh;\n    }\n    render(node, viewStateContext, options) {\n        const children = node.children.map(node => this.asTreeElement(node, viewStateContext));\n        const objectTreeOptions = options && Object.assign(Object.assign({}, options), { diffIdentityProvider: options.diffIdentityProvider && {\n                getId(node) {\n                    return options.diffIdentityProvider.getId(node.element);\n                }\n            } });\n        this.tree.setChildren(node === this.root ? null : node, children, objectTreeOptions);\n        if (node !== this.root) {\n            this.tree.setCollapsible(node, node.hasChildren);\n        }\n        this._onDidRender.fire();\n    }\n    asTreeElement(node, viewStateContext) {\n        if (node.stale) {\n            return {\n                element: node,\n                collapsible: node.hasChildren,\n                collapsed: true\n            };\n        }\n        let collapsed;\n        if (viewStateContext && viewStateContext.viewState.expanded && node.id && viewStateContext.viewState.expanded.indexOf(node.id) > -1) {\n            collapsed = false;\n        }\n        else {\n            collapsed = node.collapsedByDefault;\n        }\n        node.collapsedByDefault = undefined;\n        return {\n            element: node,\n            children: node.hasChildren ? Iterable.map(node.children, child => this.asTreeElement(child, viewStateContext)) : [],\n            collapsible: node.hasChildren,\n            collapsed\n        };\n    }\n    processChildren(children) {\n        if (this.sorter) {\n            children = [...children].sort(this.sorter.compare.bind(this.sorter));\n        }\n        return children;\n    }\n    dispose() {\n        this.disposables.dispose();\n    }\n}\nclass CompressibleAsyncDataTreeNodeWrapper {\n    constructor(node) {\n        this.node = node;\n    }\n    get element() {\n        return {\n            elements: this.node.element.elements.map(e => e.element),\n            incompressible: this.node.element.incompressible\n        };\n    }\n    get children() { return this.node.children.map(node => new CompressibleAsyncDataTreeNodeWrapper(node)); }\n    get depth() { return this.node.depth; }\n    get visibleChildrenCount() { return this.node.visibleChildrenCount; }\n    get visibleChildIndex() { return this.node.visibleChildIndex; }\n    get collapsible() { return this.node.collapsible; }\n    get collapsed() { return this.node.collapsed; }\n    get visible() { return this.node.visible; }\n    get filterData() { return this.node.filterData; }\n}\nclass CompressibleAsyncDataTreeRenderer {\n    constructor(renderer, nodeMapper, compressibleNodeMapperProvider, onDidChangeTwistieState) {\n        this.renderer = renderer;\n        this.nodeMapper = nodeMapper;\n        this.compressibleNodeMapperProvider = compressibleNodeMapperProvider;\n        this.onDidChangeTwistieState = onDidChangeTwistieState;\n        this.renderedNodes = new Map();\n        this.disposables = [];\n        this.templateId = renderer.templateId;\n    }\n    renderTemplate(container) {\n        const templateData = this.renderer.renderTemplate(container);\n        return { templateData };\n    }\n    renderElement(node, index, templateData, height) {\n        this.renderer.renderElement(this.nodeMapper.map(node), index, templateData.templateData, height);\n    }\n    renderCompressedElements(node, index, templateData, height) {\n        this.renderer.renderCompressedElements(this.compressibleNodeMapperProvider().map(node), index, templateData.templateData, height);\n    }\n    renderTwistie(element, twistieElement) {\n        if (element.slow) {\n            twistieElement.classList.add(...Codicon.treeItemLoading.classNamesArray);\n            return true;\n        }\n        else {\n            twistieElement.classList.remove(...Codicon.treeItemLoading.classNamesArray);\n            return false;\n        }\n    }\n    disposeElement(node, index, templateData, height) {\n        var _a, _b;\n        (_b = (_a = this.renderer).disposeElement) === null || _b === void 0 ? void 0 : _b.call(_a, this.nodeMapper.map(node), index, templateData.templateData, height);\n    }\n    disposeCompressedElements(node, index, templateData, height) {\n        var _a, _b;\n        (_b = (_a = this.renderer).disposeCompressedElements) === null || _b === void 0 ? void 0 : _b.call(_a, this.compressibleNodeMapperProvider().map(node), index, templateData.templateData, height);\n    }\n    disposeTemplate(templateData) {\n        this.renderer.disposeTemplate(templateData.templateData);\n    }\n    dispose() {\n        this.renderedNodes.clear();\n        this.disposables = dispose(this.disposables);\n    }\n}\nfunction asCompressibleObjectTreeOptions(options) {\n    const objectTreeOptions = options && asObjectTreeOptions(options);\n    return objectTreeOptions && Object.assign(Object.assign({}, objectTreeOptions), { keyboardNavigationLabelProvider: objectTreeOptions.keyboardNavigationLabelProvider && Object.assign(Object.assign({}, objectTreeOptions.keyboardNavigationLabelProvider), { getCompressedNodeKeyboardNavigationLabel(els) {\n                return options.keyboardNavigationLabelProvider.getCompressedNodeKeyboardNavigationLabel(els.map(e => e.element));\n            } }) });\n}\nexport class CompressibleAsyncDataTree extends AsyncDataTree {\n    constructor(user, container, virtualDelegate, compressionDelegate, renderers, dataSource, options = {}) {\n        super(user, container, virtualDelegate, renderers, dataSource, options);\n        this.compressionDelegate = compressionDelegate;\n        this.compressibleNodeMapper = new WeakMapper(node => new CompressibleAsyncDataTreeNodeWrapper(node));\n        this.filter = options.filter;\n    }\n    createTree(user, container, delegate, renderers, options) {\n        const objectTreeDelegate = new ComposedTreeDelegate(delegate);\n        const objectTreeRenderers = renderers.map(r => new CompressibleAsyncDataTreeRenderer(r, this.nodeMapper, () => this.compressibleNodeMapper, this._onDidChangeNodeSlowState.event));\n        const objectTreeOptions = asCompressibleObjectTreeOptions(options) || {};\n        return new CompressibleObjectTree(user, container, objectTreeDelegate, objectTreeRenderers, objectTreeOptions);\n    }\n    asTreeElement(node, viewStateContext) {\n        return Object.assign({ incompressible: this.compressionDelegate.isIncompressible(node.element) }, super.asTreeElement(node, viewStateContext));\n    }\n    updateOptions(options = {}) {\n        this.tree.updateOptions(options);\n    }\n    render(node, viewStateContext) {\n        if (!this.identityProvider) {\n            return super.render(node, viewStateContext);\n        }\n        // Preserve traits across compressions. Hacky but does the trick.\n        // This is hard to fix properly since it requires rewriting the traits\n        // across trees and lists. Let's just keep it this way for now.\n        const getId = (element) => this.identityProvider.getId(element).toString();\n        const getUncompressedIds = (nodes) => {\n            const result = new Set();\n            for (const node of nodes) {\n                const compressedNode = this.tree.getCompressedTreeNode(node === this.root ? null : node);\n                if (!compressedNode.element) {\n                    continue;\n                }\n                for (const node of compressedNode.element.elements) {\n                    result.add(getId(node.element));\n                }\n            }\n            return result;\n        };\n        const oldSelection = getUncompressedIds(this.tree.getSelection());\n        const oldFocus = getUncompressedIds(this.tree.getFocus());\n        super.render(node, viewStateContext);\n        const selection = this.getSelection();\n        let didChangeSelection = false;\n        const focus = this.getFocus();\n        let didChangeFocus = false;\n        const visit = (node) => {\n            const compressedNode = node.element;\n            if (compressedNode) {\n                for (let i = 0; i < compressedNode.elements.length; i++) {\n                    const id = getId(compressedNode.elements[i].element);\n                    const element = compressedNode.elements[compressedNode.elements.length - 1].element;\n                    // github.com/microsoft/vscode/issues/85938\n                    if (oldSelection.has(id) && selection.indexOf(element) === -1) {\n                        selection.push(element);\n                        didChangeSelection = true;\n                    }\n                    if (oldFocus.has(id) && focus.indexOf(element) === -1) {\n                        focus.push(element);\n                        didChangeFocus = true;\n                    }\n                }\n            }\n            node.children.forEach(visit);\n        };\n        visit(this.tree.getCompressedTreeNode(node === this.root ? null : node));\n        if (didChangeSelection) {\n            this.setSelection(selection);\n        }\n        if (didChangeFocus) {\n            this.setFocus(focus);\n        }\n    }\n    // For compressed async data trees, `TreeVisibility.Recurse` doesn't currently work\n    // and we have to filter everything beforehand\n    // Related to #85193 and #85835\n    processChildren(children) {\n        if (this.filter) {\n            children = Iterable.filter(children, e => {\n                const result = this.filter.filter(e, 1 /* TreeVisibility.Visible */);\n                const visibility = getVisibility(result);\n                if (visibility === 2 /* TreeVisibility.Recurse */) {\n                    throw new Error('Recursive tree visibility not supported in async data compressed trees');\n                }\n                return visibility === 1 /* TreeVisibility.Visible */;\n            });\n        }\n        return super.processChildren(children);\n    }\n}\nfunction getVisibility(filterResult) {\n    if (typeof filterResult === 'boolean') {\n        return filterResult ? 1 /* TreeVisibility.Visible */ : 0 /* TreeVisibility.Hidden */;\n    }\n    else if (isFilterResult(filterResult)) {\n        return getVisibleState(filterResult.visibility);\n    }\n    else {\n        return getVisibleState(filterResult);\n    }\n}\n"],"mappings":"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"}]}