{"remainingRequest":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/thread-loader/dist/cjs.js!/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js!/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/common/model/pieceTreeTextBuffer/pieceTreeBase.js","dependencies":[{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/common/model/pieceTreeTextBuffer/pieceTreeBase.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/babel.config.js","mtime":1668271197000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js","mtime":456789000000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["Position","Range","FindMatch","SENTINEL","TreeNode","fixInsert","leftest","rbDelete","righttest","updateTreeMetadata","Searcher","createFindMatch","isValidMatch","AverageBufferSize","createUintArray","arr","r","length","Uint16Array","Uint32Array","set","LineStarts","lineStarts","cr","lf","crlf","isBasicASCII","createLineStartsFast","str","readonly","rLength","i","len","chr","charCodeAt","createLineStarts","result","Piece","bufferIndex","start","end","lineFeedCnt","StringBuffer","buffer","PieceTreeSnapshot","tree","BOM","_pieces","_tree","_BOM","_index","root","iterate","node","push","piece","getPieceContent","PieceTreeSearchCache","limit","_limit","_cache","offset","nodePos","nodeStartOffset","lineNumber","nodeStartLineNumber","nodePosition","shift","hasInvalidVal","tmp","parent","newArr","entry","PieceTreeBase","chunks","eol","eolNormalized","create","_buffers","_lastChangeBufferPos","line","column","_lineCnt","_length","_EOL","_EOLLength","_EOLNormalized","lastNode","rbInsertRight","_searchCache","_lastVisitedLine","value","computeBufferMetadata","averageBufferSize","min","Math","floor","max","tempChunk","tempChunkLen","getNodeContent","text","replace","newEOL","normalizeEOL","leftLen","x","left","lf_left","size_left","accumualtedValInCurrentIndex","getAccumulatedValue","right","lfCnt","originalOffset","out","getIndexOf","index","lineStartOffset","getOffsetAt","remainder","range","startLineNumber","endLineNumber","startColumn","endColumn","startPosition","nodeAt2","endPosition","getValueInRange2","getEOL","startOffset","offsetInBuffer","substring","ret","next","substr","lines","linesLength","currentLine","danglingCR","pieceLength","pieceStartLine","pieceEndLine","pieceStartOffset","getLineRawContent","matchingNode","targetOffset","_getCharCode","getLineCount","getLength","searcher","startCursor","endCursor","searchData","captureMatches","limitResultCount","resultLen","startOffsetInBuffer","m","searchText","_wordSeparators","reset","positionInBuffer","getLineFeedCnt","retStartColumn","retEndColumn","searchRange","wordSeparators","regex","findMatchesInNode","currentNode","lineBreakCnt","nextLineStartOffset","getLineContent","_findMatchesInLine","deltaOffset","simpleSearch","searchString","searchStringLen","textLength","lastMatchIndex","indexOf","nodeAt","insertPosInBuffer","appendToNode","insertContentToNodeLeft","validate","nodesToDel","newRightPiece","shouldCheckCRLF","endWithCR","headOfRight","nodeCharCodeAt","newStart","startWithLF","tailOfLeft","previousPos","deleteNodeTail","newPieces","createNewPieces","tmpNode","k","deleteNodes","insertContentToNodeRight","pieces","rbInsertLeft","cnt","startNode","endNode","startSplitPosInBuffer","endSplitPosInBuffer","validateCRLFWithPrevNode","deleteNodeHead","validateCRLFWithNextNode","shrinkNode","secondNode","prev","nPiece","newNode","adjustCarriageReturnFromNext","low","high","mid","midStop","midStart","endOffset","previousCharOffset","cursor","nodes","lastChar","splitText","concat","slice","endIndex","endPos","newPiece","cache","get2","prevAccumulatedValue","accumulatedValue","originalLineNumber","pos","lineCnt","realLineCnt","expectedLineStartIndex","originalLFCnt","originalEndOffset","newEnd","newEndOffset","newLineFeedCnt","lf_delta","size_delta","newLength","originalStartOffset","newStartOffset","originalStartPos","originalEndPos","oldLength","oldLFCnt","hitCRLF","prevStartOffset","pop","oldLineFeedCnt","get","prevAccumualtedValue","offsetOfNode","newOffset","val","nextLineOffset","nextNode","fixCRLF","prevNewLength","prevNewLFCnt","callback","leftRet","currentContent","p","z","color","prevNode"],"sources":["/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/common/model/pieceTreeTextBuffer/pieceTreeBase.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Position } from '../../core/position.js';\nimport { Range } from '../../core/range.js';\nimport { FindMatch } from '../../model.js';\nimport { SENTINEL, TreeNode, fixInsert, leftest, rbDelete, righttest, updateTreeMetadata } from './rbTreeBase.js';\nimport { Searcher, createFindMatch, isValidMatch } from '../textModelSearch.js';\n// const lfRegex = new RegExp(/\\r\\n|\\r|\\n/g);\nexport const AverageBufferSize = 65535;\nexport function createUintArray(arr) {\n    let r;\n    if (arr[arr.length - 1] < 65536) {\n        r = new Uint16Array(arr.length);\n    }\n    else {\n        r = new Uint32Array(arr.length);\n    }\n    r.set(arr, 0);\n    return r;\n}\nexport class LineStarts {\n    constructor(lineStarts, cr, lf, crlf, isBasicASCII) {\n        this.lineStarts = lineStarts;\n        this.cr = cr;\n        this.lf = lf;\n        this.crlf = crlf;\n        this.isBasicASCII = isBasicASCII;\n    }\n}\nexport function createLineStartsFast(str, readonly = true) {\n    const r = [0];\n    let rLength = 1;\n    for (let i = 0, len = str.length; i < len; i++) {\n        const chr = str.charCodeAt(i);\n        if (chr === 13 /* CharCode.CarriageReturn */) {\n            if (i + 1 < len && str.charCodeAt(i + 1) === 10 /* CharCode.LineFeed */) {\n                // \\r\\n... case\n                r[rLength++] = i + 2;\n                i++; // skip \\n\n            }\n            else {\n                // \\r... case\n                r[rLength++] = i + 1;\n            }\n        }\n        else if (chr === 10 /* CharCode.LineFeed */) {\n            r[rLength++] = i + 1;\n        }\n    }\n    if (readonly) {\n        return createUintArray(r);\n    }\n    else {\n        return r;\n    }\n}\nexport function createLineStarts(r, str) {\n    r.length = 0;\n    r[0] = 0;\n    let rLength = 1;\n    let cr = 0, lf = 0, crlf = 0;\n    let isBasicASCII = true;\n    for (let i = 0, len = str.length; i < len; i++) {\n        const chr = str.charCodeAt(i);\n        if (chr === 13 /* CharCode.CarriageReturn */) {\n            if (i + 1 < len && str.charCodeAt(i + 1) === 10 /* CharCode.LineFeed */) {\n                // \\r\\n... case\n                crlf++;\n                r[rLength++] = i + 2;\n                i++; // skip \\n\n            }\n            else {\n                cr++;\n                // \\r... case\n                r[rLength++] = i + 1;\n            }\n        }\n        else if (chr === 10 /* CharCode.LineFeed */) {\n            lf++;\n            r[rLength++] = i + 1;\n        }\n        else {\n            if (isBasicASCII) {\n                if (chr !== 9 /* CharCode.Tab */ && (chr < 32 || chr > 126)) {\n                    isBasicASCII = false;\n                }\n            }\n        }\n    }\n    const result = new LineStarts(createUintArray(r), cr, lf, crlf, isBasicASCII);\n    r.length = 0;\n    return result;\n}\nexport class Piece {\n    constructor(bufferIndex, start, end, lineFeedCnt, length) {\n        this.bufferIndex = bufferIndex;\n        this.start = start;\n        this.end = end;\n        this.lineFeedCnt = lineFeedCnt;\n        this.length = length;\n    }\n}\nexport class StringBuffer {\n    constructor(buffer, lineStarts) {\n        this.buffer = buffer;\n        this.lineStarts = lineStarts;\n    }\n}\n/**\n * Readonly snapshot for piece tree.\n * In a real multiple thread environment, to make snapshot reading always work correctly, we need to\n * 1. Make TreeNode.piece immutable, then reading and writing can run in parallel.\n * 2. TreeNode/Buffers normalization should not happen during snapshot reading.\n */\nclass PieceTreeSnapshot {\n    constructor(tree, BOM) {\n        this._pieces = [];\n        this._tree = tree;\n        this._BOM = BOM;\n        this._index = 0;\n        if (tree.root !== SENTINEL) {\n            tree.iterate(tree.root, node => {\n                if (node !== SENTINEL) {\n                    this._pieces.push(node.piece);\n                }\n                return true;\n            });\n        }\n    }\n    read() {\n        if (this._pieces.length === 0) {\n            if (this._index === 0) {\n                this._index++;\n                return this._BOM;\n            }\n            else {\n                return null;\n            }\n        }\n        if (this._index > this._pieces.length - 1) {\n            return null;\n        }\n        if (this._index === 0) {\n            return this._BOM + this._tree.getPieceContent(this._pieces[this._index++]);\n        }\n        return this._tree.getPieceContent(this._pieces[this._index++]);\n    }\n}\nclass PieceTreeSearchCache {\n    constructor(limit) {\n        this._limit = limit;\n        this._cache = [];\n    }\n    get(offset) {\n        for (let i = this._cache.length - 1; i >= 0; i--) {\n            const nodePos = this._cache[i];\n            if (nodePos.nodeStartOffset <= offset && nodePos.nodeStartOffset + nodePos.node.piece.length >= offset) {\n                return nodePos;\n            }\n        }\n        return null;\n    }\n    get2(lineNumber) {\n        for (let i = this._cache.length - 1; i >= 0; i--) {\n            const nodePos = this._cache[i];\n            if (nodePos.nodeStartLineNumber && nodePos.nodeStartLineNumber < lineNumber && nodePos.nodeStartLineNumber + nodePos.node.piece.lineFeedCnt >= lineNumber) {\n                return nodePos;\n            }\n        }\n        return null;\n    }\n    set(nodePosition) {\n        if (this._cache.length >= this._limit) {\n            this._cache.shift();\n        }\n        this._cache.push(nodePosition);\n    }\n    validate(offset) {\n        let hasInvalidVal = false;\n        const tmp = this._cache;\n        for (let i = 0; i < tmp.length; i++) {\n            const nodePos = tmp[i];\n            if (nodePos.node.parent === null || nodePos.nodeStartOffset >= offset) {\n                tmp[i] = null;\n                hasInvalidVal = true;\n                continue;\n            }\n        }\n        if (hasInvalidVal) {\n            const newArr = [];\n            for (const entry of tmp) {\n                if (entry !== null) {\n                    newArr.push(entry);\n                }\n            }\n            this._cache = newArr;\n        }\n    }\n}\nexport class PieceTreeBase {\n    constructor(chunks, eol, eolNormalized) {\n        this.create(chunks, eol, eolNormalized);\n    }\n    create(chunks, eol, eolNormalized) {\n        this._buffers = [\n            new StringBuffer('', [0])\n        ];\n        this._lastChangeBufferPos = { line: 0, column: 0 };\n        this.root = SENTINEL;\n        this._lineCnt = 1;\n        this._length = 0;\n        this._EOL = eol;\n        this._EOLLength = eol.length;\n        this._EOLNormalized = eolNormalized;\n        let lastNode = null;\n        for (let i = 0, len = chunks.length; i < len; i++) {\n            if (chunks[i].buffer.length > 0) {\n                if (!chunks[i].lineStarts) {\n                    chunks[i].lineStarts = createLineStartsFast(chunks[i].buffer);\n                }\n                const piece = new Piece(i + 1, { line: 0, column: 0 }, { line: chunks[i].lineStarts.length - 1, column: chunks[i].buffer.length - chunks[i].lineStarts[chunks[i].lineStarts.length - 1] }, chunks[i].lineStarts.length - 1, chunks[i].buffer.length);\n                this._buffers.push(chunks[i]);\n                lastNode = this.rbInsertRight(lastNode, piece);\n            }\n        }\n        this._searchCache = new PieceTreeSearchCache(1);\n        this._lastVisitedLine = { lineNumber: 0, value: '' };\n        this.computeBufferMetadata();\n    }\n    normalizeEOL(eol) {\n        const averageBufferSize = AverageBufferSize;\n        const min = averageBufferSize - Math.floor(averageBufferSize / 3);\n        const max = min * 2;\n        let tempChunk = '';\n        let tempChunkLen = 0;\n        const chunks = [];\n        this.iterate(this.root, node => {\n            const str = this.getNodeContent(node);\n            const len = str.length;\n            if (tempChunkLen <= min || tempChunkLen + len < max) {\n                tempChunk += str;\n                tempChunkLen += len;\n                return true;\n            }\n            // flush anyways\n            const text = tempChunk.replace(/\\r\\n|\\r|\\n/g, eol);\n            chunks.push(new StringBuffer(text, createLineStartsFast(text)));\n            tempChunk = str;\n            tempChunkLen = len;\n            return true;\n        });\n        if (tempChunkLen > 0) {\n            const text = tempChunk.replace(/\\r\\n|\\r|\\n/g, eol);\n            chunks.push(new StringBuffer(text, createLineStartsFast(text)));\n        }\n        this.create(chunks, eol, true);\n    }\n    // #region Buffer API\n    getEOL() {\n        return this._EOL;\n    }\n    setEOL(newEOL) {\n        this._EOL = newEOL;\n        this._EOLLength = this._EOL.length;\n        this.normalizeEOL(newEOL);\n    }\n    createSnapshot(BOM) {\n        return new PieceTreeSnapshot(this, BOM);\n    }\n    getOffsetAt(lineNumber, column) {\n        let leftLen = 0; // inorder\n        let x = this.root;\n        while (x !== SENTINEL) {\n            if (x.left !== SENTINEL && x.lf_left + 1 >= lineNumber) {\n                x = x.left;\n            }\n            else if (x.lf_left + x.piece.lineFeedCnt + 1 >= lineNumber) {\n                leftLen += x.size_left;\n                // lineNumber >= 2\n                const accumualtedValInCurrentIndex = this.getAccumulatedValue(x, lineNumber - x.lf_left - 2);\n                return leftLen += accumualtedValInCurrentIndex + column - 1;\n            }\n            else {\n                lineNumber -= x.lf_left + x.piece.lineFeedCnt;\n                leftLen += x.size_left + x.piece.length;\n                x = x.right;\n            }\n        }\n        return leftLen;\n    }\n    getPositionAt(offset) {\n        offset = Math.floor(offset);\n        offset = Math.max(0, offset);\n        let x = this.root;\n        let lfCnt = 0;\n        const originalOffset = offset;\n        while (x !== SENTINEL) {\n            if (x.size_left !== 0 && x.size_left >= offset) {\n                x = x.left;\n            }\n            else if (x.size_left + x.piece.length >= offset) {\n                const out = this.getIndexOf(x, offset - x.size_left);\n                lfCnt += x.lf_left + out.index;\n                if (out.index === 0) {\n                    const lineStartOffset = this.getOffsetAt(lfCnt + 1, 1);\n                    const column = originalOffset - lineStartOffset;\n                    return new Position(lfCnt + 1, column + 1);\n                }\n                return new Position(lfCnt + 1, out.remainder + 1);\n            }\n            else {\n                offset -= x.size_left + x.piece.length;\n                lfCnt += x.lf_left + x.piece.lineFeedCnt;\n                if (x.right === SENTINEL) {\n                    // last node\n                    const lineStartOffset = this.getOffsetAt(lfCnt + 1, 1);\n                    const column = originalOffset - offset - lineStartOffset;\n                    return new Position(lfCnt + 1, column + 1);\n                }\n                else {\n                    x = x.right;\n                }\n            }\n        }\n        return new Position(1, 1);\n    }\n    getValueInRange(range, eol) {\n        if (range.startLineNumber === range.endLineNumber && range.startColumn === range.endColumn) {\n            return '';\n        }\n        const startPosition = this.nodeAt2(range.startLineNumber, range.startColumn);\n        const endPosition = this.nodeAt2(range.endLineNumber, range.endColumn);\n        const value = this.getValueInRange2(startPosition, endPosition);\n        if (eol) {\n            if (eol !== this._EOL || !this._EOLNormalized) {\n                return value.replace(/\\r\\n|\\r|\\n/g, eol);\n            }\n            if (eol === this.getEOL() && this._EOLNormalized) {\n                if (eol === '\\r\\n') {\n                }\n                return value;\n            }\n            return value.replace(/\\r\\n|\\r|\\n/g, eol);\n        }\n        return value;\n    }\n    getValueInRange2(startPosition, endPosition) {\n        if (startPosition.node === endPosition.node) {\n            const node = startPosition.node;\n            const buffer = this._buffers[node.piece.bufferIndex].buffer;\n            const startOffset = this.offsetInBuffer(node.piece.bufferIndex, node.piece.start);\n            return buffer.substring(startOffset + startPosition.remainder, startOffset + endPosition.remainder);\n        }\n        let x = startPosition.node;\n        const buffer = this._buffers[x.piece.bufferIndex].buffer;\n        const startOffset = this.offsetInBuffer(x.piece.bufferIndex, x.piece.start);\n        let ret = buffer.substring(startOffset + startPosition.remainder, startOffset + x.piece.length);\n        x = x.next();\n        while (x !== SENTINEL) {\n            const buffer = this._buffers[x.piece.bufferIndex].buffer;\n            const startOffset = this.offsetInBuffer(x.piece.bufferIndex, x.piece.start);\n            if (x === endPosition.node) {\n                ret += buffer.substring(startOffset, startOffset + endPosition.remainder);\n                break;\n            }\n            else {\n                ret += buffer.substr(startOffset, x.piece.length);\n            }\n            x = x.next();\n        }\n        return ret;\n    }\n    getLinesContent() {\n        const lines = [];\n        let linesLength = 0;\n        let currentLine = '';\n        let danglingCR = false;\n        this.iterate(this.root, node => {\n            if (node === SENTINEL) {\n                return true;\n            }\n            const piece = node.piece;\n            let pieceLength = piece.length;\n            if (pieceLength === 0) {\n                return true;\n            }\n            const buffer = this._buffers[piece.bufferIndex].buffer;\n            const lineStarts = this._buffers[piece.bufferIndex].lineStarts;\n            const pieceStartLine = piece.start.line;\n            const pieceEndLine = piece.end.line;\n            let pieceStartOffset = lineStarts[pieceStartLine] + piece.start.column;\n            if (danglingCR) {\n                if (buffer.charCodeAt(pieceStartOffset) === 10 /* CharCode.LineFeed */) {\n                    // pretend the \\n was in the previous piece..\n                    pieceStartOffset++;\n                    pieceLength--;\n                }\n                lines[linesLength++] = currentLine;\n                currentLine = '';\n                danglingCR = false;\n                if (pieceLength === 0) {\n                    return true;\n                }\n            }\n            if (pieceStartLine === pieceEndLine) {\n                // this piece has no new lines\n                if (!this._EOLNormalized && buffer.charCodeAt(pieceStartOffset + pieceLength - 1) === 13 /* CharCode.CarriageReturn */) {\n                    danglingCR = true;\n                    currentLine += buffer.substr(pieceStartOffset, pieceLength - 1);\n                }\n                else {\n                    currentLine += buffer.substr(pieceStartOffset, pieceLength);\n                }\n                return true;\n            }\n            // add the text before the first line start in this piece\n            currentLine += (this._EOLNormalized\n                ? buffer.substring(pieceStartOffset, Math.max(pieceStartOffset, lineStarts[pieceStartLine + 1] - this._EOLLength))\n                : buffer.substring(pieceStartOffset, lineStarts[pieceStartLine + 1]).replace(/(\\r\\n|\\r|\\n)$/, ''));\n            lines[linesLength++] = currentLine;\n            for (let line = pieceStartLine + 1; line < pieceEndLine; line++) {\n                currentLine = (this._EOLNormalized\n                    ? buffer.substring(lineStarts[line], lineStarts[line + 1] - this._EOLLength)\n                    : buffer.substring(lineStarts[line], lineStarts[line + 1]).replace(/(\\r\\n|\\r|\\n)$/, ''));\n                lines[linesLength++] = currentLine;\n            }\n            if (!this._EOLNormalized && buffer.charCodeAt(lineStarts[pieceEndLine] + piece.end.column - 1) === 13 /* CharCode.CarriageReturn */) {\n                danglingCR = true;\n                if (piece.end.column === 0) {\n                    // The last line ended with a \\r, let's undo the push, it will be pushed by next iteration\n                    linesLength--;\n                }\n                else {\n                    currentLine = buffer.substr(lineStarts[pieceEndLine], piece.end.column - 1);\n                }\n            }\n            else {\n                currentLine = buffer.substr(lineStarts[pieceEndLine], piece.end.column);\n            }\n            return true;\n        });\n        if (danglingCR) {\n            lines[linesLength++] = currentLine;\n            currentLine = '';\n        }\n        lines[linesLength++] = currentLine;\n        return lines;\n    }\n    getLength() {\n        return this._length;\n    }\n    getLineCount() {\n        return this._lineCnt;\n    }\n    getLineContent(lineNumber) {\n        if (this._lastVisitedLine.lineNumber === lineNumber) {\n            return this._lastVisitedLine.value;\n        }\n        this._lastVisitedLine.lineNumber = lineNumber;\n        if (lineNumber === this._lineCnt) {\n            this._lastVisitedLine.value = this.getLineRawContent(lineNumber);\n        }\n        else if (this._EOLNormalized) {\n            this._lastVisitedLine.value = this.getLineRawContent(lineNumber, this._EOLLength);\n        }\n        else {\n            this._lastVisitedLine.value = this.getLineRawContent(lineNumber).replace(/(\\r\\n|\\r|\\n)$/, '');\n        }\n        return this._lastVisitedLine.value;\n    }\n    _getCharCode(nodePos) {\n        if (nodePos.remainder === nodePos.node.piece.length) {\n            // the char we want to fetch is at the head of next node.\n            const matchingNode = nodePos.node.next();\n            if (!matchingNode) {\n                return 0;\n            }\n            const buffer = this._buffers[matchingNode.piece.bufferIndex];\n            const startOffset = this.offsetInBuffer(matchingNode.piece.bufferIndex, matchingNode.piece.start);\n            return buffer.buffer.charCodeAt(startOffset);\n        }\n        else {\n            const buffer = this._buffers[nodePos.node.piece.bufferIndex];\n            const startOffset = this.offsetInBuffer(nodePos.node.piece.bufferIndex, nodePos.node.piece.start);\n            const targetOffset = startOffset + nodePos.remainder;\n            return buffer.buffer.charCodeAt(targetOffset);\n        }\n    }\n    getLineCharCode(lineNumber, index) {\n        const nodePos = this.nodeAt2(lineNumber, index + 1);\n        return this._getCharCode(nodePos);\n    }\n    getLineLength(lineNumber) {\n        if (lineNumber === this.getLineCount()) {\n            const startOffset = this.getOffsetAt(lineNumber, 1);\n            return this.getLength() - startOffset;\n        }\n        return this.getOffsetAt(lineNumber + 1, 1) - this.getOffsetAt(lineNumber, 1) - this._EOLLength;\n    }\n    findMatchesInNode(node, searcher, startLineNumber, startColumn, startCursor, endCursor, searchData, captureMatches, limitResultCount, resultLen, result) {\n        const buffer = this._buffers[node.piece.bufferIndex];\n        const startOffsetInBuffer = this.offsetInBuffer(node.piece.bufferIndex, node.piece.start);\n        const start = this.offsetInBuffer(node.piece.bufferIndex, startCursor);\n        const end = this.offsetInBuffer(node.piece.bufferIndex, endCursor);\n        let m;\n        // Reset regex to search from the beginning\n        const ret = { line: 0, column: 0 };\n        let searchText;\n        let offsetInBuffer;\n        if (searcher._wordSeparators) {\n            searchText = buffer.buffer.substring(start, end);\n            offsetInBuffer = (offset) => offset + start;\n            searcher.reset(0);\n        }\n        else {\n            searchText = buffer.buffer;\n            offsetInBuffer = (offset) => offset;\n            searcher.reset(start);\n        }\n        do {\n            m = searcher.next(searchText);\n            if (m) {\n                if (offsetInBuffer(m.index) >= end) {\n                    return resultLen;\n                }\n                this.positionInBuffer(node, offsetInBuffer(m.index) - startOffsetInBuffer, ret);\n                const lineFeedCnt = this.getLineFeedCnt(node.piece.bufferIndex, startCursor, ret);\n                const retStartColumn = ret.line === startCursor.line ? ret.column - startCursor.column + startColumn : ret.column + 1;\n                const retEndColumn = retStartColumn + m[0].length;\n                result[resultLen++] = createFindMatch(new Range(startLineNumber + lineFeedCnt, retStartColumn, startLineNumber + lineFeedCnt, retEndColumn), m, captureMatches);\n                if (offsetInBuffer(m.index) + m[0].length >= end) {\n                    return resultLen;\n                }\n                if (resultLen >= limitResultCount) {\n                    return resultLen;\n                }\n            }\n        } while (m);\n        return resultLen;\n    }\n    findMatchesLineByLine(searchRange, searchData, captureMatches, limitResultCount) {\n        const result = [];\n        let resultLen = 0;\n        const searcher = new Searcher(searchData.wordSeparators, searchData.regex);\n        let startPosition = this.nodeAt2(searchRange.startLineNumber, searchRange.startColumn);\n        if (startPosition === null) {\n            return [];\n        }\n        const endPosition = this.nodeAt2(searchRange.endLineNumber, searchRange.endColumn);\n        if (endPosition === null) {\n            return [];\n        }\n        let start = this.positionInBuffer(startPosition.node, startPosition.remainder);\n        const end = this.positionInBuffer(endPosition.node, endPosition.remainder);\n        if (startPosition.node === endPosition.node) {\n            this.findMatchesInNode(startPosition.node, searcher, searchRange.startLineNumber, searchRange.startColumn, start, end, searchData, captureMatches, limitResultCount, resultLen, result);\n            return result;\n        }\n        let startLineNumber = searchRange.startLineNumber;\n        let currentNode = startPosition.node;\n        while (currentNode !== endPosition.node) {\n            const lineBreakCnt = this.getLineFeedCnt(currentNode.piece.bufferIndex, start, currentNode.piece.end);\n            if (lineBreakCnt >= 1) {\n                // last line break position\n                const lineStarts = this._buffers[currentNode.piece.bufferIndex].lineStarts;\n                const startOffsetInBuffer = this.offsetInBuffer(currentNode.piece.bufferIndex, currentNode.piece.start);\n                const nextLineStartOffset = lineStarts[start.line + lineBreakCnt];\n                const startColumn = startLineNumber === searchRange.startLineNumber ? searchRange.startColumn : 1;\n                resultLen = this.findMatchesInNode(currentNode, searcher, startLineNumber, startColumn, start, this.positionInBuffer(currentNode, nextLineStartOffset - startOffsetInBuffer), searchData, captureMatches, limitResultCount, resultLen, result);\n                if (resultLen >= limitResultCount) {\n                    return result;\n                }\n                startLineNumber += lineBreakCnt;\n            }\n            const startColumn = startLineNumber === searchRange.startLineNumber ? searchRange.startColumn - 1 : 0;\n            // search for the remaining content\n            if (startLineNumber === searchRange.endLineNumber) {\n                const text = this.getLineContent(startLineNumber).substring(startColumn, searchRange.endColumn - 1);\n                resultLen = this._findMatchesInLine(searchData, searcher, text, searchRange.endLineNumber, startColumn, resultLen, result, captureMatches, limitResultCount);\n                return result;\n            }\n            resultLen = this._findMatchesInLine(searchData, searcher, this.getLineContent(startLineNumber).substr(startColumn), startLineNumber, startColumn, resultLen, result, captureMatches, limitResultCount);\n            if (resultLen >= limitResultCount) {\n                return result;\n            }\n            startLineNumber++;\n            startPosition = this.nodeAt2(startLineNumber, 1);\n            currentNode = startPosition.node;\n            start = this.positionInBuffer(startPosition.node, startPosition.remainder);\n        }\n        if (startLineNumber === searchRange.endLineNumber) {\n            const startColumn = startLineNumber === searchRange.startLineNumber ? searchRange.startColumn - 1 : 0;\n            const text = this.getLineContent(startLineNumber).substring(startColumn, searchRange.endColumn - 1);\n            resultLen = this._findMatchesInLine(searchData, searcher, text, searchRange.endLineNumber, startColumn, resultLen, result, captureMatches, limitResultCount);\n            return result;\n        }\n        const startColumn = startLineNumber === searchRange.startLineNumber ? searchRange.startColumn : 1;\n        resultLen = this.findMatchesInNode(endPosition.node, searcher, startLineNumber, startColumn, start, end, searchData, captureMatches, limitResultCount, resultLen, result);\n        return result;\n    }\n    _findMatchesInLine(searchData, searcher, text, lineNumber, deltaOffset, resultLen, result, captureMatches, limitResultCount) {\n        const wordSeparators = searchData.wordSeparators;\n        if (!captureMatches && searchData.simpleSearch) {\n            const searchString = searchData.simpleSearch;\n            const searchStringLen = searchString.length;\n            const textLength = text.length;\n            let lastMatchIndex = -searchStringLen;\n            while ((lastMatchIndex = text.indexOf(searchString, lastMatchIndex + searchStringLen)) !== -1) {\n                if (!wordSeparators || isValidMatch(wordSeparators, text, textLength, lastMatchIndex, searchStringLen)) {\n                    result[resultLen++] = new FindMatch(new Range(lineNumber, lastMatchIndex + 1 + deltaOffset, lineNumber, lastMatchIndex + 1 + searchStringLen + deltaOffset), null);\n                    if (resultLen >= limitResultCount) {\n                        return resultLen;\n                    }\n                }\n            }\n            return resultLen;\n        }\n        let m;\n        // Reset regex to search from the beginning\n        searcher.reset(0);\n        do {\n            m = searcher.next(text);\n            if (m) {\n                result[resultLen++] = createFindMatch(new Range(lineNumber, m.index + 1 + deltaOffset, lineNumber, m.index + 1 + m[0].length + deltaOffset), m, captureMatches);\n                if (resultLen >= limitResultCount) {\n                    return resultLen;\n                }\n            }\n        } while (m);\n        return resultLen;\n    }\n    // #endregion\n    // #region Piece Table\n    insert(offset, value, eolNormalized = false) {\n        this._EOLNormalized = this._EOLNormalized && eolNormalized;\n        this._lastVisitedLine.lineNumber = 0;\n        this._lastVisitedLine.value = '';\n        if (this.root !== SENTINEL) {\n            const { node, remainder, nodeStartOffset } = this.nodeAt(offset);\n            const piece = node.piece;\n            const bufferIndex = piece.bufferIndex;\n            const insertPosInBuffer = this.positionInBuffer(node, remainder);\n            if (node.piece.bufferIndex === 0 &&\n                piece.end.line === this._lastChangeBufferPos.line &&\n                piece.end.column === this._lastChangeBufferPos.column &&\n                (nodeStartOffset + piece.length === offset) &&\n                value.length < AverageBufferSize) {\n                // changed buffer\n                this.appendToNode(node, value);\n                this.computeBufferMetadata();\n                return;\n            }\n            if (nodeStartOffset === offset) {\n                this.insertContentToNodeLeft(value, node);\n                this._searchCache.validate(offset);\n            }\n            else if (nodeStartOffset + node.piece.length > offset) {\n                // we are inserting into the middle of a node.\n                const nodesToDel = [];\n                let newRightPiece = new Piece(piece.bufferIndex, insertPosInBuffer, piece.end, this.getLineFeedCnt(piece.bufferIndex, insertPosInBuffer, piece.end), this.offsetInBuffer(bufferIndex, piece.end) - this.offsetInBuffer(bufferIndex, insertPosInBuffer));\n                if (this.shouldCheckCRLF() && this.endWithCR(value)) {\n                    const headOfRight = this.nodeCharCodeAt(node, remainder);\n                    if (headOfRight === 10 /** \\n */) {\n                        const newStart = { line: newRightPiece.start.line + 1, column: 0 };\n                        newRightPiece = new Piece(newRightPiece.bufferIndex, newStart, newRightPiece.end, this.getLineFeedCnt(newRightPiece.bufferIndex, newStart, newRightPiece.end), newRightPiece.length - 1);\n                        value += '\\n';\n                    }\n                }\n                // reuse node for content before insertion point.\n                if (this.shouldCheckCRLF() && this.startWithLF(value)) {\n                    const tailOfLeft = this.nodeCharCodeAt(node, remainder - 1);\n                    if (tailOfLeft === 13 /** \\r */) {\n                        const previousPos = this.positionInBuffer(node, remainder - 1);\n                        this.deleteNodeTail(node, previousPos);\n                        value = '\\r' + value;\n                        if (node.piece.length === 0) {\n                            nodesToDel.push(node);\n                        }\n                    }\n                    else {\n                        this.deleteNodeTail(node, insertPosInBuffer);\n                    }\n                }\n                else {\n                    this.deleteNodeTail(node, insertPosInBuffer);\n                }\n                const newPieces = this.createNewPieces(value);\n                if (newRightPiece.length > 0) {\n                    this.rbInsertRight(node, newRightPiece);\n                }\n                let tmpNode = node;\n                for (let k = 0; k < newPieces.length; k++) {\n                    tmpNode = this.rbInsertRight(tmpNode, newPieces[k]);\n                }\n                this.deleteNodes(nodesToDel);\n            }\n            else {\n                this.insertContentToNodeRight(value, node);\n            }\n        }\n        else {\n            // insert new node\n            const pieces = this.createNewPieces(value);\n            let node = this.rbInsertLeft(null, pieces[0]);\n            for (let k = 1; k < pieces.length; k++) {\n                node = this.rbInsertRight(node, pieces[k]);\n            }\n        }\n        // todo, this is too brutal. Total line feed count should be updated the same way as lf_left.\n        this.computeBufferMetadata();\n    }\n    delete(offset, cnt) {\n        this._lastVisitedLine.lineNumber = 0;\n        this._lastVisitedLine.value = '';\n        if (cnt <= 0 || this.root === SENTINEL) {\n            return;\n        }\n        const startPosition = this.nodeAt(offset);\n        const endPosition = this.nodeAt(offset + cnt);\n        const startNode = startPosition.node;\n        const endNode = endPosition.node;\n        if (startNode === endNode) {\n            const startSplitPosInBuffer = this.positionInBuffer(startNode, startPosition.remainder);\n            const endSplitPosInBuffer = this.positionInBuffer(startNode, endPosition.remainder);\n            if (startPosition.nodeStartOffset === offset) {\n                if (cnt === startNode.piece.length) { // delete node\n                    const next = startNode.next();\n                    rbDelete(this, startNode);\n                    this.validateCRLFWithPrevNode(next);\n                    this.computeBufferMetadata();\n                    return;\n                }\n                this.deleteNodeHead(startNode, endSplitPosInBuffer);\n                this._searchCache.validate(offset);\n                this.validateCRLFWithPrevNode(startNode);\n                this.computeBufferMetadata();\n                return;\n            }\n            if (startPosition.nodeStartOffset + startNode.piece.length === offset + cnt) {\n                this.deleteNodeTail(startNode, startSplitPosInBuffer);\n                this.validateCRLFWithNextNode(startNode);\n                this.computeBufferMetadata();\n                return;\n            }\n            // delete content in the middle, this node will be splitted to nodes\n            this.shrinkNode(startNode, startSplitPosInBuffer, endSplitPosInBuffer);\n            this.computeBufferMetadata();\n            return;\n        }\n        const nodesToDel = [];\n        const startSplitPosInBuffer = this.positionInBuffer(startNode, startPosition.remainder);\n        this.deleteNodeTail(startNode, startSplitPosInBuffer);\n        this._searchCache.validate(offset);\n        if (startNode.piece.length === 0) {\n            nodesToDel.push(startNode);\n        }\n        // update last touched node\n        const endSplitPosInBuffer = this.positionInBuffer(endNode, endPosition.remainder);\n        this.deleteNodeHead(endNode, endSplitPosInBuffer);\n        if (endNode.piece.length === 0) {\n            nodesToDel.push(endNode);\n        }\n        // delete nodes in between\n        const secondNode = startNode.next();\n        for (let node = secondNode; node !== SENTINEL && node !== endNode; node = node.next()) {\n            nodesToDel.push(node);\n        }\n        const prev = startNode.piece.length === 0 ? startNode.prev() : startNode;\n        this.deleteNodes(nodesToDel);\n        this.validateCRLFWithNextNode(prev);\n        this.computeBufferMetadata();\n    }\n    insertContentToNodeLeft(value, node) {\n        // we are inserting content to the beginning of node\n        const nodesToDel = [];\n        if (this.shouldCheckCRLF() && this.endWithCR(value) && this.startWithLF(node)) {\n            // move `\\n` to new node.\n            const piece = node.piece;\n            const newStart = { line: piece.start.line + 1, column: 0 };\n            const nPiece = new Piece(piece.bufferIndex, newStart, piece.end, this.getLineFeedCnt(piece.bufferIndex, newStart, piece.end), piece.length - 1);\n            node.piece = nPiece;\n            value += '\\n';\n            updateTreeMetadata(this, node, -1, -1);\n            if (node.piece.length === 0) {\n                nodesToDel.push(node);\n            }\n        }\n        const newPieces = this.createNewPieces(value);\n        let newNode = this.rbInsertLeft(node, newPieces[newPieces.length - 1]);\n        for (let k = newPieces.length - 2; k >= 0; k--) {\n            newNode = this.rbInsertLeft(newNode, newPieces[k]);\n        }\n        this.validateCRLFWithPrevNode(newNode);\n        this.deleteNodes(nodesToDel);\n    }\n    insertContentToNodeRight(value, node) {\n        // we are inserting to the right of this node.\n        if (this.adjustCarriageReturnFromNext(value, node)) {\n            // move \\n to the new node.\n            value += '\\n';\n        }\n        const newPieces = this.createNewPieces(value);\n        const newNode = this.rbInsertRight(node, newPieces[0]);\n        let tmpNode = newNode;\n        for (let k = 1; k < newPieces.length; k++) {\n            tmpNode = this.rbInsertRight(tmpNode, newPieces[k]);\n        }\n        this.validateCRLFWithPrevNode(newNode);\n    }\n    positionInBuffer(node, remainder, ret) {\n        const piece = node.piece;\n        const bufferIndex = node.piece.bufferIndex;\n        const lineStarts = this._buffers[bufferIndex].lineStarts;\n        const startOffset = lineStarts[piece.start.line] + piece.start.column;\n        const offset = startOffset + remainder;\n        // binary search offset between startOffset and endOffset\n        let low = piece.start.line;\n        let high = piece.end.line;\n        let mid = 0;\n        let midStop = 0;\n        let midStart = 0;\n        while (low <= high) {\n            mid = low + ((high - low) / 2) | 0;\n            midStart = lineStarts[mid];\n            if (mid === high) {\n                break;\n            }\n            midStop = lineStarts[mid + 1];\n            if (offset < midStart) {\n                high = mid - 1;\n            }\n            else if (offset >= midStop) {\n                low = mid + 1;\n            }\n            else {\n                break;\n            }\n        }\n        if (ret) {\n            ret.line = mid;\n            ret.column = offset - midStart;\n            return null;\n        }\n        return {\n            line: mid,\n            column: offset - midStart\n        };\n    }\n    getLineFeedCnt(bufferIndex, start, end) {\n        // we don't need to worry about start: abc\\r|\\n, or abc|\\r, or abc|\\n, or abc|\\r\\n doesn't change the fact that, there is one line break after start.\n        // now let's take care of end: abc\\r|\\n, if end is in between \\r and \\n, we need to add line feed count by 1\n        if (end.column === 0) {\n            return end.line - start.line;\n        }\n        const lineStarts = this._buffers[bufferIndex].lineStarts;\n        if (end.line === lineStarts.length - 1) { // it means, there is no \\n after end, otherwise, there will be one more lineStart.\n            return end.line - start.line;\n        }\n        const nextLineStartOffset = lineStarts[end.line + 1];\n        const endOffset = lineStarts[end.line] + end.column;\n        if (nextLineStartOffset > endOffset + 1) { // there are more than 1 character after end, which means it can't be \\n\n            return end.line - start.line;\n        }\n        // endOffset + 1 === nextLineStartOffset\n        // character at endOffset is \\n, so we check the character before first\n        // if character at endOffset is \\r, end.column is 0 and we can't get here.\n        const previousCharOffset = endOffset - 1; // end.column > 0 so it's okay.\n        const buffer = this._buffers[bufferIndex].buffer;\n        if (buffer.charCodeAt(previousCharOffset) === 13) {\n            return end.line - start.line + 1;\n        }\n        else {\n            return end.line - start.line;\n        }\n    }\n    offsetInBuffer(bufferIndex, cursor) {\n        const lineStarts = this._buffers[bufferIndex].lineStarts;\n        return lineStarts[cursor.line] + cursor.column;\n    }\n    deleteNodes(nodes) {\n        for (let i = 0; i < nodes.length; i++) {\n            rbDelete(this, nodes[i]);\n        }\n    }\n    createNewPieces(text) {\n        if (text.length > AverageBufferSize) {\n            // the content is large, operations like substring, charCode becomes slow\n            // so here we split it into smaller chunks, just like what we did for CR/LF normalization\n            const newPieces = [];\n            while (text.length > AverageBufferSize) {\n                const lastChar = text.charCodeAt(AverageBufferSize - 1);\n                let splitText;\n                if (lastChar === 13 /* CharCode.CarriageReturn */ || (lastChar >= 0xD800 && lastChar <= 0xDBFF)) {\n                    // last character is \\r or a high surrogate => keep it back\n                    splitText = text.substring(0, AverageBufferSize - 1);\n                    text = text.substring(AverageBufferSize - 1);\n                }\n                else {\n                    splitText = text.substring(0, AverageBufferSize);\n                    text = text.substring(AverageBufferSize);\n                }\n                const lineStarts = createLineStartsFast(splitText);\n                newPieces.push(new Piece(this._buffers.length, /* buffer index */ { line: 0, column: 0 }, { line: lineStarts.length - 1, column: splitText.length - lineStarts[lineStarts.length - 1] }, lineStarts.length - 1, splitText.length));\n                this._buffers.push(new StringBuffer(splitText, lineStarts));\n            }\n            const lineStarts = createLineStartsFast(text);\n            newPieces.push(new Piece(this._buffers.length, /* buffer index */ { line: 0, column: 0 }, { line: lineStarts.length - 1, column: text.length - lineStarts[lineStarts.length - 1] }, lineStarts.length - 1, text.length));\n            this._buffers.push(new StringBuffer(text, lineStarts));\n            return newPieces;\n        }\n        let startOffset = this._buffers[0].buffer.length;\n        const lineStarts = createLineStartsFast(text, false);\n        let start = this._lastChangeBufferPos;\n        if (this._buffers[0].lineStarts[this._buffers[0].lineStarts.length - 1] === startOffset\n            && startOffset !== 0\n            && this.startWithLF(text)\n            && this.endWithCR(this._buffers[0].buffer) // todo, we can check this._lastChangeBufferPos's column as it's the last one\n        ) {\n            this._lastChangeBufferPos = { line: this._lastChangeBufferPos.line, column: this._lastChangeBufferPos.column + 1 };\n            start = this._lastChangeBufferPos;\n            for (let i = 0; i < lineStarts.length; i++) {\n                lineStarts[i] += startOffset + 1;\n            }\n            this._buffers[0].lineStarts = this._buffers[0].lineStarts.concat(lineStarts.slice(1));\n            this._buffers[0].buffer += '_' + text;\n            startOffset += 1;\n        }\n        else {\n            if (startOffset !== 0) {\n                for (let i = 0; i < lineStarts.length; i++) {\n                    lineStarts[i] += startOffset;\n                }\n            }\n            this._buffers[0].lineStarts = this._buffers[0].lineStarts.concat(lineStarts.slice(1));\n            this._buffers[0].buffer += text;\n        }\n        const endOffset = this._buffers[0].buffer.length;\n        const endIndex = this._buffers[0].lineStarts.length - 1;\n        const endColumn = endOffset - this._buffers[0].lineStarts[endIndex];\n        const endPos = { line: endIndex, column: endColumn };\n        const newPiece = new Piece(0, /** todo@peng */ start, endPos, this.getLineFeedCnt(0, start, endPos), endOffset - startOffset);\n        this._lastChangeBufferPos = endPos;\n        return [newPiece];\n    }\n    getLineRawContent(lineNumber, endOffset = 0) {\n        let x = this.root;\n        let ret = '';\n        const cache = this._searchCache.get2(lineNumber);\n        if (cache) {\n            x = cache.node;\n            const prevAccumulatedValue = this.getAccumulatedValue(x, lineNumber - cache.nodeStartLineNumber - 1);\n            const buffer = this._buffers[x.piece.bufferIndex].buffer;\n            const startOffset = this.offsetInBuffer(x.piece.bufferIndex, x.piece.start);\n            if (cache.nodeStartLineNumber + x.piece.lineFeedCnt === lineNumber) {\n                ret = buffer.substring(startOffset + prevAccumulatedValue, startOffset + x.piece.length);\n            }\n            else {\n                const accumulatedValue = this.getAccumulatedValue(x, lineNumber - cache.nodeStartLineNumber);\n                return buffer.substring(startOffset + prevAccumulatedValue, startOffset + accumulatedValue - endOffset);\n            }\n        }\n        else {\n            let nodeStartOffset = 0;\n            const originalLineNumber = lineNumber;\n            while (x !== SENTINEL) {\n                if (x.left !== SENTINEL && x.lf_left >= lineNumber - 1) {\n                    x = x.left;\n                }\n                else if (x.lf_left + x.piece.lineFeedCnt > lineNumber - 1) {\n                    const prevAccumulatedValue = this.getAccumulatedValue(x, lineNumber - x.lf_left - 2);\n                    const accumulatedValue = this.getAccumulatedValue(x, lineNumber - x.lf_left - 1);\n                    const buffer = this._buffers[x.piece.bufferIndex].buffer;\n                    const startOffset = this.offsetInBuffer(x.piece.bufferIndex, x.piece.start);\n                    nodeStartOffset += x.size_left;\n                    this._searchCache.set({\n                        node: x,\n                        nodeStartOffset,\n                        nodeStartLineNumber: originalLineNumber - (lineNumber - 1 - x.lf_left)\n                    });\n                    return buffer.substring(startOffset + prevAccumulatedValue, startOffset + accumulatedValue - endOffset);\n                }\n                else if (x.lf_left + x.piece.lineFeedCnt === lineNumber - 1) {\n                    const prevAccumulatedValue = this.getAccumulatedValue(x, lineNumber - x.lf_left - 2);\n                    const buffer = this._buffers[x.piece.bufferIndex].buffer;\n                    const startOffset = this.offsetInBuffer(x.piece.bufferIndex, x.piece.start);\n                    ret = buffer.substring(startOffset + prevAccumulatedValue, startOffset + x.piece.length);\n                    break;\n                }\n                else {\n                    lineNumber -= x.lf_left + x.piece.lineFeedCnt;\n                    nodeStartOffset += x.size_left + x.piece.length;\n                    x = x.right;\n                }\n            }\n        }\n        // search in order, to find the node contains end column\n        x = x.next();\n        while (x !== SENTINEL) {\n            const buffer = this._buffers[x.piece.bufferIndex].buffer;\n            if (x.piece.lineFeedCnt > 0) {\n                const accumulatedValue = this.getAccumulatedValue(x, 0);\n                const startOffset = this.offsetInBuffer(x.piece.bufferIndex, x.piece.start);\n                ret += buffer.substring(startOffset, startOffset + accumulatedValue - endOffset);\n                return ret;\n            }\n            else {\n                const startOffset = this.offsetInBuffer(x.piece.bufferIndex, x.piece.start);\n                ret += buffer.substr(startOffset, x.piece.length);\n            }\n            x = x.next();\n        }\n        return ret;\n    }\n    computeBufferMetadata() {\n        let x = this.root;\n        let lfCnt = 1;\n        let len = 0;\n        while (x !== SENTINEL) {\n            lfCnt += x.lf_left + x.piece.lineFeedCnt;\n            len += x.size_left + x.piece.length;\n            x = x.right;\n        }\n        this._lineCnt = lfCnt;\n        this._length = len;\n        this._searchCache.validate(this._length);\n    }\n    // #region node operations\n    getIndexOf(node, accumulatedValue) {\n        const piece = node.piece;\n        const pos = this.positionInBuffer(node, accumulatedValue);\n        const lineCnt = pos.line - piece.start.line;\n        if (this.offsetInBuffer(piece.bufferIndex, piece.end) - this.offsetInBuffer(piece.bufferIndex, piece.start) === accumulatedValue) {\n            // we are checking the end of this node, so a CRLF check is necessary.\n            const realLineCnt = this.getLineFeedCnt(node.piece.bufferIndex, piece.start, pos);\n            if (realLineCnt !== lineCnt) {\n                // aha yes, CRLF\n                return { index: realLineCnt, remainder: 0 };\n            }\n        }\n        return { index: lineCnt, remainder: pos.column };\n    }\n    getAccumulatedValue(node, index) {\n        if (index < 0) {\n            return 0;\n        }\n        const piece = node.piece;\n        const lineStarts = this._buffers[piece.bufferIndex].lineStarts;\n        const expectedLineStartIndex = piece.start.line + index + 1;\n        if (expectedLineStartIndex > piece.end.line) {\n            return lineStarts[piece.end.line] + piece.end.column - lineStarts[piece.start.line] - piece.start.column;\n        }\n        else {\n            return lineStarts[expectedLineStartIndex] - lineStarts[piece.start.line] - piece.start.column;\n        }\n    }\n    deleteNodeTail(node, pos) {\n        const piece = node.piece;\n        const originalLFCnt = piece.lineFeedCnt;\n        const originalEndOffset = this.offsetInBuffer(piece.bufferIndex, piece.end);\n        const newEnd = pos;\n        const newEndOffset = this.offsetInBuffer(piece.bufferIndex, newEnd);\n        const newLineFeedCnt = this.getLineFeedCnt(piece.bufferIndex, piece.start, newEnd);\n        const lf_delta = newLineFeedCnt - originalLFCnt;\n        const size_delta = newEndOffset - originalEndOffset;\n        const newLength = piece.length + size_delta;\n        node.piece = new Piece(piece.bufferIndex, piece.start, newEnd, newLineFeedCnt, newLength);\n        updateTreeMetadata(this, node, size_delta, lf_delta);\n    }\n    deleteNodeHead(node, pos) {\n        const piece = node.piece;\n        const originalLFCnt = piece.lineFeedCnt;\n        const originalStartOffset = this.offsetInBuffer(piece.bufferIndex, piece.start);\n        const newStart = pos;\n        const newLineFeedCnt = this.getLineFeedCnt(piece.bufferIndex, newStart, piece.end);\n        const newStartOffset = this.offsetInBuffer(piece.bufferIndex, newStart);\n        const lf_delta = newLineFeedCnt - originalLFCnt;\n        const size_delta = originalStartOffset - newStartOffset;\n        const newLength = piece.length + size_delta;\n        node.piece = new Piece(piece.bufferIndex, newStart, piece.end, newLineFeedCnt, newLength);\n        updateTreeMetadata(this, node, size_delta, lf_delta);\n    }\n    shrinkNode(node, start, end) {\n        const piece = node.piece;\n        const originalStartPos = piece.start;\n        const originalEndPos = piece.end;\n        // old piece, originalStartPos, start\n        const oldLength = piece.length;\n        const oldLFCnt = piece.lineFeedCnt;\n        const newEnd = start;\n        const newLineFeedCnt = this.getLineFeedCnt(piece.bufferIndex, piece.start, newEnd);\n        const newLength = this.offsetInBuffer(piece.bufferIndex, start) - this.offsetInBuffer(piece.bufferIndex, originalStartPos);\n        node.piece = new Piece(piece.bufferIndex, piece.start, newEnd, newLineFeedCnt, newLength);\n        updateTreeMetadata(this, node, newLength - oldLength, newLineFeedCnt - oldLFCnt);\n        // new right piece, end, originalEndPos\n        const newPiece = new Piece(piece.bufferIndex, end, originalEndPos, this.getLineFeedCnt(piece.bufferIndex, end, originalEndPos), this.offsetInBuffer(piece.bufferIndex, originalEndPos) - this.offsetInBuffer(piece.bufferIndex, end));\n        const newNode = this.rbInsertRight(node, newPiece);\n        this.validateCRLFWithPrevNode(newNode);\n    }\n    appendToNode(node, value) {\n        if (this.adjustCarriageReturnFromNext(value, node)) {\n            value += '\\n';\n        }\n        const hitCRLF = this.shouldCheckCRLF() && this.startWithLF(value) && this.endWithCR(node);\n        const startOffset = this._buffers[0].buffer.length;\n        this._buffers[0].buffer += value;\n        const lineStarts = createLineStartsFast(value, false);\n        for (let i = 0; i < lineStarts.length; i++) {\n            lineStarts[i] += startOffset;\n        }\n        if (hitCRLF) {\n            const prevStartOffset = this._buffers[0].lineStarts[this._buffers[0].lineStarts.length - 2];\n            this._buffers[0].lineStarts.pop();\n            // _lastChangeBufferPos is already wrong\n            this._lastChangeBufferPos = { line: this._lastChangeBufferPos.line - 1, column: startOffset - prevStartOffset };\n        }\n        this._buffers[0].lineStarts = this._buffers[0].lineStarts.concat(lineStarts.slice(1));\n        const endIndex = this._buffers[0].lineStarts.length - 1;\n        const endColumn = this._buffers[0].buffer.length - this._buffers[0].lineStarts[endIndex];\n        const newEnd = { line: endIndex, column: endColumn };\n        const newLength = node.piece.length + value.length;\n        const oldLineFeedCnt = node.piece.lineFeedCnt;\n        const newLineFeedCnt = this.getLineFeedCnt(0, node.piece.start, newEnd);\n        const lf_delta = newLineFeedCnt - oldLineFeedCnt;\n        node.piece = new Piece(node.piece.bufferIndex, node.piece.start, newEnd, newLineFeedCnt, newLength);\n        this._lastChangeBufferPos = newEnd;\n        updateTreeMetadata(this, node, value.length, lf_delta);\n    }\n    nodeAt(offset) {\n        let x = this.root;\n        const cache = this._searchCache.get(offset);\n        if (cache) {\n            return {\n                node: cache.node,\n                nodeStartOffset: cache.nodeStartOffset,\n                remainder: offset - cache.nodeStartOffset\n            };\n        }\n        let nodeStartOffset = 0;\n        while (x !== SENTINEL) {\n            if (x.size_left > offset) {\n                x = x.left;\n            }\n            else if (x.size_left + x.piece.length >= offset) {\n                nodeStartOffset += x.size_left;\n                const ret = {\n                    node: x,\n                    remainder: offset - x.size_left,\n                    nodeStartOffset\n                };\n                this._searchCache.set(ret);\n                return ret;\n            }\n            else {\n                offset -= x.size_left + x.piece.length;\n                nodeStartOffset += x.size_left + x.piece.length;\n                x = x.right;\n            }\n        }\n        return null;\n    }\n    nodeAt2(lineNumber, column) {\n        let x = this.root;\n        let nodeStartOffset = 0;\n        while (x !== SENTINEL) {\n            if (x.left !== SENTINEL && x.lf_left >= lineNumber - 1) {\n                x = x.left;\n            }\n            else if (x.lf_left + x.piece.lineFeedCnt > lineNumber - 1) {\n                const prevAccumualtedValue = this.getAccumulatedValue(x, lineNumber - x.lf_left - 2);\n                const accumulatedValue = this.getAccumulatedValue(x, lineNumber - x.lf_left - 1);\n                nodeStartOffset += x.size_left;\n                return {\n                    node: x,\n                    remainder: Math.min(prevAccumualtedValue + column - 1, accumulatedValue),\n                    nodeStartOffset\n                };\n            }\n            else if (x.lf_left + x.piece.lineFeedCnt === lineNumber - 1) {\n                const prevAccumualtedValue = this.getAccumulatedValue(x, lineNumber - x.lf_left - 2);\n                if (prevAccumualtedValue + column - 1 <= x.piece.length) {\n                    return {\n                        node: x,\n                        remainder: prevAccumualtedValue + column - 1,\n                        nodeStartOffset\n                    };\n                }\n                else {\n                    column -= x.piece.length - prevAccumualtedValue;\n                    break;\n                }\n            }\n            else {\n                lineNumber -= x.lf_left + x.piece.lineFeedCnt;\n                nodeStartOffset += x.size_left + x.piece.length;\n                x = x.right;\n            }\n        }\n        // search in order, to find the node contains position.column\n        x = x.next();\n        while (x !== SENTINEL) {\n            if (x.piece.lineFeedCnt > 0) {\n                const accumulatedValue = this.getAccumulatedValue(x, 0);\n                const nodeStartOffset = this.offsetOfNode(x);\n                return {\n                    node: x,\n                    remainder: Math.min(column - 1, accumulatedValue),\n                    nodeStartOffset\n                };\n            }\n            else {\n                if (x.piece.length >= column - 1) {\n                    const nodeStartOffset = this.offsetOfNode(x);\n                    return {\n                        node: x,\n                        remainder: column - 1,\n                        nodeStartOffset\n                    };\n                }\n                else {\n                    column -= x.piece.length;\n                }\n            }\n            x = x.next();\n        }\n        return null;\n    }\n    nodeCharCodeAt(node, offset) {\n        if (node.piece.lineFeedCnt < 1) {\n            return -1;\n        }\n        const buffer = this._buffers[node.piece.bufferIndex];\n        const newOffset = this.offsetInBuffer(node.piece.bufferIndex, node.piece.start) + offset;\n        return buffer.buffer.charCodeAt(newOffset);\n    }\n    offsetOfNode(node) {\n        if (!node) {\n            return 0;\n        }\n        let pos = node.size_left;\n        while (node !== this.root) {\n            if (node.parent.right === node) {\n                pos += node.parent.size_left + node.parent.piece.length;\n            }\n            node = node.parent;\n        }\n        return pos;\n    }\n    // #endregion\n    // #region CRLF\n    shouldCheckCRLF() {\n        return !(this._EOLNormalized && this._EOL === '\\n');\n    }\n    startWithLF(val) {\n        if (typeof val === 'string') {\n            return val.charCodeAt(0) === 10;\n        }\n        if (val === SENTINEL || val.piece.lineFeedCnt === 0) {\n            return false;\n        }\n        const piece = val.piece;\n        const lineStarts = this._buffers[piece.bufferIndex].lineStarts;\n        const line = piece.start.line;\n        const startOffset = lineStarts[line] + piece.start.column;\n        if (line === lineStarts.length - 1) {\n            // last line, so there is no line feed at the end of this line\n            return false;\n        }\n        const nextLineOffset = lineStarts[line + 1];\n        if (nextLineOffset > startOffset + 1) {\n            return false;\n        }\n        return this._buffers[piece.bufferIndex].buffer.charCodeAt(startOffset) === 10;\n    }\n    endWithCR(val) {\n        if (typeof val === 'string') {\n            return val.charCodeAt(val.length - 1) === 13;\n        }\n        if (val === SENTINEL || val.piece.lineFeedCnt === 0) {\n            return false;\n        }\n        return this.nodeCharCodeAt(val, val.piece.length - 1) === 13;\n    }\n    validateCRLFWithPrevNode(nextNode) {\n        if (this.shouldCheckCRLF() && this.startWithLF(nextNode)) {\n            const node = nextNode.prev();\n            if (this.endWithCR(node)) {\n                this.fixCRLF(node, nextNode);\n            }\n        }\n    }\n    validateCRLFWithNextNode(node) {\n        if (this.shouldCheckCRLF() && this.endWithCR(node)) {\n            const nextNode = node.next();\n            if (this.startWithLF(nextNode)) {\n                this.fixCRLF(node, nextNode);\n            }\n        }\n    }\n    fixCRLF(prev, next) {\n        const nodesToDel = [];\n        // update node\n        const lineStarts = this._buffers[prev.piece.bufferIndex].lineStarts;\n        let newEnd;\n        if (prev.piece.end.column === 0) {\n            // it means, last line ends with \\r, not \\r\\n\n            newEnd = { line: prev.piece.end.line - 1, column: lineStarts[prev.piece.end.line] - lineStarts[prev.piece.end.line - 1] - 1 };\n        }\n        else {\n            // \\r\\n\n            newEnd = { line: prev.piece.end.line, column: prev.piece.end.column - 1 };\n        }\n        const prevNewLength = prev.piece.length - 1;\n        const prevNewLFCnt = prev.piece.lineFeedCnt - 1;\n        prev.piece = new Piece(prev.piece.bufferIndex, prev.piece.start, newEnd, prevNewLFCnt, prevNewLength);\n        updateTreeMetadata(this, prev, -1, -1);\n        if (prev.piece.length === 0) {\n            nodesToDel.push(prev);\n        }\n        // update nextNode\n        const newStart = { line: next.piece.start.line + 1, column: 0 };\n        const newLength = next.piece.length - 1;\n        const newLineFeedCnt = this.getLineFeedCnt(next.piece.bufferIndex, newStart, next.piece.end);\n        next.piece = new Piece(next.piece.bufferIndex, newStart, next.piece.end, newLineFeedCnt, newLength);\n        updateTreeMetadata(this, next, -1, -1);\n        if (next.piece.length === 0) {\n            nodesToDel.push(next);\n        }\n        // create new piece which contains \\r\\n\n        const pieces = this.createNewPieces('\\r\\n');\n        this.rbInsertRight(prev, pieces[0]);\n        // delete empty nodes\n        for (let i = 0; i < nodesToDel.length; i++) {\n            rbDelete(this, nodesToDel[i]);\n        }\n    }\n    adjustCarriageReturnFromNext(value, node) {\n        if (this.shouldCheckCRLF() && this.endWithCR(value)) {\n            const nextNode = node.next();\n            if (this.startWithLF(nextNode)) {\n                // move `\\n` forward\n                value += '\\n';\n                if (nextNode.piece.length === 1) {\n                    rbDelete(this, nextNode);\n                }\n                else {\n                    const piece = nextNode.piece;\n                    const newStart = { line: piece.start.line + 1, column: 0 };\n                    const newLength = piece.length - 1;\n                    const newLineFeedCnt = this.getLineFeedCnt(piece.bufferIndex, newStart, piece.end);\n                    nextNode.piece = new Piece(piece.bufferIndex, newStart, piece.end, newLineFeedCnt, newLength);\n                    updateTreeMetadata(this, nextNode, -1, -1);\n                }\n                return true;\n            }\n        }\n        return false;\n    }\n    // #endregion\n    // #endregion\n    // #region Tree operations\n    iterate(node, callback) {\n        if (node === SENTINEL) {\n            return callback(SENTINEL);\n        }\n        const leftRet = this.iterate(node.left, callback);\n        if (!leftRet) {\n            return leftRet;\n        }\n        return callback(node) && this.iterate(node.right, callback);\n    }\n    getNodeContent(node) {\n        if (node === SENTINEL) {\n            return '';\n        }\n        const buffer = this._buffers[node.piece.bufferIndex];\n        const piece = node.piece;\n        const startOffset = this.offsetInBuffer(piece.bufferIndex, piece.start);\n        const endOffset = this.offsetInBuffer(piece.bufferIndex, piece.end);\n        const currentContent = buffer.buffer.substring(startOffset, endOffset);\n        return currentContent;\n    }\n    getPieceContent(piece) {\n        const buffer = this._buffers[piece.bufferIndex];\n        const startOffset = this.offsetInBuffer(piece.bufferIndex, piece.start);\n        const endOffset = this.offsetInBuffer(piece.bufferIndex, piece.end);\n        const currentContent = buffer.buffer.substring(startOffset, endOffset);\n        return currentContent;\n    }\n    /**\n     *      node              node\n     *     /  \\              /  \\\n     *    a   b    <----   a    b\n     *                         /\n     *                        z\n     */\n    rbInsertRight(node, p) {\n        const z = new TreeNode(p, 1 /* NodeColor.Red */);\n        z.left = SENTINEL;\n        z.right = SENTINEL;\n        z.parent = SENTINEL;\n        z.size_left = 0;\n        z.lf_left = 0;\n        const x = this.root;\n        if (x === SENTINEL) {\n            this.root = z;\n            z.color = 0 /* NodeColor.Black */;\n        }\n        else if (node.right === SENTINEL) {\n            node.right = z;\n            z.parent = node;\n        }\n        else {\n            const nextNode = leftest(node.right);\n            nextNode.left = z;\n            z.parent = nextNode;\n        }\n        fixInsert(this, z);\n        return z;\n    }\n    /**\n     *      node              node\n     *     /  \\              /  \\\n     *    a   b     ---->   a    b\n     *                       \\\n     *                        z\n     */\n    rbInsertLeft(node, p) {\n        const z = new TreeNode(p, 1 /* NodeColor.Red */);\n        z.left = SENTINEL;\n        z.right = SENTINEL;\n        z.parent = SENTINEL;\n        z.size_left = 0;\n        z.lf_left = 0;\n        if (this.root === SENTINEL) {\n            this.root = z;\n            z.color = 0 /* NodeColor.Black */;\n        }\n        else if (node.left === SENTINEL) {\n            node.left = z;\n            z.parent = node;\n        }\n        else {\n            const prevNode = righttest(node.left); // a\n            prevNode.right = z;\n            z.parent = prevNode;\n        }\n        fixInsert(this, z);\n        return z;\n    }\n}\n"],"mappings":"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"}]}