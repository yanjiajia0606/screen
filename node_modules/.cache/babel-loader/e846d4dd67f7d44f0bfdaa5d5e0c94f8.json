{"remainingRequest":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/thread-loader/dist/cjs.js!/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js!/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/common/model/textModelTokens.js","dependencies":[{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/common/model/textModelTokens.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/babel.config.js","mtime":1668271197000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js","mtime":456789000000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["arrays","onUnexpectedError","LineTokens","TokenizationRegistry","nullTokenizeEncoded","Disposable","StopWatch","countEOL","ContiguousMultilineTokensBuilder","runWhenIdle","setTimeout0","ContiguousGrowingArray","_default","_store","index","length","value","deleteIndex","deleteCount","splice","insertIndex","insertCount","arr","i","arrayInsert","TokenizationStateStore","tokenizationSupport","initialState","_lineBeginState","_lineNeedsTokenization","_firstLineNeedsTokenization","set","lineIndex","Math","min","get","linesLength","endState","previousEndState","equals","markMustBeTokenized","range","eolCount","startLineNumber","delete","endLineNumber","insert","TextModelTokenization","_textModel","_tokenizationPart","_languageIdCodec","_isScheduled","_isDisposed","_tokenizationStateStore","_register","onDidChange","e","languageId","getLanguageId","changedLanguages","indexOf","_resetTokenizationState","clearTokens","isFlush","len","changes","change","text","applyEdits","_beginBackgroundTokenization","initializeTokenization","isAttachedToEditor","_hasLinesToTokenize","deadline","_backgroundTokenizeWithDeadline","endTime","Date","now","timeRemaining","execute","_backgroundTokenizeForAtLeast1ms","lineCount","getLineCount","builder","sw","create","elapsed","tokenizedLineNumber","_tokenizeOneInvalidLine","setTokens","finalize","_isTokenizationComplete","_tokenizeViewport","lineNumber","_updateTokensUntilLine","position","character","forceTokenization","lineStartState","getBeginState","lineContent","getLineContent","substring","column","r","safeTokenize","lineTokens","tokens","getCount","tokenIndex","findTokenIndexAtOffset","getStandardTokenType","newText","curLineContent","newLineContent","getLanguageIdAtPosition","result","firstInvalidLineNumber","invalidLineStartIndex","getLineLength","endLineIndex","add","setEndState","nonWhitespaceColumn","getLineFirstNonWhitespaceColumn","fakeLines","newNonWhitespaceIndex","push","state","textModel","tokenizationPart","isTooLargeForTokenization","getInitialState","languageIdCodec","hasEOL","tokenizeEncoded","clone","encodeLanguageId","convertToEndOffset"],"sources":["/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/common/model/textModelTokens.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as arrays from '../../../base/common/arrays.js';\nimport { onUnexpectedError } from '../../../base/common/errors.js';\nimport { LineTokens } from '../tokens/lineTokens.js';\nimport { TokenizationRegistry } from '../languages.js';\nimport { nullTokenizeEncoded } from '../languages/nullTokenize.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { StopWatch } from '../../../base/common/stopwatch.js';\nimport { countEOL } from '../core/eolCounter.js';\nimport { ContiguousMultilineTokensBuilder } from '../tokens/contiguousMultilineTokensBuilder.js';\nimport { runWhenIdle } from '../../../base/common/async.js';\nimport { setTimeout0 } from '../../../base/common/platform.js';\n/**\n * An array that avoids being sparse by always\n * filling up unused indices with a default value.\n */\nclass ContiguousGrowingArray {\n    constructor(_default) {\n        this._default = _default;\n        this._store = [];\n    }\n    get(index) {\n        if (index < this._store.length) {\n            return this._store[index];\n        }\n        return this._default;\n    }\n    set(index, value) {\n        while (index >= this._store.length) {\n            this._store[this._store.length] = this._default;\n        }\n        this._store[index] = value;\n    }\n    delete(deleteIndex, deleteCount) {\n        if (deleteCount === 0 || deleteIndex >= this._store.length) {\n            return;\n        }\n        this._store.splice(deleteIndex, deleteCount);\n    }\n    insert(insertIndex, insertCount) {\n        if (insertCount === 0 || insertIndex >= this._store.length) {\n            return;\n        }\n        const arr = [];\n        for (let i = 0; i < insertCount; i++) {\n            arr[i] = this._default;\n        }\n        this._store = arrays.arrayInsert(this._store, insertIndex, arr);\n    }\n}\n/**\n * Stores the states at the start of each line and keeps track of which lines\n * must be retokenized. Also uses state equality to quickly validate lines\n * that don't need to be retokenized.\n *\n * For example, when typing on a line, the line gets marked as needing to be tokenized.\n * Once the line is tokenized, the end state is checked for equality against the begin\n * state of the next line. If the states are equal, tokenization doesn't need to run\n * again over the rest of the file. If the states are not equal, the next line gets marked\n * as needing to be tokenized.\n */\nexport class TokenizationStateStore {\n    constructor(tokenizationSupport, initialState) {\n        this.tokenizationSupport = tokenizationSupport;\n        this.initialState = initialState;\n        /**\n         * `lineBeginState[i]` contains the begin state used to tokenize line number `i + 1`.\n         */\n        this._lineBeginState = new ContiguousGrowingArray(null);\n        /**\n         * `lineNeedsTokenization[i]` describes if line number `i + 1` needs to be tokenized.\n         */\n        this._lineNeedsTokenization = new ContiguousGrowingArray(true);\n        this._firstLineNeedsTokenization = 0;\n        this._lineBeginState.set(0, this.initialState);\n    }\n    get invalidLineStartIndex() {\n        return this._firstLineNeedsTokenization;\n    }\n    markMustBeTokenized(lineIndex) {\n        this._lineNeedsTokenization.set(lineIndex, true);\n        this._firstLineNeedsTokenization = Math.min(this._firstLineNeedsTokenization, lineIndex);\n    }\n    getBeginState(lineIndex) {\n        return this._lineBeginState.get(lineIndex);\n    }\n    setEndState(linesLength, lineIndex, endState) {\n        this._lineNeedsTokenization.set(lineIndex, false);\n        this._firstLineNeedsTokenization = lineIndex + 1;\n        // Check if this was the last line\n        if (lineIndex === linesLength - 1) {\n            return;\n        }\n        // Check if the end state has changed\n        const previousEndState = this._lineBeginState.get(lineIndex + 1);\n        if (previousEndState === null || !endState.equals(previousEndState)) {\n            this._lineBeginState.set(lineIndex + 1, endState);\n            this.markMustBeTokenized(lineIndex + 1);\n            return;\n        }\n        // Perhaps we can skip tokenizing some lines...\n        let i = lineIndex + 1;\n        while (i < linesLength) {\n            if (this._lineNeedsTokenization.get(i)) {\n                break;\n            }\n            i++;\n        }\n        this._firstLineNeedsTokenization = i;\n    }\n    //#region Editing\n    applyEdits(range, eolCount) {\n        this.markMustBeTokenized(range.startLineNumber - 1);\n        this._lineBeginState.delete(range.startLineNumber, range.endLineNumber - range.startLineNumber);\n        this._lineNeedsTokenization.delete(range.startLineNumber, range.endLineNumber - range.startLineNumber);\n        this._lineBeginState.insert(range.startLineNumber, eolCount);\n        this._lineNeedsTokenization.insert(range.startLineNumber, eolCount);\n    }\n}\nexport class TextModelTokenization extends Disposable {\n    constructor(_textModel, _tokenizationPart, _languageIdCodec) {\n        super();\n        this._textModel = _textModel;\n        this._tokenizationPart = _tokenizationPart;\n        this._languageIdCodec = _languageIdCodec;\n        this._isScheduled = false;\n        this._isDisposed = false;\n        this._tokenizationStateStore = null;\n        this._register(TokenizationRegistry.onDidChange((e) => {\n            const languageId = this._textModel.getLanguageId();\n            if (e.changedLanguages.indexOf(languageId) === -1) {\n                return;\n            }\n            this._resetTokenizationState();\n            this._tokenizationPart.clearTokens();\n        }));\n        this._resetTokenizationState();\n    }\n    dispose() {\n        this._isDisposed = true;\n        super.dispose();\n    }\n    //#region TextModel events\n    handleDidChangeContent(e) {\n        if (e.isFlush) {\n            this._resetTokenizationState();\n            return;\n        }\n        if (this._tokenizationStateStore) {\n            for (let i = 0, len = e.changes.length; i < len; i++) {\n                const change = e.changes[i];\n                const [eolCount] = countEOL(change.text);\n                this._tokenizationStateStore.applyEdits(change.range, eolCount);\n            }\n        }\n        this._beginBackgroundTokenization();\n    }\n    handleDidChangeAttached() {\n        this._beginBackgroundTokenization();\n    }\n    handleDidChangeLanguage(e) {\n        this._resetTokenizationState();\n        this._tokenizationPart.clearTokens();\n    }\n    //#endregion\n    _resetTokenizationState() {\n        const [tokenizationSupport, initialState] = initializeTokenization(this._textModel, this._tokenizationPart);\n        if (tokenizationSupport && initialState) {\n            this._tokenizationStateStore = new TokenizationStateStore(tokenizationSupport, initialState);\n        }\n        else {\n            this._tokenizationStateStore = null;\n        }\n        this._beginBackgroundTokenization();\n    }\n    _beginBackgroundTokenization() {\n        if (this._isScheduled || !this._textModel.isAttachedToEditor() || !this._hasLinesToTokenize()) {\n            return;\n        }\n        this._isScheduled = true;\n        runWhenIdle((deadline) => {\n            this._isScheduled = false;\n            this._backgroundTokenizeWithDeadline(deadline);\n        });\n    }\n    /**\n     * Tokenize until the deadline occurs, but try to yield every 1-2ms.\n     */\n    _backgroundTokenizeWithDeadline(deadline) {\n        // Read the time remaining from the `deadline` immediately because it is unclear\n        // if the `deadline` object will be valid after execution leaves this function.\n        const endTime = Date.now() + deadline.timeRemaining();\n        const execute = () => {\n            if (this._isDisposed || !this._textModel.isAttachedToEditor() || !this._hasLinesToTokenize()) {\n                // disposed in the meantime or detached or finished\n                return;\n            }\n            this._backgroundTokenizeForAtLeast1ms();\n            if (Date.now() < endTime) {\n                // There is still time before reaching the deadline, so yield to the browser and then\n                // continue execution\n                setTimeout0(execute);\n            }\n            else {\n                // The deadline has been reached, so schedule a new idle callback if necessary\n                this._beginBackgroundTokenization();\n            }\n        };\n        execute();\n    }\n    /**\n     * Tokenize for at least 1ms.\n     */\n    _backgroundTokenizeForAtLeast1ms() {\n        const lineCount = this._textModel.getLineCount();\n        const builder = new ContiguousMultilineTokensBuilder();\n        const sw = StopWatch.create(false);\n        do {\n            if (sw.elapsed() > 1) {\n                // the comparison is intentionally > 1 and not >= 1 to ensure that\n                // a full millisecond has elapsed, given how microseconds are rounded\n                // to milliseconds\n                break;\n            }\n            const tokenizedLineNumber = this._tokenizeOneInvalidLine(builder);\n            if (tokenizedLineNumber >= lineCount) {\n                break;\n            }\n        } while (this._hasLinesToTokenize());\n        this._tokenizationPart.setTokens(builder.finalize(), this._isTokenizationComplete());\n    }\n    tokenizeViewport(startLineNumber, endLineNumber) {\n        const builder = new ContiguousMultilineTokensBuilder();\n        this._tokenizeViewport(builder, startLineNumber, endLineNumber);\n        this._tokenizationPart.setTokens(builder.finalize(), this._isTokenizationComplete());\n    }\n    reset() {\n        this._resetTokenizationState();\n        this._tokenizationPart.clearTokens();\n    }\n    forceTokenization(lineNumber) {\n        const builder = new ContiguousMultilineTokensBuilder();\n        this._updateTokensUntilLine(builder, lineNumber);\n        this._tokenizationPart.setTokens(builder.finalize(), this._isTokenizationComplete());\n    }\n    getTokenTypeIfInsertingCharacter(position, character) {\n        if (!this._tokenizationStateStore) {\n            return 0 /* StandardTokenType.Other */;\n        }\n        this.forceTokenization(position.lineNumber);\n        const lineStartState = this._tokenizationStateStore.getBeginState(position.lineNumber - 1);\n        if (!lineStartState) {\n            return 0 /* StandardTokenType.Other */;\n        }\n        const languageId = this._textModel.getLanguageId();\n        const lineContent = this._textModel.getLineContent(position.lineNumber);\n        // Create the text as if `character` was inserted\n        const text = (lineContent.substring(0, position.column - 1)\n            + character\n            + lineContent.substring(position.column - 1));\n        const r = safeTokenize(this._languageIdCodec, languageId, this._tokenizationStateStore.tokenizationSupport, text, true, lineStartState);\n        const lineTokens = new LineTokens(r.tokens, text, this._languageIdCodec);\n        if (lineTokens.getCount() === 0) {\n            return 0 /* StandardTokenType.Other */;\n        }\n        const tokenIndex = lineTokens.findTokenIndexAtOffset(position.column - 1);\n        return lineTokens.getStandardTokenType(tokenIndex);\n    }\n    tokenizeLineWithEdit(position, length, newText) {\n        const lineNumber = position.lineNumber;\n        const column = position.column;\n        if (!this._tokenizationStateStore) {\n            return null;\n        }\n        this.forceTokenization(lineNumber);\n        const lineStartState = this._tokenizationStateStore.getBeginState(lineNumber - 1);\n        if (!lineStartState) {\n            return null;\n        }\n        const curLineContent = this._textModel.getLineContent(lineNumber);\n        const newLineContent = curLineContent.substring(0, column - 1)\n            + newText + curLineContent.substring(column - 1 + length);\n        const languageId = this._textModel.getLanguageIdAtPosition(lineNumber, 0);\n        const result = safeTokenize(this._languageIdCodec, languageId, this._tokenizationStateStore.tokenizationSupport, newLineContent, true, lineStartState);\n        const lineTokens = new LineTokens(result.tokens, newLineContent, this._languageIdCodec);\n        return lineTokens;\n    }\n    isCheapToTokenize(lineNumber) {\n        if (!this._tokenizationStateStore) {\n            return true;\n        }\n        const firstInvalidLineNumber = this._tokenizationStateStore.invalidLineStartIndex + 1;\n        if (lineNumber > firstInvalidLineNumber) {\n            return false;\n        }\n        if (lineNumber < firstInvalidLineNumber) {\n            return true;\n        }\n        if (this._textModel.getLineLength(lineNumber) < 2048 /* Constants.CHEAP_TOKENIZATION_LENGTH_LIMIT */) {\n            return true;\n        }\n        return false;\n    }\n    _hasLinesToTokenize() {\n        if (!this._tokenizationStateStore) {\n            return false;\n        }\n        return (this._tokenizationStateStore.invalidLineStartIndex < this._textModel.getLineCount());\n    }\n    _isTokenizationComplete() {\n        if (!this._tokenizationStateStore) {\n            return false;\n        }\n        return (this._tokenizationStateStore.invalidLineStartIndex >= this._textModel.getLineCount());\n    }\n    _tokenizeOneInvalidLine(builder) {\n        if (!this._tokenizationStateStore || !this._hasLinesToTokenize()) {\n            return this._textModel.getLineCount() + 1;\n        }\n        const lineNumber = this._tokenizationStateStore.invalidLineStartIndex + 1;\n        this._updateTokensUntilLine(builder, lineNumber);\n        return lineNumber;\n    }\n    _updateTokensUntilLine(builder, lineNumber) {\n        if (!this._tokenizationStateStore) {\n            return;\n        }\n        const languageId = this._textModel.getLanguageId();\n        const linesLength = this._textModel.getLineCount();\n        const endLineIndex = lineNumber - 1;\n        // Validate all states up to and including endLineIndex\n        for (let lineIndex = this._tokenizationStateStore.invalidLineStartIndex; lineIndex <= endLineIndex; lineIndex++) {\n            const text = this._textModel.getLineContent(lineIndex + 1);\n            const lineStartState = this._tokenizationStateStore.getBeginState(lineIndex);\n            const r = safeTokenize(this._languageIdCodec, languageId, this._tokenizationStateStore.tokenizationSupport, text, true, lineStartState);\n            builder.add(lineIndex + 1, r.tokens);\n            this._tokenizationStateStore.setEndState(linesLength, lineIndex, r.endState);\n            lineIndex = this._tokenizationStateStore.invalidLineStartIndex - 1; // -1 because the outer loop increments it\n        }\n    }\n    _tokenizeViewport(builder, startLineNumber, endLineNumber) {\n        if (!this._tokenizationStateStore) {\n            // nothing to do\n            return;\n        }\n        if (endLineNumber <= this._tokenizationStateStore.invalidLineStartIndex) {\n            // nothing to do\n            return;\n        }\n        if (startLineNumber <= this._tokenizationStateStore.invalidLineStartIndex) {\n            // tokenization has reached the viewport start...\n            this._updateTokensUntilLine(builder, endLineNumber);\n            return;\n        }\n        let nonWhitespaceColumn = this._textModel.getLineFirstNonWhitespaceColumn(startLineNumber);\n        const fakeLines = [];\n        let initialState = null;\n        for (let i = startLineNumber - 1; nonWhitespaceColumn > 1 && i >= 1; i--) {\n            const newNonWhitespaceIndex = this._textModel.getLineFirstNonWhitespaceColumn(i);\n            if (newNonWhitespaceIndex === 0) {\n                continue;\n            }\n            if (newNonWhitespaceIndex < nonWhitespaceColumn) {\n                fakeLines.push(this._textModel.getLineContent(i));\n                nonWhitespaceColumn = newNonWhitespaceIndex;\n                initialState = this._tokenizationStateStore.getBeginState(i - 1);\n                if (initialState) {\n                    break;\n                }\n            }\n        }\n        if (!initialState) {\n            initialState = this._tokenizationStateStore.initialState;\n        }\n        const languageId = this._textModel.getLanguageId();\n        let state = initialState;\n        for (let i = fakeLines.length - 1; i >= 0; i--) {\n            const r = safeTokenize(this._languageIdCodec, languageId, this._tokenizationStateStore.tokenizationSupport, fakeLines[i], false, state);\n            state = r.endState;\n        }\n        for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n            const text = this._textModel.getLineContent(lineNumber);\n            const r = safeTokenize(this._languageIdCodec, languageId, this._tokenizationStateStore.tokenizationSupport, text, true, state);\n            builder.add(lineNumber, r.tokens);\n            this._tokenizationStateStore.markMustBeTokenized(lineNumber - 1);\n            state = r.endState;\n        }\n    }\n}\nfunction initializeTokenization(textModel, tokenizationPart) {\n    if (textModel.isTooLargeForTokenization()) {\n        return [null, null];\n    }\n    const tokenizationSupport = TokenizationRegistry.get(tokenizationPart.getLanguageId());\n    if (!tokenizationSupport) {\n        return [null, null];\n    }\n    let initialState;\n    try {\n        initialState = tokenizationSupport.getInitialState();\n    }\n    catch (e) {\n        onUnexpectedError(e);\n        return [null, null];\n    }\n    return [tokenizationSupport, initialState];\n}\nfunction safeTokenize(languageIdCodec, languageId, tokenizationSupport, text, hasEOL, state) {\n    let r = null;\n    if (tokenizationSupport) {\n        try {\n            r = tokenizationSupport.tokenizeEncoded(text, hasEOL, state.clone());\n        }\n        catch (e) {\n            onUnexpectedError(e);\n        }\n    }\n    if (!r) {\n        r = nullTokenizeEncoded(languageIdCodec.encodeLanguageId(languageId), state);\n    }\n    LineTokens.convertToEndOffset(r.tokens, text.length);\n    return r;\n}\n"],"mappings":"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"}]}