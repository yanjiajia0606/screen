{"remainingRequest":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js!/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/base/browser/ui/tree/compressedObjectTreeModel.js","dependencies":[{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/base/browser/ui/tree/compressedObjectTreeModel.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/babel.config.js","mtime":1668271197000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js","mtime":456789000000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["ObjectTreeModel","TreeError","WeakMapper","Event","Iterable","noCompress","element","elements","incompressible","children","map","from","collapsible","collapsed","compress","childrenIterator","consume","length","push","concat","_decompress","index","el","decompress","splice","treeElement","Object","assign","e","wrapIdentityProvider","base","getId","node","toString","join","CompressedObjectTreeModel","user","list","options","rootRef","nodes","Map","model","enabled","compressionEnabled","identityProvider","onDidSplice","onDidChangeCollapseState","onDidChangeRenderNodeCount","empty","diffIdentityProvider","compressedChildren","_setChildren","diffDepth","Infinity","compressedNode","get","Error","getNode","compressedParentNode","getParentNodeLocation","parent","decompressedElement","splicedElement","recompressedElement","parentChildren","child","depth","root","rootChildren","decompressedRootChildren","recompressedRootChildren","insertedElements","Set","onDidCreateNode","add","set","onDidDeleteNode","has","delete","setChildren","location","getCompressedNode","getListIndex","getListRenderCount","getNodeLocation","parentNode","getFirstElementChild","isCollapsible","setCollapsible","isCollapsed","recursive","setCollapsed","expandTo","rerender","refilter","DefaultElementMapper","CompressedTreeNodeWrapper","unwrapper","visibleChildrenCount","visibleChildIndex","visible","filterData","mapList","nodeMapper","start","deleteCount","toInsert","updateElementHeight","height","mapOptions","compressedNodeUnwrapper","sorter","compare","otherNode","filter","parentVisibility","CompressibleObjectTreeModel","elementMapper","insertedNodes","deletedNodes","deep","setCompressionEnabled","result"],"sources":["/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/base/browser/ui/tree/compressedObjectTreeModel.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { ObjectTreeModel } from './objectTreeModel.js';\nimport { TreeError, WeakMapper } from './tree.js';\nimport { Event } from '../../../common/event.js';\nimport { Iterable } from '../../../common/iterator.js';\nfunction noCompress(element) {\n    const elements = [element.element];\n    const incompressible = element.incompressible || false;\n    return {\n        element: { elements, incompressible },\n        children: Iterable.map(Iterable.from(element.children), noCompress),\n        collapsible: element.collapsible,\n        collapsed: element.collapsed\n    };\n}\n// Exported only for test reasons, do not use directly\nexport function compress(element) {\n    const elements = [element.element];\n    const incompressible = element.incompressible || false;\n    let childrenIterator;\n    let children;\n    while (true) {\n        [children, childrenIterator] = Iterable.consume(Iterable.from(element.children), 2);\n        if (children.length !== 1) {\n            break;\n        }\n        if (children[0].incompressible) {\n            break;\n        }\n        element = children[0];\n        elements.push(element.element);\n    }\n    return {\n        element: { elements, incompressible },\n        children: Iterable.map(Iterable.concat(children, childrenIterator), compress),\n        collapsible: element.collapsible,\n        collapsed: element.collapsed\n    };\n}\nfunction _decompress(element, index = 0) {\n    let children;\n    if (index < element.element.elements.length - 1) {\n        children = [_decompress(element, index + 1)];\n    }\n    else {\n        children = Iterable.map(Iterable.from(element.children), el => _decompress(el, 0));\n    }\n    if (index === 0 && element.element.incompressible) {\n        return {\n            element: element.element.elements[index],\n            children,\n            incompressible: true,\n            collapsible: element.collapsible,\n            collapsed: element.collapsed\n        };\n    }\n    return {\n        element: element.element.elements[index],\n        children,\n        collapsible: element.collapsible,\n        collapsed: element.collapsed\n    };\n}\n// Exported only for test reasons, do not use directly\nexport function decompress(element) {\n    return _decompress(element, 0);\n}\nfunction splice(treeElement, element, children) {\n    if (treeElement.element === element) {\n        return Object.assign(Object.assign({}, treeElement), { children });\n    }\n    return Object.assign(Object.assign({}, treeElement), { children: Iterable.map(Iterable.from(treeElement.children), e => splice(e, element, children)) });\n}\nconst wrapIdentityProvider = (base) => ({\n    getId(node) {\n        return node.elements.map(e => base.getId(e).toString()).join('\\0');\n    }\n});\n// Exported only for test reasons, do not use directly\nexport class CompressedObjectTreeModel {\n    constructor(user, list, options = {}) {\n        this.user = user;\n        this.rootRef = null;\n        this.nodes = new Map();\n        this.model = new ObjectTreeModel(user, list, options);\n        this.enabled = typeof options.compressionEnabled === 'undefined' ? true : options.compressionEnabled;\n        this.identityProvider = options.identityProvider;\n    }\n    get onDidSplice() { return this.model.onDidSplice; }\n    get onDidChangeCollapseState() { return this.model.onDidChangeCollapseState; }\n    get onDidChangeRenderNodeCount() { return this.model.onDidChangeRenderNodeCount; }\n    setChildren(element, children = Iterable.empty(), options) {\n        // Diffs must be deem, since the compression can affect nested elements.\n        // @see https://github.com/microsoft/vscode/pull/114237#issuecomment-759425034\n        const diffIdentityProvider = options.diffIdentityProvider && wrapIdentityProvider(options.diffIdentityProvider);\n        if (element === null) {\n            const compressedChildren = Iterable.map(children, this.enabled ? compress : noCompress);\n            this._setChildren(null, compressedChildren, { diffIdentityProvider, diffDepth: Infinity });\n            return;\n        }\n        const compressedNode = this.nodes.get(element);\n        if (!compressedNode) {\n            throw new Error('Unknown compressed tree node');\n        }\n        const node = this.model.getNode(compressedNode);\n        const compressedParentNode = this.model.getParentNodeLocation(compressedNode);\n        const parent = this.model.getNode(compressedParentNode);\n        const decompressedElement = decompress(node);\n        const splicedElement = splice(decompressedElement, element, children);\n        const recompressedElement = (this.enabled ? compress : noCompress)(splicedElement);\n        const parentChildren = parent.children\n            .map(child => child === node ? recompressedElement : child);\n        this._setChildren(parent.element, parentChildren, {\n            diffIdentityProvider,\n            diffDepth: node.depth - parent.depth,\n        });\n    }\n    setCompressionEnabled(enabled) {\n        if (enabled === this.enabled) {\n            return;\n        }\n        this.enabled = enabled;\n        const root = this.model.getNode();\n        const rootChildren = root.children;\n        const decompressedRootChildren = Iterable.map(rootChildren, decompress);\n        const recompressedRootChildren = Iterable.map(decompressedRootChildren, enabled ? compress : noCompress);\n        // it should be safe to always use deep diff mode here if an identity\n        // provider is available, since we know the raw nodes are unchanged.\n        this._setChildren(null, recompressedRootChildren, {\n            diffIdentityProvider: this.identityProvider,\n            diffDepth: Infinity,\n        });\n    }\n    _setChildren(node, children, options) {\n        const insertedElements = new Set();\n        const onDidCreateNode = (node) => {\n            for (const element of node.element.elements) {\n                insertedElements.add(element);\n                this.nodes.set(element, node.element);\n            }\n        };\n        const onDidDeleteNode = (node) => {\n            for (const element of node.element.elements) {\n                if (!insertedElements.has(element)) {\n                    this.nodes.delete(element);\n                }\n            }\n        };\n        this.model.setChildren(node, children, Object.assign(Object.assign({}, options), { onDidCreateNode, onDidDeleteNode }));\n    }\n    has(element) {\n        return this.nodes.has(element);\n    }\n    getListIndex(location) {\n        const node = this.getCompressedNode(location);\n        return this.model.getListIndex(node);\n    }\n    getListRenderCount(location) {\n        const node = this.getCompressedNode(location);\n        return this.model.getListRenderCount(node);\n    }\n    getNode(location) {\n        if (typeof location === 'undefined') {\n            return this.model.getNode();\n        }\n        const node = this.getCompressedNode(location);\n        return this.model.getNode(node);\n    }\n    // TODO: review this\n    getNodeLocation(node) {\n        const compressedNode = this.model.getNodeLocation(node);\n        if (compressedNode === null) {\n            return null;\n        }\n        return compressedNode.elements[compressedNode.elements.length - 1];\n    }\n    // TODO: review this\n    getParentNodeLocation(location) {\n        const compressedNode = this.getCompressedNode(location);\n        const parentNode = this.model.getParentNodeLocation(compressedNode);\n        if (parentNode === null) {\n            return null;\n        }\n        return parentNode.elements[parentNode.elements.length - 1];\n    }\n    getFirstElementChild(location) {\n        const compressedNode = this.getCompressedNode(location);\n        return this.model.getFirstElementChild(compressedNode);\n    }\n    isCollapsible(location) {\n        const compressedNode = this.getCompressedNode(location);\n        return this.model.isCollapsible(compressedNode);\n    }\n    setCollapsible(location, collapsible) {\n        const compressedNode = this.getCompressedNode(location);\n        return this.model.setCollapsible(compressedNode, collapsible);\n    }\n    isCollapsed(location) {\n        const compressedNode = this.getCompressedNode(location);\n        return this.model.isCollapsed(compressedNode);\n    }\n    setCollapsed(location, collapsed, recursive) {\n        const compressedNode = this.getCompressedNode(location);\n        return this.model.setCollapsed(compressedNode, collapsed, recursive);\n    }\n    expandTo(location) {\n        const compressedNode = this.getCompressedNode(location);\n        this.model.expandTo(compressedNode);\n    }\n    rerender(location) {\n        const compressedNode = this.getCompressedNode(location);\n        this.model.rerender(compressedNode);\n    }\n    refilter() {\n        this.model.refilter();\n    }\n    getCompressedNode(element) {\n        if (element === null) {\n            return null;\n        }\n        const node = this.nodes.get(element);\n        if (!node) {\n            throw new TreeError(this.user, `Tree element not found: ${element}`);\n        }\n        return node;\n    }\n}\nexport const DefaultElementMapper = elements => elements[elements.length - 1];\nclass CompressedTreeNodeWrapper {\n    constructor(unwrapper, node) {\n        this.unwrapper = unwrapper;\n        this.node = node;\n    }\n    get element() { return this.node.element === null ? null : this.unwrapper(this.node.element); }\n    get children() { return this.node.children.map(node => new CompressedTreeNodeWrapper(this.unwrapper, node)); }\n    get depth() { return this.node.depth; }\n    get visibleChildrenCount() { return this.node.visibleChildrenCount; }\n    get visibleChildIndex() { return this.node.visibleChildIndex; }\n    get collapsible() { return this.node.collapsible; }\n    get collapsed() { return this.node.collapsed; }\n    get visible() { return this.node.visible; }\n    get filterData() { return this.node.filterData; }\n}\nfunction mapList(nodeMapper, list) {\n    return {\n        splice(start, deleteCount, toInsert) {\n            list.splice(start, deleteCount, toInsert.map(node => nodeMapper.map(node)));\n        },\n        updateElementHeight(index, height) {\n            list.updateElementHeight(index, height);\n        }\n    };\n}\nfunction mapOptions(compressedNodeUnwrapper, options) {\n    return Object.assign(Object.assign({}, options), { identityProvider: options.identityProvider && {\n            getId(node) {\n                return options.identityProvider.getId(compressedNodeUnwrapper(node));\n            }\n        }, sorter: options.sorter && {\n            compare(node, otherNode) {\n                return options.sorter.compare(node.elements[0], otherNode.elements[0]);\n            }\n        }, filter: options.filter && {\n            filter(node, parentVisibility) {\n                return options.filter.filter(compressedNodeUnwrapper(node), parentVisibility);\n            }\n        } });\n}\nexport class CompressibleObjectTreeModel {\n    constructor(user, list, options = {}) {\n        this.rootRef = null;\n        this.elementMapper = options.elementMapper || DefaultElementMapper;\n        const compressedNodeUnwrapper = node => this.elementMapper(node.elements);\n        this.nodeMapper = new WeakMapper(node => new CompressedTreeNodeWrapper(compressedNodeUnwrapper, node));\n        this.model = new CompressedObjectTreeModel(user, mapList(this.nodeMapper, list), mapOptions(compressedNodeUnwrapper, options));\n    }\n    get onDidSplice() {\n        return Event.map(this.model.onDidSplice, ({ insertedNodes, deletedNodes }) => ({\n            insertedNodes: insertedNodes.map(node => this.nodeMapper.map(node)),\n            deletedNodes: deletedNodes.map(node => this.nodeMapper.map(node)),\n        }));\n    }\n    get onDidChangeCollapseState() {\n        return Event.map(this.model.onDidChangeCollapseState, ({ node, deep }) => ({\n            node: this.nodeMapper.map(node),\n            deep\n        }));\n    }\n    get onDidChangeRenderNodeCount() {\n        return Event.map(this.model.onDidChangeRenderNodeCount, node => this.nodeMapper.map(node));\n    }\n    setChildren(element, children = Iterable.empty(), options = {}) {\n        this.model.setChildren(element, children, options);\n    }\n    setCompressionEnabled(enabled) {\n        this.model.setCompressionEnabled(enabled);\n    }\n    has(location) {\n        return this.model.has(location);\n    }\n    getListIndex(location) {\n        return this.model.getListIndex(location);\n    }\n    getListRenderCount(location) {\n        return this.model.getListRenderCount(location);\n    }\n    getNode(location) {\n        return this.nodeMapper.map(this.model.getNode(location));\n    }\n    getNodeLocation(node) {\n        return node.element;\n    }\n    getParentNodeLocation(location) {\n        return this.model.getParentNodeLocation(location);\n    }\n    getFirstElementChild(location) {\n        const result = this.model.getFirstElementChild(location);\n        if (result === null || typeof result === 'undefined') {\n            return result;\n        }\n        return this.elementMapper(result.elements);\n    }\n    isCollapsible(location) {\n        return this.model.isCollapsible(location);\n    }\n    setCollapsible(location, collapsed) {\n        return this.model.setCollapsible(location, collapsed);\n    }\n    isCollapsed(location) {\n        return this.model.isCollapsed(location);\n    }\n    setCollapsed(location, collapsed, recursive) {\n        return this.model.setCollapsed(location, collapsed, recursive);\n    }\n    expandTo(location) {\n        return this.model.expandTo(location);\n    }\n    rerender(location) {\n        return this.model.rerender(location);\n    }\n    refilter() {\n        return this.model.refilter();\n    }\n    getCompressedTreeNode(location = null) {\n        return this.model.getNode(location);\n    }\n}\n"],"mappings":"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"}]}