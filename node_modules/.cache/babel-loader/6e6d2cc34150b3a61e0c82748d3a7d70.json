{"remainingRequest":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/thread-loader/dist/cjs.js!/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js!/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/common/cursor/cursor.js","dependencies":[{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/common/cursor/cursor.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/babel.config.js","mtime":1668271197000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js","mtime":456789000000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["onUnexpectedError","strings","CursorCollection","CursorState","EditOperationResult","CursorContext","DeleteOperations","CompositionOutcome","TypeOperations","TypeWithAutoClosingCommand","Range","Selection","ModelInjectedTextChangedEvent","ViewCursorStateChangedEvent","ViewRevealRangeRequestEvent","dispose","Disposable","CursorStateChangedEvent","CursorsController","model","viewModel","coordinatesConverter","cursorConfig","_model","_knownModelVersionId","getVersionId","_viewModel","_coordinatesConverter","context","_cursors","_hasFocus","_isHandling","_compositionState","_columnSelectData","_autoClosedActions","_prevEditOperationType","updateContext","eventsCollector","setStates","getCursorStates","hasFocus","length","selections","getSelections","i","autoClosedAction","isValid","splice","getPrimaryCursor","getLastAddedCursorIndex","getAll","source","reason","states","reachedMaxCursorCount","MAX_CURSOR_COUNT","slice","oldState","CursorModelState","from","normalize","_validateAutoClosedActions","_emitStateChangedIfNecessary","columnSelectData","minimalReveal","verticalType","revealHorizontal","scrollType","viewPositions","getViewPositions","revealViewRange","revealViewSelections","getViewSelections","fromPositions","emitViewEvent","result","len","selection","push","inSelectionMode","isEmpty","selectionStart","lineNumber","selectionStartLineNumber","column","selectionStartColumn","position","positionLineNumber","positionColumn","desiredSelections","state","fromModelSelections","revealPrimary","event","e","rawContentChangedEvent","versionId","hadFlushEvent","containsEvent","resultingSelection","cursorState","isUndoing","isRedoing","selectionsFromMarkers","readSelectionFromMarkers","modelState","getTopMostViewPosition","getBottomMostViewPosition","primaryCursor","viewSelectionStart","viewState","getStartPosition","viewPosition","isReal","fromViewLineNumber","fromViewVisualColumn","visibleColumnFromColumn","toViewLineNumber","toViewVisualColumn","type","autoClosedCharactersRanges","autoClosedEnclosingRanges","autoClosedCharactersDeltaDecorations","autoClosedEnclosingDeltaDecorations","range","options","description","inlineClassName","stickiness","autoClosedCharactersDecorations","deltaDecorations","autoClosedEnclosingDecorations","AutoClosedAction","opResult","shouldPushStackElementBefore","pushStackElement","CommandExecutor","executeCommands","commands","_interpretCommandResult","command","enclosingRange","closeCharacterRange","_pushAutoClosedAction","shouldPushStackElementAfter","setSelections","newState","equals","viewSelections","some","newCursorState","oldSelections","map","s","oldModelVersionId","modelVersionId","emitOutgoingEvent","edits","indices","edit","text","indexOf","m","match","closeChar","autoClosingPairsCandidates","autoClosingPairs","autoClosingPairsCloseSingleChar","get","openChar","open","closeCharIndex","openCharIndex","lastIndexOf","cursorStateComputer","autoClosingIndices","_findAutoClosingPairs","_isTracked","pushEditOperations","undoEdits","openCharInnerIndex","closeCharInnerIndex","undoEdit","startLineNumber","startColumn","callback","cursorChangeReason","readOnly","stopTrackingSelections","ensureValidState","err","startTrackingSelections","getAllAutoClosedCharacters","CompositionState","compositionOutcome","deduceOutcome","_executeEdit","_executeEditOperation","compositionEndWithInterceptors","getAutoClosedCharacters","offset","charLength","nextCharLength","chr","substr","typeWithInterceptors","typeWithoutInterceptors","replacePrevCharCnt","replaceNextCharCnt","positionDelta","newSelections","getPosition","compositionType","pasteOnNewLine","multicursorText","paste","cut","killSecondaryCursors","other","cursor","_autoClosedCharactersDecorations","_autoClosedEnclosingDecorations","decorationRange","getDecorationRange","enclosingRanges","endLineNumber","sort","compareRangesUsingStarts","strictContainsRange","autoClosedActions","autoClosedCharacters","concat","getAutoClosedCharactersRanges","selectionsBefore","ctx","trackedRanges","trackedRangesDirection","_innerExecuteCommands","_setTrackedRange","_arrayIsEmpty","commandsData","_getEditOperations","operations","rawOperations","loserCursorsMap","_getLoserCursorMap","hasOwnProperty","console","warn","filteredOperations","identifier","major","toString","hadTrackedEditOperation","selectionsAfter","inverseEditOperations","groupedInverseEditOperations","op","minorBasedSorter","a","b","minor","cursorSelections","computeCursorState","getInverseEditOperations","getTrackedSelection","id","idx","parseInt","_getTrackedRange","endColumn","losingCursors","losingCursorIndex","losingCursor","r","_getEditOperationsFromCommand","majorIdentifier","operationMinor","addEditOperation","forceMoveMarkers","isAutoWhitespaceEdit","insertsAutoWhitespace","addTrackedEditOperation","trackSelection","_selection","trackPreviousOnEmpty","liftSelection","maxLineColumn","getLineMaxColumn","l","getDirection","editOperationBuilder","getEditOperations","compareRangesUsingEnds","previousOp","currentOp","isBefore","getEndPosition","loserMajor","j","CompositionLineState","startSelection","endSelection","textModel","_original","_capture","current","_deduceOutcome","getLineContent","original","commonPrefix","Math","min","commonPrefixLength","commonSuffix","commonSuffixLength","deletedText","substring","insertedText"],"sources":["/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/common/cursor/cursor.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { onUnexpectedError } from '../../../base/common/errors.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { CursorCollection } from './cursorCollection.js';\nimport { CursorState, EditOperationResult } from '../cursorCommon.js';\nimport { CursorContext } from './cursorContext.js';\nimport { DeleteOperations } from './cursorDeleteOperations.js';\nimport { CompositionOutcome, TypeOperations, TypeWithAutoClosingCommand } from './cursorTypeOperations.js';\nimport { Range } from '../core/range.js';\nimport { Selection } from '../core/selection.js';\nimport { ModelInjectedTextChangedEvent } from '../textModelEvents.js';\nimport { ViewCursorStateChangedEvent, ViewRevealRangeRequestEvent } from '../viewEvents.js';\nimport { dispose, Disposable } from '../../../base/common/lifecycle.js';\nimport { CursorStateChangedEvent } from '../viewModelEventDispatcher.js';\nexport class CursorsController extends Disposable {\n    constructor(model, viewModel, coordinatesConverter, cursorConfig) {\n        super();\n        this._model = model;\n        this._knownModelVersionId = this._model.getVersionId();\n        this._viewModel = viewModel;\n        this._coordinatesConverter = coordinatesConverter;\n        this.context = new CursorContext(this._model, this._viewModel, this._coordinatesConverter, cursorConfig);\n        this._cursors = new CursorCollection(this.context);\n        this._hasFocus = false;\n        this._isHandling = false;\n        this._compositionState = null;\n        this._columnSelectData = null;\n        this._autoClosedActions = [];\n        this._prevEditOperationType = 0 /* EditOperationType.Other */;\n    }\n    dispose() {\n        this._cursors.dispose();\n        this._autoClosedActions = dispose(this._autoClosedActions);\n        super.dispose();\n    }\n    updateConfiguration(cursorConfig) {\n        this.context = new CursorContext(this._model, this._viewModel, this._coordinatesConverter, cursorConfig);\n        this._cursors.updateContext(this.context);\n    }\n    onLineMappingChanged(eventsCollector) {\n        if (this._knownModelVersionId !== this._model.getVersionId()) {\n            // There are model change events that I didn't yet receive.\n            //\n            // This can happen when editing the model, and the view model receives the change events first,\n            // and the view model emits line mapping changed events, all before the cursor gets a chance to\n            // recover from markers.\n            //\n            // The model change listener above will be called soon and we'll ensure a valid cursor state there.\n            return;\n        }\n        // Ensure valid state\n        this.setStates(eventsCollector, 'viewModel', 0 /* CursorChangeReason.NotSet */, this.getCursorStates());\n    }\n    setHasFocus(hasFocus) {\n        this._hasFocus = hasFocus;\n    }\n    _validateAutoClosedActions() {\n        if (this._autoClosedActions.length > 0) {\n            const selections = this._cursors.getSelections();\n            for (let i = 0; i < this._autoClosedActions.length; i++) {\n                const autoClosedAction = this._autoClosedActions[i];\n                if (!autoClosedAction.isValid(selections)) {\n                    autoClosedAction.dispose();\n                    this._autoClosedActions.splice(i, 1);\n                    i--;\n                }\n            }\n        }\n    }\n    // ------ some getters/setters\n    getPrimaryCursorState() {\n        return this._cursors.getPrimaryCursor();\n    }\n    getLastAddedCursorIndex() {\n        return this._cursors.getLastAddedCursorIndex();\n    }\n    getCursorStates() {\n        return this._cursors.getAll();\n    }\n    setStates(eventsCollector, source, reason, states) {\n        let reachedMaxCursorCount = false;\n        if (states !== null && states.length > CursorsController.MAX_CURSOR_COUNT) {\n            states = states.slice(0, CursorsController.MAX_CURSOR_COUNT);\n            reachedMaxCursorCount = true;\n        }\n        const oldState = CursorModelState.from(this._model, this);\n        this._cursors.setStates(states);\n        this._cursors.normalize();\n        this._columnSelectData = null;\n        this._validateAutoClosedActions();\n        return this._emitStateChangedIfNecessary(eventsCollector, source, reason, oldState, reachedMaxCursorCount);\n    }\n    setCursorColumnSelectData(columnSelectData) {\n        this._columnSelectData = columnSelectData;\n    }\n    revealPrimary(eventsCollector, source, minimalReveal, verticalType, revealHorizontal, scrollType) {\n        const viewPositions = this._cursors.getViewPositions();\n        let revealViewRange = null;\n        let revealViewSelections = null;\n        if (viewPositions.length > 1) {\n            revealViewSelections = this._cursors.getViewSelections();\n        }\n        else {\n            revealViewRange = Range.fromPositions(viewPositions[0], viewPositions[0]);\n        }\n        eventsCollector.emitViewEvent(new ViewRevealRangeRequestEvent(source, minimalReveal, revealViewRange, revealViewSelections, verticalType, revealHorizontal, scrollType));\n    }\n    saveState() {\n        const result = [];\n        const selections = this._cursors.getSelections();\n        for (let i = 0, len = selections.length; i < len; i++) {\n            const selection = selections[i];\n            result.push({\n                inSelectionMode: !selection.isEmpty(),\n                selectionStart: {\n                    lineNumber: selection.selectionStartLineNumber,\n                    column: selection.selectionStartColumn,\n                },\n                position: {\n                    lineNumber: selection.positionLineNumber,\n                    column: selection.positionColumn,\n                }\n            });\n        }\n        return result;\n    }\n    restoreState(eventsCollector, states) {\n        const desiredSelections = [];\n        for (let i = 0, len = states.length; i < len; i++) {\n            const state = states[i];\n            let positionLineNumber = 1;\n            let positionColumn = 1;\n            // Avoid missing properties on the literal\n            if (state.position && state.position.lineNumber) {\n                positionLineNumber = state.position.lineNumber;\n            }\n            if (state.position && state.position.column) {\n                positionColumn = state.position.column;\n            }\n            let selectionStartLineNumber = positionLineNumber;\n            let selectionStartColumn = positionColumn;\n            // Avoid missing properties on the literal\n            if (state.selectionStart && state.selectionStart.lineNumber) {\n                selectionStartLineNumber = state.selectionStart.lineNumber;\n            }\n            if (state.selectionStart && state.selectionStart.column) {\n                selectionStartColumn = state.selectionStart.column;\n            }\n            desiredSelections.push({\n                selectionStartLineNumber: selectionStartLineNumber,\n                selectionStartColumn: selectionStartColumn,\n                positionLineNumber: positionLineNumber,\n                positionColumn: positionColumn\n            });\n        }\n        this.setStates(eventsCollector, 'restoreState', 0 /* CursorChangeReason.NotSet */, CursorState.fromModelSelections(desiredSelections));\n        this.revealPrimary(eventsCollector, 'restoreState', false, 0 /* VerticalRevealType.Simple */, true, 1 /* editorCommon.ScrollType.Immediate */);\n    }\n    onModelContentChanged(eventsCollector, event) {\n        if (event instanceof ModelInjectedTextChangedEvent) {\n            // If injected texts change, the view positions of all cursors need to be updated.\n            if (this._isHandling) {\n                // The view positions will be updated when handling finishes\n                return;\n            }\n            // setStates might remove markers, which could trigger a decoration change.\n            // If there are injected text decorations for that line, `onModelContentChanged` is emitted again\n            // and an endless recursion happens.\n            // _isHandling prevents that.\n            this._isHandling = true;\n            try {\n                this.setStates(eventsCollector, 'modelChange', 0 /* CursorChangeReason.NotSet */, this.getCursorStates());\n            }\n            finally {\n                this._isHandling = false;\n            }\n        }\n        else {\n            const e = event.rawContentChangedEvent;\n            this._knownModelVersionId = e.versionId;\n            if (this._isHandling) {\n                return;\n            }\n            const hadFlushEvent = e.containsEvent(1 /* RawContentChangedType.Flush */);\n            this._prevEditOperationType = 0 /* EditOperationType.Other */;\n            if (hadFlushEvent) {\n                // a model.setValue() was called\n                this._cursors.dispose();\n                this._cursors = new CursorCollection(this.context);\n                this._validateAutoClosedActions();\n                this._emitStateChangedIfNecessary(eventsCollector, 'model', 1 /* CursorChangeReason.ContentFlush */, null, false);\n            }\n            else {\n                if (this._hasFocus && e.resultingSelection && e.resultingSelection.length > 0) {\n                    const cursorState = CursorState.fromModelSelections(e.resultingSelection);\n                    if (this.setStates(eventsCollector, 'modelChange', e.isUndoing ? 5 /* CursorChangeReason.Undo */ : e.isRedoing ? 6 /* CursorChangeReason.Redo */ : 2 /* CursorChangeReason.RecoverFromMarkers */, cursorState)) {\n                        this.revealPrimary(eventsCollector, 'modelChange', false, 0 /* VerticalRevealType.Simple */, true, 0 /* editorCommon.ScrollType.Smooth */);\n                    }\n                }\n                else {\n                    const selectionsFromMarkers = this._cursors.readSelectionFromMarkers();\n                    this.setStates(eventsCollector, 'modelChange', 2 /* CursorChangeReason.RecoverFromMarkers */, CursorState.fromModelSelections(selectionsFromMarkers));\n                }\n            }\n        }\n    }\n    getSelection() {\n        return this._cursors.getPrimaryCursor().modelState.selection;\n    }\n    getTopMostViewPosition() {\n        return this._cursors.getTopMostViewPosition();\n    }\n    getBottomMostViewPosition() {\n        return this._cursors.getBottomMostViewPosition();\n    }\n    getCursorColumnSelectData() {\n        if (this._columnSelectData) {\n            return this._columnSelectData;\n        }\n        const primaryCursor = this._cursors.getPrimaryCursor();\n        const viewSelectionStart = primaryCursor.viewState.selectionStart.getStartPosition();\n        const viewPosition = primaryCursor.viewState.position;\n        return {\n            isReal: false,\n            fromViewLineNumber: viewSelectionStart.lineNumber,\n            fromViewVisualColumn: this.context.cursorConfig.visibleColumnFromColumn(this._viewModel, viewSelectionStart),\n            toViewLineNumber: viewPosition.lineNumber,\n            toViewVisualColumn: this.context.cursorConfig.visibleColumnFromColumn(this._viewModel, viewPosition),\n        };\n    }\n    getSelections() {\n        return this._cursors.getSelections();\n    }\n    setSelections(eventsCollector, source, selections, reason) {\n        this.setStates(eventsCollector, source, reason, CursorState.fromModelSelections(selections));\n    }\n    getPrevEditOperationType() {\n        return this._prevEditOperationType;\n    }\n    setPrevEditOperationType(type) {\n        this._prevEditOperationType = type;\n    }\n    // ------ auxiliary handling logic\n    _pushAutoClosedAction(autoClosedCharactersRanges, autoClosedEnclosingRanges) {\n        const autoClosedCharactersDeltaDecorations = [];\n        const autoClosedEnclosingDeltaDecorations = [];\n        for (let i = 0, len = autoClosedCharactersRanges.length; i < len; i++) {\n            autoClosedCharactersDeltaDecorations.push({\n                range: autoClosedCharactersRanges[i],\n                options: {\n                    description: 'auto-closed-character',\n                    inlineClassName: 'auto-closed-character',\n                    stickiness: 1 /* TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges */\n                }\n            });\n            autoClosedEnclosingDeltaDecorations.push({\n                range: autoClosedEnclosingRanges[i],\n                options: {\n                    description: 'auto-closed-enclosing',\n                    stickiness: 1 /* TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges */\n                }\n            });\n        }\n        const autoClosedCharactersDecorations = this._model.deltaDecorations([], autoClosedCharactersDeltaDecorations);\n        const autoClosedEnclosingDecorations = this._model.deltaDecorations([], autoClosedEnclosingDeltaDecorations);\n        this._autoClosedActions.push(new AutoClosedAction(this._model, autoClosedCharactersDecorations, autoClosedEnclosingDecorations));\n    }\n    _executeEditOperation(opResult) {\n        if (!opResult) {\n            // Nothing to execute\n            return;\n        }\n        if (opResult.shouldPushStackElementBefore) {\n            this._model.pushStackElement();\n        }\n        const result = CommandExecutor.executeCommands(this._model, this._cursors.getSelections(), opResult.commands);\n        if (result) {\n            // The commands were applied correctly\n            this._interpretCommandResult(result);\n            // Check for auto-closing closed characters\n            const autoClosedCharactersRanges = [];\n            const autoClosedEnclosingRanges = [];\n            for (let i = 0; i < opResult.commands.length; i++) {\n                const command = opResult.commands[i];\n                if (command instanceof TypeWithAutoClosingCommand && command.enclosingRange && command.closeCharacterRange) {\n                    autoClosedCharactersRanges.push(command.closeCharacterRange);\n                    autoClosedEnclosingRanges.push(command.enclosingRange);\n                }\n            }\n            if (autoClosedCharactersRanges.length > 0) {\n                this._pushAutoClosedAction(autoClosedCharactersRanges, autoClosedEnclosingRanges);\n            }\n            this._prevEditOperationType = opResult.type;\n        }\n        if (opResult.shouldPushStackElementAfter) {\n            this._model.pushStackElement();\n        }\n    }\n    _interpretCommandResult(cursorState) {\n        if (!cursorState || cursorState.length === 0) {\n            cursorState = this._cursors.readSelectionFromMarkers();\n        }\n        this._columnSelectData = null;\n        this._cursors.setSelections(cursorState);\n        this._cursors.normalize();\n    }\n    // -----------------------------------------------------------------------------------------------------------\n    // ----- emitting events\n    _emitStateChangedIfNecessary(eventsCollector, source, reason, oldState, reachedMaxCursorCount) {\n        const newState = CursorModelState.from(this._model, this);\n        if (newState.equals(oldState)) {\n            return false;\n        }\n        const selections = this._cursors.getSelections();\n        const viewSelections = this._cursors.getViewSelections();\n        // Let the view get the event first.\n        eventsCollector.emitViewEvent(new ViewCursorStateChangedEvent(viewSelections, selections));\n        // Only after the view has been notified, let the rest of the world know...\n        if (!oldState\n            || oldState.cursorState.length !== newState.cursorState.length\n            || newState.cursorState.some((newCursorState, i) => !newCursorState.modelState.equals(oldState.cursorState[i].modelState))) {\n            const oldSelections = oldState ? oldState.cursorState.map(s => s.modelState.selection) : null;\n            const oldModelVersionId = oldState ? oldState.modelVersionId : 0;\n            eventsCollector.emitOutgoingEvent(new CursorStateChangedEvent(oldSelections, selections, oldModelVersionId, newState.modelVersionId, source || 'keyboard', reason, reachedMaxCursorCount));\n        }\n        return true;\n    }\n    // -----------------------------------------------------------------------------------------------------------\n    // ----- handlers beyond this point\n    _findAutoClosingPairs(edits) {\n        if (!edits.length) {\n            return null;\n        }\n        const indices = [];\n        for (let i = 0, len = edits.length; i < len; i++) {\n            const edit = edits[i];\n            if (!edit.text || edit.text.indexOf('\\n') >= 0) {\n                return null;\n            }\n            const m = edit.text.match(/([)\\]}>'\"`])([^)\\]}>'\"`]*)$/);\n            if (!m) {\n                return null;\n            }\n            const closeChar = m[1];\n            const autoClosingPairsCandidates = this.context.cursorConfig.autoClosingPairs.autoClosingPairsCloseSingleChar.get(closeChar);\n            if (!autoClosingPairsCandidates || autoClosingPairsCandidates.length !== 1) {\n                return null;\n            }\n            const openChar = autoClosingPairsCandidates[0].open;\n            const closeCharIndex = edit.text.length - m[2].length - 1;\n            const openCharIndex = edit.text.lastIndexOf(openChar, closeCharIndex - 1);\n            if (openCharIndex === -1) {\n                return null;\n            }\n            indices.push([openCharIndex, closeCharIndex]);\n        }\n        return indices;\n    }\n    executeEdits(eventsCollector, source, edits, cursorStateComputer) {\n        let autoClosingIndices = null;\n        if (source === 'snippet') {\n            autoClosingIndices = this._findAutoClosingPairs(edits);\n        }\n        if (autoClosingIndices) {\n            edits[0]._isTracked = true;\n        }\n        const autoClosedCharactersRanges = [];\n        const autoClosedEnclosingRanges = [];\n        const selections = this._model.pushEditOperations(this.getSelections(), edits, (undoEdits) => {\n            if (autoClosingIndices) {\n                for (let i = 0, len = autoClosingIndices.length; i < len; i++) {\n                    const [openCharInnerIndex, closeCharInnerIndex] = autoClosingIndices[i];\n                    const undoEdit = undoEdits[i];\n                    const lineNumber = undoEdit.range.startLineNumber;\n                    const openCharIndex = undoEdit.range.startColumn - 1 + openCharInnerIndex;\n                    const closeCharIndex = undoEdit.range.startColumn - 1 + closeCharInnerIndex;\n                    autoClosedCharactersRanges.push(new Range(lineNumber, closeCharIndex + 1, lineNumber, closeCharIndex + 2));\n                    autoClosedEnclosingRanges.push(new Range(lineNumber, openCharIndex + 1, lineNumber, closeCharIndex + 2));\n                }\n            }\n            const selections = cursorStateComputer(undoEdits);\n            if (selections) {\n                // Don't recover the selection from markers because\n                // we know what it should be.\n                this._isHandling = true;\n            }\n            return selections;\n        });\n        if (selections) {\n            this._isHandling = false;\n            this.setSelections(eventsCollector, source, selections, 0 /* CursorChangeReason.NotSet */);\n        }\n        if (autoClosedCharactersRanges.length > 0) {\n            this._pushAutoClosedAction(autoClosedCharactersRanges, autoClosedEnclosingRanges);\n        }\n    }\n    _executeEdit(callback, eventsCollector, source, cursorChangeReason = 0 /* CursorChangeReason.NotSet */) {\n        if (this.context.cursorConfig.readOnly) {\n            // we cannot edit when read only...\n            return;\n        }\n        const oldState = CursorModelState.from(this._model, this);\n        this._cursors.stopTrackingSelections();\n        this._isHandling = true;\n        try {\n            this._cursors.ensureValidState();\n            callback();\n        }\n        catch (err) {\n            onUnexpectedError(err);\n        }\n        this._isHandling = false;\n        this._cursors.startTrackingSelections();\n        this._validateAutoClosedActions();\n        if (this._emitStateChangedIfNecessary(eventsCollector, source, cursorChangeReason, oldState, false)) {\n            this.revealPrimary(eventsCollector, source, false, 0 /* VerticalRevealType.Simple */, true, 0 /* editorCommon.ScrollType.Smooth */);\n        }\n    }\n    getAutoClosedCharacters() {\n        return AutoClosedAction.getAllAutoClosedCharacters(this._autoClosedActions);\n    }\n    startComposition(eventsCollector) {\n        this._compositionState = new CompositionState(this._model, this.getSelections());\n    }\n    endComposition(eventsCollector, source) {\n        const compositionOutcome = this._compositionState ? this._compositionState.deduceOutcome(this._model, this.getSelections()) : null;\n        this._compositionState = null;\n        this._executeEdit(() => {\n            if (source === 'keyboard') {\n                // composition finishes, let's check if we need to auto complete if necessary.\n                this._executeEditOperation(TypeOperations.compositionEndWithInterceptors(this._prevEditOperationType, this.context.cursorConfig, this._model, compositionOutcome, this.getSelections(), this.getAutoClosedCharacters()));\n            }\n        }, eventsCollector, source);\n    }\n    type(eventsCollector, text, source) {\n        this._executeEdit(() => {\n            if (source === 'keyboard') {\n                // If this event is coming straight from the keyboard, look for electric characters and enter\n                const len = text.length;\n                let offset = 0;\n                while (offset < len) {\n                    const charLength = strings.nextCharLength(text, offset);\n                    const chr = text.substr(offset, charLength);\n                    // Here we must interpret each typed character individually\n                    this._executeEditOperation(TypeOperations.typeWithInterceptors(!!this._compositionState, this._prevEditOperationType, this.context.cursorConfig, this._model, this.getSelections(), this.getAutoClosedCharacters(), chr));\n                    offset += charLength;\n                }\n            }\n            else {\n                this._executeEditOperation(TypeOperations.typeWithoutInterceptors(this._prevEditOperationType, this.context.cursorConfig, this._model, this.getSelections(), text));\n            }\n        }, eventsCollector, source);\n    }\n    compositionType(eventsCollector, text, replacePrevCharCnt, replaceNextCharCnt, positionDelta, source) {\n        if (text.length === 0 && replacePrevCharCnt === 0 && replaceNextCharCnt === 0) {\n            // this edit is a no-op\n            if (positionDelta !== 0) {\n                // but it still wants to move the cursor\n                const newSelections = this.getSelections().map(selection => {\n                    const position = selection.getPosition();\n                    return new Selection(position.lineNumber, position.column + positionDelta, position.lineNumber, position.column + positionDelta);\n                });\n                this.setSelections(eventsCollector, source, newSelections, 0 /* CursorChangeReason.NotSet */);\n            }\n            return;\n        }\n        this._executeEdit(() => {\n            this._executeEditOperation(TypeOperations.compositionType(this._prevEditOperationType, this.context.cursorConfig, this._model, this.getSelections(), text, replacePrevCharCnt, replaceNextCharCnt, positionDelta));\n        }, eventsCollector, source);\n    }\n    paste(eventsCollector, text, pasteOnNewLine, multicursorText, source) {\n        this._executeEdit(() => {\n            this._executeEditOperation(TypeOperations.paste(this.context.cursorConfig, this._model, this.getSelections(), text, pasteOnNewLine, multicursorText || []));\n        }, eventsCollector, source, 4 /* CursorChangeReason.Paste */);\n    }\n    cut(eventsCollector, source) {\n        this._executeEdit(() => {\n            this._executeEditOperation(DeleteOperations.cut(this.context.cursorConfig, this._model, this.getSelections()));\n        }, eventsCollector, source);\n    }\n    executeCommand(eventsCollector, command, source) {\n        this._executeEdit(() => {\n            this._cursors.killSecondaryCursors();\n            this._executeEditOperation(new EditOperationResult(0 /* EditOperationType.Other */, [command], {\n                shouldPushStackElementBefore: false,\n                shouldPushStackElementAfter: false\n            }));\n        }, eventsCollector, source);\n    }\n    executeCommands(eventsCollector, commands, source) {\n        this._executeEdit(() => {\n            this._executeEditOperation(new EditOperationResult(0 /* EditOperationType.Other */, commands, {\n                shouldPushStackElementBefore: false,\n                shouldPushStackElementAfter: false\n            }));\n        }, eventsCollector, source);\n    }\n}\nCursorsController.MAX_CURSOR_COUNT = 10000;\n/**\n * A snapshot of the cursor and the model state\n */\nclass CursorModelState {\n    constructor(modelVersionId, cursorState) {\n        this.modelVersionId = modelVersionId;\n        this.cursorState = cursorState;\n    }\n    static from(model, cursor) {\n        return new CursorModelState(model.getVersionId(), cursor.getCursorStates());\n    }\n    equals(other) {\n        if (!other) {\n            return false;\n        }\n        if (this.modelVersionId !== other.modelVersionId) {\n            return false;\n        }\n        if (this.cursorState.length !== other.cursorState.length) {\n            return false;\n        }\n        for (let i = 0, len = this.cursorState.length; i < len; i++) {\n            if (!this.cursorState[i].equals(other.cursorState[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\nclass AutoClosedAction {\n    constructor(model, autoClosedCharactersDecorations, autoClosedEnclosingDecorations) {\n        this._model = model;\n        this._autoClosedCharactersDecorations = autoClosedCharactersDecorations;\n        this._autoClosedEnclosingDecorations = autoClosedEnclosingDecorations;\n    }\n    static getAllAutoClosedCharacters(autoClosedActions) {\n        let autoClosedCharacters = [];\n        for (const autoClosedAction of autoClosedActions) {\n            autoClosedCharacters = autoClosedCharacters.concat(autoClosedAction.getAutoClosedCharactersRanges());\n        }\n        return autoClosedCharacters;\n    }\n    dispose() {\n        this._autoClosedCharactersDecorations = this._model.deltaDecorations(this._autoClosedCharactersDecorations, []);\n        this._autoClosedEnclosingDecorations = this._model.deltaDecorations(this._autoClosedEnclosingDecorations, []);\n    }\n    getAutoClosedCharactersRanges() {\n        const result = [];\n        for (let i = 0; i < this._autoClosedCharactersDecorations.length; i++) {\n            const decorationRange = this._model.getDecorationRange(this._autoClosedCharactersDecorations[i]);\n            if (decorationRange) {\n                result.push(decorationRange);\n            }\n        }\n        return result;\n    }\n    isValid(selections) {\n        const enclosingRanges = [];\n        for (let i = 0; i < this._autoClosedEnclosingDecorations.length; i++) {\n            const decorationRange = this._model.getDecorationRange(this._autoClosedEnclosingDecorations[i]);\n            if (decorationRange) {\n                enclosingRanges.push(decorationRange);\n                if (decorationRange.startLineNumber !== decorationRange.endLineNumber) {\n                    // Stop tracking if the range becomes multiline...\n                    return false;\n                }\n            }\n        }\n        enclosingRanges.sort(Range.compareRangesUsingStarts);\n        selections.sort(Range.compareRangesUsingStarts);\n        for (let i = 0; i < selections.length; i++) {\n            if (i >= enclosingRanges.length) {\n                return false;\n            }\n            if (!enclosingRanges[i].strictContainsRange(selections[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\nclass CommandExecutor {\n    static executeCommands(model, selectionsBefore, commands) {\n        const ctx = {\n            model: model,\n            selectionsBefore: selectionsBefore,\n            trackedRanges: [],\n            trackedRangesDirection: []\n        };\n        const result = this._innerExecuteCommands(ctx, commands);\n        for (let i = 0, len = ctx.trackedRanges.length; i < len; i++) {\n            ctx.model._setTrackedRange(ctx.trackedRanges[i], null, 0 /* TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges */);\n        }\n        return result;\n    }\n    static _innerExecuteCommands(ctx, commands) {\n        if (this._arrayIsEmpty(commands)) {\n            return null;\n        }\n        const commandsData = this._getEditOperations(ctx, commands);\n        if (commandsData.operations.length === 0) {\n            return null;\n        }\n        const rawOperations = commandsData.operations;\n        const loserCursorsMap = this._getLoserCursorMap(rawOperations);\n        if (loserCursorsMap.hasOwnProperty('0')) {\n            // These commands are very messed up\n            console.warn('Ignoring commands');\n            return null;\n        }\n        // Remove operations belonging to losing cursors\n        const filteredOperations = [];\n        for (let i = 0, len = rawOperations.length; i < len; i++) {\n            if (!loserCursorsMap.hasOwnProperty(rawOperations[i].identifier.major.toString())) {\n                filteredOperations.push(rawOperations[i]);\n            }\n        }\n        // TODO@Alex: find a better way to do this.\n        // give the hint that edit operations are tracked to the model\n        if (commandsData.hadTrackedEditOperation && filteredOperations.length > 0) {\n            filteredOperations[0]._isTracked = true;\n        }\n        let selectionsAfter = ctx.model.pushEditOperations(ctx.selectionsBefore, filteredOperations, (inverseEditOperations) => {\n            const groupedInverseEditOperations = [];\n            for (let i = 0; i < ctx.selectionsBefore.length; i++) {\n                groupedInverseEditOperations[i] = [];\n            }\n            for (const op of inverseEditOperations) {\n                if (!op.identifier) {\n                    // perhaps auto whitespace trim edits\n                    continue;\n                }\n                groupedInverseEditOperations[op.identifier.major].push(op);\n            }\n            const minorBasedSorter = (a, b) => {\n                return a.identifier.minor - b.identifier.minor;\n            };\n            const cursorSelections = [];\n            for (let i = 0; i < ctx.selectionsBefore.length; i++) {\n                if (groupedInverseEditOperations[i].length > 0) {\n                    groupedInverseEditOperations[i].sort(minorBasedSorter);\n                    cursorSelections[i] = commands[i].computeCursorState(ctx.model, {\n                        getInverseEditOperations: () => {\n                            return groupedInverseEditOperations[i];\n                        },\n                        getTrackedSelection: (id) => {\n                            const idx = parseInt(id, 10);\n                            const range = ctx.model._getTrackedRange(ctx.trackedRanges[idx]);\n                            if (ctx.trackedRangesDirection[idx] === 0 /* SelectionDirection.LTR */) {\n                                return new Selection(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn);\n                            }\n                            return new Selection(range.endLineNumber, range.endColumn, range.startLineNumber, range.startColumn);\n                        }\n                    });\n                }\n                else {\n                    cursorSelections[i] = ctx.selectionsBefore[i];\n                }\n            }\n            return cursorSelections;\n        });\n        if (!selectionsAfter) {\n            selectionsAfter = ctx.selectionsBefore;\n        }\n        // Extract losing cursors\n        const losingCursors = [];\n        for (const losingCursorIndex in loserCursorsMap) {\n            if (loserCursorsMap.hasOwnProperty(losingCursorIndex)) {\n                losingCursors.push(parseInt(losingCursorIndex, 10));\n            }\n        }\n        // Sort losing cursors descending\n        losingCursors.sort((a, b) => {\n            return b - a;\n        });\n        // Remove losing cursors\n        for (const losingCursor of losingCursors) {\n            selectionsAfter.splice(losingCursor, 1);\n        }\n        return selectionsAfter;\n    }\n    static _arrayIsEmpty(commands) {\n        for (let i = 0, len = commands.length; i < len; i++) {\n            if (commands[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    static _getEditOperations(ctx, commands) {\n        let operations = [];\n        let hadTrackedEditOperation = false;\n        for (let i = 0, len = commands.length; i < len; i++) {\n            const command = commands[i];\n            if (command) {\n                const r = this._getEditOperationsFromCommand(ctx, i, command);\n                operations = operations.concat(r.operations);\n                hadTrackedEditOperation = hadTrackedEditOperation || r.hadTrackedEditOperation;\n            }\n        }\n        return {\n            operations: operations,\n            hadTrackedEditOperation: hadTrackedEditOperation\n        };\n    }\n    static _getEditOperationsFromCommand(ctx, majorIdentifier, command) {\n        // This method acts as a transaction, if the command fails\n        // everything it has done is ignored\n        const operations = [];\n        let operationMinor = 0;\n        const addEditOperation = (range, text, forceMoveMarkers = false) => {\n            if (Range.isEmpty(range) && text === '') {\n                // This command wants to add a no-op => no thank you\n                return;\n            }\n            operations.push({\n                identifier: {\n                    major: majorIdentifier,\n                    minor: operationMinor++\n                },\n                range: range,\n                text: text,\n                forceMoveMarkers: forceMoveMarkers,\n                isAutoWhitespaceEdit: command.insertsAutoWhitespace\n            });\n        };\n        let hadTrackedEditOperation = false;\n        const addTrackedEditOperation = (selection, text, forceMoveMarkers) => {\n            hadTrackedEditOperation = true;\n            addEditOperation(selection, text, forceMoveMarkers);\n        };\n        const trackSelection = (_selection, trackPreviousOnEmpty) => {\n            const selection = Selection.liftSelection(_selection);\n            let stickiness;\n            if (selection.isEmpty()) {\n                if (typeof trackPreviousOnEmpty === 'boolean') {\n                    if (trackPreviousOnEmpty) {\n                        stickiness = 2 /* TrackedRangeStickiness.GrowsOnlyWhenTypingBefore */;\n                    }\n                    else {\n                        stickiness = 3 /* TrackedRangeStickiness.GrowsOnlyWhenTypingAfter */;\n                    }\n                }\n                else {\n                    // Try to lock it with surrounding text\n                    const maxLineColumn = ctx.model.getLineMaxColumn(selection.startLineNumber);\n                    if (selection.startColumn === maxLineColumn) {\n                        stickiness = 2 /* TrackedRangeStickiness.GrowsOnlyWhenTypingBefore */;\n                    }\n                    else {\n                        stickiness = 3 /* TrackedRangeStickiness.GrowsOnlyWhenTypingAfter */;\n                    }\n                }\n            }\n            else {\n                stickiness = 1 /* TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges */;\n            }\n            const l = ctx.trackedRanges.length;\n            const id = ctx.model._setTrackedRange(null, selection, stickiness);\n            ctx.trackedRanges[l] = id;\n            ctx.trackedRangesDirection[l] = selection.getDirection();\n            return l.toString();\n        };\n        const editOperationBuilder = {\n            addEditOperation: addEditOperation,\n            addTrackedEditOperation: addTrackedEditOperation,\n            trackSelection: trackSelection\n        };\n        try {\n            command.getEditOperations(ctx.model, editOperationBuilder);\n        }\n        catch (e) {\n            // TODO@Alex use notification service if this should be user facing\n            // e.friendlyMessage = nls.localize('corrupt.commands', \"Unexpected exception while executing command.\");\n            onUnexpectedError(e);\n            return {\n                operations: [],\n                hadTrackedEditOperation: false\n            };\n        }\n        return {\n            operations: operations,\n            hadTrackedEditOperation: hadTrackedEditOperation\n        };\n    }\n    static _getLoserCursorMap(operations) {\n        // This is destructive on the array\n        operations = operations.slice(0);\n        // Sort operations with last one first\n        operations.sort((a, b) => {\n            // Note the minus!\n            return -(Range.compareRangesUsingEnds(a.range, b.range));\n        });\n        // Operations can not overlap!\n        const loserCursorsMap = {};\n        for (let i = 1; i < operations.length; i++) {\n            const previousOp = operations[i - 1];\n            const currentOp = operations[i];\n            if (Range.getStartPosition(previousOp.range).isBefore(Range.getEndPosition(currentOp.range))) {\n                let loserMajor;\n                if (previousOp.identifier.major > currentOp.identifier.major) {\n                    // previousOp loses the battle\n                    loserMajor = previousOp.identifier.major;\n                }\n                else {\n                    loserMajor = currentOp.identifier.major;\n                }\n                loserCursorsMap[loserMajor.toString()] = true;\n                for (let j = 0; j < operations.length; j++) {\n                    if (operations[j].identifier.major === loserMajor) {\n                        operations.splice(j, 1);\n                        if (j < i) {\n                            i--;\n                        }\n                        j--;\n                    }\n                }\n                if (i > 0) {\n                    i--;\n                }\n            }\n        }\n        return loserCursorsMap;\n    }\n}\nclass CompositionLineState {\n    constructor(text, startSelection, endSelection) {\n        this.text = text;\n        this.startSelection = startSelection;\n        this.endSelection = endSelection;\n    }\n}\nclass CompositionState {\n    constructor(textModel, selections) {\n        this._original = CompositionState._capture(textModel, selections);\n    }\n    static _capture(textModel, selections) {\n        const result = [];\n        for (const selection of selections) {\n            if (selection.startLineNumber !== selection.endLineNumber) {\n                return null;\n            }\n            result.push(new CompositionLineState(textModel.getLineContent(selection.startLineNumber), selection.startColumn - 1, selection.endColumn - 1));\n        }\n        return result;\n    }\n    /**\n     * Returns the inserted text during this composition.\n     * If the composition resulted in existing text being changed (i.e. not a pure insertion) it returns null.\n     */\n    deduceOutcome(textModel, selections) {\n        if (!this._original) {\n            return null;\n        }\n        const current = CompositionState._capture(textModel, selections);\n        if (!current) {\n            return null;\n        }\n        if (this._original.length !== current.length) {\n            return null;\n        }\n        const result = [];\n        for (let i = 0, len = this._original.length; i < len; i++) {\n            result.push(CompositionState._deduceOutcome(this._original[i], current[i]));\n        }\n        return result;\n    }\n    static _deduceOutcome(original, current) {\n        const commonPrefix = Math.min(original.startSelection, current.startSelection, strings.commonPrefixLength(original.text, current.text));\n        const commonSuffix = Math.min(original.text.length - original.endSelection, current.text.length - current.endSelection, strings.commonSuffixLength(original.text, current.text));\n        const deletedText = original.text.substring(commonPrefix, original.text.length - commonSuffix);\n        const insertedText = current.text.substring(commonPrefix, current.text.length - commonSuffix);\n        return new CompositionOutcome(deletedText, original.startSelection - commonPrefix, original.endSelection - commonPrefix, insertedText, current.startSelection - commonPrefix, current.endSelection - commonPrefix);\n    }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA,SAASA,iBAAiB,QAAQ,gCAAgC;AAClE,OAAO,KAAKC,OAAO,MAAM,iCAAiC;AAC1D,SAASC,gBAAgB,QAAQ,uBAAuB;AACxD,SAASC,WAAW,EAAEC,mBAAmB,QAAQ,oBAAoB;AACrE,SAASC,aAAa,QAAQ,oBAAoB;AAClD,SAASC,gBAAgB,QAAQ,6BAA6B;AAC9D,SAASC,kBAAkB,EAAEC,cAAc,EAAEC,0BAA0B,QAAQ,2BAA2B;AAC1G,SAASC,KAAK,QAAQ,kBAAkB;AACxC,SAASC,SAAS,QAAQ,sBAAsB;AAChD,SAASC,6BAA6B,QAAQ,uBAAuB;AACrE,SAASC,2BAA2B,EAAEC,2BAA2B,QAAQ,kBAAkB;AAC3F,SAASC,OAAO,IAAPA,QAAO,EAAEC,UAAU,QAAQ,mCAAmC;AACvE,SAASC,uBAAuB,QAAQ,gCAAgC;AACxE,WAAaC,iBAAiB;EAAA;EAAA;EAC1B,2BAAYC,KAAK,EAAEC,SAAS,EAAEC,oBAAoB,EAAEC,YAAY,EAAE;IAAA;IAAA;IAC9D;IACA,MAAKC,MAAM,GAAGJ,KAAK;IACnB,MAAKK,oBAAoB,GAAG,MAAKD,MAAM,CAACE,YAAY,EAAE;IACtD,MAAKC,UAAU,GAAGN,SAAS;IAC3B,MAAKO,qBAAqB,GAAGN,oBAAoB;IACjD,MAAKO,OAAO,GAAG,IAAIvB,aAAa,CAAC,MAAKkB,MAAM,EAAE,MAAKG,UAAU,EAAE,MAAKC,qBAAqB,EAAEL,YAAY,CAAC;IACxG,MAAKO,QAAQ,GAAG,IAAI3B,gBAAgB,CAAC,MAAK0B,OAAO,CAAC;IAClD,MAAKE,SAAS,GAAG,KAAK;IACtB,MAAKC,WAAW,GAAG,KAAK;IACxB,MAAKC,iBAAiB,GAAG,IAAI;IAC7B,MAAKC,iBAAiB,GAAG,IAAI;IAC7B,MAAKC,kBAAkB,GAAG,EAAE;IAC5B,MAAKC,sBAAsB,GAAG,CAAC,CAAC;IAA8B;EAClE;EAAC;IAAA;IAAA,OACD,mBAAU;MACN,IAAI,CAACN,QAAQ,CAACd,OAAO,EAAE;MACvB,IAAI,CAACmB,kBAAkB,GAAGnB,QAAO,CAAC,IAAI,CAACmB,kBAAkB,CAAC;MAC1D;IACJ;EAAC;IAAA;IAAA,OACD,6BAAoBZ,YAAY,EAAE;MAC9B,IAAI,CAACM,OAAO,GAAG,IAAIvB,aAAa,CAAC,IAAI,CAACkB,MAAM,EAAE,IAAI,CAACG,UAAU,EAAE,IAAI,CAACC,qBAAqB,EAAEL,YAAY,CAAC;MACxG,IAAI,CAACO,QAAQ,CAACO,aAAa,CAAC,IAAI,CAACR,OAAO,CAAC;IAC7C;EAAC;IAAA;IAAA,OACD,8BAAqBS,eAAe,EAAE;MAClC,IAAI,IAAI,CAACb,oBAAoB,KAAK,IAAI,CAACD,MAAM,CAACE,YAAY,EAAE,EAAE;QAC1D;QACA;QACA;QACA;QACA;QACA;QACA;QACA;MACJ;MACA;MACA,IAAI,CAACa,SAAS,CAACD,eAAe,EAAE,WAAW,EAAE,CAAC,CAAC,iCAAiC,IAAI,CAACE,eAAe,EAAE,CAAC;IAC3G;EAAC;IAAA;IAAA,OACD,qBAAYC,QAAQ,EAAE;MAClB,IAAI,CAACV,SAAS,GAAGU,QAAQ;IAC7B;EAAC;IAAA;IAAA,OACD,sCAA6B;MACzB,IAAI,IAAI,CAACN,kBAAkB,CAACO,MAAM,GAAG,CAAC,EAAE;QACpC,IAAMC,UAAU,GAAG,IAAI,CAACb,QAAQ,CAACc,aAAa,EAAE;QAChD,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACV,kBAAkB,CAACO,MAAM,EAAEG,CAAC,EAAE,EAAE;UACrD,IAAMC,gBAAgB,GAAG,IAAI,CAACX,kBAAkB,CAACU,CAAC,CAAC;UACnD,IAAI,CAACC,gBAAgB,CAACC,OAAO,CAACJ,UAAU,CAAC,EAAE;YACvCG,gBAAgB,CAAC9B,OAAO,EAAE;YAC1B,IAAI,CAACmB,kBAAkB,CAACa,MAAM,CAACH,CAAC,EAAE,CAAC,CAAC;YACpCA,CAAC,EAAE;UACP;QACJ;MACJ;IACJ;IACA;EAAA;IAAA;IAAA,OACA,iCAAwB;MACpB,OAAO,IAAI,CAACf,QAAQ,CAACmB,gBAAgB,EAAE;IAC3C;EAAC;IAAA;IAAA,OACD,mCAA0B;MACtB,OAAO,IAAI,CAACnB,QAAQ,CAACoB,uBAAuB,EAAE;IAClD;EAAC;IAAA;IAAA,OACD,2BAAkB;MACd,OAAO,IAAI,CAACpB,QAAQ,CAACqB,MAAM,EAAE;IACjC;EAAC;IAAA;IAAA,OACD,mBAAUb,eAAe,EAAEc,MAAM,EAAEC,MAAM,EAAEC,MAAM,EAAE;MAC/C,IAAIC,qBAAqB,GAAG,KAAK;MACjC,IAAID,MAAM,KAAK,IAAI,IAAIA,MAAM,CAACZ,MAAM,GAAGvB,iBAAiB,CAACqC,gBAAgB,EAAE;QACvEF,MAAM,GAAGA,MAAM,CAACG,KAAK,CAAC,CAAC,EAAEtC,iBAAiB,CAACqC,gBAAgB,CAAC;QAC5DD,qBAAqB,GAAG,IAAI;MAChC;MACA,IAAMG,QAAQ,GAAGC,gBAAgB,CAACC,IAAI,CAAC,IAAI,CAACpC,MAAM,EAAE,IAAI,CAAC;MACzD,IAAI,CAACM,QAAQ,CAACS,SAAS,CAACe,MAAM,CAAC;MAC/B,IAAI,CAACxB,QAAQ,CAAC+B,SAAS,EAAE;MACzB,IAAI,CAAC3B,iBAAiB,GAAG,IAAI;MAC7B,IAAI,CAAC4B,0BAA0B,EAAE;MACjC,OAAO,IAAI,CAACC,4BAA4B,CAACzB,eAAe,EAAEc,MAAM,EAAEC,MAAM,EAAEK,QAAQ,EAAEH,qBAAqB,CAAC;IAC9G;EAAC;IAAA;IAAA,OACD,mCAA0BS,gBAAgB,EAAE;MACxC,IAAI,CAAC9B,iBAAiB,GAAG8B,gBAAgB;IAC7C;EAAC;IAAA;IAAA,OACD,uBAAc1B,eAAe,EAAEc,MAAM,EAAEa,aAAa,EAAEC,YAAY,EAAEC,gBAAgB,EAAEC,UAAU,EAAE;MAC9F,IAAMC,aAAa,GAAG,IAAI,CAACvC,QAAQ,CAACwC,gBAAgB,EAAE;MACtD,IAAIC,eAAe,GAAG,IAAI;MAC1B,IAAIC,oBAAoB,GAAG,IAAI;MAC/B,IAAIH,aAAa,CAAC3B,MAAM,GAAG,CAAC,EAAE;QAC1B8B,oBAAoB,GAAG,IAAI,CAAC1C,QAAQ,CAAC2C,iBAAiB,EAAE;MAC5D,CAAC,MACI;QACDF,eAAe,GAAG5D,KAAK,CAAC+D,aAAa,CAACL,aAAa,CAAC,CAAC,CAAC,EAAEA,aAAa,CAAC,CAAC,CAAC,CAAC;MAC7E;MACA/B,eAAe,CAACqC,aAAa,CAAC,IAAI5D,2BAA2B,CAACqC,MAAM,EAAEa,aAAa,EAAEM,eAAe,EAAEC,oBAAoB,EAAEN,YAAY,EAAEC,gBAAgB,EAAEC,UAAU,CAAC,CAAC;IAC5K;EAAC;IAAA;IAAA,OACD,qBAAY;MACR,IAAMQ,MAAM,GAAG,EAAE;MACjB,IAAMjC,UAAU,GAAG,IAAI,CAACb,QAAQ,CAACc,aAAa,EAAE;MAChD,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEgC,GAAG,GAAGlC,UAAU,CAACD,MAAM,EAAEG,CAAC,GAAGgC,GAAG,EAAEhC,CAAC,EAAE,EAAE;QACnD,IAAMiC,SAAS,GAAGnC,UAAU,CAACE,CAAC,CAAC;QAC/B+B,MAAM,CAACG,IAAI,CAAC;UACRC,eAAe,EAAE,CAACF,SAAS,CAACG,OAAO,EAAE;UACrCC,cAAc,EAAE;YACZC,UAAU,EAAEL,SAAS,CAACM,wBAAwB;YAC9CC,MAAM,EAAEP,SAAS,CAACQ;UACtB,CAAC;UACDC,QAAQ,EAAE;YACNJ,UAAU,EAAEL,SAAS,CAACU,kBAAkB;YACxCH,MAAM,EAAEP,SAAS,CAACW;UACtB;QACJ,CAAC,CAAC;MACN;MACA,OAAOb,MAAM;IACjB;EAAC;IAAA;IAAA,OACD,sBAAatC,eAAe,EAAEgB,MAAM,EAAE;MAClC,IAAMoC,iBAAiB,GAAG,EAAE;MAC5B,KAAK,IAAI7C,CAAC,GAAG,CAAC,EAAEgC,GAAG,GAAGvB,MAAM,CAACZ,MAAM,EAAEG,CAAC,GAAGgC,GAAG,EAAEhC,CAAC,EAAE,EAAE;QAC/C,IAAM8C,KAAK,GAAGrC,MAAM,CAACT,CAAC,CAAC;QACvB,IAAI2C,kBAAkB,GAAG,CAAC;QAC1B,IAAIC,cAAc,GAAG,CAAC;QACtB;QACA,IAAIE,KAAK,CAACJ,QAAQ,IAAII,KAAK,CAACJ,QAAQ,CAACJ,UAAU,EAAE;UAC7CK,kBAAkB,GAAGG,KAAK,CAACJ,QAAQ,CAACJ,UAAU;QAClD;QACA,IAAIQ,KAAK,CAACJ,QAAQ,IAAII,KAAK,CAACJ,QAAQ,CAACF,MAAM,EAAE;UACzCI,cAAc,GAAGE,KAAK,CAACJ,QAAQ,CAACF,MAAM;QAC1C;QACA,IAAID,wBAAwB,GAAGI,kBAAkB;QACjD,IAAIF,oBAAoB,GAAGG,cAAc;QACzC;QACA,IAAIE,KAAK,CAACT,cAAc,IAAIS,KAAK,CAACT,cAAc,CAACC,UAAU,EAAE;UACzDC,wBAAwB,GAAGO,KAAK,CAACT,cAAc,CAACC,UAAU;QAC9D;QACA,IAAIQ,KAAK,CAACT,cAAc,IAAIS,KAAK,CAACT,cAAc,CAACG,MAAM,EAAE;UACrDC,oBAAoB,GAAGK,KAAK,CAACT,cAAc,CAACG,MAAM;QACtD;QACAK,iBAAiB,CAACX,IAAI,CAAC;UACnBK,wBAAwB,EAAEA,wBAAwB;UAClDE,oBAAoB,EAAEA,oBAAoB;UAC1CE,kBAAkB,EAAEA,kBAAkB;UACtCC,cAAc,EAAEA;QACpB,CAAC,CAAC;MACN;MACA,IAAI,CAAClD,SAAS,CAACD,eAAe,EAAE,cAAc,EAAE,CAAC,CAAC,iCAAiClC,WAAW,CAACwF,mBAAmB,CAACF,iBAAiB,CAAC,CAAC;MACtI,IAAI,CAACG,aAAa,CAACvD,eAAe,EAAE,cAAc,EAAE,KAAK,EAAE,CAAC,CAAC,iCAAiC,IAAI,EAAE,CAAC,CAAC,wCAAwC;IAClJ;EAAC;IAAA;IAAA,OACD,+BAAsBA,eAAe,EAAEwD,KAAK,EAAE;MAC1C,IAAIA,KAAK,YAAYjF,6BAA6B,EAAE;QAChD;QACA,IAAI,IAAI,CAACmB,WAAW,EAAE;UAClB;UACA;QACJ;QACA;QACA;QACA;QACA;QACA,IAAI,CAACA,WAAW,GAAG,IAAI;QACvB,IAAI;UACA,IAAI,CAACO,SAAS,CAACD,eAAe,EAAE,aAAa,EAAE,CAAC,CAAC,iCAAiC,IAAI,CAACE,eAAe,EAAE,CAAC;QAC7G,CAAC,SACO;UACJ,IAAI,CAACR,WAAW,GAAG,KAAK;QAC5B;MACJ,CAAC,MACI;QACD,IAAM+D,CAAC,GAAGD,KAAK,CAACE,sBAAsB;QACtC,IAAI,CAACvE,oBAAoB,GAAGsE,CAAC,CAACE,SAAS;QACvC,IAAI,IAAI,CAACjE,WAAW,EAAE;UAClB;QACJ;QACA,IAAMkE,aAAa,GAAGH,CAAC,CAACI,aAAa,CAAC,CAAC,CAAC,kCAAkC;QAC1E,IAAI,CAAC/D,sBAAsB,GAAG,CAAC,CAAC;QAChC,IAAI8D,aAAa,EAAE;UACf;UACA,IAAI,CAACpE,QAAQ,CAACd,OAAO,EAAE;UACvB,IAAI,CAACc,QAAQ,GAAG,IAAI3B,gBAAgB,CAAC,IAAI,CAAC0B,OAAO,CAAC;UAClD,IAAI,CAACiC,0BAA0B,EAAE;UACjC,IAAI,CAACC,4BAA4B,CAACzB,eAAe,EAAE,OAAO,EAAE,CAAC,CAAC,uCAAuC,IAAI,EAAE,KAAK,CAAC;QACrH,CAAC,MACI;UACD,IAAI,IAAI,CAACP,SAAS,IAAIgE,CAAC,CAACK,kBAAkB,IAAIL,CAAC,CAACK,kBAAkB,CAAC1D,MAAM,GAAG,CAAC,EAAE;YAC3E,IAAM2D,WAAW,GAAGjG,WAAW,CAACwF,mBAAmB,CAACG,CAAC,CAACK,kBAAkB,CAAC;YACzE,IAAI,IAAI,CAAC7D,SAAS,CAACD,eAAe,EAAE,aAAa,EAAEyD,CAAC,CAACO,SAAS,GAAG,CAAC,CAAC,gCAAgCP,CAAC,CAACQ,SAAS,GAAG,CAAC,CAAC,gCAAgC,CAAC,CAAC,6CAA6CF,WAAW,CAAC,EAAE;cAC5M,IAAI,CAACR,aAAa,CAACvD,eAAe,EAAE,aAAa,EAAE,KAAK,EAAE,CAAC,CAAC,iCAAiC,IAAI,EAAE,CAAC,CAAC,qCAAqC;YAC9I;UACJ,CAAC,MACI;YACD,IAAMkE,qBAAqB,GAAG,IAAI,CAAC1E,QAAQ,CAAC2E,wBAAwB,EAAE;YACtE,IAAI,CAAClE,SAAS,CAACD,eAAe,EAAE,aAAa,EAAE,CAAC,CAAC,6CAA6ClC,WAAW,CAACwF,mBAAmB,CAACY,qBAAqB,CAAC,CAAC;UACzJ;QACJ;MACJ;IACJ;EAAC;IAAA;IAAA,OACD,wBAAe;MACX,OAAO,IAAI,CAAC1E,QAAQ,CAACmB,gBAAgB,EAAE,CAACyD,UAAU,CAAC5B,SAAS;IAChE;EAAC;IAAA;IAAA,OACD,kCAAyB;MACrB,OAAO,IAAI,CAAChD,QAAQ,CAAC6E,sBAAsB,EAAE;IACjD;EAAC;IAAA;IAAA,OACD,qCAA4B;MACxB,OAAO,IAAI,CAAC7E,QAAQ,CAAC8E,yBAAyB,EAAE;IACpD;EAAC;IAAA;IAAA,OACD,qCAA4B;MACxB,IAAI,IAAI,CAAC1E,iBAAiB,EAAE;QACxB,OAAO,IAAI,CAACA,iBAAiB;MACjC;MACA,IAAM2E,aAAa,GAAG,IAAI,CAAC/E,QAAQ,CAACmB,gBAAgB,EAAE;MACtD,IAAM6D,kBAAkB,GAAGD,aAAa,CAACE,SAAS,CAAC7B,cAAc,CAAC8B,gBAAgB,EAAE;MACpF,IAAMC,YAAY,GAAGJ,aAAa,CAACE,SAAS,CAACxB,QAAQ;MACrD,OAAO;QACH2B,MAAM,EAAE,KAAK;QACbC,kBAAkB,EAAEL,kBAAkB,CAAC3B,UAAU;QACjDiC,oBAAoB,EAAE,IAAI,CAACvF,OAAO,CAACN,YAAY,CAAC8F,uBAAuB,CAAC,IAAI,CAAC1F,UAAU,EAAEmF,kBAAkB,CAAC;QAC5GQ,gBAAgB,EAAEL,YAAY,CAAC9B,UAAU;QACzCoC,kBAAkB,EAAE,IAAI,CAAC1F,OAAO,CAACN,YAAY,CAAC8F,uBAAuB,CAAC,IAAI,CAAC1F,UAAU,EAAEsF,YAAY;MACvG,CAAC;IACL;EAAC;IAAA;IAAA,OACD,yBAAgB;MACZ,OAAO,IAAI,CAACnF,QAAQ,CAACc,aAAa,EAAE;IACxC;EAAC;IAAA;IAAA,OACD,uBAAcN,eAAe,EAAEc,MAAM,EAAET,UAAU,EAAEU,MAAM,EAAE;MACvD,IAAI,CAACd,SAAS,CAACD,eAAe,EAAEc,MAAM,EAAEC,MAAM,EAAEjD,WAAW,CAACwF,mBAAmB,CAACjD,UAAU,CAAC,CAAC;IAChG;EAAC;IAAA;IAAA,OACD,oCAA2B;MACvB,OAAO,IAAI,CAACP,sBAAsB;IACtC;EAAC;IAAA;IAAA,OACD,kCAAyBoF,IAAI,EAAE;MAC3B,IAAI,CAACpF,sBAAsB,GAAGoF,IAAI;IACtC;IACA;EAAA;IAAA;IAAA,OACA,+BAAsBC,0BAA0B,EAAEC,yBAAyB,EAAE;MACzE,IAAMC,oCAAoC,GAAG,EAAE;MAC/C,IAAMC,mCAAmC,GAAG,EAAE;MAC9C,KAAK,IAAI/E,CAAC,GAAG,CAAC,EAAEgC,GAAG,GAAG4C,0BAA0B,CAAC/E,MAAM,EAAEG,CAAC,GAAGgC,GAAG,EAAEhC,CAAC,EAAE,EAAE;QACnE8E,oCAAoC,CAAC5C,IAAI,CAAC;UACtC8C,KAAK,EAAEJ,0BAA0B,CAAC5E,CAAC,CAAC;UACpCiF,OAAO,EAAE;YACLC,WAAW,EAAE,uBAAuB;YACpCC,eAAe,EAAE,uBAAuB;YACxCC,UAAU,EAAE,CAAC,CAAC;UAClB;QACJ,CAAC,CAAC;;QACFL,mCAAmC,CAAC7C,IAAI,CAAC;UACrC8C,KAAK,EAAEH,yBAAyB,CAAC7E,CAAC,CAAC;UACnCiF,OAAO,EAAE;YACLC,WAAW,EAAE,uBAAuB;YACpCE,UAAU,EAAE,CAAC,CAAC;UAClB;QACJ,CAAC,CAAC;MACN;;MACA,IAAMC,+BAA+B,GAAG,IAAI,CAAC1G,MAAM,CAAC2G,gBAAgB,CAAC,EAAE,EAAER,oCAAoC,CAAC;MAC9G,IAAMS,8BAA8B,GAAG,IAAI,CAAC5G,MAAM,CAAC2G,gBAAgB,CAAC,EAAE,EAAEP,mCAAmC,CAAC;MAC5G,IAAI,CAACzF,kBAAkB,CAAC4C,IAAI,CAAC,IAAIsD,gBAAgB,CAAC,IAAI,CAAC7G,MAAM,EAAE0G,+BAA+B,EAAEE,8BAA8B,CAAC,CAAC;IACpI;EAAC;IAAA;IAAA,OACD,+BAAsBE,QAAQ,EAAE;MAC5B,IAAI,CAACA,QAAQ,EAAE;QACX;QACA;MACJ;MACA,IAAIA,QAAQ,CAACC,4BAA4B,EAAE;QACvC,IAAI,CAAC/G,MAAM,CAACgH,gBAAgB,EAAE;MAClC;MACA,IAAM5D,MAAM,GAAG6D,eAAe,CAACC,eAAe,CAAC,IAAI,CAAClH,MAAM,EAAE,IAAI,CAACM,QAAQ,CAACc,aAAa,EAAE,EAAE0F,QAAQ,CAACK,QAAQ,CAAC;MAC7G,IAAI/D,MAAM,EAAE;QACR;QACA,IAAI,CAACgE,uBAAuB,CAAChE,MAAM,CAAC;QACpC;QACA,IAAM6C,0BAA0B,GAAG,EAAE;QACrC,IAAMC,yBAAyB,GAAG,EAAE;QACpC,KAAK,IAAI7E,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGyF,QAAQ,CAACK,QAAQ,CAACjG,MAAM,EAAEG,CAAC,EAAE,EAAE;UAC/C,IAAMgG,OAAO,GAAGP,QAAQ,CAACK,QAAQ,CAAC9F,CAAC,CAAC;UACpC,IAAIgG,OAAO,YAAYnI,0BAA0B,IAAImI,OAAO,CAACC,cAAc,IAAID,OAAO,CAACE,mBAAmB,EAAE;YACxGtB,0BAA0B,CAAC1C,IAAI,CAAC8D,OAAO,CAACE,mBAAmB,CAAC;YAC5DrB,yBAAyB,CAAC3C,IAAI,CAAC8D,OAAO,CAACC,cAAc,CAAC;UAC1D;QACJ;QACA,IAAIrB,0BAA0B,CAAC/E,MAAM,GAAG,CAAC,EAAE;UACvC,IAAI,CAACsG,qBAAqB,CAACvB,0BAA0B,EAAEC,yBAAyB,CAAC;QACrF;QACA,IAAI,CAACtF,sBAAsB,GAAGkG,QAAQ,CAACd,IAAI;MAC/C;MACA,IAAIc,QAAQ,CAACW,2BAA2B,EAAE;QACtC,IAAI,CAACzH,MAAM,CAACgH,gBAAgB,EAAE;MAClC;IACJ;EAAC;IAAA;IAAA,OACD,iCAAwBnC,WAAW,EAAE;MACjC,IAAI,CAACA,WAAW,IAAIA,WAAW,CAAC3D,MAAM,KAAK,CAAC,EAAE;QAC1C2D,WAAW,GAAG,IAAI,CAACvE,QAAQ,CAAC2E,wBAAwB,EAAE;MAC1D;MACA,IAAI,CAACvE,iBAAiB,GAAG,IAAI;MAC7B,IAAI,CAACJ,QAAQ,CAACoH,aAAa,CAAC7C,WAAW,CAAC;MACxC,IAAI,CAACvE,QAAQ,CAAC+B,SAAS,EAAE;IAC7B;IACA;IACA;EAAA;IAAA;IAAA,OACA,sCAA6BvB,eAAe,EAAEc,MAAM,EAAEC,MAAM,EAAEK,QAAQ,EAAEH,qBAAqB,EAAE;MAC3F,IAAM4F,QAAQ,GAAGxF,gBAAgB,CAACC,IAAI,CAAC,IAAI,CAACpC,MAAM,EAAE,IAAI,CAAC;MACzD,IAAI2H,QAAQ,CAACC,MAAM,CAAC1F,QAAQ,CAAC,EAAE;QAC3B,OAAO,KAAK;MAChB;MACA,IAAMf,UAAU,GAAG,IAAI,CAACb,QAAQ,CAACc,aAAa,EAAE;MAChD,IAAMyG,cAAc,GAAG,IAAI,CAACvH,QAAQ,CAAC2C,iBAAiB,EAAE;MACxD;MACAnC,eAAe,CAACqC,aAAa,CAAC,IAAI7D,2BAA2B,CAACuI,cAAc,EAAE1G,UAAU,CAAC,CAAC;MAC1F;MACA,IAAI,CAACe,QAAQ,IACNA,QAAQ,CAAC2C,WAAW,CAAC3D,MAAM,KAAKyG,QAAQ,CAAC9C,WAAW,CAAC3D,MAAM,IAC3DyG,QAAQ,CAAC9C,WAAW,CAACiD,IAAI,CAAC,UAACC,cAAc,EAAE1G,CAAC;QAAA,OAAK,CAAC0G,cAAc,CAAC7C,UAAU,CAAC0C,MAAM,CAAC1F,QAAQ,CAAC2C,WAAW,CAACxD,CAAC,CAAC,CAAC6D,UAAU,CAAC;MAAA,EAAC,EAAE;QAC5H,IAAM8C,aAAa,GAAG9F,QAAQ,GAAGA,QAAQ,CAAC2C,WAAW,CAACoD,GAAG,CAAC,UAAAC,CAAC;UAAA,OAAIA,CAAC,CAAChD,UAAU,CAAC5B,SAAS;QAAA,EAAC,GAAG,IAAI;QAC7F,IAAM6E,iBAAiB,GAAGjG,QAAQ,GAAGA,QAAQ,CAACkG,cAAc,GAAG,CAAC;QAChEtH,eAAe,CAACuH,iBAAiB,CAAC,IAAI3I,uBAAuB,CAACsI,aAAa,EAAE7G,UAAU,EAAEgH,iBAAiB,EAAER,QAAQ,CAACS,cAAc,EAAExG,MAAM,IAAI,UAAU,EAAEC,MAAM,EAAEE,qBAAqB,CAAC,CAAC;MAC9L;MACA,OAAO,IAAI;IACf;IACA;IACA;EAAA;IAAA;IAAA,OACA,+BAAsBuG,KAAK,EAAE;MACzB,IAAI,CAACA,KAAK,CAACpH,MAAM,EAAE;QACf,OAAO,IAAI;MACf;MACA,IAAMqH,OAAO,GAAG,EAAE;MAClB,KAAK,IAAIlH,CAAC,GAAG,CAAC,EAAEgC,GAAG,GAAGiF,KAAK,CAACpH,MAAM,EAAEG,CAAC,GAAGgC,GAAG,EAAEhC,CAAC,EAAE,EAAE;QAC9C,IAAMmH,IAAI,GAAGF,KAAK,CAACjH,CAAC,CAAC;QACrB,IAAI,CAACmH,IAAI,CAACC,IAAI,IAAID,IAAI,CAACC,IAAI,CAACC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;UAC5C,OAAO,IAAI;QACf;QACA,IAAMC,CAAC,GAAGH,IAAI,CAACC,IAAI,CAACG,KAAK,CAAC,6BAA6B,CAAC;QACxD,IAAI,CAACD,CAAC,EAAE;UACJ,OAAO,IAAI;QACf;QACA,IAAME,SAAS,GAAGF,CAAC,CAAC,CAAC,CAAC;QACtB,IAAMG,0BAA0B,GAAG,IAAI,CAACzI,OAAO,CAACN,YAAY,CAACgJ,gBAAgB,CAACC,+BAA+B,CAACC,GAAG,CAACJ,SAAS,CAAC;QAC5H,IAAI,CAACC,0BAA0B,IAAIA,0BAA0B,CAAC5H,MAAM,KAAK,CAAC,EAAE;UACxE,OAAO,IAAI;QACf;QACA,IAAMgI,QAAQ,GAAGJ,0BAA0B,CAAC,CAAC,CAAC,CAACK,IAAI;QACnD,IAAMC,cAAc,GAAGZ,IAAI,CAACC,IAAI,CAACvH,MAAM,GAAGyH,CAAC,CAAC,CAAC,CAAC,CAACzH,MAAM,GAAG,CAAC;QACzD,IAAMmI,aAAa,GAAGb,IAAI,CAACC,IAAI,CAACa,WAAW,CAACJ,QAAQ,EAAEE,cAAc,GAAG,CAAC,CAAC;QACzE,IAAIC,aAAa,KAAK,CAAC,CAAC,EAAE;UACtB,OAAO,IAAI;QACf;QACAd,OAAO,CAAChF,IAAI,CAAC,CAAC8F,aAAa,EAAED,cAAc,CAAC,CAAC;MACjD;MACA,OAAOb,OAAO;IAClB;EAAC;IAAA;IAAA,OACD,sBAAazH,eAAe,EAAEc,MAAM,EAAE0G,KAAK,EAAEiB,mBAAmB,EAAE;MAAA;MAC9D,IAAIC,kBAAkB,GAAG,IAAI;MAC7B,IAAI5H,MAAM,KAAK,SAAS,EAAE;QACtB4H,kBAAkB,GAAG,IAAI,CAACC,qBAAqB,CAACnB,KAAK,CAAC;MAC1D;MACA,IAAIkB,kBAAkB,EAAE;QACpBlB,KAAK,CAAC,CAAC,CAAC,CAACoB,UAAU,GAAG,IAAI;MAC9B;MACA,IAAMzD,0BAA0B,GAAG,EAAE;MACrC,IAAMC,yBAAyB,GAAG,EAAE;MACpC,IAAM/E,UAAU,GAAG,IAAI,CAACnB,MAAM,CAAC2J,kBAAkB,CAAC,IAAI,CAACvI,aAAa,EAAE,EAAEkH,KAAK,EAAE,UAACsB,SAAS,EAAK;QAC1F,IAAIJ,kBAAkB,EAAE;UACpB,KAAK,IAAInI,CAAC,GAAG,CAAC,EAAEgC,GAAG,GAAGmG,kBAAkB,CAACtI,MAAM,EAAEG,CAAC,GAAGgC,GAAG,EAAEhC,CAAC,EAAE,EAAE;YAC3D,2CAAkDmI,kBAAkB,CAACnI,CAAC,CAAC;cAAhEwI,kBAAkB;cAAEC,mBAAmB;YAC9C,IAAMC,QAAQ,GAAGH,SAAS,CAACvI,CAAC,CAAC;YAC7B,IAAMsC,UAAU,GAAGoG,QAAQ,CAAC1D,KAAK,CAAC2D,eAAe;YACjD,IAAMX,aAAa,GAAGU,QAAQ,CAAC1D,KAAK,CAAC4D,WAAW,GAAG,CAAC,GAAGJ,kBAAkB;YACzE,IAAMT,cAAc,GAAGW,QAAQ,CAAC1D,KAAK,CAAC4D,WAAW,GAAG,CAAC,GAAGH,mBAAmB;YAC3E7D,0BAA0B,CAAC1C,IAAI,CAAC,IAAIpE,KAAK,CAACwE,UAAU,EAAEyF,cAAc,GAAG,CAAC,EAAEzF,UAAU,EAAEyF,cAAc,GAAG,CAAC,CAAC,CAAC;YAC1GlD,yBAAyB,CAAC3C,IAAI,CAAC,IAAIpE,KAAK,CAACwE,UAAU,EAAE0F,aAAa,GAAG,CAAC,EAAE1F,UAAU,EAAEyF,cAAc,GAAG,CAAC,CAAC,CAAC;UAC5G;QACJ;QACA,IAAMjI,UAAU,GAAGoI,mBAAmB,CAACK,SAAS,CAAC;QACjD,IAAIzI,UAAU,EAAE;UACZ;UACA;UACA,MAAI,CAACX,WAAW,GAAG,IAAI;QAC3B;QACA,OAAOW,UAAU;MACrB,CAAC,CAAC;MACF,IAAIA,UAAU,EAAE;QACZ,IAAI,CAACX,WAAW,GAAG,KAAK;QACxB,IAAI,CAACkH,aAAa,CAAC5G,eAAe,EAAEc,MAAM,EAAET,UAAU,EAAE,CAAC,CAAC,gCAAgC;MAC9F;;MACA,IAAI8E,0BAA0B,CAAC/E,MAAM,GAAG,CAAC,EAAE;QACvC,IAAI,CAACsG,qBAAqB,CAACvB,0BAA0B,EAAEC,yBAAyB,CAAC;MACrF;IACJ;EAAC;IAAA;IAAA,OACD,sBAAagE,QAAQ,EAAEpJ,eAAe,EAAEc,MAAM,EAA0D;MAAA,IAAxDuI,kBAAkB,uEAAG,CAAC;MAClE,IAAI,IAAI,CAAC9J,OAAO,CAACN,YAAY,CAACqK,QAAQ,EAAE;QACpC;QACA;MACJ;MACA,IAAMlI,QAAQ,GAAGC,gBAAgB,CAACC,IAAI,CAAC,IAAI,CAACpC,MAAM,EAAE,IAAI,CAAC;MACzD,IAAI,CAACM,QAAQ,CAAC+J,sBAAsB,EAAE;MACtC,IAAI,CAAC7J,WAAW,GAAG,IAAI;MACvB,IAAI;QACA,IAAI,CAACF,QAAQ,CAACgK,gBAAgB,EAAE;QAChCJ,QAAQ,EAAE;MACd,CAAC,CACD,OAAOK,GAAG,EAAE;QACR9L,iBAAiB,CAAC8L,GAAG,CAAC;MAC1B;MACA,IAAI,CAAC/J,WAAW,GAAG,KAAK;MACxB,IAAI,CAACF,QAAQ,CAACkK,uBAAuB,EAAE;MACvC,IAAI,CAAClI,0BAA0B,EAAE;MACjC,IAAI,IAAI,CAACC,4BAA4B,CAACzB,eAAe,EAAEc,MAAM,EAAEuI,kBAAkB,EAAEjI,QAAQ,EAAE,KAAK,CAAC,EAAE;QACjG,IAAI,CAACmC,aAAa,CAACvD,eAAe,EAAEc,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC,iCAAiC,IAAI,EAAE,CAAC,CAAC,qCAAqC;MACvI;IACJ;EAAC;IAAA;IAAA,OACD,mCAA0B;MACtB,OAAOiF,gBAAgB,CAAC4D,0BAA0B,CAAC,IAAI,CAAC9J,kBAAkB,CAAC;IAC/E;EAAC;IAAA;IAAA,OACD,0BAAiBG,eAAe,EAAE;MAC9B,IAAI,CAACL,iBAAiB,GAAG,IAAIiK,gBAAgB,CAAC,IAAI,CAAC1K,MAAM,EAAE,IAAI,CAACoB,aAAa,EAAE,CAAC;IACpF;EAAC;IAAA;IAAA,OACD,wBAAeN,eAAe,EAAEc,MAAM,EAAE;MAAA;MACpC,IAAM+I,kBAAkB,GAAG,IAAI,CAAClK,iBAAiB,GAAG,IAAI,CAACA,iBAAiB,CAACmK,aAAa,CAAC,IAAI,CAAC5K,MAAM,EAAE,IAAI,CAACoB,aAAa,EAAE,CAAC,GAAG,IAAI;MAClI,IAAI,CAACX,iBAAiB,GAAG,IAAI;MAC7B,IAAI,CAACoK,YAAY,CAAC,YAAM;QACpB,IAAIjJ,MAAM,KAAK,UAAU,EAAE;UACvB;UACA,MAAI,CAACkJ,qBAAqB,CAAC7L,cAAc,CAAC8L,8BAA8B,CAAC,MAAI,CAACnK,sBAAsB,EAAE,MAAI,CAACP,OAAO,CAACN,YAAY,EAAE,MAAI,CAACC,MAAM,EAAE2K,kBAAkB,EAAE,MAAI,CAACvJ,aAAa,EAAE,EAAE,MAAI,CAAC4J,uBAAuB,EAAE,CAAC,CAAC;QAC5N;MACJ,CAAC,EAAElK,eAAe,EAAEc,MAAM,CAAC;IAC/B;EAAC;IAAA;IAAA,OACD,cAAKd,eAAe,EAAE2H,IAAI,EAAE7G,MAAM,EAAE;MAAA;MAChC,IAAI,CAACiJ,YAAY,CAAC,YAAM;QACpB,IAAIjJ,MAAM,KAAK,UAAU,EAAE;UACvB;UACA,IAAMyB,GAAG,GAAGoF,IAAI,CAACvH,MAAM;UACvB,IAAI+J,MAAM,GAAG,CAAC;UACd,OAAOA,MAAM,GAAG5H,GAAG,EAAE;YACjB,IAAM6H,UAAU,GAAGxM,OAAO,CAACyM,cAAc,CAAC1C,IAAI,EAAEwC,MAAM,CAAC;YACvD,IAAMG,GAAG,GAAG3C,IAAI,CAAC4C,MAAM,CAACJ,MAAM,EAAEC,UAAU,CAAC;YAC3C;YACA,MAAI,CAACJ,qBAAqB,CAAC7L,cAAc,CAACqM,oBAAoB,CAAC,CAAC,CAAC,MAAI,CAAC7K,iBAAiB,EAAE,MAAI,CAACG,sBAAsB,EAAE,MAAI,CAACP,OAAO,CAACN,YAAY,EAAE,MAAI,CAACC,MAAM,EAAE,MAAI,CAACoB,aAAa,EAAE,EAAE,MAAI,CAAC4J,uBAAuB,EAAE,EAAEI,GAAG,CAAC,CAAC;YACzNH,MAAM,IAAIC,UAAU;UACxB;QACJ,CAAC,MACI;UACD,MAAI,CAACJ,qBAAqB,CAAC7L,cAAc,CAACsM,uBAAuB,CAAC,MAAI,CAAC3K,sBAAsB,EAAE,MAAI,CAACP,OAAO,CAACN,YAAY,EAAE,MAAI,CAACC,MAAM,EAAE,MAAI,CAACoB,aAAa,EAAE,EAAEqH,IAAI,CAAC,CAAC;QACvK;MACJ,CAAC,EAAE3H,eAAe,EAAEc,MAAM,CAAC;IAC/B;EAAC;IAAA;IAAA,OACD,yBAAgBd,eAAe,EAAE2H,IAAI,EAAE+C,kBAAkB,EAAEC,kBAAkB,EAAEC,aAAa,EAAE9J,MAAM,EAAE;MAAA;MAClG,IAAI6G,IAAI,CAACvH,MAAM,KAAK,CAAC,IAAIsK,kBAAkB,KAAK,CAAC,IAAIC,kBAAkB,KAAK,CAAC,EAAE;QAC3E;QACA,IAAIC,aAAa,KAAK,CAAC,EAAE;UACrB;UACA,IAAMC,aAAa,GAAG,IAAI,CAACvK,aAAa,EAAE,CAAC6G,GAAG,CAAC,UAAA3E,SAAS,EAAI;YACxD,IAAMS,QAAQ,GAAGT,SAAS,CAACsI,WAAW,EAAE;YACxC,OAAO,IAAIxM,SAAS,CAAC2E,QAAQ,CAACJ,UAAU,EAAEI,QAAQ,CAACF,MAAM,GAAG6H,aAAa,EAAE3H,QAAQ,CAACJ,UAAU,EAAEI,QAAQ,CAACF,MAAM,GAAG6H,aAAa,CAAC;UACpI,CAAC,CAAC;UACF,IAAI,CAAChE,aAAa,CAAC5G,eAAe,EAAEc,MAAM,EAAE+J,aAAa,EAAE,CAAC,CAAC,gCAAgC;QACjG;;QACA;MACJ;MACA,IAAI,CAACd,YAAY,CAAC,YAAM;QACpB,MAAI,CAACC,qBAAqB,CAAC7L,cAAc,CAAC4M,eAAe,CAAC,MAAI,CAACjL,sBAAsB,EAAE,MAAI,CAACP,OAAO,CAACN,YAAY,EAAE,MAAI,CAACC,MAAM,EAAE,MAAI,CAACoB,aAAa,EAAE,EAAEqH,IAAI,EAAE+C,kBAAkB,EAAEC,kBAAkB,EAAEC,aAAa,CAAC,CAAC;MACtN,CAAC,EAAE5K,eAAe,EAAEc,MAAM,CAAC;IAC/B;EAAC;IAAA;IAAA,OACD,eAAMd,eAAe,EAAE2H,IAAI,EAAEqD,cAAc,EAAEC,eAAe,EAAEnK,MAAM,EAAE;MAAA;MAClE,IAAI,CAACiJ,YAAY,CAAC,YAAM;QACpB,MAAI,CAACC,qBAAqB,CAAC7L,cAAc,CAAC+M,KAAK,CAAC,MAAI,CAAC3L,OAAO,CAACN,YAAY,EAAE,MAAI,CAACC,MAAM,EAAE,MAAI,CAACoB,aAAa,EAAE,EAAEqH,IAAI,EAAEqD,cAAc,EAAEC,eAAe,IAAI,EAAE,CAAC,CAAC;MAC/J,CAAC,EAAEjL,eAAe,EAAEc,MAAM,EAAE,CAAC,CAAC,+BAA+B;IACjE;EAAC;IAAA;IAAA,OACD,aAAId,eAAe,EAAEc,MAAM,EAAE;MAAA;MACzB,IAAI,CAACiJ,YAAY,CAAC,YAAM;QACpB,MAAI,CAACC,qBAAqB,CAAC/L,gBAAgB,CAACkN,GAAG,CAAC,MAAI,CAAC5L,OAAO,CAACN,YAAY,EAAE,MAAI,CAACC,MAAM,EAAE,MAAI,CAACoB,aAAa,EAAE,CAAC,CAAC;MAClH,CAAC,EAAEN,eAAe,EAAEc,MAAM,CAAC;IAC/B;EAAC;IAAA;IAAA,OACD,wBAAed,eAAe,EAAEuG,OAAO,EAAEzF,MAAM,EAAE;MAAA;MAC7C,IAAI,CAACiJ,YAAY,CAAC,YAAM;QACpB,MAAI,CAACvK,QAAQ,CAAC4L,oBAAoB,EAAE;QACpC,MAAI,CAACpB,qBAAqB,CAAC,IAAIjM,mBAAmB,CAAC,CAAC,CAAC,+BAA+B,CAACwI,OAAO,CAAC,EAAE;UAC3FN,4BAA4B,EAAE,KAAK;UACnCU,2BAA2B,EAAE;QACjC,CAAC,CAAC,CAAC;MACP,CAAC,EAAE3G,eAAe,EAAEc,MAAM,CAAC;IAC/B;EAAC;IAAA;IAAA,OACD,yBAAgBd,eAAe,EAAEqG,QAAQ,EAAEvF,MAAM,EAAE;MAAA;MAC/C,IAAI,CAACiJ,YAAY,CAAC,YAAM;QACpB,MAAI,CAACC,qBAAqB,CAAC,IAAIjM,mBAAmB,CAAC,CAAC,CAAC,+BAA+BsI,QAAQ,EAAE;UAC1FJ,4BAA4B,EAAE,KAAK;UACnCU,2BAA2B,EAAE;QACjC,CAAC,CAAC,CAAC;MACP,CAAC,EAAE3G,eAAe,EAAEc,MAAM,CAAC;IAC/B;EAAC;EAAA;AAAA,EAlekCnC,UAAU;AAoejDE,iBAAiB,CAACqC,gBAAgB,GAAG,KAAK;AAC1C;AACA;AACA;AAFA,IAGMG,gBAAgB;EAClB,0BAAYiG,cAAc,EAAEvD,WAAW,EAAE;IAAA;IACrC,IAAI,CAACuD,cAAc,GAAGA,cAAc;IACpC,IAAI,CAACvD,WAAW,GAAGA,WAAW;EAClC;EAAC;IAAA;IAAA,OAID,gBAAOsH,KAAK,EAAE;MACV,IAAI,CAACA,KAAK,EAAE;QACR,OAAO,KAAK;MAChB;MACA,IAAI,IAAI,CAAC/D,cAAc,KAAK+D,KAAK,CAAC/D,cAAc,EAAE;QAC9C,OAAO,KAAK;MAChB;MACA,IAAI,IAAI,CAACvD,WAAW,CAAC3D,MAAM,KAAKiL,KAAK,CAACtH,WAAW,CAAC3D,MAAM,EAAE;QACtD,OAAO,KAAK;MAChB;MACA,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEgC,GAAG,GAAG,IAAI,CAACwB,WAAW,CAAC3D,MAAM,EAAEG,CAAC,GAAGgC,GAAG,EAAEhC,CAAC,EAAE,EAAE;QACzD,IAAI,CAAC,IAAI,CAACwD,WAAW,CAACxD,CAAC,CAAC,CAACuG,MAAM,CAACuE,KAAK,CAACtH,WAAW,CAACxD,CAAC,CAAC,CAAC,EAAE;UACnD,OAAO,KAAK;QAChB;MACJ;MACA,OAAO,IAAI;IACf;EAAC;IAAA;IAAA,OAnBD,cAAYzB,KAAK,EAAEwM,MAAM,EAAE;MACvB,OAAO,IAAIjK,gBAAgB,CAACvC,KAAK,CAACM,YAAY,EAAE,EAAEkM,MAAM,CAACpL,eAAe,EAAE,CAAC;IAC/E;EAAC;EAAA;AAAA;AAAA,IAmBC6F,gBAAgB;EAClB,0BAAYjH,KAAK,EAAE8G,+BAA+B,EAAEE,8BAA8B,EAAE;IAAA;IAChF,IAAI,CAAC5G,MAAM,GAAGJ,KAAK;IACnB,IAAI,CAACyM,gCAAgC,GAAG3F,+BAA+B;IACvE,IAAI,CAAC4F,+BAA+B,GAAG1F,8BAA8B;EACzE;EAAC;IAAA;IAAA,OAQD,mBAAU;MACN,IAAI,CAACyF,gCAAgC,GAAG,IAAI,CAACrM,MAAM,CAAC2G,gBAAgB,CAAC,IAAI,CAAC0F,gCAAgC,EAAE,EAAE,CAAC;MAC/G,IAAI,CAACC,+BAA+B,GAAG,IAAI,CAACtM,MAAM,CAAC2G,gBAAgB,CAAC,IAAI,CAAC2F,+BAA+B,EAAE,EAAE,CAAC;IACjH;EAAC;IAAA;IAAA,OACD,yCAAgC;MAC5B,IAAMlJ,MAAM,GAAG,EAAE;MACjB,KAAK,IAAI/B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACgL,gCAAgC,CAACnL,MAAM,EAAEG,CAAC,EAAE,EAAE;QACnE,IAAMkL,eAAe,GAAG,IAAI,CAACvM,MAAM,CAACwM,kBAAkB,CAAC,IAAI,CAACH,gCAAgC,CAAChL,CAAC,CAAC,CAAC;QAChG,IAAIkL,eAAe,EAAE;UACjBnJ,MAAM,CAACG,IAAI,CAACgJ,eAAe,CAAC;QAChC;MACJ;MACA,OAAOnJ,MAAM;IACjB;EAAC;IAAA;IAAA,OACD,iBAAQjC,UAAU,EAAE;MAChB,IAAMsL,eAAe,GAAG,EAAE;MAC1B,KAAK,IAAIpL,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACiL,+BAA+B,CAACpL,MAAM,EAAEG,CAAC,EAAE,EAAE;QAClE,IAAMkL,eAAe,GAAG,IAAI,CAACvM,MAAM,CAACwM,kBAAkB,CAAC,IAAI,CAACF,+BAA+B,CAACjL,CAAC,CAAC,CAAC;QAC/F,IAAIkL,eAAe,EAAE;UACjBE,eAAe,CAAClJ,IAAI,CAACgJ,eAAe,CAAC;UACrC,IAAIA,eAAe,CAACvC,eAAe,KAAKuC,eAAe,CAACG,aAAa,EAAE;YACnE;YACA,OAAO,KAAK;UAChB;QACJ;MACJ;MACAD,eAAe,CAACE,IAAI,CAACxN,KAAK,CAACyN,wBAAwB,CAAC;MACpDzL,UAAU,CAACwL,IAAI,CAACxN,KAAK,CAACyN,wBAAwB,CAAC;MAC/C,KAAK,IAAIvL,EAAC,GAAG,CAAC,EAAEA,EAAC,GAAGF,UAAU,CAACD,MAAM,EAAEG,EAAC,EAAE,EAAE;QACxC,IAAIA,EAAC,IAAIoL,eAAe,CAACvL,MAAM,EAAE;UAC7B,OAAO,KAAK;QAChB;QACA,IAAI,CAACuL,eAAe,CAACpL,EAAC,CAAC,CAACwL,mBAAmB,CAAC1L,UAAU,CAACE,EAAC,CAAC,CAAC,EAAE;UACxD,OAAO,KAAK;QAChB;MACJ;MACA,OAAO,IAAI;IACf;EAAC;IAAA;IAAA,OA5CD,oCAAkCyL,iBAAiB,EAAE;MACjD,IAAIC,oBAAoB,GAAG,EAAE;MAAC,2CACCD,iBAAiB;QAAA;MAAA;QAAhD,oDAAkD;UAAA,IAAvCxL,gBAAgB;UACvByL,oBAAoB,GAAGA,oBAAoB,CAACC,MAAM,CAAC1L,gBAAgB,CAAC2L,6BAA6B,EAAE,CAAC;QACxG;MAAC;QAAA;MAAA;QAAA;MAAA;MACD,OAAOF,oBAAoB;IAC/B;EAAC;EAAA;AAAA;AAAA,IAwCC9F,eAAe;EAAA;IAAA;EAAA;EAAA;IAAA;IAAA,OACjB,yBAAuBrH,KAAK,EAAEsN,gBAAgB,EAAE/F,QAAQ,EAAE;MACtD,IAAMgG,GAAG,GAAG;QACRvN,KAAK,EAAEA,KAAK;QACZsN,gBAAgB,EAAEA,gBAAgB;QAClCE,aAAa,EAAE,EAAE;QACjBC,sBAAsB,EAAE;MAC5B,CAAC;MACD,IAAMjK,MAAM,GAAG,IAAI,CAACkK,qBAAqB,CAACH,GAAG,EAAEhG,QAAQ,CAAC;MACxD,KAAK,IAAI9F,CAAC,GAAG,CAAC,EAAEgC,GAAG,GAAG8J,GAAG,CAACC,aAAa,CAAClM,MAAM,EAAEG,CAAC,GAAGgC,GAAG,EAAEhC,CAAC,EAAE,EAAE;QAC1D8L,GAAG,CAACvN,KAAK,CAAC2N,gBAAgB,CAACJ,GAAG,CAACC,aAAa,CAAC/L,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,0DAA0D;MACvH;;MACA,OAAO+B,MAAM;IACjB;EAAC;IAAA;IAAA,OACD,+BAA6B+J,GAAG,EAAEhG,QAAQ,EAAE;MACxC,IAAI,IAAI,CAACqG,aAAa,CAACrG,QAAQ,CAAC,EAAE;QAC9B,OAAO,IAAI;MACf;MACA,IAAMsG,YAAY,GAAG,IAAI,CAACC,kBAAkB,CAACP,GAAG,EAAEhG,QAAQ,CAAC;MAC3D,IAAIsG,YAAY,CAACE,UAAU,CAACzM,MAAM,KAAK,CAAC,EAAE;QACtC,OAAO,IAAI;MACf;MACA,IAAM0M,aAAa,GAAGH,YAAY,CAACE,UAAU;MAC7C,IAAME,eAAe,GAAG,IAAI,CAACC,kBAAkB,CAACF,aAAa,CAAC;MAC9D,IAAIC,eAAe,CAACE,cAAc,CAAC,GAAG,CAAC,EAAE;QACrC;QACAC,OAAO,CAACC,IAAI,CAAC,mBAAmB,CAAC;QACjC,OAAO,IAAI;MACf;MACA;MACA,IAAMC,kBAAkB,GAAG,EAAE;MAC7B,KAAK,IAAI7M,CAAC,GAAG,CAAC,EAAEgC,GAAG,GAAGuK,aAAa,CAAC1M,MAAM,EAAEG,CAAC,GAAGgC,GAAG,EAAEhC,CAAC,EAAE,EAAE;QACtD,IAAI,CAACwM,eAAe,CAACE,cAAc,CAACH,aAAa,CAACvM,CAAC,CAAC,CAAC8M,UAAU,CAACC,KAAK,CAACC,QAAQ,EAAE,CAAC,EAAE;UAC/EH,kBAAkB,CAAC3K,IAAI,CAACqK,aAAa,CAACvM,CAAC,CAAC,CAAC;QAC7C;MACJ;MACA;MACA;MACA,IAAIoM,YAAY,CAACa,uBAAuB,IAAIJ,kBAAkB,CAAChN,MAAM,GAAG,CAAC,EAAE;QACvEgN,kBAAkB,CAAC,CAAC,CAAC,CAACxE,UAAU,GAAG,IAAI;MAC3C;MACA,IAAI6E,eAAe,GAAGpB,GAAG,CAACvN,KAAK,CAAC+J,kBAAkB,CAACwD,GAAG,CAACD,gBAAgB,EAAEgB,kBAAkB,EAAE,UAACM,qBAAqB,EAAK;QACpH,IAAMC,4BAA4B,GAAG,EAAE;QACvC,KAAK,IAAIpN,GAAC,GAAG,CAAC,EAAEA,GAAC,GAAG8L,GAAG,CAACD,gBAAgB,CAAChM,MAAM,EAAEG,GAAC,EAAE,EAAE;UAClDoN,4BAA4B,CAACpN,GAAC,CAAC,GAAG,EAAE;QACxC;QAAC,4CACgBmN,qBAAqB;UAAA;QAAA;UAAtC,uDAAwC;YAAA,IAA7BE,EAAE;YACT,IAAI,CAACA,EAAE,CAACP,UAAU,EAAE;cAChB;cACA;YACJ;YACAM,4BAA4B,CAACC,EAAE,CAACP,UAAU,CAACC,KAAK,CAAC,CAAC7K,IAAI,CAACmL,EAAE,CAAC;UAC9D;QAAC;UAAA;QAAA;UAAA;QAAA;QACD,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAgB,CAAIC,CAAC,EAAEC,CAAC,EAAK;UAC/B,OAAOD,CAAC,CAACT,UAAU,CAACW,KAAK,GAAGD,CAAC,CAACV,UAAU,CAACW,KAAK;QAClD,CAAC;QACD,IAAMC,gBAAgB,GAAG,EAAE;QAAC,2BACnB1N,GAAC;UACN,IAAIoN,4BAA4B,CAACpN,GAAC,CAAC,CAACH,MAAM,GAAG,CAAC,EAAE;YAC5CuN,4BAA4B,CAACpN,GAAC,CAAC,CAACsL,IAAI,CAACgC,gBAAgB,CAAC;YACtDI,gBAAgB,CAAC1N,GAAC,CAAC,GAAG8F,QAAQ,CAAC9F,GAAC,CAAC,CAAC2N,kBAAkB,CAAC7B,GAAG,CAACvN,KAAK,EAAE;cAC5DqP,wBAAwB,EAAE,oCAAM;gBAC5B,OAAOR,4BAA4B,CAACpN,GAAC,CAAC;cAC1C,CAAC;cACD6N,mBAAmB,EAAE,6BAACC,EAAE,EAAK;gBACzB,IAAMC,GAAG,GAAGC,QAAQ,CAACF,EAAE,EAAE,EAAE,CAAC;gBAC5B,IAAM9I,KAAK,GAAG8G,GAAG,CAACvN,KAAK,CAAC0P,gBAAgB,CAACnC,GAAG,CAACC,aAAa,CAACgC,GAAG,CAAC,CAAC;gBAChE,IAAIjC,GAAG,CAACE,sBAAsB,CAAC+B,GAAG,CAAC,KAAK,CAAC,CAAC,8BAA8B;kBACpE,OAAO,IAAIhQ,SAAS,CAACiH,KAAK,CAAC2D,eAAe,EAAE3D,KAAK,CAAC4D,WAAW,EAAE5D,KAAK,CAACqG,aAAa,EAAErG,KAAK,CAACkJ,SAAS,CAAC;gBACxG;gBACA,OAAO,IAAInQ,SAAS,CAACiH,KAAK,CAACqG,aAAa,EAAErG,KAAK,CAACkJ,SAAS,EAAElJ,KAAK,CAAC2D,eAAe,EAAE3D,KAAK,CAAC4D,WAAW,CAAC;cACxG;YACJ,CAAC,CAAC;UACN,CAAC,MACI;YACD8E,gBAAgB,CAAC1N,GAAC,CAAC,GAAG8L,GAAG,CAACD,gBAAgB,CAAC7L,GAAC,CAAC;UACjD;QAAC;QAnBL,KAAK,IAAIA,GAAC,GAAG,CAAC,EAAEA,GAAC,GAAG8L,GAAG,CAACD,gBAAgB,CAAChM,MAAM,EAAEG,GAAC,EAAE,EAAE;UAAA,MAA7CA,GAAC;QAoBV;QACA,OAAO0N,gBAAgB;MAC3B,CAAC,CAAC;MACF,IAAI,CAACR,eAAe,EAAE;QAClBA,eAAe,GAAGpB,GAAG,CAACD,gBAAgB;MAC1C;MACA;MACA,IAAMsC,aAAa,GAAG,EAAE;MACxB,KAAK,IAAMC,iBAAiB,IAAI5B,eAAe,EAAE;QAC7C,IAAIA,eAAe,CAACE,cAAc,CAAC0B,iBAAiB,CAAC,EAAE;UACnDD,aAAa,CAACjM,IAAI,CAAC8L,QAAQ,CAACI,iBAAiB,EAAE,EAAE,CAAC,CAAC;QACvD;MACJ;MACA;MACAD,aAAa,CAAC7C,IAAI,CAAC,UAACiC,CAAC,EAAEC,CAAC,EAAK;QACzB,OAAOA,CAAC,GAAGD,CAAC;MAChB,CAAC,CAAC;MACF;MACA,mCAA2BY,aAAa,sCAAE;QAArC,IAAME,YAAY;QACnBnB,eAAe,CAAC/M,MAAM,CAACkO,YAAY,EAAE,CAAC,CAAC;MAC3C;MACA,OAAOnB,eAAe;IAC1B;EAAC;IAAA;IAAA,OACD,uBAAqBpH,QAAQ,EAAE;MAC3B,KAAK,IAAI9F,CAAC,GAAG,CAAC,EAAEgC,GAAG,GAAG8D,QAAQ,CAACjG,MAAM,EAAEG,CAAC,GAAGgC,GAAG,EAAEhC,CAAC,EAAE,EAAE;QACjD,IAAI8F,QAAQ,CAAC9F,CAAC,CAAC,EAAE;UACb,OAAO,KAAK;QAChB;MACJ;MACA,OAAO,IAAI;IACf;EAAC;IAAA;IAAA,OACD,4BAA0B8L,GAAG,EAAEhG,QAAQ,EAAE;MACrC,IAAIwG,UAAU,GAAG,EAAE;MACnB,IAAIW,uBAAuB,GAAG,KAAK;MACnC,KAAK,IAAIjN,CAAC,GAAG,CAAC,EAAEgC,GAAG,GAAG8D,QAAQ,CAACjG,MAAM,EAAEG,CAAC,GAAGgC,GAAG,EAAEhC,CAAC,EAAE,EAAE;QACjD,IAAMgG,OAAO,GAAGF,QAAQ,CAAC9F,CAAC,CAAC;QAC3B,IAAIgG,OAAO,EAAE;UACT,IAAMsI,CAAC,GAAG,IAAI,CAACC,6BAA6B,CAACzC,GAAG,EAAE9L,CAAC,EAAEgG,OAAO,CAAC;UAC7DsG,UAAU,GAAGA,UAAU,CAACX,MAAM,CAAC2C,CAAC,CAAChC,UAAU,CAAC;UAC5CW,uBAAuB,GAAGA,uBAAuB,IAAIqB,CAAC,CAACrB,uBAAuB;QAClF;MACJ;MACA,OAAO;QACHX,UAAU,EAAEA,UAAU;QACtBW,uBAAuB,EAAEA;MAC7B,CAAC;IACL;EAAC;IAAA;IAAA,OACD,uCAAqCnB,GAAG,EAAE0C,eAAe,EAAExI,OAAO,EAAE;MAChE;MACA;MACA,IAAMsG,UAAU,GAAG,EAAE;MACrB,IAAImC,cAAc,GAAG,CAAC;MACtB,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAgB,CAAI1J,KAAK,EAAEoC,IAAI,EAA+B;QAAA,IAA7BuH,gBAAgB,uEAAG,KAAK;QAC3D,IAAI7Q,KAAK,CAACsE,OAAO,CAAC4C,KAAK,CAAC,IAAIoC,IAAI,KAAK,EAAE,EAAE;UACrC;UACA;QACJ;QACAkF,UAAU,CAACpK,IAAI,CAAC;UACZ4K,UAAU,EAAE;YACRC,KAAK,EAAEyB,eAAe;YACtBf,KAAK,EAAEgB,cAAc;UACzB,CAAC;UACDzJ,KAAK,EAAEA,KAAK;UACZoC,IAAI,EAAEA,IAAI;UACVuH,gBAAgB,EAAEA,gBAAgB;UAClCC,oBAAoB,EAAE5I,OAAO,CAAC6I;QAClC,CAAC,CAAC;MACN,CAAC;MACD,IAAI5B,uBAAuB,GAAG,KAAK;MACnC,IAAM6B,uBAAuB,GAAG,SAA1BA,uBAAuB,CAAI7M,SAAS,EAAEmF,IAAI,EAAEuH,gBAAgB,EAAK;QACnE1B,uBAAuB,GAAG,IAAI;QAC9ByB,gBAAgB,CAACzM,SAAS,EAAEmF,IAAI,EAAEuH,gBAAgB,CAAC;MACvD,CAAC;MACD,IAAMI,cAAc,GAAG,SAAjBA,cAAc,CAAIC,UAAU,EAAEC,oBAAoB,EAAK;QACzD,IAAMhN,SAAS,GAAGlE,SAAS,CAACmR,aAAa,CAACF,UAAU,CAAC;QACrD,IAAI5J,UAAU;QACd,IAAInD,SAAS,CAACG,OAAO,EAAE,EAAE;UACrB,IAAI,OAAO6M,oBAAoB,KAAK,SAAS,EAAE;YAC3C,IAAIA,oBAAoB,EAAE;cACtB7J,UAAU,GAAG,CAAC,CAAC;YACnB,CAAC,MACI;cACDA,UAAU,GAAG,CAAC,CAAC;YACnB;UACJ,CAAC,MACI;YACD;YACA,IAAM+J,aAAa,GAAGrD,GAAG,CAACvN,KAAK,CAAC6Q,gBAAgB,CAACnN,SAAS,CAAC0G,eAAe,CAAC;YAC3E,IAAI1G,SAAS,CAAC2G,WAAW,KAAKuG,aAAa,EAAE;cACzC/J,UAAU,GAAG,CAAC,CAAC;YACnB,CAAC,MACI;cACDA,UAAU,GAAG,CAAC,CAAC;YACnB;UACJ;QACJ,CAAC,MACI;UACDA,UAAU,GAAG,CAAC,CAAC;QACnB;;QACA,IAAMiK,CAAC,GAAGvD,GAAG,CAACC,aAAa,CAAClM,MAAM;QAClC,IAAMiO,EAAE,GAAGhC,GAAG,CAACvN,KAAK,CAAC2N,gBAAgB,CAAC,IAAI,EAAEjK,SAAS,EAAEmD,UAAU,CAAC;QAClE0G,GAAG,CAACC,aAAa,CAACsD,CAAC,CAAC,GAAGvB,EAAE;QACzBhC,GAAG,CAACE,sBAAsB,CAACqD,CAAC,CAAC,GAAGpN,SAAS,CAACqN,YAAY,EAAE;QACxD,OAAOD,CAAC,CAACrC,QAAQ,EAAE;MACvB,CAAC;MACD,IAAMuC,oBAAoB,GAAG;QACzBb,gBAAgB,EAAEA,gBAAgB;QAClCI,uBAAuB,EAAEA,uBAAuB;QAChDC,cAAc,EAAEA;MACpB,CAAC;MACD,IAAI;QACA/I,OAAO,CAACwJ,iBAAiB,CAAC1D,GAAG,CAACvN,KAAK,EAAEgR,oBAAoB,CAAC;MAC9D,CAAC,CACD,OAAOrM,CAAC,EAAE;QACN;QACA;QACA9F,iBAAiB,CAAC8F,CAAC,CAAC;QACpB,OAAO;UACHoJ,UAAU,EAAE,EAAE;UACdW,uBAAuB,EAAE;QAC7B,CAAC;MACL;MACA,OAAO;QACHX,UAAU,EAAEA,UAAU;QACtBW,uBAAuB,EAAEA;MAC7B,CAAC;IACL;EAAC;IAAA;IAAA,OACD,4BAA0BX,UAAU,EAAE;MAClC;MACAA,UAAU,GAAGA,UAAU,CAAC1L,KAAK,CAAC,CAAC,CAAC;MAChC;MACA0L,UAAU,CAAChB,IAAI,CAAC,UAACiC,CAAC,EAAEC,CAAC,EAAK;QACtB;QACA,OAAO,CAAE1P,KAAK,CAAC2R,sBAAsB,CAAClC,CAAC,CAACvI,KAAK,EAAEwI,CAAC,CAACxI,KAAK,CAAE;MAC5D,CAAC,CAAC;MACF;MACA,IAAMwH,eAAe,GAAG,CAAC,CAAC;MAC1B,KAAK,IAAIxM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGsM,UAAU,CAACzM,MAAM,EAAEG,CAAC,EAAE,EAAE;QACxC,IAAM0P,UAAU,GAAGpD,UAAU,CAACtM,CAAC,GAAG,CAAC,CAAC;QACpC,IAAM2P,SAAS,GAAGrD,UAAU,CAACtM,CAAC,CAAC;QAC/B,IAAIlC,KAAK,CAACqG,gBAAgB,CAACuL,UAAU,CAAC1K,KAAK,CAAC,CAAC4K,QAAQ,CAAC9R,KAAK,CAAC+R,cAAc,CAACF,SAAS,CAAC3K,KAAK,CAAC,CAAC,EAAE;UAC1F,IAAI8K,UAAU;UACd,IAAIJ,UAAU,CAAC5C,UAAU,CAACC,KAAK,GAAG4C,SAAS,CAAC7C,UAAU,CAACC,KAAK,EAAE;YAC1D;YACA+C,UAAU,GAAGJ,UAAU,CAAC5C,UAAU,CAACC,KAAK;UAC5C,CAAC,MACI;YACD+C,UAAU,GAAGH,SAAS,CAAC7C,UAAU,CAACC,KAAK;UAC3C;UACAP,eAAe,CAACsD,UAAU,CAAC9C,QAAQ,EAAE,CAAC,GAAG,IAAI;UAC7C,KAAK,IAAI+C,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGzD,UAAU,CAACzM,MAAM,EAAEkQ,CAAC,EAAE,EAAE;YACxC,IAAIzD,UAAU,CAACyD,CAAC,CAAC,CAACjD,UAAU,CAACC,KAAK,KAAK+C,UAAU,EAAE;cAC/CxD,UAAU,CAACnM,MAAM,CAAC4P,CAAC,EAAE,CAAC,CAAC;cACvB,IAAIA,CAAC,GAAG/P,CAAC,EAAE;gBACPA,CAAC,EAAE;cACP;cACA+P,CAAC,EAAE;YACP;UACJ;UACA,IAAI/P,CAAC,GAAG,CAAC,EAAE;YACPA,CAAC,EAAE;UACP;QACJ;MACJ;MACA,OAAOwM,eAAe;IAC1B;EAAC;EAAA;AAAA;AAAA,IAECwD,oBAAoB,6BACtB,8BAAY5I,IAAI,EAAE6I,cAAc,EAAEC,YAAY,EAAE;EAAA;EAC5C,IAAI,CAAC9I,IAAI,GAAGA,IAAI;EAChB,IAAI,CAAC6I,cAAc,GAAGA,cAAc;EACpC,IAAI,CAACC,YAAY,GAAGA,YAAY;AACpC,CAAC;AAAA,IAEC7G,gBAAgB;EAClB,0BAAY8G,SAAS,EAAErQ,UAAU,EAAE;IAAA;IAC/B,IAAI,CAACsQ,SAAS,GAAG/G,gBAAgB,CAACgH,QAAQ,CAACF,SAAS,EAAErQ,UAAU,CAAC;EACrE;EAAC;IAAA;IAAA;IAWD;AACJ;AACA;AACA;IACI,uBAAcqQ,SAAS,EAAErQ,UAAU,EAAE;MACjC,IAAI,CAAC,IAAI,CAACsQ,SAAS,EAAE;QACjB,OAAO,IAAI;MACf;MACA,IAAME,OAAO,GAAGjH,gBAAgB,CAACgH,QAAQ,CAACF,SAAS,EAAErQ,UAAU,CAAC;MAChE,IAAI,CAACwQ,OAAO,EAAE;QACV,OAAO,IAAI;MACf;MACA,IAAI,IAAI,CAACF,SAAS,CAACvQ,MAAM,KAAKyQ,OAAO,CAACzQ,MAAM,EAAE;QAC1C,OAAO,IAAI;MACf;MACA,IAAMkC,MAAM,GAAG,EAAE;MACjB,KAAK,IAAI/B,CAAC,GAAG,CAAC,EAAEgC,GAAG,GAAG,IAAI,CAACoO,SAAS,CAACvQ,MAAM,EAAEG,CAAC,GAAGgC,GAAG,EAAEhC,CAAC,EAAE,EAAE;QACvD+B,MAAM,CAACG,IAAI,CAACmH,gBAAgB,CAACkH,cAAc,CAAC,IAAI,CAACH,SAAS,CAACpQ,CAAC,CAAC,EAAEsQ,OAAO,CAACtQ,CAAC,CAAC,CAAC,CAAC;MAC/E;MACA,OAAO+B,MAAM;IACjB;EAAC;IAAA;IAAA,OA9BD,kBAAgBoO,SAAS,EAAErQ,UAAU,EAAE;MACnC,IAAMiC,MAAM,GAAG,EAAE;MAAC,4CACMjC,UAAU;QAAA;MAAA;QAAlC,uDAAoC;UAAA,IAAzBmC,SAAS;UAChB,IAAIA,SAAS,CAAC0G,eAAe,KAAK1G,SAAS,CAACoJ,aAAa,EAAE;YACvD,OAAO,IAAI;UACf;UACAtJ,MAAM,CAACG,IAAI,CAAC,IAAI8N,oBAAoB,CAACG,SAAS,CAACK,cAAc,CAACvO,SAAS,CAAC0G,eAAe,CAAC,EAAE1G,SAAS,CAAC2G,WAAW,GAAG,CAAC,EAAE3G,SAAS,CAACiM,SAAS,GAAG,CAAC,CAAC,CAAC;QAClJ;MAAC;QAAA;MAAA;QAAA;MAAA;MACD,OAAOnM,MAAM;IACjB;EAAC;IAAA;IAAA,OAsBD,wBAAsB0O,QAAQ,EAAEH,OAAO,EAAE;MACrC,IAAMI,YAAY,GAAGC,IAAI,CAACC,GAAG,CAACH,QAAQ,CAACR,cAAc,EAAEK,OAAO,CAACL,cAAc,EAAE5S,OAAO,CAACwT,kBAAkB,CAACJ,QAAQ,CAACrJ,IAAI,EAAEkJ,OAAO,CAAClJ,IAAI,CAAC,CAAC;MACvI,IAAM0J,YAAY,GAAGH,IAAI,CAACC,GAAG,CAACH,QAAQ,CAACrJ,IAAI,CAACvH,MAAM,GAAG4Q,QAAQ,CAACP,YAAY,EAAEI,OAAO,CAAClJ,IAAI,CAACvH,MAAM,GAAGyQ,OAAO,CAACJ,YAAY,EAAE7S,OAAO,CAAC0T,kBAAkB,CAACN,QAAQ,CAACrJ,IAAI,EAAEkJ,OAAO,CAAClJ,IAAI,CAAC,CAAC;MAChL,IAAM4J,WAAW,GAAGP,QAAQ,CAACrJ,IAAI,CAAC6J,SAAS,CAACP,YAAY,EAAED,QAAQ,CAACrJ,IAAI,CAACvH,MAAM,GAAGiR,YAAY,CAAC;MAC9F,IAAMI,YAAY,GAAGZ,OAAO,CAAClJ,IAAI,CAAC6J,SAAS,CAACP,YAAY,EAAEJ,OAAO,CAAClJ,IAAI,CAACvH,MAAM,GAAGiR,YAAY,CAAC;MAC7F,OAAO,IAAInT,kBAAkB,CAACqT,WAAW,EAAEP,QAAQ,CAACR,cAAc,GAAGS,YAAY,EAAED,QAAQ,CAACP,YAAY,GAAGQ,YAAY,EAAEQ,YAAY,EAAEZ,OAAO,CAACL,cAAc,GAAGS,YAAY,EAAEJ,OAAO,CAACJ,YAAY,GAAGQ,YAAY,CAAC;IACtN;EAAC;EAAA;AAAA"}]}