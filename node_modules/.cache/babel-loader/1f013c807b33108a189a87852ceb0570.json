{"remainingRequest":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/thread-loader/dist/cjs.js!/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js!/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/common/model/pieceTreeTextBuffer/pieceTreeTextBuffer.js","dependencies":[{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/common/model/pieceTreeTextBuffer/pieceTreeTextBuffer.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/babel.config.js","mtime":1668271197000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js","mtime":456789000000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["Emitter","strings","Range","ApplyEditsResult","PieceTreeBase","countEOL","TextChange","Disposable","PieceTreeTextBuffer","chunks","BOM","eol","containsRTL","containsUnusualLineTerminators","isBasicASCII","eolNormalized","_onDidChangeContent","_register","_BOM","_mightContainNonBasicASCII","_mightContainRTL","_mightContainUnusualLineTerminators","_pieceTree","getEOL","preserveBOM","createSnapshot","lineNumber","column","getOffsetAt","offset","getPositionAt","start","length","end","startPosition","endPosition","range","isEmpty","lineEnding","_getEndOfLine","getValueInRange","startLineNumber","endLineNumber","endColumn","startColumn","startOffset","endOffset","result","fromLineNumber","toLineNumber","lineContent","getLineContent","fromOffset","toOffset","isHighSurrogate","charCodeAt","getValueLengthInRange","getLength","getLineCount","getLinesContent","index","getLineCharCode","getLineLength","firstNonWhitespaceIndex","lastNonWhitespaceIndex","Error","newEOL","setEOL","rawOperations","recordTrimAutoWhitespace","computeUndoEdits","mightContainRTL","mightContainUnusualLineTerminators","mightContainNonBasicASCII","canReduceOperations","operations","i","op","_isTracked","validatedRange","text","textMightContainNonBasicASCII","validText","eolCount","firstLineLength","lastLineLength","strEOL","bufferEOL","expectedStrEOL","replace","sortIndex","identifier","rangeOffset","rangeLength","forceMoveMarkers","Boolean","isAutoWhitespaceEdit","sort","_sortOpsAscending","hasTouchingRanges","count","rangeEnd","getEndPosition","nextRangeStart","getStartPosition","isBeforeOrEqual","isBefore","_reduceOperations","reverseRanges","_getInverseEditRanges","newTrimAutoWhitespaceCandidates","reverseRange","currentLineContent","push","oldContent","reverseOperations","reverseRangeDeltaOffset","bufferText","reverseRangeOffset","textChange","a","b","contentChanges","_doApplyEdits","trimAutoWhitespaceLineNumbers","len","prevContent","fire","_toSingleEditOperation","firstEditRange","lastEditRange","entireEditRange","lastEndLineNumber","lastEndColumn","operation","join","_sortOpsDescending","delete","insert","contentChangeRange","searchRange","searchData","captureMatches","limitResultCount","findMatchesLineByLine","prevOpEndLineNumber","prevOpEndColumn","prevOp","resultRange","lineCount","r","compareRangesUsingEnds"],"sources":["/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/common/model/pieceTreeTextBuffer/pieceTreeTextBuffer.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../../../base/common/event.js';\nimport * as strings from '../../../../base/common/strings.js';\nimport { Range } from '../../core/range.js';\nimport { ApplyEditsResult } from '../../model.js';\nimport { PieceTreeBase } from './pieceTreeBase.js';\nimport { countEOL } from '../../core/eolCounter.js';\nimport { TextChange } from '../../core/textChange.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nexport class PieceTreeTextBuffer extends Disposable {\n    constructor(chunks, BOM, eol, containsRTL, containsUnusualLineTerminators, isBasicASCII, eolNormalized) {\n        super();\n        this._onDidChangeContent = this._register(new Emitter());\n        this._BOM = BOM;\n        this._mightContainNonBasicASCII = !isBasicASCII;\n        this._mightContainRTL = containsRTL;\n        this._mightContainUnusualLineTerminators = containsUnusualLineTerminators;\n        this._pieceTree = new PieceTreeBase(chunks, eol, eolNormalized);\n    }\n    mightContainRTL() {\n        return this._mightContainRTL;\n    }\n    mightContainUnusualLineTerminators() {\n        return this._mightContainUnusualLineTerminators;\n    }\n    resetMightContainUnusualLineTerminators() {\n        this._mightContainUnusualLineTerminators = false;\n    }\n    mightContainNonBasicASCII() {\n        return this._mightContainNonBasicASCII;\n    }\n    getBOM() {\n        return this._BOM;\n    }\n    getEOL() {\n        return this._pieceTree.getEOL();\n    }\n    createSnapshot(preserveBOM) {\n        return this._pieceTree.createSnapshot(preserveBOM ? this._BOM : '');\n    }\n    getOffsetAt(lineNumber, column) {\n        return this._pieceTree.getOffsetAt(lineNumber, column);\n    }\n    getPositionAt(offset) {\n        return this._pieceTree.getPositionAt(offset);\n    }\n    getRangeAt(start, length) {\n        const end = start + length;\n        const startPosition = this.getPositionAt(start);\n        const endPosition = this.getPositionAt(end);\n        return new Range(startPosition.lineNumber, startPosition.column, endPosition.lineNumber, endPosition.column);\n    }\n    getValueInRange(range, eol = 0 /* EndOfLinePreference.TextDefined */) {\n        if (range.isEmpty()) {\n            return '';\n        }\n        const lineEnding = this._getEndOfLine(eol);\n        return this._pieceTree.getValueInRange(range, lineEnding);\n    }\n    getValueLengthInRange(range, eol = 0 /* EndOfLinePreference.TextDefined */) {\n        if (range.isEmpty()) {\n            return 0;\n        }\n        if (range.startLineNumber === range.endLineNumber) {\n            return (range.endColumn - range.startColumn);\n        }\n        const startOffset = this.getOffsetAt(range.startLineNumber, range.startColumn);\n        const endOffset = this.getOffsetAt(range.endLineNumber, range.endColumn);\n        return endOffset - startOffset;\n    }\n    getCharacterCountInRange(range, eol = 0 /* EndOfLinePreference.TextDefined */) {\n        if (this._mightContainNonBasicASCII) {\n            // we must count by iterating\n            let result = 0;\n            const fromLineNumber = range.startLineNumber;\n            const toLineNumber = range.endLineNumber;\n            for (let lineNumber = fromLineNumber; lineNumber <= toLineNumber; lineNumber++) {\n                const lineContent = this.getLineContent(lineNumber);\n                const fromOffset = (lineNumber === fromLineNumber ? range.startColumn - 1 : 0);\n                const toOffset = (lineNumber === toLineNumber ? range.endColumn - 1 : lineContent.length);\n                for (let offset = fromOffset; offset < toOffset; offset++) {\n                    if (strings.isHighSurrogate(lineContent.charCodeAt(offset))) {\n                        result = result + 1;\n                        offset = offset + 1;\n                    }\n                    else {\n                        result = result + 1;\n                    }\n                }\n            }\n            result += this._getEndOfLine(eol).length * (toLineNumber - fromLineNumber);\n            return result;\n        }\n        return this.getValueLengthInRange(range, eol);\n    }\n    getLength() {\n        return this._pieceTree.getLength();\n    }\n    getLineCount() {\n        return this._pieceTree.getLineCount();\n    }\n    getLinesContent() {\n        return this._pieceTree.getLinesContent();\n    }\n    getLineContent(lineNumber) {\n        return this._pieceTree.getLineContent(lineNumber);\n    }\n    getLineCharCode(lineNumber, index) {\n        return this._pieceTree.getLineCharCode(lineNumber, index);\n    }\n    getLineLength(lineNumber) {\n        return this._pieceTree.getLineLength(lineNumber);\n    }\n    getLineFirstNonWhitespaceColumn(lineNumber) {\n        const result = strings.firstNonWhitespaceIndex(this.getLineContent(lineNumber));\n        if (result === -1) {\n            return 0;\n        }\n        return result + 1;\n    }\n    getLineLastNonWhitespaceColumn(lineNumber) {\n        const result = strings.lastNonWhitespaceIndex(this.getLineContent(lineNumber));\n        if (result === -1) {\n            return 0;\n        }\n        return result + 2;\n    }\n    _getEndOfLine(eol) {\n        switch (eol) {\n            case 1 /* EndOfLinePreference.LF */:\n                return '\\n';\n            case 2 /* EndOfLinePreference.CRLF */:\n                return '\\r\\n';\n            case 0 /* EndOfLinePreference.TextDefined */:\n                return this.getEOL();\n            default:\n                throw new Error('Unknown EOL preference');\n        }\n    }\n    setEOL(newEOL) {\n        this._pieceTree.setEOL(newEOL);\n    }\n    applyEdits(rawOperations, recordTrimAutoWhitespace, computeUndoEdits) {\n        let mightContainRTL = this._mightContainRTL;\n        let mightContainUnusualLineTerminators = this._mightContainUnusualLineTerminators;\n        let mightContainNonBasicASCII = this._mightContainNonBasicASCII;\n        let canReduceOperations = true;\n        let operations = [];\n        for (let i = 0; i < rawOperations.length; i++) {\n            const op = rawOperations[i];\n            if (canReduceOperations && op._isTracked) {\n                canReduceOperations = false;\n            }\n            const validatedRange = op.range;\n            if (op.text) {\n                let textMightContainNonBasicASCII = true;\n                if (!mightContainNonBasicASCII) {\n                    textMightContainNonBasicASCII = !strings.isBasicASCII(op.text);\n                    mightContainNonBasicASCII = textMightContainNonBasicASCII;\n                }\n                if (!mightContainRTL && textMightContainNonBasicASCII) {\n                    // check if the new inserted text contains RTL\n                    mightContainRTL = strings.containsRTL(op.text);\n                }\n                if (!mightContainUnusualLineTerminators && textMightContainNonBasicASCII) {\n                    // check if the new inserted text contains unusual line terminators\n                    mightContainUnusualLineTerminators = strings.containsUnusualLineTerminators(op.text);\n                }\n            }\n            let validText = '';\n            let eolCount = 0;\n            let firstLineLength = 0;\n            let lastLineLength = 0;\n            if (op.text) {\n                let strEOL;\n                [eolCount, firstLineLength, lastLineLength, strEOL] = countEOL(op.text);\n                const bufferEOL = this.getEOL();\n                const expectedStrEOL = (bufferEOL === '\\r\\n' ? 2 /* StringEOL.CRLF */ : 1 /* StringEOL.LF */);\n                if (strEOL === 0 /* StringEOL.Unknown */ || strEOL === expectedStrEOL) {\n                    validText = op.text;\n                }\n                else {\n                    validText = op.text.replace(/\\r\\n|\\r|\\n/g, bufferEOL);\n                }\n            }\n            operations[i] = {\n                sortIndex: i,\n                identifier: op.identifier || null,\n                range: validatedRange,\n                rangeOffset: this.getOffsetAt(validatedRange.startLineNumber, validatedRange.startColumn),\n                rangeLength: this.getValueLengthInRange(validatedRange),\n                text: validText,\n                eolCount: eolCount,\n                firstLineLength: firstLineLength,\n                lastLineLength: lastLineLength,\n                forceMoveMarkers: Boolean(op.forceMoveMarkers),\n                isAutoWhitespaceEdit: op.isAutoWhitespaceEdit || false\n            };\n        }\n        // Sort operations ascending\n        operations.sort(PieceTreeTextBuffer._sortOpsAscending);\n        let hasTouchingRanges = false;\n        for (let i = 0, count = operations.length - 1; i < count; i++) {\n            const rangeEnd = operations[i].range.getEndPosition();\n            const nextRangeStart = operations[i + 1].range.getStartPosition();\n            if (nextRangeStart.isBeforeOrEqual(rangeEnd)) {\n                if (nextRangeStart.isBefore(rangeEnd)) {\n                    // overlapping ranges\n                    throw new Error('Overlapping ranges are not allowed!');\n                }\n                hasTouchingRanges = true;\n            }\n        }\n        if (canReduceOperations) {\n            operations = this._reduceOperations(operations);\n        }\n        // Delta encode operations\n        const reverseRanges = (computeUndoEdits || recordTrimAutoWhitespace ? PieceTreeTextBuffer._getInverseEditRanges(operations) : []);\n        const newTrimAutoWhitespaceCandidates = [];\n        if (recordTrimAutoWhitespace) {\n            for (let i = 0; i < operations.length; i++) {\n                const op = operations[i];\n                const reverseRange = reverseRanges[i];\n                if (op.isAutoWhitespaceEdit && op.range.isEmpty()) {\n                    // Record already the future line numbers that might be auto whitespace removal candidates on next edit\n                    for (let lineNumber = reverseRange.startLineNumber; lineNumber <= reverseRange.endLineNumber; lineNumber++) {\n                        let currentLineContent = '';\n                        if (lineNumber === reverseRange.startLineNumber) {\n                            currentLineContent = this.getLineContent(op.range.startLineNumber);\n                            if (strings.firstNonWhitespaceIndex(currentLineContent) !== -1) {\n                                continue;\n                            }\n                        }\n                        newTrimAutoWhitespaceCandidates.push({ lineNumber: lineNumber, oldContent: currentLineContent });\n                    }\n                }\n            }\n        }\n        let reverseOperations = null;\n        if (computeUndoEdits) {\n            let reverseRangeDeltaOffset = 0;\n            reverseOperations = [];\n            for (let i = 0; i < operations.length; i++) {\n                const op = operations[i];\n                const reverseRange = reverseRanges[i];\n                const bufferText = this.getValueInRange(op.range);\n                const reverseRangeOffset = op.rangeOffset + reverseRangeDeltaOffset;\n                reverseRangeDeltaOffset += (op.text.length - bufferText.length);\n                reverseOperations[i] = {\n                    sortIndex: op.sortIndex,\n                    identifier: op.identifier,\n                    range: reverseRange,\n                    text: bufferText,\n                    textChange: new TextChange(op.rangeOffset, bufferText, reverseRangeOffset, op.text)\n                };\n            }\n            // Can only sort reverse operations when the order is not significant\n            if (!hasTouchingRanges) {\n                reverseOperations.sort((a, b) => a.sortIndex - b.sortIndex);\n            }\n        }\n        this._mightContainRTL = mightContainRTL;\n        this._mightContainUnusualLineTerminators = mightContainUnusualLineTerminators;\n        this._mightContainNonBasicASCII = mightContainNonBasicASCII;\n        const contentChanges = this._doApplyEdits(operations);\n        let trimAutoWhitespaceLineNumbers = null;\n        if (recordTrimAutoWhitespace && newTrimAutoWhitespaceCandidates.length > 0) {\n            // sort line numbers auto whitespace removal candidates for next edit descending\n            newTrimAutoWhitespaceCandidates.sort((a, b) => b.lineNumber - a.lineNumber);\n            trimAutoWhitespaceLineNumbers = [];\n            for (let i = 0, len = newTrimAutoWhitespaceCandidates.length; i < len; i++) {\n                const lineNumber = newTrimAutoWhitespaceCandidates[i].lineNumber;\n                if (i > 0 && newTrimAutoWhitespaceCandidates[i - 1].lineNumber === lineNumber) {\n                    // Do not have the same line number twice\n                    continue;\n                }\n                const prevContent = newTrimAutoWhitespaceCandidates[i].oldContent;\n                const lineContent = this.getLineContent(lineNumber);\n                if (lineContent.length === 0 || lineContent === prevContent || strings.firstNonWhitespaceIndex(lineContent) !== -1) {\n                    continue;\n                }\n                trimAutoWhitespaceLineNumbers.push(lineNumber);\n            }\n        }\n        this._onDidChangeContent.fire();\n        return new ApplyEditsResult(reverseOperations, contentChanges, trimAutoWhitespaceLineNumbers);\n    }\n    /**\n     * Transform operations such that they represent the same logic edit,\n     * but that they also do not cause OOM crashes.\n     */\n    _reduceOperations(operations) {\n        if (operations.length < 1000) {\n            // We know from empirical testing that a thousand edits work fine regardless of their shape.\n            return operations;\n        }\n        // At one point, due to how events are emitted and how each operation is handled,\n        // some operations can trigger a high amount of temporary string allocations,\n        // that will immediately get edited again.\n        // e.g. a formatter inserting ridiculous ammounts of \\n on a model with a single line\n        // Therefore, the strategy is to collapse all the operations into a huge single edit operation\n        return [this._toSingleEditOperation(operations)];\n    }\n    _toSingleEditOperation(operations) {\n        let forceMoveMarkers = false;\n        const firstEditRange = operations[0].range;\n        const lastEditRange = operations[operations.length - 1].range;\n        const entireEditRange = new Range(firstEditRange.startLineNumber, firstEditRange.startColumn, lastEditRange.endLineNumber, lastEditRange.endColumn);\n        let lastEndLineNumber = firstEditRange.startLineNumber;\n        let lastEndColumn = firstEditRange.startColumn;\n        const result = [];\n        for (let i = 0, len = operations.length; i < len; i++) {\n            const operation = operations[i];\n            const range = operation.range;\n            forceMoveMarkers = forceMoveMarkers || operation.forceMoveMarkers;\n            // (1) -- Push old text\n            result.push(this.getValueInRange(new Range(lastEndLineNumber, lastEndColumn, range.startLineNumber, range.startColumn)));\n            // (2) -- Push new text\n            if (operation.text.length > 0) {\n                result.push(operation.text);\n            }\n            lastEndLineNumber = range.endLineNumber;\n            lastEndColumn = range.endColumn;\n        }\n        const text = result.join('');\n        const [eolCount, firstLineLength, lastLineLength] = countEOL(text);\n        return {\n            sortIndex: 0,\n            identifier: operations[0].identifier,\n            range: entireEditRange,\n            rangeOffset: this.getOffsetAt(entireEditRange.startLineNumber, entireEditRange.startColumn),\n            rangeLength: this.getValueLengthInRange(entireEditRange, 0 /* EndOfLinePreference.TextDefined */),\n            text: text,\n            eolCount: eolCount,\n            firstLineLength: firstLineLength,\n            lastLineLength: lastLineLength,\n            forceMoveMarkers: forceMoveMarkers,\n            isAutoWhitespaceEdit: false\n        };\n    }\n    _doApplyEdits(operations) {\n        operations.sort(PieceTreeTextBuffer._sortOpsDescending);\n        const contentChanges = [];\n        // operations are from bottom to top\n        for (let i = 0; i < operations.length; i++) {\n            const op = operations[i];\n            const startLineNumber = op.range.startLineNumber;\n            const startColumn = op.range.startColumn;\n            const endLineNumber = op.range.endLineNumber;\n            const endColumn = op.range.endColumn;\n            if (startLineNumber === endLineNumber && startColumn === endColumn && op.text.length === 0) {\n                // no-op\n                continue;\n            }\n            if (op.text) {\n                // replacement\n                this._pieceTree.delete(op.rangeOffset, op.rangeLength);\n                this._pieceTree.insert(op.rangeOffset, op.text, true);\n            }\n            else {\n                // deletion\n                this._pieceTree.delete(op.rangeOffset, op.rangeLength);\n            }\n            const contentChangeRange = new Range(startLineNumber, startColumn, endLineNumber, endColumn);\n            contentChanges.push({\n                range: contentChangeRange,\n                rangeLength: op.rangeLength,\n                text: op.text,\n                rangeOffset: op.rangeOffset,\n                forceMoveMarkers: op.forceMoveMarkers\n            });\n        }\n        return contentChanges;\n    }\n    findMatchesLineByLine(searchRange, searchData, captureMatches, limitResultCount) {\n        return this._pieceTree.findMatchesLineByLine(searchRange, searchData, captureMatches, limitResultCount);\n    }\n    /**\n     * Assumes `operations` are validated and sorted ascending\n     */\n    static _getInverseEditRanges(operations) {\n        const result = [];\n        let prevOpEndLineNumber = 0;\n        let prevOpEndColumn = 0;\n        let prevOp = null;\n        for (let i = 0, len = operations.length; i < len; i++) {\n            const op = operations[i];\n            let startLineNumber;\n            let startColumn;\n            if (prevOp) {\n                if (prevOp.range.endLineNumber === op.range.startLineNumber) {\n                    startLineNumber = prevOpEndLineNumber;\n                    startColumn = prevOpEndColumn + (op.range.startColumn - prevOp.range.endColumn);\n                }\n                else {\n                    startLineNumber = prevOpEndLineNumber + (op.range.startLineNumber - prevOp.range.endLineNumber);\n                    startColumn = op.range.startColumn;\n                }\n            }\n            else {\n                startLineNumber = op.range.startLineNumber;\n                startColumn = op.range.startColumn;\n            }\n            let resultRange;\n            if (op.text.length > 0) {\n                // the operation inserts something\n                const lineCount = op.eolCount + 1;\n                if (lineCount === 1) {\n                    // single line insert\n                    resultRange = new Range(startLineNumber, startColumn, startLineNumber, startColumn + op.firstLineLength);\n                }\n                else {\n                    // multi line insert\n                    resultRange = new Range(startLineNumber, startColumn, startLineNumber + lineCount - 1, op.lastLineLength + 1);\n                }\n            }\n            else {\n                // There is nothing to insert\n                resultRange = new Range(startLineNumber, startColumn, startLineNumber, startColumn);\n            }\n            prevOpEndLineNumber = resultRange.endLineNumber;\n            prevOpEndColumn = resultRange.endColumn;\n            result.push(resultRange);\n            prevOp = op;\n        }\n        return result;\n    }\n    static _sortOpsAscending(a, b) {\n        const r = Range.compareRangesUsingEnds(a.range, b.range);\n        if (r === 0) {\n            return a.sortIndex - b.sortIndex;\n        }\n        return r;\n    }\n    static _sortOpsDescending(a, b) {\n        const r = Range.compareRangesUsingEnds(a.range, b.range);\n        if (r === 0) {\n            return b.sortIndex - a.sortIndex;\n        }\n        return -r;\n    }\n}\n"],"mappings":"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"}]}