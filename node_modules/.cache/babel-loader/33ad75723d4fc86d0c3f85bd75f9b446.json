{"remainingRequest":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/thread-loader/dist/cjs.js!/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js!/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/platform/instantiation/common/instantiationService.js","dependencies":[{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/platform/instantiation/common/instantiationService.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/babel.config.js","mtime":1668271197000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js","mtime":456789000000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["IdleValue","illegalState","SyncDescriptor","Graph","IInstantiationService","_util","ServiceCollection","_enableTracing","CyclicDependencyError","graph","_a","message","findCycleSlow","toString","Error","InstantiationService","services","strict","parent","_activeInstantiations","Set","_services","_strict","_parent","set","fn","_trace","Trace","traceInvocation","_done","accessor","get","id","result","_getOrCreateServiceInstance","args","stop","ctorOrDescriptor","rest","traceCreation","ctor","_createInstance","staticArguments","concat","serviceDependencies","getServiceDependencies","sort","a","b","index","serviceArgs","dependency","service","_throwIfStrict","name","push","firstServiceArgPos","length","console","trace","delta","Array","slice","instance","_setServiceInstance","instanceOrDesc","_getServiceInstanceOrDescriptor","thing","_safeCreateAndCacheServiceInstance","branch","desc","has","add","_createAndCacheServiceInstance","delete","data","cycleCount","stack","item","pop","lookupOrInsertNode","d","insertEdge","roots","isEmpty","_createServiceInstanceWithOwner","supportsDelayedInstantiation","removeNode","_createServiceInstance","_supportsDelayedInstantiation","idle","Proxy","Object","create","target","key","obj","value","prop","bind","_target","p","msg","printWarning","warn","type","_start","Date","now","_dep","first","child","dur","_totals","causedCreation","printChild","n","res","prefix","join","nested","lines","toFixed","log","_None","substring","replace"],"sources":["/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/platform/instantiation/common/instantiationService.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { IdleValue } from '../../../base/common/async.js';\nimport { illegalState } from '../../../base/common/errors.js';\nimport { SyncDescriptor } from './descriptors.js';\nimport { Graph } from './graph.js';\nimport { IInstantiationService, _util } from './instantiation.js';\nimport { ServiceCollection } from './serviceCollection.js';\n// TRACING\nconst _enableTracing = false;\nclass CyclicDependencyError extends Error {\n    constructor(graph) {\n        var _a;\n        super('cyclic dependency between services');\n        this.message = (_a = graph.findCycleSlow()) !== null && _a !== void 0 ? _a : `UNABLE to detect cycle, dumping graph: \\n${graph.toString()}`;\n    }\n}\nexport class InstantiationService {\n    constructor(services = new ServiceCollection(), strict = false, parent) {\n        this._activeInstantiations = new Set();\n        this._services = services;\n        this._strict = strict;\n        this._parent = parent;\n        this._services.set(IInstantiationService, this);\n    }\n    createChild(services) {\n        return new InstantiationService(services, this._strict, this);\n    }\n    invokeFunction(fn, ...args) {\n        const _trace = Trace.traceInvocation(fn);\n        let _done = false;\n        try {\n            const accessor = {\n                get: (id) => {\n                    if (_done) {\n                        throw illegalState('service accessor is only valid during the invocation of its target method');\n                    }\n                    const result = this._getOrCreateServiceInstance(id, _trace);\n                    if (!result) {\n                        throw new Error(`[invokeFunction] unknown service '${id}'`);\n                    }\n                    return result;\n                }\n            };\n            return fn(accessor, ...args);\n        }\n        finally {\n            _done = true;\n            _trace.stop();\n        }\n    }\n    createInstance(ctorOrDescriptor, ...rest) {\n        let _trace;\n        let result;\n        if (ctorOrDescriptor instanceof SyncDescriptor) {\n            _trace = Trace.traceCreation(ctorOrDescriptor.ctor);\n            result = this._createInstance(ctorOrDescriptor.ctor, ctorOrDescriptor.staticArguments.concat(rest), _trace);\n        }\n        else {\n            _trace = Trace.traceCreation(ctorOrDescriptor);\n            result = this._createInstance(ctorOrDescriptor, rest, _trace);\n        }\n        _trace.stop();\n        return result;\n    }\n    _createInstance(ctor, args = [], _trace) {\n        // arguments defined by service decorators\n        const serviceDependencies = _util.getServiceDependencies(ctor).sort((a, b) => a.index - b.index);\n        const serviceArgs = [];\n        for (const dependency of serviceDependencies) {\n            const service = this._getOrCreateServiceInstance(dependency.id, _trace);\n            if (!service) {\n                this._throwIfStrict(`[createInstance] ${ctor.name} depends on UNKNOWN service ${dependency.id}.`, false);\n            }\n            serviceArgs.push(service);\n        }\n        const firstServiceArgPos = serviceDependencies.length > 0 ? serviceDependencies[0].index : args.length;\n        // check for argument mismatches, adjust static args if needed\n        if (args.length !== firstServiceArgPos) {\n            console.trace(`[createInstance] First service dependency of ${ctor.name} at position ${firstServiceArgPos + 1} conflicts with ${args.length} static arguments`);\n            const delta = firstServiceArgPos - args.length;\n            if (delta > 0) {\n                args = args.concat(new Array(delta));\n            }\n            else {\n                args = args.slice(0, firstServiceArgPos);\n            }\n        }\n        // now create the instance\n        return new ctor(...[...args, ...serviceArgs]);\n    }\n    _setServiceInstance(id, instance) {\n        if (this._services.get(id) instanceof SyncDescriptor) {\n            this._services.set(id, instance);\n        }\n        else if (this._parent) {\n            this._parent._setServiceInstance(id, instance);\n        }\n        else {\n            throw new Error('illegalState - setting UNKNOWN service instance');\n        }\n    }\n    _getServiceInstanceOrDescriptor(id) {\n        const instanceOrDesc = this._services.get(id);\n        if (!instanceOrDesc && this._parent) {\n            return this._parent._getServiceInstanceOrDescriptor(id);\n        }\n        else {\n            return instanceOrDesc;\n        }\n    }\n    _getOrCreateServiceInstance(id, _trace) {\n        const thing = this._getServiceInstanceOrDescriptor(id);\n        if (thing instanceof SyncDescriptor) {\n            return this._safeCreateAndCacheServiceInstance(id, thing, _trace.branch(id, true));\n        }\n        else {\n            _trace.branch(id, false);\n            return thing;\n        }\n    }\n    _safeCreateAndCacheServiceInstance(id, desc, _trace) {\n        if (this._activeInstantiations.has(id)) {\n            throw new Error(`illegal state - RECURSIVELY instantiating service '${id}'`);\n        }\n        this._activeInstantiations.add(id);\n        try {\n            return this._createAndCacheServiceInstance(id, desc, _trace);\n        }\n        finally {\n            this._activeInstantiations.delete(id);\n        }\n    }\n    _createAndCacheServiceInstance(id, desc, _trace) {\n        const graph = new Graph(data => data.id.toString());\n        let cycleCount = 0;\n        const stack = [{ id, desc, _trace }];\n        while (stack.length) {\n            const item = stack.pop();\n            graph.lookupOrInsertNode(item);\n            // a weak but working heuristic for cycle checks\n            if (cycleCount++ > 1000) {\n                throw new CyclicDependencyError(graph);\n            }\n            // check all dependencies for existence and if they need to be created first\n            for (const dependency of _util.getServiceDependencies(item.desc.ctor)) {\n                const instanceOrDesc = this._getServiceInstanceOrDescriptor(dependency.id);\n                if (!instanceOrDesc) {\n                    this._throwIfStrict(`[createInstance] ${id} depends on ${dependency.id} which is NOT registered.`, true);\n                }\n                if (instanceOrDesc instanceof SyncDescriptor) {\n                    const d = { id: dependency.id, desc: instanceOrDesc, _trace: item._trace.branch(dependency.id, true) };\n                    graph.insertEdge(item, d);\n                    stack.push(d);\n                }\n            }\n        }\n        while (true) {\n            const roots = graph.roots();\n            // if there is no more roots but still\n            // nodes in the graph we have a cycle\n            if (roots.length === 0) {\n                if (!graph.isEmpty()) {\n                    throw new CyclicDependencyError(graph);\n                }\n                break;\n            }\n            for (const { data } of roots) {\n                // Repeat the check for this still being a service sync descriptor. That's because\n                // instantiating a dependency might have side-effect and recursively trigger instantiation\n                // so that some dependencies are now fullfilled already.\n                const instanceOrDesc = this._getServiceInstanceOrDescriptor(data.id);\n                if (instanceOrDesc instanceof SyncDescriptor) {\n                    // create instance and overwrite the service collections\n                    const instance = this._createServiceInstanceWithOwner(data.id, data.desc.ctor, data.desc.staticArguments, data.desc.supportsDelayedInstantiation, data._trace);\n                    this._setServiceInstance(data.id, instance);\n                }\n                graph.removeNode(data);\n            }\n        }\n        return this._getServiceInstanceOrDescriptor(id);\n    }\n    _createServiceInstanceWithOwner(id, ctor, args = [], supportsDelayedInstantiation, _trace) {\n        if (this._services.get(id) instanceof SyncDescriptor) {\n            return this._createServiceInstance(ctor, args, supportsDelayedInstantiation, _trace);\n        }\n        else if (this._parent) {\n            return this._parent._createServiceInstanceWithOwner(id, ctor, args, supportsDelayedInstantiation, _trace);\n        }\n        else {\n            throw new Error(`illegalState - creating UNKNOWN service instance ${ctor.name}`);\n        }\n    }\n    _createServiceInstance(ctor, args = [], _supportsDelayedInstantiation, _trace) {\n        if (!_supportsDelayedInstantiation) {\n            // eager instantiation\n            return this._createInstance(ctor, args, _trace);\n        }\n        else {\n            // Return a proxy object that's backed by an idle value. That\n            // strategy is to instantiate services in our idle time or when actually\n            // needed but not when injected into a consumer\n            const idle = new IdleValue(() => this._createInstance(ctor, args, _trace));\n            return new Proxy(Object.create(null), {\n                get(target, key) {\n                    if (key in target) {\n                        return target[key];\n                    }\n                    const obj = idle.value;\n                    let prop = obj[key];\n                    if (typeof prop !== 'function') {\n                        return prop;\n                    }\n                    prop = prop.bind(obj);\n                    target[key] = prop;\n                    return prop;\n                },\n                set(_target, p, value) {\n                    idle.value[p] = value;\n                    return true;\n                }\n            });\n        }\n    }\n    _throwIfStrict(msg, printWarning) {\n        if (printWarning) {\n            console.warn(msg);\n        }\n        if (this._strict) {\n            throw new Error(msg);\n        }\n    }\n}\nexport class Trace {\n    constructor(type, name) {\n        this.type = type;\n        this.name = name;\n        this._start = Date.now();\n        this._dep = [];\n    }\n    static traceInvocation(ctor) {\n        return !_enableTracing ? Trace._None : new Trace(1 /* TraceType.Invocation */, ctor.name || ctor.toString().substring(0, 42).replace(/\\n/g, ''));\n    }\n    static traceCreation(ctor) {\n        return !_enableTracing ? Trace._None : new Trace(0 /* TraceType.Creation */, ctor.name);\n    }\n    branch(id, first) {\n        const child = new Trace(2 /* TraceType.Branch */, id.toString());\n        this._dep.push([id, first, child]);\n        return child;\n    }\n    stop() {\n        const dur = Date.now() - this._start;\n        Trace._totals += dur;\n        let causedCreation = false;\n        function printChild(n, trace) {\n            const res = [];\n            const prefix = new Array(n + 1).join('\\t');\n            for (const [id, first, child] of trace._dep) {\n                if (first && child) {\n                    causedCreation = true;\n                    res.push(`${prefix}CREATES -> ${id}`);\n                    const nested = printChild(n + 1, child);\n                    if (nested) {\n                        res.push(nested);\n                    }\n                }\n                else {\n                    res.push(`${prefix}uses -> ${id}`);\n                }\n            }\n            return res.join('\\n');\n        }\n        const lines = [\n            `${this.type === 0 /* TraceType.Creation */ ? 'CREATE' : 'CALL'} ${this.name}`,\n            `${printChild(1, this)}`,\n            `DONE, took ${dur.toFixed(2)}ms (grand total ${Trace._totals.toFixed(2)}ms)`\n        ];\n        if (dur > 2 || causedCreation) {\n            console.log(lines.join('\\n'));\n        }\n    }\n}\nTrace._None = new class extends Trace {\n    constructor() { super(-1, null); }\n    stop() { }\n    branch() { return this; }\n};\nTrace._totals = 0;\n//#endregion\n"],"mappings":"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"}]}