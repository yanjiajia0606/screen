{"remainingRequest":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/thread-loader/dist/cjs.js!/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js!/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/contrib/format/browser/format.js","dependencies":[{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/contrib/format/browser/format.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/babel.config.js","mtime":1668271197000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js","mtime":456789000000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","alert","asArray","isNonEmptyArray","CancellationToken","onUnexpectedExternalError","Iterable","LinkedList","assertType","URI","EditorStateCancellationTokenSource","TextModelCancellationTokenSource","isCodeEditor","Position","Range","Selection","IEditorWorkerService","ITextModelService","FormattingEdit","nls","CommandsRegistry","ExtensionIdentifier","IInstantiationService","ILanguageFeaturesService","alertFormattingEdits","edits","filter","edit","range","length","i","plusRange","startLineNumber","endLineNumber","localize","getRealAndSyntheticDocumentFormattersOrdered","documentFormattingEditProvider","documentRangeFormattingEditProvider","model","seen","Set","docFormatter","ordered","formatter","push","extensionId","add","toKey","rangeFormatter","has","displayName","provideDocumentFormattingEdits","options","token","provideDocumentRangeFormattingEdits","getFullModelRange","FormattingConflicts","selector","remove","_selectors","unshift","dispose","document","mode","undefined","first","formatDocumentRangesWithSelectedProvider","accessor","editorOrModel","rangeOrRanges","progress","instaService","get","documentRangeFormattingEditProviderRegistry","getModel","provider","select","selected","report","invokeFunction","formatDocumentRangesWithProvider","workerService","cts","ranges","len","sort","compareRangesUsingStarts","areIntersectingOrTouching","fromPositions","getStartPosition","getEndPosition","computeEdits","getFormattingOptions","hasIntersectingEdit","a","b","mergedA","reduce","acc","val","some","x","intersectRanges","otherEdit","allEdits","rawEditsList","isCancellationRequested","j","mergedRange","splice","rawEdits","computeMoreMinimalEdits","uri","minimalEdits","execute","revealPositionInCenterIfOutsideViewport","getPosition","initialSelection","startColumn","endColumn","pushEditOperations","map","text","lift","forceMoveMarkers","undoEdits","formatDocumentWithSelectedProvider","languageFeaturesService","formatDocumentWithProvider","getDocumentRangeFormattingEditsUntilResult","providers","catch","getDocumentFormattingEditsUntilResult","getOnTypeFormattingEdits","position","ch","onTypeFormattingEditProvider","autoFormatTriggerCharacters","indexOf","provideOnTypeFormattingEdits","registerCommand","args","resource","isUri","isIRange","resolverService","createModelReference","reference","object","textEditorModel","None","isIPosition"],"sources":["/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/contrib/format/browser/format.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { alert } from '../../../../base/browser/ui/aria/aria.js';\nimport { asArray, isNonEmptyArray } from '../../../../base/common/arrays.js';\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { onUnexpectedExternalError } from '../../../../base/common/errors.js';\nimport { Iterable } from '../../../../base/common/iterator.js';\nimport { LinkedList } from '../../../../base/common/linkedList.js';\nimport { assertType } from '../../../../base/common/types.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { EditorStateCancellationTokenSource, TextModelCancellationTokenSource } from '../../editorState/browser/editorState.js';\nimport { isCodeEditor } from '../../../browser/editorBrowser.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { IEditorWorkerService } from '../../../common/services/editorWorker.js';\nimport { ITextModelService } from '../../../common/services/resolverService.js';\nimport { FormattingEdit } from './formattingEdit.js';\nimport * as nls from '../../../../nls.js';\nimport { CommandsRegistry } from '../../../../platform/commands/common/commands.js';\nimport { ExtensionIdentifier } from '../../../../platform/extensions/common/extensions.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures.js';\nexport function alertFormattingEdits(edits) {\n    edits = edits.filter(edit => edit.range);\n    if (!edits.length) {\n        return;\n    }\n    let { range } = edits[0];\n    for (let i = 1; i < edits.length; i++) {\n        range = Range.plusRange(range, edits[i].range);\n    }\n    const { startLineNumber, endLineNumber } = range;\n    if (startLineNumber === endLineNumber) {\n        if (edits.length === 1) {\n            alert(nls.localize('hint11', \"Made 1 formatting edit on line {0}\", startLineNumber));\n        }\n        else {\n            alert(nls.localize('hintn1', \"Made {0} formatting edits on line {1}\", edits.length, startLineNumber));\n        }\n    }\n    else {\n        if (edits.length === 1) {\n            alert(nls.localize('hint1n', \"Made 1 formatting edit between lines {0} and {1}\", startLineNumber, endLineNumber));\n        }\n        else {\n            alert(nls.localize('hintnn', \"Made {0} formatting edits between lines {1} and {2}\", edits.length, startLineNumber, endLineNumber));\n        }\n    }\n}\nexport function getRealAndSyntheticDocumentFormattersOrdered(documentFormattingEditProvider, documentRangeFormattingEditProvider, model) {\n    const result = [];\n    const seen = new Set();\n    // (1) add all document formatter\n    const docFormatter = documentFormattingEditProvider.ordered(model);\n    for (const formatter of docFormatter) {\n        result.push(formatter);\n        if (formatter.extensionId) {\n            seen.add(ExtensionIdentifier.toKey(formatter.extensionId));\n        }\n    }\n    // (2) add all range formatter as document formatter (unless the same extension already did that)\n    const rangeFormatter = documentRangeFormattingEditProvider.ordered(model);\n    for (const formatter of rangeFormatter) {\n        if (formatter.extensionId) {\n            if (seen.has(ExtensionIdentifier.toKey(formatter.extensionId))) {\n                continue;\n            }\n            seen.add(ExtensionIdentifier.toKey(formatter.extensionId));\n        }\n        result.push({\n            displayName: formatter.displayName,\n            extensionId: formatter.extensionId,\n            provideDocumentFormattingEdits(model, options, token) {\n                return formatter.provideDocumentRangeFormattingEdits(model, model.getFullModelRange(), options, token);\n            }\n        });\n    }\n    return result;\n}\nexport class FormattingConflicts {\n    static setFormatterSelector(selector) {\n        const remove = FormattingConflicts._selectors.unshift(selector);\n        return { dispose: remove };\n    }\n    static select(formatter, document, mode) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (formatter.length === 0) {\n                return undefined;\n            }\n            const selector = Iterable.first(FormattingConflicts._selectors);\n            if (selector) {\n                return yield selector(formatter, document, mode);\n            }\n            return undefined;\n        });\n    }\n}\nFormattingConflicts._selectors = new LinkedList();\nexport function formatDocumentRangesWithSelectedProvider(accessor, editorOrModel, rangeOrRanges, mode, progress, token) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const instaService = accessor.get(IInstantiationService);\n        const { documentRangeFormattingEditProvider: documentRangeFormattingEditProviderRegistry } = accessor.get(ILanguageFeaturesService);\n        const model = isCodeEditor(editorOrModel) ? editorOrModel.getModel() : editorOrModel;\n        const provider = documentRangeFormattingEditProviderRegistry.ordered(model);\n        const selected = yield FormattingConflicts.select(provider, model, mode);\n        if (selected) {\n            progress.report(selected);\n            yield instaService.invokeFunction(formatDocumentRangesWithProvider, selected, editorOrModel, rangeOrRanges, token);\n        }\n    });\n}\nexport function formatDocumentRangesWithProvider(accessor, provider, editorOrModel, rangeOrRanges, token) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const workerService = accessor.get(IEditorWorkerService);\n        let model;\n        let cts;\n        if (isCodeEditor(editorOrModel)) {\n            model = editorOrModel.getModel();\n            cts = new EditorStateCancellationTokenSource(editorOrModel, 1 /* CodeEditorStateFlag.Value */ | 4 /* CodeEditorStateFlag.Position */, undefined, token);\n        }\n        else {\n            model = editorOrModel;\n            cts = new TextModelCancellationTokenSource(editorOrModel, token);\n        }\n        // make sure that ranges don't overlap nor touch each other\n        const ranges = [];\n        let len = 0;\n        for (const range of asArray(rangeOrRanges).sort(Range.compareRangesUsingStarts)) {\n            if (len > 0 && Range.areIntersectingOrTouching(ranges[len - 1], range)) {\n                ranges[len - 1] = Range.fromPositions(ranges[len - 1].getStartPosition(), range.getEndPosition());\n            }\n            else {\n                len = ranges.push(range);\n            }\n        }\n        const computeEdits = (range) => __awaiter(this, void 0, void 0, function* () {\n            return (yield provider.provideDocumentRangeFormattingEdits(model, range, model.getFormattingOptions(), cts.token)) || [];\n        });\n        const hasIntersectingEdit = (a, b) => {\n            if (!a.length || !b.length) {\n                return false;\n            }\n            // quick exit if the list of ranges are completely unrelated [O(n)]\n            const mergedA = a.reduce((acc, val) => { return Range.plusRange(acc, val.range); }, a[0].range);\n            if (!b.some(x => { return Range.intersectRanges(mergedA, x.range); })) {\n                return false;\n            }\n            // fallback to a complete check [O(n^2)]\n            for (const edit of a) {\n                for (const otherEdit of b) {\n                    if (Range.intersectRanges(edit.range, otherEdit.range)) {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        };\n        const allEdits = [];\n        const rawEditsList = [];\n        try {\n            for (const range of ranges) {\n                if (cts.token.isCancellationRequested) {\n                    return true;\n                }\n                rawEditsList.push(yield computeEdits(range));\n            }\n            for (let i = 0; i < ranges.length; ++i) {\n                for (let j = i + 1; j < ranges.length; ++j) {\n                    if (cts.token.isCancellationRequested) {\n                        return true;\n                    }\n                    if (hasIntersectingEdit(rawEditsList[i], rawEditsList[j])) {\n                        // Merge ranges i and j into a single range, recompute the associated edits\n                        const mergedRange = Range.plusRange(ranges[i], ranges[j]);\n                        const edits = yield computeEdits(mergedRange);\n                        ranges.splice(j, 1);\n                        ranges.splice(i, 1);\n                        ranges.push(mergedRange);\n                        rawEditsList.splice(j, 1);\n                        rawEditsList.splice(i, 1);\n                        rawEditsList.push(edits);\n                        // Restart scanning\n                        i = 0;\n                        j = 0;\n                    }\n                }\n            }\n            for (const rawEdits of rawEditsList) {\n                if (cts.token.isCancellationRequested) {\n                    return true;\n                }\n                const minimalEdits = yield workerService.computeMoreMinimalEdits(model.uri, rawEdits);\n                if (minimalEdits) {\n                    allEdits.push(...minimalEdits);\n                }\n            }\n        }\n        finally {\n            cts.dispose();\n        }\n        if (allEdits.length === 0) {\n            return false;\n        }\n        if (isCodeEditor(editorOrModel)) {\n            // use editor to apply edits\n            FormattingEdit.execute(editorOrModel, allEdits, true);\n            alertFormattingEdits(allEdits);\n            editorOrModel.revealPositionInCenterIfOutsideViewport(editorOrModel.getPosition(), 1 /* ScrollType.Immediate */);\n        }\n        else {\n            // use model to apply edits\n            const [{ range }] = allEdits;\n            const initialSelection = new Selection(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn);\n            model.pushEditOperations([initialSelection], allEdits.map(edit => {\n                return {\n                    text: edit.text,\n                    range: Range.lift(edit.range),\n                    forceMoveMarkers: true\n                };\n            }), undoEdits => {\n                for (const { range } of undoEdits) {\n                    if (Range.areIntersectingOrTouching(range, initialSelection)) {\n                        return [new Selection(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn)];\n                    }\n                }\n                return null;\n            });\n        }\n        return true;\n    });\n}\nexport function formatDocumentWithSelectedProvider(accessor, editorOrModel, mode, progress, token) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const instaService = accessor.get(IInstantiationService);\n        const languageFeaturesService = accessor.get(ILanguageFeaturesService);\n        const model = isCodeEditor(editorOrModel) ? editorOrModel.getModel() : editorOrModel;\n        const provider = getRealAndSyntheticDocumentFormattersOrdered(languageFeaturesService.documentFormattingEditProvider, languageFeaturesService.documentRangeFormattingEditProvider, model);\n        const selected = yield FormattingConflicts.select(provider, model, mode);\n        if (selected) {\n            progress.report(selected);\n            yield instaService.invokeFunction(formatDocumentWithProvider, selected, editorOrModel, mode, token);\n        }\n    });\n}\nexport function formatDocumentWithProvider(accessor, provider, editorOrModel, mode, token) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const workerService = accessor.get(IEditorWorkerService);\n        let model;\n        let cts;\n        if (isCodeEditor(editorOrModel)) {\n            model = editorOrModel.getModel();\n            cts = new EditorStateCancellationTokenSource(editorOrModel, 1 /* CodeEditorStateFlag.Value */ | 4 /* CodeEditorStateFlag.Position */, undefined, token);\n        }\n        else {\n            model = editorOrModel;\n            cts = new TextModelCancellationTokenSource(editorOrModel, token);\n        }\n        let edits;\n        try {\n            const rawEdits = yield provider.provideDocumentFormattingEdits(model, model.getFormattingOptions(), cts.token);\n            edits = yield workerService.computeMoreMinimalEdits(model.uri, rawEdits);\n            if (cts.token.isCancellationRequested) {\n                return true;\n            }\n        }\n        finally {\n            cts.dispose();\n        }\n        if (!edits || edits.length === 0) {\n            return false;\n        }\n        if (isCodeEditor(editorOrModel)) {\n            // use editor to apply edits\n            FormattingEdit.execute(editorOrModel, edits, mode !== 2 /* FormattingMode.Silent */);\n            if (mode !== 2 /* FormattingMode.Silent */) {\n                alertFormattingEdits(edits);\n                editorOrModel.revealPositionInCenterIfOutsideViewport(editorOrModel.getPosition(), 1 /* ScrollType.Immediate */);\n            }\n        }\n        else {\n            // use model to apply edits\n            const [{ range }] = edits;\n            const initialSelection = new Selection(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn);\n            model.pushEditOperations([initialSelection], edits.map(edit => {\n                return {\n                    text: edit.text,\n                    range: Range.lift(edit.range),\n                    forceMoveMarkers: true\n                };\n            }), undoEdits => {\n                for (const { range } of undoEdits) {\n                    if (Range.areIntersectingOrTouching(range, initialSelection)) {\n                        return [new Selection(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn)];\n                    }\n                }\n                return null;\n            });\n        }\n        return true;\n    });\n}\nexport function getDocumentRangeFormattingEditsUntilResult(workerService, languageFeaturesService, model, range, options, token) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const providers = languageFeaturesService.documentRangeFormattingEditProvider.ordered(model);\n        for (const provider of providers) {\n            const rawEdits = yield Promise.resolve(provider.provideDocumentRangeFormattingEdits(model, range, options, token)).catch(onUnexpectedExternalError);\n            if (isNonEmptyArray(rawEdits)) {\n                return yield workerService.computeMoreMinimalEdits(model.uri, rawEdits);\n            }\n        }\n        return undefined;\n    });\n}\nexport function getDocumentFormattingEditsUntilResult(workerService, languageFeaturesService, model, options, token) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const providers = getRealAndSyntheticDocumentFormattersOrdered(languageFeaturesService.documentFormattingEditProvider, languageFeaturesService.documentRangeFormattingEditProvider, model);\n        for (const provider of providers) {\n            const rawEdits = yield Promise.resolve(provider.provideDocumentFormattingEdits(model, options, token)).catch(onUnexpectedExternalError);\n            if (isNonEmptyArray(rawEdits)) {\n                return yield workerService.computeMoreMinimalEdits(model.uri, rawEdits);\n            }\n        }\n        return undefined;\n    });\n}\nexport function getOnTypeFormattingEdits(workerService, languageFeaturesService, model, position, ch, options, token) {\n    const providers = languageFeaturesService.onTypeFormattingEditProvider.ordered(model);\n    if (providers.length === 0) {\n        return Promise.resolve(undefined);\n    }\n    if (providers[0].autoFormatTriggerCharacters.indexOf(ch) < 0) {\n        return Promise.resolve(undefined);\n    }\n    return Promise.resolve(providers[0].provideOnTypeFormattingEdits(model, position, ch, options, token)).catch(onUnexpectedExternalError).then(edits => {\n        return workerService.computeMoreMinimalEdits(model.uri, edits);\n    });\n}\nCommandsRegistry.registerCommand('_executeFormatRangeProvider', function (accessor, ...args) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const [resource, range, options] = args;\n        assertType(URI.isUri(resource));\n        assertType(Range.isIRange(range));\n        const resolverService = accessor.get(ITextModelService);\n        const workerService = accessor.get(IEditorWorkerService);\n        const languageFeaturesService = accessor.get(ILanguageFeaturesService);\n        const reference = yield resolverService.createModelReference(resource);\n        try {\n            return getDocumentRangeFormattingEditsUntilResult(workerService, languageFeaturesService, reference.object.textEditorModel, Range.lift(range), options, CancellationToken.None);\n        }\n        finally {\n            reference.dispose();\n        }\n    });\n});\nCommandsRegistry.registerCommand('_executeFormatDocumentProvider', function (accessor, ...args) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const [resource, options] = args;\n        assertType(URI.isUri(resource));\n        const resolverService = accessor.get(ITextModelService);\n        const workerService = accessor.get(IEditorWorkerService);\n        const languageFeaturesService = accessor.get(ILanguageFeaturesService);\n        const reference = yield resolverService.createModelReference(resource);\n        try {\n            return getDocumentFormattingEditsUntilResult(workerService, languageFeaturesService, reference.object.textEditorModel, options, CancellationToken.None);\n        }\n        finally {\n            reference.dispose();\n        }\n    });\n});\nCommandsRegistry.registerCommand('_executeFormatOnTypeProvider', function (accessor, ...args) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const [resource, position, ch, options] = args;\n        assertType(URI.isUri(resource));\n        assertType(Position.isIPosition(position));\n        assertType(typeof ch === 'string');\n        const resolverService = accessor.get(ITextModelService);\n        const workerService = accessor.get(IEditorWorkerService);\n        const languageFeaturesService = accessor.get(ILanguageFeaturesService);\n        const reference = yield resolverService.createModelReference(resource);\n        try {\n            return getOnTypeFormattingEdits(workerService, languageFeaturesService, reference.object.textEditorModel, Position.lift(position), ch, options, CancellationToken.None);\n        }\n        finally {\n            reference.dispose();\n        }\n    });\n});\n"],"mappings":"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"}]}