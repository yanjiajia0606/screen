{"remainingRequest":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js!/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/common/services/getSemanticTokens.js","dependencies":[{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/common/services/getSemanticTokens.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/babel.config.js","mtime":1668271197000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js","mtime":456789000000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","CancellationToken","onUnexpectedExternalError","URI","IModelService","CommandsRegistry","ICommandService","assertType","encodeSemanticTokensDto","Range","ILanguageFeaturesService","isSemanticTokens","v","data","isSemanticTokensEdits","Array","isArray","edits","DocumentSemanticTokensResult","provider","tokens","error","hasDocumentSemanticTokensProvider","registry","model","has","getDocumentSemanticTokensProviders","groups","orderedGroups","length","getDocumentSemanticTokens","lastProvider","lastResultId","token","providers","all","map","provideDocumentSemanticTokens","results","_getDocumentSemanticTokensProviderHighestGroup","DocumentRangeSemanticTokensResult","hasDocumentRangeSemanticTokensProvider","getDocumentRangeSemanticTokensProviders","getDocumentRangeSemanticTokens","range","provideDocumentRangeSemanticTokens","registerCommand","accessor","args","uri","get","getModel","undefined","documentSemanticTokensProvider","executeCommand","getLegend","getFullModelRange","None","r","buff","id","type","resultId","releaseDocumentSemanticTokens","documentRangeSemanticTokensProvider","isIRange","console","warn","lift"],"sources":["/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/common/services/getSemanticTokens.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { CancellationToken } from '../../../base/common/cancellation.js';\nimport { onUnexpectedExternalError } from '../../../base/common/errors.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { IModelService } from './model.js';\nimport { CommandsRegistry, ICommandService } from '../../../platform/commands/common/commands.js';\nimport { assertType } from '../../../base/common/types.js';\nimport { encodeSemanticTokensDto } from './semanticTokensDto.js';\nimport { Range } from '../core/range.js';\nimport { ILanguageFeaturesService } from './languageFeatures.js';\nexport function isSemanticTokens(v) {\n    return v && !!(v.data);\n}\nexport function isSemanticTokensEdits(v) {\n    return v && Array.isArray(v.edits);\n}\nexport class DocumentSemanticTokensResult {\n    constructor(provider, tokens, error) {\n        this.provider = provider;\n        this.tokens = tokens;\n        this.error = error;\n    }\n}\nexport function hasDocumentSemanticTokensProvider(registry, model) {\n    return registry.has(model);\n}\nfunction getDocumentSemanticTokensProviders(registry, model) {\n    const groups = registry.orderedGroups(model);\n    return (groups.length > 0 ? groups[0] : []);\n}\nexport function getDocumentSemanticTokens(registry, model, lastProvider, lastResultId, token) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const providers = getDocumentSemanticTokensProviders(registry, model);\n        // Get tokens from all providers at the same time.\n        const results = yield Promise.all(providers.map((provider) => __awaiter(this, void 0, void 0, function* () {\n            let result;\n            let error = null;\n            try {\n                result = yield provider.provideDocumentSemanticTokens(model, (provider === lastProvider ? lastResultId : null), token);\n            }\n            catch (err) {\n                error = err;\n                result = null;\n            }\n            if (!result || (!isSemanticTokens(result) && !isSemanticTokensEdits(result))) {\n                result = null;\n            }\n            return new DocumentSemanticTokensResult(provider, result, error);\n        })));\n        // Try to return the first result with actual tokens or\n        // the first result which threw an error (!!)\n        for (const result of results) {\n            if (result.error) {\n                throw result.error;\n            }\n            if (result.tokens) {\n                return result;\n            }\n        }\n        // Return the first result, even if it doesn't have tokens\n        if (results.length > 0) {\n            return results[0];\n        }\n        return null;\n    });\n}\nfunction _getDocumentSemanticTokensProviderHighestGroup(registry, model) {\n    const result = registry.orderedGroups(model);\n    return (result.length > 0 ? result[0] : null);\n}\nclass DocumentRangeSemanticTokensResult {\n    constructor(provider, tokens) {\n        this.provider = provider;\n        this.tokens = tokens;\n    }\n}\nexport function hasDocumentRangeSemanticTokensProvider(providers, model) {\n    return providers.has(model);\n}\nfunction getDocumentRangeSemanticTokensProviders(providers, model) {\n    const groups = providers.orderedGroups(model);\n    return (groups.length > 0 ? groups[0] : []);\n}\nexport function getDocumentRangeSemanticTokens(registry, model, range, token) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const providers = getDocumentRangeSemanticTokensProviders(registry, model);\n        // Get tokens from all providers at the same time.\n        const results = yield Promise.all(providers.map((provider) => __awaiter(this, void 0, void 0, function* () {\n            let result;\n            try {\n                result = yield provider.provideDocumentRangeSemanticTokens(model, range, token);\n            }\n            catch (err) {\n                onUnexpectedExternalError(err);\n                result = null;\n            }\n            if (!result || !isSemanticTokens(result)) {\n                result = null;\n            }\n            return new DocumentRangeSemanticTokensResult(provider, result);\n        })));\n        // Try to return the first result with actual tokens\n        for (const result of results) {\n            if (result.tokens) {\n                return result;\n            }\n        }\n        // Return the first result, even if it doesn't have tokens\n        if (results.length > 0) {\n            return results[0];\n        }\n        return null;\n    });\n}\nCommandsRegistry.registerCommand('_provideDocumentSemanticTokensLegend', (accessor, ...args) => __awaiter(void 0, void 0, void 0, function* () {\n    const [uri] = args;\n    assertType(uri instanceof URI);\n    const model = accessor.get(IModelService).getModel(uri);\n    if (!model) {\n        return undefined;\n    }\n    const { documentSemanticTokensProvider } = accessor.get(ILanguageFeaturesService);\n    const providers = _getDocumentSemanticTokensProviderHighestGroup(documentSemanticTokensProvider, model);\n    if (!providers) {\n        // there is no provider => fall back to a document range semantic tokens provider\n        return accessor.get(ICommandService).executeCommand('_provideDocumentRangeSemanticTokensLegend', uri);\n    }\n    return providers[0].getLegend();\n}));\nCommandsRegistry.registerCommand('_provideDocumentSemanticTokens', (accessor, ...args) => __awaiter(void 0, void 0, void 0, function* () {\n    const [uri] = args;\n    assertType(uri instanceof URI);\n    const model = accessor.get(IModelService).getModel(uri);\n    if (!model) {\n        return undefined;\n    }\n    const { documentSemanticTokensProvider } = accessor.get(ILanguageFeaturesService);\n    if (!hasDocumentSemanticTokensProvider(documentSemanticTokensProvider, model)) {\n        // there is no provider => fall back to a document range semantic tokens provider\n        return accessor.get(ICommandService).executeCommand('_provideDocumentRangeSemanticTokens', uri, model.getFullModelRange());\n    }\n    const r = yield getDocumentSemanticTokens(documentSemanticTokensProvider, model, null, null, CancellationToken.None);\n    if (!r) {\n        return undefined;\n    }\n    const { provider, tokens } = r;\n    if (!tokens || !isSemanticTokens(tokens)) {\n        return undefined;\n    }\n    const buff = encodeSemanticTokensDto({\n        id: 0,\n        type: 'full',\n        data: tokens.data\n    });\n    if (tokens.resultId) {\n        provider.releaseDocumentSemanticTokens(tokens.resultId);\n    }\n    return buff;\n}));\nCommandsRegistry.registerCommand('_provideDocumentRangeSemanticTokensLegend', (accessor, ...args) => __awaiter(void 0, void 0, void 0, function* () {\n    const [uri, range] = args;\n    assertType(uri instanceof URI);\n    const model = accessor.get(IModelService).getModel(uri);\n    if (!model) {\n        return undefined;\n    }\n    const { documentRangeSemanticTokensProvider } = accessor.get(ILanguageFeaturesService);\n    const providers = getDocumentRangeSemanticTokensProviders(documentRangeSemanticTokensProvider, model);\n    if (providers.length === 0) {\n        // no providers\n        return undefined;\n    }\n    if (providers.length === 1) {\n        // straight forward case, just a single provider\n        return providers[0].getLegend();\n    }\n    if (!range || !Range.isIRange(range)) {\n        // if no range is provided, we cannot support multiple providers\n        // as we cannot fall back to the one which would give results\n        // => return the first legend for backwards compatibility and print a warning\n        console.warn(`provideDocumentRangeSemanticTokensLegend might be out-of-sync with provideDocumentRangeSemanticTokens unless a range argument is passed in`);\n        return providers[0].getLegend();\n    }\n    const result = yield getDocumentRangeSemanticTokens(documentRangeSemanticTokensProvider, model, Range.lift(range), CancellationToken.None);\n    if (!result) {\n        return undefined;\n    }\n    return result.provider.getLegend();\n}));\nCommandsRegistry.registerCommand('_provideDocumentRangeSemanticTokens', (accessor, ...args) => __awaiter(void 0, void 0, void 0, function* () {\n    const [uri, range] = args;\n    assertType(uri instanceof URI);\n    assertType(Range.isIRange(range));\n    const model = accessor.get(IModelService).getModel(uri);\n    if (!model) {\n        return undefined;\n    }\n    const { documentRangeSemanticTokensProvider } = accessor.get(ILanguageFeaturesService);\n    const result = yield getDocumentRangeSemanticTokens(documentRangeSemanticTokensProvider, model, Range.lift(range), CancellationToken.None);\n    if (!result || !result.tokens) {\n        // there is no provider or it didn't return tokens\n        return undefined;\n    }\n    return encodeSemanticTokensDto({\n        id: 0,\n        type: 'full',\n        data: result.tokens.data\n    });\n}));\n"],"mappings":"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"}]}