{"remainingRequest":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js!/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/common/model/bracketPairsTextModelPart/bracketPairsTree/bracketPairsTree.js","dependencies":[{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/common/model/bracketPairsTextModelPart/bracketPairsTree/bracketPairsTree.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/babel.config.js","mtime":1668271197000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js","mtime":456789000000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["Emitter","Disposable","Range","BracketInfo","BracketPairWithMinIndentationInfo","TextEditInfo","LanguageAgnosticBracketTokens","lengthAdd","lengthGreaterThanEqual","lengthLessThan","lengthLessThanEqual","lengthOfString","lengthsToRange","lengthZero","positionToLength","toLength","parseDocument","DenseKeyProvider","FastTokenizer","TextBufferTokenizer","BracketPairsTree","textModel","getLanguageConfiguration","didChangeEmitter","denseKeyProvider","brackets","onDidChange","event","tokenization","backgroundTokenizationState","getSingleLanguageBracketTokens","getLanguageId","tokenizer","getValue","initialAstWithoutTokens","undefined","astWithTokens","parseDocumentFromTextBuffer","languageId","didLanguageChange","wasUndefined","fire","ranges","edits","map","r","fromLineNumber","toLineNumber","change","changes","c","range","lift","getStartPosition","getEndPosition","text","reverse","previousAst","immutable","isPure","previousAstClone","deepClone","result","startOffset","startLineNumber","startColumn","endOffset","endLineNumber","endColumn","Array","node","collectBrackets","length","Map","includeMinIndentation","startLength","endLength","context","CollectBracketPairsContext","collectBracketPairs","position","getFirstBracketAfter","getFirstBracketBefore","nodeOffsetStart","nodeOffsetEnd","kind","lengths","children","child","push","i","bracketInfo","level","levelPerBracketType","levelPerBracket","existing","get","openingBracket","set","closingBracket","_a","openingBracketEnd","minIndentation","computeMinIndentation","curOffset","childOffset"],"sources":["/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/common/model/bracketPairsTextModelPart/bracketPairsTree/bracketPairsTree.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../../../../base/common/event.js';\nimport { Disposable } from '../../../../../base/common/lifecycle.js';\nimport { Range } from '../../../core/range.js';\nimport { BracketInfo, BracketPairWithMinIndentationInfo } from '../../../textModelBracketPairs.js';\nimport { TextEditInfo } from './beforeEditPositionMapper.js';\nimport { LanguageAgnosticBracketTokens } from './brackets.js';\nimport { lengthAdd, lengthGreaterThanEqual, lengthLessThan, lengthLessThanEqual, lengthOfString, lengthsToRange, lengthZero, positionToLength, toLength } from './length.js';\nimport { parseDocument } from './parser.js';\nimport { DenseKeyProvider } from './smallImmutableSet.js';\nimport { FastTokenizer, TextBufferTokenizer } from './tokenizer.js';\nexport class BracketPairsTree extends Disposable {\n    constructor(textModel, getLanguageConfiguration) {\n        super();\n        this.textModel = textModel;\n        this.getLanguageConfiguration = getLanguageConfiguration;\n        this.didChangeEmitter = new Emitter();\n        this.denseKeyProvider = new DenseKeyProvider();\n        this.brackets = new LanguageAgnosticBracketTokens(this.denseKeyProvider, this.getLanguageConfiguration);\n        this.onDidChange = this.didChangeEmitter.event;\n        if (textModel.tokenization.backgroundTokenizationState === 0 /* BackgroundTokenizationState.Uninitialized */) {\n            // There are no token information yet\n            const brackets = this.brackets.getSingleLanguageBracketTokens(this.textModel.getLanguageId());\n            const tokenizer = new FastTokenizer(this.textModel.getValue(), brackets);\n            this.initialAstWithoutTokens = parseDocument(tokenizer, [], undefined, true);\n            this.astWithTokens = this.initialAstWithoutTokens;\n        }\n        else if (textModel.tokenization.backgroundTokenizationState === 2 /* BackgroundTokenizationState.Completed */) {\n            // Skip the initial ast, as there is no flickering.\n            // Directly create the tree with token information.\n            this.initialAstWithoutTokens = undefined;\n            this.astWithTokens = this.parseDocumentFromTextBuffer([], undefined, false);\n        }\n        else if (textModel.tokenization.backgroundTokenizationState === 1 /* BackgroundTokenizationState.InProgress */) {\n            this.initialAstWithoutTokens = this.parseDocumentFromTextBuffer([], undefined, true);\n            this.astWithTokens = this.initialAstWithoutTokens;\n        }\n    }\n    didLanguageChange(languageId) {\n        return this.brackets.didLanguageChange(languageId);\n    }\n    //#region TextModel events\n    handleDidChangeBackgroundTokenizationState() {\n        if (this.textModel.tokenization.backgroundTokenizationState === 2 /* BackgroundTokenizationState.Completed */) {\n            const wasUndefined = this.initialAstWithoutTokens === undefined;\n            // Clear the initial tree as we can use the tree with token information now.\n            this.initialAstWithoutTokens = undefined;\n            if (!wasUndefined) {\n                this.didChangeEmitter.fire();\n            }\n        }\n    }\n    handleDidChangeTokens({ ranges }) {\n        const edits = ranges.map(r => new TextEditInfo(toLength(r.fromLineNumber - 1, 0), toLength(r.toLineNumber, 0), toLength(r.toLineNumber - r.fromLineNumber + 1, 0)));\n        this.astWithTokens = this.parseDocumentFromTextBuffer(edits, this.astWithTokens, false);\n        if (!this.initialAstWithoutTokens) {\n            this.didChangeEmitter.fire();\n        }\n    }\n    handleContentChanged(change) {\n        const edits = change.changes.map(c => {\n            const range = Range.lift(c.range);\n            return new TextEditInfo(positionToLength(range.getStartPosition()), positionToLength(range.getEndPosition()), lengthOfString(c.text));\n        }).reverse();\n        this.astWithTokens = this.parseDocumentFromTextBuffer(edits, this.astWithTokens, false);\n        if (this.initialAstWithoutTokens) {\n            this.initialAstWithoutTokens = this.parseDocumentFromTextBuffer(edits, this.initialAstWithoutTokens, false);\n        }\n    }\n    //#endregion\n    /**\n     * @pure (only if isPure = true)\n    */\n    parseDocumentFromTextBuffer(edits, previousAst, immutable) {\n        // Is much faster if `isPure = false`.\n        const isPure = false;\n        const previousAstClone = isPure ? previousAst === null || previousAst === void 0 ? void 0 : previousAst.deepClone() : previousAst;\n        const tokenizer = new TextBufferTokenizer(this.textModel, this.brackets);\n        const result = parseDocument(tokenizer, edits, previousAstClone, immutable);\n        return result;\n    }\n    getBracketsInRange(range) {\n        const startOffset = toLength(range.startLineNumber - 1, range.startColumn - 1);\n        const endOffset = toLength(range.endLineNumber - 1, range.endColumn - 1);\n        const result = new Array();\n        const node = this.initialAstWithoutTokens || this.astWithTokens;\n        collectBrackets(node, lengthZero, node.length, startOffset, endOffset, result, 0, new Map());\n        return result;\n    }\n    getBracketPairsInRange(range, includeMinIndentation) {\n        const result = new Array();\n        const startLength = positionToLength(range.getStartPosition());\n        const endLength = positionToLength(range.getEndPosition());\n        const node = this.initialAstWithoutTokens || this.astWithTokens;\n        const context = new CollectBracketPairsContext(result, includeMinIndentation, this.textModel);\n        collectBracketPairs(node, lengthZero, node.length, startLength, endLength, context, 0, new Map());\n        return result;\n    }\n    getFirstBracketAfter(position) {\n        const node = this.initialAstWithoutTokens || this.astWithTokens;\n        return getFirstBracketAfter(node, lengthZero, node.length, positionToLength(position));\n    }\n    getFirstBracketBefore(position) {\n        const node = this.initialAstWithoutTokens || this.astWithTokens;\n        return getFirstBracketBefore(node, lengthZero, node.length, positionToLength(position));\n    }\n}\nfunction getFirstBracketBefore(node, nodeOffsetStart, nodeOffsetEnd, position) {\n    if (node.kind === 4 /* AstNodeKind.List */ || node.kind === 2 /* AstNodeKind.Pair */) {\n        const lengths = [];\n        for (const child of node.children) {\n            nodeOffsetEnd = lengthAdd(nodeOffsetStart, child.length);\n            lengths.push({ nodeOffsetStart, nodeOffsetEnd });\n            nodeOffsetStart = nodeOffsetEnd;\n        }\n        for (let i = lengths.length - 1; i >= 0; i--) {\n            const { nodeOffsetStart, nodeOffsetEnd } = lengths[i];\n            if (lengthLessThan(nodeOffsetStart, position)) {\n                const result = getFirstBracketBefore(node.children[i], nodeOffsetStart, nodeOffsetEnd, position);\n                if (result) {\n                    return result;\n                }\n            }\n        }\n        return null;\n    }\n    else if (node.kind === 3 /* AstNodeKind.UnexpectedClosingBracket */) {\n        return null;\n    }\n    else if (node.kind === 1 /* AstNodeKind.Bracket */) {\n        const range = lengthsToRange(nodeOffsetStart, nodeOffsetEnd);\n        return {\n            bracketInfo: node.bracketInfo,\n            range\n        };\n    }\n    return null;\n}\nfunction getFirstBracketAfter(node, nodeOffsetStart, nodeOffsetEnd, position) {\n    if (node.kind === 4 /* AstNodeKind.List */ || node.kind === 2 /* AstNodeKind.Pair */) {\n        for (const child of node.children) {\n            nodeOffsetEnd = lengthAdd(nodeOffsetStart, child.length);\n            if (lengthLessThan(position, nodeOffsetEnd)) {\n                const result = getFirstBracketAfter(child, nodeOffsetStart, nodeOffsetEnd, position);\n                if (result) {\n                    return result;\n                }\n            }\n            nodeOffsetStart = nodeOffsetEnd;\n        }\n        return null;\n    }\n    else if (node.kind === 3 /* AstNodeKind.UnexpectedClosingBracket */) {\n        return null;\n    }\n    else if (node.kind === 1 /* AstNodeKind.Bracket */) {\n        const range = lengthsToRange(nodeOffsetStart, nodeOffsetEnd);\n        return {\n            bracketInfo: node.bracketInfo,\n            range\n        };\n    }\n    return null;\n}\nfunction collectBrackets(node, nodeOffsetStart, nodeOffsetEnd, startOffset, endOffset, result, level, levelPerBracketType) {\n    if (level > 200) {\n        return;\n    }\n    if (node.kind === 4 /* AstNodeKind.List */) {\n        for (const child of node.children) {\n            nodeOffsetEnd = lengthAdd(nodeOffsetStart, child.length);\n            if (lengthLessThanEqual(nodeOffsetStart, endOffset) &&\n                lengthGreaterThanEqual(nodeOffsetEnd, startOffset)) {\n                collectBrackets(child, nodeOffsetStart, nodeOffsetEnd, startOffset, endOffset, result, level, levelPerBracketType);\n            }\n            nodeOffsetStart = nodeOffsetEnd;\n        }\n    }\n    else if (node.kind === 2 /* AstNodeKind.Pair */) {\n        let levelPerBracket = 0;\n        if (levelPerBracketType) {\n            let existing = levelPerBracketType.get(node.openingBracket.text);\n            if (existing === undefined) {\n                existing = 0;\n            }\n            levelPerBracket = existing;\n            existing++;\n            levelPerBracketType.set(node.openingBracket.text, existing);\n        }\n        // Don't use node.children here to improve performance\n        {\n            const child = node.openingBracket;\n            nodeOffsetEnd = lengthAdd(nodeOffsetStart, child.length);\n            if (lengthLessThanEqual(nodeOffsetStart, endOffset) &&\n                lengthGreaterThanEqual(nodeOffsetEnd, startOffset)) {\n                const range = lengthsToRange(nodeOffsetStart, nodeOffsetEnd);\n                result.push(new BracketInfo(range, level, levelPerBracket, !node.closingBracket));\n            }\n            nodeOffsetStart = nodeOffsetEnd;\n        }\n        if (node.child) {\n            const child = node.child;\n            nodeOffsetEnd = lengthAdd(nodeOffsetStart, child.length);\n            if (lengthLessThanEqual(nodeOffsetStart, endOffset) &&\n                lengthGreaterThanEqual(nodeOffsetEnd, startOffset)) {\n                collectBrackets(child, nodeOffsetStart, nodeOffsetEnd, startOffset, endOffset, result, level + 1, levelPerBracketType);\n            }\n            nodeOffsetStart = nodeOffsetEnd;\n        }\n        if (node.closingBracket) {\n            const child = node.closingBracket;\n            nodeOffsetEnd = lengthAdd(nodeOffsetStart, child.length);\n            if (lengthLessThanEqual(nodeOffsetStart, endOffset) &&\n                lengthGreaterThanEqual(nodeOffsetEnd, startOffset)) {\n                const range = lengthsToRange(nodeOffsetStart, nodeOffsetEnd);\n                result.push(new BracketInfo(range, level, levelPerBracket, false));\n            }\n            nodeOffsetStart = nodeOffsetEnd;\n        }\n        levelPerBracketType === null || levelPerBracketType === void 0 ? void 0 : levelPerBracketType.set(node.openingBracket.text, levelPerBracket);\n    }\n    else if (node.kind === 3 /* AstNodeKind.UnexpectedClosingBracket */) {\n        const range = lengthsToRange(nodeOffsetStart, nodeOffsetEnd);\n        result.push(new BracketInfo(range, level - 1, 0, true));\n    }\n    else if (node.kind === 1 /* AstNodeKind.Bracket */) {\n        const range = lengthsToRange(nodeOffsetStart, nodeOffsetEnd);\n        result.push(new BracketInfo(range, level - 1, 0, false));\n    }\n}\nclass CollectBracketPairsContext {\n    constructor(result, includeMinIndentation, textModel) {\n        this.result = result;\n        this.includeMinIndentation = includeMinIndentation;\n        this.textModel = textModel;\n    }\n}\nfunction collectBracketPairs(node, nodeOffsetStart, nodeOffsetEnd, startOffset, endOffset, context, level, levelPerBracketType) {\n    var _a;\n    if (level > 200) {\n        return;\n    }\n    if (node.kind === 2 /* AstNodeKind.Pair */) {\n        let levelPerBracket = 0;\n        if (levelPerBracketType) {\n            let existing = levelPerBracketType.get(node.openingBracket.text);\n            if (existing === undefined) {\n                existing = 0;\n            }\n            levelPerBracket = existing;\n            existing++;\n            levelPerBracketType.set(node.openingBracket.text, existing);\n        }\n        const openingBracketEnd = lengthAdd(nodeOffsetStart, node.openingBracket.length);\n        let minIndentation = -1;\n        if (context.includeMinIndentation) {\n            minIndentation = node.computeMinIndentation(nodeOffsetStart, context.textModel);\n        }\n        context.result.push(new BracketPairWithMinIndentationInfo(lengthsToRange(nodeOffsetStart, nodeOffsetEnd), lengthsToRange(nodeOffsetStart, openingBracketEnd), node.closingBracket\n            ? lengthsToRange(lengthAdd(openingBracketEnd, ((_a = node.child) === null || _a === void 0 ? void 0 : _a.length) || lengthZero), nodeOffsetEnd)\n            : undefined, level, levelPerBracket, node, minIndentation));\n        nodeOffsetStart = openingBracketEnd;\n        if (node.child) {\n            const child = node.child;\n            nodeOffsetEnd = lengthAdd(nodeOffsetStart, child.length);\n            if (lengthLessThanEqual(nodeOffsetStart, endOffset) &&\n                lengthGreaterThanEqual(nodeOffsetEnd, startOffset)) {\n                collectBracketPairs(child, nodeOffsetStart, nodeOffsetEnd, startOffset, endOffset, context, level + 1, levelPerBracketType);\n            }\n        }\n        levelPerBracketType === null || levelPerBracketType === void 0 ? void 0 : levelPerBracketType.set(node.openingBracket.text, levelPerBracket);\n    }\n    else {\n        let curOffset = nodeOffsetStart;\n        for (const child of node.children) {\n            const childOffset = curOffset;\n            curOffset = lengthAdd(curOffset, child.length);\n            if (lengthLessThanEqual(childOffset, endOffset) &&\n                lengthLessThanEqual(startOffset, curOffset)) {\n                collectBracketPairs(child, childOffset, curOffset, startOffset, endOffset, context, level, levelPerBracketType);\n            }\n        }\n    }\n}\n"],"mappings":"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"}]}