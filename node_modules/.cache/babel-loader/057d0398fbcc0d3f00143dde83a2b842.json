{"remainingRequest":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js!/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/common/viewModel/viewModelLines.js","dependencies":[{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/common/viewModel/viewModelLines.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/babel.config.js","mtime":1668271197000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js","mtime":456789000000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["arrays","Position","Range","IndentGuide","IndentGuideHorizontalLine","ModelDecorationOptions","LineInjectedText","viewEvents","createModelLineProjection","ConstantTimePrefixSumComputer","ViewLineData","ViewModelLinesFromProjectedModel","editorId","model","domLineBreaksComputerFactory","monospaceLineBreaksComputerFactory","fontInfo","tabSize","wrappingStrategy","wrappingColumn","wrappingIndent","_editorId","_validModelVersionId","_domLineBreaksComputerFactory","_monospaceLineBreaksComputerFactory","_constructLines","hiddenAreasDecorationIds","deltaDecorations","CoordinatesConverter","resetHiddenAreas","previousLineBreaks","modelLineProjections","linesContent","getLinesContent","injectedTextDecorations","getInjectedTextDecorations","lineCount","length","lineBreaksComputer","createLineBreaksComputer","injectedTextQueue","ArrayQueue","fromDecorations","i","lineInjectedText","takeWhile","t","lineNumber","addRequest","linesBreaks","finalize","values","hiddenAreas","map","areaId","getDecorationRange","sort","compareRangesUsingStarts","hiddenAreaStart","hiddenAreaEnd","hiddenAreaIdx","nextLineNumberToUpdateHiddenArea","startLineNumber","endLineNumber","isInHiddenArea","line","getViewLineCount","getVersionId","projectedModelLineLineCounts","decId","_ranges","validatedRanges","r","validateRange","newRanges","normalizeLineRanges","oldRanges","hasDifference","equalsRange","newDecorations","range","options","EMPTY","hasVisibleLine","lineChanged","isVisible","setVisible","newOutputLineCount","setValue","setHiddenAreas","modelLineNumber","_modelColumn","newTabSize","equalFontInfo","equals","equalWrappingStrategy","equalWrappingColumn","equalWrappingIndent","onlyWrappingColumnChanged","len","getProjectionData","lineBreaksComputerFactory","versionId","fromLineNumber","toLineNumber","outputFromLineNumber","getPrefixSum","outputToLineNumber","splice","removeValues","ViewLinesDeletedEvent","_toLineNumber","lineBreaks","totalOutputLineCount","insertLines","insertPrefixSumValues","push","outputLineCount","slice","concat","insertValues","ViewLinesInsertedEvent","lineBreakData","lineIndex","oldOutputLineCount","lineMappingChanged","changeFrom","changeTo","insertFrom","insertTo","deleteFrom","deleteTo","viewLinesChangedEvent","ViewLinesChangedEvent","viewLinesInsertedEvent","viewLinesDeletedEvent","getTotalSum","viewLineNumber","viewLineCount","minLineNumber","maxLineNumber","_toValidViewLineNumber","modelPosition","convertViewPositionToModelPosition","getViewLineMinColumn","modelMinPosition","modelMaxPosition","result","guides","getActiveIndentGuide","viewStartPosition","convertModelPositionToViewPosition","viewEndPosition","getLineMaxColumn","indent","getIndexOf","index","remainder","ViewLineInfo","viewLineInfo","modelLineWrappedLineIdx","getViewLineMaxColumn","minViewColumn","column","getModelColumnOfViewPosition","maxViewColumn","viewStartLineNumber","viewEndLineNumber","startViewLine","getViewLineInfo","endViewLine","Array","lastVisibleModelPos","getModelStartPositionOfViewLine","viewLines","curModelLine","startOffset","endOffset","lastVisibleModelPos2","modelRange","fromPositions","ViewLineInfoGroupedByModelRange","getModelEndPositionOfViewLine","activeViewPosition","modelActivePosition","resultPerViewLine","getViewLineInfosGroupedByModelRanges","group","modelRangeStartLineNumber","bracketGuidesPerModelLine","getLinesBracketGuides","bracketGuides","g","forWrappedLinesAfterColumn","p","getViewPositionOfModelPosition","undefined","forWrappedLinesBeforeOrAtColumn","horizontalLine","getMinColumnOfViewLine","viewPosition","endColumn","visibleColumn","className","top","getMaxColumnOfViewLine","filter","modelStart","modelEnd","resultRepeatCount","resultRepeatOption","modelStartLineIndex","modelEndLineIndex","reqStart","modelLineIndex","viewLineStartIndex","getViewLineNumberOfModelPosition","viewLineEndIndex","count","option","getLinesIndentGuides","viewIndents","currIndex","value","Math","min","blockAtIndex","j","info","getViewLineContent","getViewLineLength","getViewLineData","needed","start","startModelLineIndex","startRemainder","getLineCount","fromViewLineIndex","remainingViewLineCount","lastLine","getViewLinesData","viewColumn","expectedModelPosition","minColumn","maxColumn","computedModelColumn","computedModelPosition","validatePosition","viewRange","expectedModelRange","validViewStart","validateViewPosition","startColumn","getStartPosition","validViewEnd","getEndPosition","inputColumn","end","_modelLineNumber","affinity","validPosition","inputLineNumber","lineIndexChanged","deltaLineNumber","isEmpty","modelColumn","ownerId","filterOutValidation","getDecorationsInRange","maxLineColumn","a","b","res","id","finalResult","finalResultLen","prevDecId","dec","position","getInjectedTextAt","normalizePosition","getLineIndentColumn","ranges","sortedRanges","currentRangeStart","currentRangeEnd","lines","_lines","convertViewRangeToModelRange","validateViewRange","convertModelRangeToViewRange","modelPositionIsVisible","getModelLineViewLineCount","ViewModelLinesFromModelAsIs","IdentityCoordinatesConverter","_newTabSize","_fontInfo","_wrappingStrategy","_wrappingColumn","_wrappingIndent","lineText","injectedText","previousLineBreakData","_versionId","_minLineNumber","_maxLineNumber","activePosition","fill","getLineContent","getLineLength","getLineMinColumn","lineTokens","tokenization","getLineTokens","lineContent","inflate","max","idx","pos","_validPosition","_validRange","_viewPosition","_viewRange"],"sources":["/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/common/viewModel/viewModelLines.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as arrays from '../../../base/common/arrays.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { IndentGuide, IndentGuideHorizontalLine } from '../textModelGuides.js';\nimport { ModelDecorationOptions } from '../model/textModel.js';\nimport { LineInjectedText } from '../textModelEvents.js';\nimport * as viewEvents from '../viewEvents.js';\nimport { createModelLineProjection } from './modelLineProjection.js';\nimport { ConstantTimePrefixSumComputer } from '../model/prefixSumComputer.js';\nimport { ViewLineData } from '../viewModel.js';\nexport class ViewModelLinesFromProjectedModel {\n    constructor(editorId, model, domLineBreaksComputerFactory, monospaceLineBreaksComputerFactory, fontInfo, tabSize, wrappingStrategy, wrappingColumn, wrappingIndent) {\n        this._editorId = editorId;\n        this.model = model;\n        this._validModelVersionId = -1;\n        this._domLineBreaksComputerFactory = domLineBreaksComputerFactory;\n        this._monospaceLineBreaksComputerFactory = monospaceLineBreaksComputerFactory;\n        this.fontInfo = fontInfo;\n        this.tabSize = tabSize;\n        this.wrappingStrategy = wrappingStrategy;\n        this.wrappingColumn = wrappingColumn;\n        this.wrappingIndent = wrappingIndent;\n        this._constructLines(/*resetHiddenAreas*/ true, null);\n    }\n    dispose() {\n        this.hiddenAreasDecorationIds = this.model.deltaDecorations(this.hiddenAreasDecorationIds, []);\n    }\n    createCoordinatesConverter() {\n        return new CoordinatesConverter(this);\n    }\n    _constructLines(resetHiddenAreas, previousLineBreaks) {\n        this.modelLineProjections = [];\n        if (resetHiddenAreas) {\n            this.hiddenAreasDecorationIds = this.model.deltaDecorations(this.hiddenAreasDecorationIds, []);\n        }\n        const linesContent = this.model.getLinesContent();\n        const injectedTextDecorations = this.model.getInjectedTextDecorations(this._editorId);\n        const lineCount = linesContent.length;\n        const lineBreaksComputer = this.createLineBreaksComputer();\n        const injectedTextQueue = new arrays.ArrayQueue(LineInjectedText.fromDecorations(injectedTextDecorations));\n        for (let i = 0; i < lineCount; i++) {\n            const lineInjectedText = injectedTextQueue.takeWhile(t => t.lineNumber === i + 1);\n            lineBreaksComputer.addRequest(linesContent[i], lineInjectedText, previousLineBreaks ? previousLineBreaks[i] : null);\n        }\n        const linesBreaks = lineBreaksComputer.finalize();\n        const values = [];\n        const hiddenAreas = this.hiddenAreasDecorationIds.map((areaId) => this.model.getDecorationRange(areaId)).sort(Range.compareRangesUsingStarts);\n        let hiddenAreaStart = 1, hiddenAreaEnd = 0;\n        let hiddenAreaIdx = -1;\n        let nextLineNumberToUpdateHiddenArea = (hiddenAreaIdx + 1 < hiddenAreas.length) ? hiddenAreaEnd + 1 : lineCount + 2;\n        for (let i = 0; i < lineCount; i++) {\n            const lineNumber = i + 1;\n            if (lineNumber === nextLineNumberToUpdateHiddenArea) {\n                hiddenAreaIdx++;\n                hiddenAreaStart = hiddenAreas[hiddenAreaIdx].startLineNumber;\n                hiddenAreaEnd = hiddenAreas[hiddenAreaIdx].endLineNumber;\n                nextLineNumberToUpdateHiddenArea = (hiddenAreaIdx + 1 < hiddenAreas.length) ? hiddenAreaEnd + 1 : lineCount + 2;\n            }\n            const isInHiddenArea = (lineNumber >= hiddenAreaStart && lineNumber <= hiddenAreaEnd);\n            const line = createModelLineProjection(linesBreaks[i], !isInHiddenArea);\n            values[i] = line.getViewLineCount();\n            this.modelLineProjections[i] = line;\n        }\n        this._validModelVersionId = this.model.getVersionId();\n        this.projectedModelLineLineCounts = new ConstantTimePrefixSumComputer(values);\n    }\n    getHiddenAreas() {\n        return this.hiddenAreasDecorationIds.map((decId) => this.model.getDecorationRange(decId));\n    }\n    setHiddenAreas(_ranges) {\n        const validatedRanges = _ranges.map(r => this.model.validateRange(r));\n        const newRanges = normalizeLineRanges(validatedRanges);\n        // TODO@Martin: Please stop calling this method on each model change!\n        // This checks if there really was a change\n        const oldRanges = this.hiddenAreasDecorationIds.map((areaId) => this.model.getDecorationRange(areaId)).sort(Range.compareRangesUsingStarts);\n        if (newRanges.length === oldRanges.length) {\n            let hasDifference = false;\n            for (let i = 0; i < newRanges.length; i++) {\n                if (!newRanges[i].equalsRange(oldRanges[i])) {\n                    hasDifference = true;\n                    break;\n                }\n            }\n            if (!hasDifference) {\n                return false;\n            }\n        }\n        const newDecorations = newRanges.map((r) => ({\n            range: r,\n            options: ModelDecorationOptions.EMPTY,\n        }));\n        this.hiddenAreasDecorationIds = this.model.deltaDecorations(this.hiddenAreasDecorationIds, newDecorations);\n        const hiddenAreas = newRanges;\n        let hiddenAreaStart = 1, hiddenAreaEnd = 0;\n        let hiddenAreaIdx = -1;\n        let nextLineNumberToUpdateHiddenArea = (hiddenAreaIdx + 1 < hiddenAreas.length) ? hiddenAreaEnd + 1 : this.modelLineProjections.length + 2;\n        let hasVisibleLine = false;\n        for (let i = 0; i < this.modelLineProjections.length; i++) {\n            const lineNumber = i + 1;\n            if (lineNumber === nextLineNumberToUpdateHiddenArea) {\n                hiddenAreaIdx++;\n                hiddenAreaStart = hiddenAreas[hiddenAreaIdx].startLineNumber;\n                hiddenAreaEnd = hiddenAreas[hiddenAreaIdx].endLineNumber;\n                nextLineNumberToUpdateHiddenArea = (hiddenAreaIdx + 1 < hiddenAreas.length) ? hiddenAreaEnd + 1 : this.modelLineProjections.length + 2;\n            }\n            let lineChanged = false;\n            if (lineNumber >= hiddenAreaStart && lineNumber <= hiddenAreaEnd) {\n                // Line should be hidden\n                if (this.modelLineProjections[i].isVisible()) {\n                    this.modelLineProjections[i] = this.modelLineProjections[i].setVisible(false);\n                    lineChanged = true;\n                }\n            }\n            else {\n                hasVisibleLine = true;\n                // Line should be visible\n                if (!this.modelLineProjections[i].isVisible()) {\n                    this.modelLineProjections[i] = this.modelLineProjections[i].setVisible(true);\n                    lineChanged = true;\n                }\n            }\n            if (lineChanged) {\n                const newOutputLineCount = this.modelLineProjections[i].getViewLineCount();\n                this.projectedModelLineLineCounts.setValue(i, newOutputLineCount);\n            }\n        }\n        if (!hasVisibleLine) {\n            // Cannot have everything be hidden => reveal everything!\n            this.setHiddenAreas([]);\n        }\n        return true;\n    }\n    modelPositionIsVisible(modelLineNumber, _modelColumn) {\n        if (modelLineNumber < 1 || modelLineNumber > this.modelLineProjections.length) {\n            // invalid arguments\n            return false;\n        }\n        return this.modelLineProjections[modelLineNumber - 1].isVisible();\n    }\n    getModelLineViewLineCount(modelLineNumber) {\n        if (modelLineNumber < 1 || modelLineNumber > this.modelLineProjections.length) {\n            // invalid arguments\n            return 1;\n        }\n        return this.modelLineProjections[modelLineNumber - 1].getViewLineCount();\n    }\n    setTabSize(newTabSize) {\n        if (this.tabSize === newTabSize) {\n            return false;\n        }\n        this.tabSize = newTabSize;\n        this._constructLines(/*resetHiddenAreas*/ false, null);\n        return true;\n    }\n    setWrappingSettings(fontInfo, wrappingStrategy, wrappingColumn, wrappingIndent) {\n        const equalFontInfo = this.fontInfo.equals(fontInfo);\n        const equalWrappingStrategy = (this.wrappingStrategy === wrappingStrategy);\n        const equalWrappingColumn = (this.wrappingColumn === wrappingColumn);\n        const equalWrappingIndent = (this.wrappingIndent === wrappingIndent);\n        if (equalFontInfo && equalWrappingStrategy && equalWrappingColumn && equalWrappingIndent) {\n            return false;\n        }\n        const onlyWrappingColumnChanged = (equalFontInfo && equalWrappingStrategy && !equalWrappingColumn && equalWrappingIndent);\n        this.fontInfo = fontInfo;\n        this.wrappingStrategy = wrappingStrategy;\n        this.wrappingColumn = wrappingColumn;\n        this.wrappingIndent = wrappingIndent;\n        let previousLineBreaks = null;\n        if (onlyWrappingColumnChanged) {\n            previousLineBreaks = [];\n            for (let i = 0, len = this.modelLineProjections.length; i < len; i++) {\n                previousLineBreaks[i] = this.modelLineProjections[i].getProjectionData();\n            }\n        }\n        this._constructLines(/*resetHiddenAreas*/ false, previousLineBreaks);\n        return true;\n    }\n    createLineBreaksComputer() {\n        const lineBreaksComputerFactory = (this.wrappingStrategy === 'advanced'\n            ? this._domLineBreaksComputerFactory\n            : this._monospaceLineBreaksComputerFactory);\n        return lineBreaksComputerFactory.createLineBreaksComputer(this.fontInfo, this.tabSize, this.wrappingColumn, this.wrappingIndent);\n    }\n    onModelFlushed() {\n        this._constructLines(/*resetHiddenAreas*/ true, null);\n    }\n    onModelLinesDeleted(versionId, fromLineNumber, toLineNumber) {\n        if (!versionId || versionId <= this._validModelVersionId) {\n            // Here we check for versionId in case the lines were reconstructed in the meantime.\n            // We don't want to apply stale change events on top of a newer read model state.\n            return null;\n        }\n        const outputFromLineNumber = (fromLineNumber === 1 ? 1 : this.projectedModelLineLineCounts.getPrefixSum(fromLineNumber - 1) + 1);\n        const outputToLineNumber = this.projectedModelLineLineCounts.getPrefixSum(toLineNumber);\n        this.modelLineProjections.splice(fromLineNumber - 1, toLineNumber - fromLineNumber + 1);\n        this.projectedModelLineLineCounts.removeValues(fromLineNumber - 1, toLineNumber - fromLineNumber + 1);\n        return new viewEvents.ViewLinesDeletedEvent(outputFromLineNumber, outputToLineNumber);\n    }\n    onModelLinesInserted(versionId, fromLineNumber, _toLineNumber, lineBreaks) {\n        if (!versionId || versionId <= this._validModelVersionId) {\n            // Here we check for versionId in case the lines were reconstructed in the meantime.\n            // We don't want to apply stale change events on top of a newer read model state.\n            return null;\n        }\n        // cannot use this.getHiddenAreas() because those decorations have already seen the effect of this model change\n        const isInHiddenArea = (fromLineNumber > 2 && !this.modelLineProjections[fromLineNumber - 2].isVisible());\n        const outputFromLineNumber = (fromLineNumber === 1 ? 1 : this.projectedModelLineLineCounts.getPrefixSum(fromLineNumber - 1) + 1);\n        let totalOutputLineCount = 0;\n        const insertLines = [];\n        const insertPrefixSumValues = [];\n        for (let i = 0, len = lineBreaks.length; i < len; i++) {\n            const line = createModelLineProjection(lineBreaks[i], !isInHiddenArea);\n            insertLines.push(line);\n            const outputLineCount = line.getViewLineCount();\n            totalOutputLineCount += outputLineCount;\n            insertPrefixSumValues[i] = outputLineCount;\n        }\n        // TODO@Alex: use arrays.arrayInsert\n        this.modelLineProjections =\n            this.modelLineProjections.slice(0, fromLineNumber - 1)\n                .concat(insertLines)\n                .concat(this.modelLineProjections.slice(fromLineNumber - 1));\n        this.projectedModelLineLineCounts.insertValues(fromLineNumber - 1, insertPrefixSumValues);\n        return new viewEvents.ViewLinesInsertedEvent(outputFromLineNumber, outputFromLineNumber + totalOutputLineCount - 1);\n    }\n    onModelLineChanged(versionId, lineNumber, lineBreakData) {\n        if (versionId !== null && versionId <= this._validModelVersionId) {\n            // Here we check for versionId in case the lines were reconstructed in the meantime.\n            // We don't want to apply stale change events on top of a newer read model state.\n            return [false, null, null, null];\n        }\n        const lineIndex = lineNumber - 1;\n        const oldOutputLineCount = this.modelLineProjections[lineIndex].getViewLineCount();\n        const isVisible = this.modelLineProjections[lineIndex].isVisible();\n        const line = createModelLineProjection(lineBreakData, isVisible);\n        this.modelLineProjections[lineIndex] = line;\n        const newOutputLineCount = this.modelLineProjections[lineIndex].getViewLineCount();\n        let lineMappingChanged = false;\n        let changeFrom = 0;\n        let changeTo = -1;\n        let insertFrom = 0;\n        let insertTo = -1;\n        let deleteFrom = 0;\n        let deleteTo = -1;\n        if (oldOutputLineCount > newOutputLineCount) {\n            changeFrom = this.projectedModelLineLineCounts.getPrefixSum(lineNumber - 1) + 1;\n            changeTo = changeFrom + newOutputLineCount - 1;\n            deleteFrom = changeTo + 1;\n            deleteTo = deleteFrom + (oldOutputLineCount - newOutputLineCount) - 1;\n            lineMappingChanged = true;\n        }\n        else if (oldOutputLineCount < newOutputLineCount) {\n            changeFrom = this.projectedModelLineLineCounts.getPrefixSum(lineNumber - 1) + 1;\n            changeTo = changeFrom + oldOutputLineCount - 1;\n            insertFrom = changeTo + 1;\n            insertTo = insertFrom + (newOutputLineCount - oldOutputLineCount) - 1;\n            lineMappingChanged = true;\n        }\n        else {\n            changeFrom = this.projectedModelLineLineCounts.getPrefixSum(lineNumber - 1) + 1;\n            changeTo = changeFrom + newOutputLineCount - 1;\n        }\n        this.projectedModelLineLineCounts.setValue(lineIndex, newOutputLineCount);\n        const viewLinesChangedEvent = (changeFrom <= changeTo ? new viewEvents.ViewLinesChangedEvent(changeFrom, changeTo - changeFrom + 1) : null);\n        const viewLinesInsertedEvent = (insertFrom <= insertTo ? new viewEvents.ViewLinesInsertedEvent(insertFrom, insertTo) : null);\n        const viewLinesDeletedEvent = (deleteFrom <= deleteTo ? new viewEvents.ViewLinesDeletedEvent(deleteFrom, deleteTo) : null);\n        return [lineMappingChanged, viewLinesChangedEvent, viewLinesInsertedEvent, viewLinesDeletedEvent];\n    }\n    acceptVersionId(versionId) {\n        this._validModelVersionId = versionId;\n        if (this.modelLineProjections.length === 1 && !this.modelLineProjections[0].isVisible()) {\n            // At least one line must be visible => reset hidden areas\n            this.setHiddenAreas([]);\n        }\n    }\n    getViewLineCount() {\n        return this.projectedModelLineLineCounts.getTotalSum();\n    }\n    _toValidViewLineNumber(viewLineNumber) {\n        if (viewLineNumber < 1) {\n            return 1;\n        }\n        const viewLineCount = this.getViewLineCount();\n        if (viewLineNumber > viewLineCount) {\n            return viewLineCount;\n        }\n        return viewLineNumber | 0;\n    }\n    getActiveIndentGuide(viewLineNumber, minLineNumber, maxLineNumber) {\n        viewLineNumber = this._toValidViewLineNumber(viewLineNumber);\n        minLineNumber = this._toValidViewLineNumber(minLineNumber);\n        maxLineNumber = this._toValidViewLineNumber(maxLineNumber);\n        const modelPosition = this.convertViewPositionToModelPosition(viewLineNumber, this.getViewLineMinColumn(viewLineNumber));\n        const modelMinPosition = this.convertViewPositionToModelPosition(minLineNumber, this.getViewLineMinColumn(minLineNumber));\n        const modelMaxPosition = this.convertViewPositionToModelPosition(maxLineNumber, this.getViewLineMinColumn(maxLineNumber));\n        const result = this.model.guides.getActiveIndentGuide(modelPosition.lineNumber, modelMinPosition.lineNumber, modelMaxPosition.lineNumber);\n        const viewStartPosition = this.convertModelPositionToViewPosition(result.startLineNumber, 1);\n        const viewEndPosition = this.convertModelPositionToViewPosition(result.endLineNumber, this.model.getLineMaxColumn(result.endLineNumber));\n        return {\n            startLineNumber: viewStartPosition.lineNumber,\n            endLineNumber: viewEndPosition.lineNumber,\n            indent: result.indent\n        };\n    }\n    // #region ViewLineInfo\n    getViewLineInfo(viewLineNumber) {\n        viewLineNumber = this._toValidViewLineNumber(viewLineNumber);\n        const r = this.projectedModelLineLineCounts.getIndexOf(viewLineNumber - 1);\n        const lineIndex = r.index;\n        const remainder = r.remainder;\n        return new ViewLineInfo(lineIndex + 1, remainder);\n    }\n    getMinColumnOfViewLine(viewLineInfo) {\n        return this.modelLineProjections[viewLineInfo.modelLineNumber - 1].getViewLineMinColumn(this.model, viewLineInfo.modelLineNumber, viewLineInfo.modelLineWrappedLineIdx);\n    }\n    getMaxColumnOfViewLine(viewLineInfo) {\n        return this.modelLineProjections[viewLineInfo.modelLineNumber - 1].getViewLineMaxColumn(this.model, viewLineInfo.modelLineNumber, viewLineInfo.modelLineWrappedLineIdx);\n    }\n    getModelStartPositionOfViewLine(viewLineInfo) {\n        const line = this.modelLineProjections[viewLineInfo.modelLineNumber - 1];\n        const minViewColumn = line.getViewLineMinColumn(this.model, viewLineInfo.modelLineNumber, viewLineInfo.modelLineWrappedLineIdx);\n        const column = line.getModelColumnOfViewPosition(viewLineInfo.modelLineWrappedLineIdx, minViewColumn);\n        return new Position(viewLineInfo.modelLineNumber, column);\n    }\n    getModelEndPositionOfViewLine(viewLineInfo) {\n        const line = this.modelLineProjections[viewLineInfo.modelLineNumber - 1];\n        const maxViewColumn = line.getViewLineMaxColumn(this.model, viewLineInfo.modelLineNumber, viewLineInfo.modelLineWrappedLineIdx);\n        const column = line.getModelColumnOfViewPosition(viewLineInfo.modelLineWrappedLineIdx, maxViewColumn);\n        return new Position(viewLineInfo.modelLineNumber, column);\n    }\n    getViewLineInfosGroupedByModelRanges(viewStartLineNumber, viewEndLineNumber) {\n        const startViewLine = this.getViewLineInfo(viewStartLineNumber);\n        const endViewLine = this.getViewLineInfo(viewEndLineNumber);\n        const result = new Array();\n        let lastVisibleModelPos = this.getModelStartPositionOfViewLine(startViewLine);\n        let viewLines = new Array();\n        for (let curModelLine = startViewLine.modelLineNumber; curModelLine <= endViewLine.modelLineNumber; curModelLine++) {\n            const line = this.modelLineProjections[curModelLine - 1];\n            if (line.isVisible()) {\n                const startOffset = curModelLine === startViewLine.modelLineNumber\n                    ? startViewLine.modelLineWrappedLineIdx\n                    : 0;\n                const endOffset = curModelLine === endViewLine.modelLineNumber\n                    ? endViewLine.modelLineWrappedLineIdx + 1\n                    : line.getViewLineCount();\n                for (let i = startOffset; i < endOffset; i++) {\n                    viewLines.push(new ViewLineInfo(curModelLine, i));\n                }\n            }\n            if (!line.isVisible() && lastVisibleModelPos) {\n                const lastVisibleModelPos2 = new Position(curModelLine - 1, this.model.getLineMaxColumn(curModelLine - 1) + 1);\n                const modelRange = Range.fromPositions(lastVisibleModelPos, lastVisibleModelPos2);\n                result.push(new ViewLineInfoGroupedByModelRange(modelRange, viewLines));\n                viewLines = [];\n                lastVisibleModelPos = null;\n            }\n            else if (line.isVisible() && !lastVisibleModelPos) {\n                lastVisibleModelPos = new Position(curModelLine, 1);\n            }\n        }\n        if (lastVisibleModelPos) {\n            const modelRange = Range.fromPositions(lastVisibleModelPos, this.getModelEndPositionOfViewLine(endViewLine));\n            result.push(new ViewLineInfoGroupedByModelRange(modelRange, viewLines));\n        }\n        return result;\n    }\n    // #endregion\n    getViewLinesBracketGuides(viewStartLineNumber, viewEndLineNumber, activeViewPosition, options) {\n        const modelActivePosition = activeViewPosition ? this.convertViewPositionToModelPosition(activeViewPosition.lineNumber, activeViewPosition.column) : null;\n        const resultPerViewLine = [];\n        for (const group of this.getViewLineInfosGroupedByModelRanges(viewStartLineNumber, viewEndLineNumber)) {\n            const modelRangeStartLineNumber = group.modelRange.startLineNumber;\n            const bracketGuidesPerModelLine = this.model.guides.getLinesBracketGuides(modelRangeStartLineNumber, group.modelRange.endLineNumber, modelActivePosition, options);\n            for (const viewLineInfo of group.viewLines) {\n                const bracketGuides = bracketGuidesPerModelLine[viewLineInfo.modelLineNumber - modelRangeStartLineNumber];\n                // visibleColumns stay as they are (this is a bug and needs to be fixed, but it is not a regression)\n                // model-columns must be converted to view-model columns.\n                const result = bracketGuides.map(g => {\n                    if (g.forWrappedLinesAfterColumn !== -1) {\n                        const p = this.modelLineProjections[viewLineInfo.modelLineNumber - 1].getViewPositionOfModelPosition(0, g.forWrappedLinesAfterColumn);\n                        if (p.lineNumber >= viewLineInfo.modelLineWrappedLineIdx) {\n                            return undefined;\n                        }\n                    }\n                    if (g.forWrappedLinesBeforeOrAtColumn !== -1) {\n                        const p = this.modelLineProjections[viewLineInfo.modelLineNumber - 1].getViewPositionOfModelPosition(0, g.forWrappedLinesBeforeOrAtColumn);\n                        if (p.lineNumber < viewLineInfo.modelLineWrappedLineIdx) {\n                            return undefined;\n                        }\n                    }\n                    if (!g.horizontalLine) {\n                        return g;\n                    }\n                    let column = -1;\n                    if (g.column !== -1) {\n                        const p = this.modelLineProjections[viewLineInfo.modelLineNumber - 1].getViewPositionOfModelPosition(0, g.column);\n                        if (p.lineNumber === viewLineInfo.modelLineWrappedLineIdx) {\n                            column = p.column;\n                        }\n                        else if (p.lineNumber < viewLineInfo.modelLineWrappedLineIdx) {\n                            column = this.getMinColumnOfViewLine(viewLineInfo);\n                        }\n                        else if (p.lineNumber > viewLineInfo.modelLineWrappedLineIdx) {\n                            return undefined;\n                        }\n                    }\n                    const viewPosition = this.convertModelPositionToViewPosition(viewLineInfo.modelLineNumber, g.horizontalLine.endColumn);\n                    const p = this.modelLineProjections[viewLineInfo.modelLineNumber - 1].getViewPositionOfModelPosition(0, g.horizontalLine.endColumn);\n                    if (p.lineNumber === viewLineInfo.modelLineWrappedLineIdx) {\n                        return new IndentGuide(g.visibleColumn, column, g.className, new IndentGuideHorizontalLine(g.horizontalLine.top, viewPosition.column), -1, -1);\n                    }\n                    else if (p.lineNumber < viewLineInfo.modelLineWrappedLineIdx) {\n                        return undefined;\n                    }\n                    else {\n                        if (g.visibleColumn !== -1) {\n                            // Don't repeat horizontal lines that use visibleColumn for unrelated lines.\n                            return undefined;\n                        }\n                        return new IndentGuide(g.visibleColumn, column, g.className, new IndentGuideHorizontalLine(g.horizontalLine.top, this.getMaxColumnOfViewLine(viewLineInfo)), -1, -1);\n                    }\n                });\n                resultPerViewLine.push(result.filter((r) => !!r));\n            }\n        }\n        return resultPerViewLine;\n    }\n    getViewLinesIndentGuides(viewStartLineNumber, viewEndLineNumber) {\n        // TODO: Use the same code as in `getViewLinesBracketGuides`.\n        // Future TODO: Merge with `getViewLinesBracketGuides`.\n        // However, this requires more refactoring of indent guides.\n        viewStartLineNumber = this._toValidViewLineNumber(viewStartLineNumber);\n        viewEndLineNumber = this._toValidViewLineNumber(viewEndLineNumber);\n        const modelStart = this.convertViewPositionToModelPosition(viewStartLineNumber, this.getViewLineMinColumn(viewStartLineNumber));\n        const modelEnd = this.convertViewPositionToModelPosition(viewEndLineNumber, this.getViewLineMaxColumn(viewEndLineNumber));\n        let result = [];\n        const resultRepeatCount = [];\n        const resultRepeatOption = [];\n        const modelStartLineIndex = modelStart.lineNumber - 1;\n        const modelEndLineIndex = modelEnd.lineNumber - 1;\n        let reqStart = null;\n        for (let modelLineIndex = modelStartLineIndex; modelLineIndex <= modelEndLineIndex; modelLineIndex++) {\n            const line = this.modelLineProjections[modelLineIndex];\n            if (line.isVisible()) {\n                const viewLineStartIndex = line.getViewLineNumberOfModelPosition(0, modelLineIndex === modelStartLineIndex ? modelStart.column : 1);\n                const viewLineEndIndex = line.getViewLineNumberOfModelPosition(0, this.model.getLineMaxColumn(modelLineIndex + 1));\n                const count = viewLineEndIndex - viewLineStartIndex + 1;\n                let option = 0 /* IndentGuideRepeatOption.BlockNone */;\n                if (count > 1 && line.getViewLineMinColumn(this.model, modelLineIndex + 1, viewLineEndIndex) === 1) {\n                    // wrapped lines should block indent guides\n                    option = (viewLineStartIndex === 0 ? 1 /* IndentGuideRepeatOption.BlockSubsequent */ : 2 /* IndentGuideRepeatOption.BlockAll */);\n                }\n                resultRepeatCount.push(count);\n                resultRepeatOption.push(option);\n                // merge into previous request\n                if (reqStart === null) {\n                    reqStart = new Position(modelLineIndex + 1, 0);\n                }\n            }\n            else {\n                // hit invisible line => flush request\n                if (reqStart !== null) {\n                    result = result.concat(this.model.guides.getLinesIndentGuides(reqStart.lineNumber, modelLineIndex));\n                    reqStart = null;\n                }\n            }\n        }\n        if (reqStart !== null) {\n            result = result.concat(this.model.guides.getLinesIndentGuides(reqStart.lineNumber, modelEnd.lineNumber));\n            reqStart = null;\n        }\n        const viewLineCount = viewEndLineNumber - viewStartLineNumber + 1;\n        const viewIndents = new Array(viewLineCount);\n        let currIndex = 0;\n        for (let i = 0, len = result.length; i < len; i++) {\n            let value = result[i];\n            const count = Math.min(viewLineCount - currIndex, resultRepeatCount[i]);\n            const option = resultRepeatOption[i];\n            let blockAtIndex;\n            if (option === 2 /* IndentGuideRepeatOption.BlockAll */) {\n                blockAtIndex = 0;\n            }\n            else if (option === 1 /* IndentGuideRepeatOption.BlockSubsequent */) {\n                blockAtIndex = 1;\n            }\n            else {\n                blockAtIndex = count;\n            }\n            for (let j = 0; j < count; j++) {\n                if (j === blockAtIndex) {\n                    value = 0;\n                }\n                viewIndents[currIndex++] = value;\n            }\n        }\n        return viewIndents;\n    }\n    getViewLineContent(viewLineNumber) {\n        const info = this.getViewLineInfo(viewLineNumber);\n        return this.modelLineProjections[info.modelLineNumber - 1].getViewLineContent(this.model, info.modelLineNumber, info.modelLineWrappedLineIdx);\n    }\n    getViewLineLength(viewLineNumber) {\n        const info = this.getViewLineInfo(viewLineNumber);\n        return this.modelLineProjections[info.modelLineNumber - 1].getViewLineLength(this.model, info.modelLineNumber, info.modelLineWrappedLineIdx);\n    }\n    getViewLineMinColumn(viewLineNumber) {\n        const info = this.getViewLineInfo(viewLineNumber);\n        return this.modelLineProjections[info.modelLineNumber - 1].getViewLineMinColumn(this.model, info.modelLineNumber, info.modelLineWrappedLineIdx);\n    }\n    getViewLineMaxColumn(viewLineNumber) {\n        const info = this.getViewLineInfo(viewLineNumber);\n        return this.modelLineProjections[info.modelLineNumber - 1].getViewLineMaxColumn(this.model, info.modelLineNumber, info.modelLineWrappedLineIdx);\n    }\n    getViewLineData(viewLineNumber) {\n        const info = this.getViewLineInfo(viewLineNumber);\n        return this.modelLineProjections[info.modelLineNumber - 1].getViewLineData(this.model, info.modelLineNumber, info.modelLineWrappedLineIdx);\n    }\n    getViewLinesData(viewStartLineNumber, viewEndLineNumber, needed) {\n        viewStartLineNumber = this._toValidViewLineNumber(viewStartLineNumber);\n        viewEndLineNumber = this._toValidViewLineNumber(viewEndLineNumber);\n        const start = this.projectedModelLineLineCounts.getIndexOf(viewStartLineNumber - 1);\n        let viewLineNumber = viewStartLineNumber;\n        const startModelLineIndex = start.index;\n        const startRemainder = start.remainder;\n        const result = [];\n        for (let modelLineIndex = startModelLineIndex, len = this.model.getLineCount(); modelLineIndex < len; modelLineIndex++) {\n            const line = this.modelLineProjections[modelLineIndex];\n            if (!line.isVisible()) {\n                continue;\n            }\n            const fromViewLineIndex = (modelLineIndex === startModelLineIndex ? startRemainder : 0);\n            let remainingViewLineCount = line.getViewLineCount() - fromViewLineIndex;\n            let lastLine = false;\n            if (viewLineNumber + remainingViewLineCount > viewEndLineNumber) {\n                lastLine = true;\n                remainingViewLineCount = viewEndLineNumber - viewLineNumber + 1;\n            }\n            line.getViewLinesData(this.model, modelLineIndex + 1, fromViewLineIndex, remainingViewLineCount, viewLineNumber - viewStartLineNumber, needed, result);\n            viewLineNumber += remainingViewLineCount;\n            if (lastLine) {\n                break;\n            }\n        }\n        return result;\n    }\n    validateViewPosition(viewLineNumber, viewColumn, expectedModelPosition) {\n        viewLineNumber = this._toValidViewLineNumber(viewLineNumber);\n        const r = this.projectedModelLineLineCounts.getIndexOf(viewLineNumber - 1);\n        const lineIndex = r.index;\n        const remainder = r.remainder;\n        const line = this.modelLineProjections[lineIndex];\n        const minColumn = line.getViewLineMinColumn(this.model, lineIndex + 1, remainder);\n        const maxColumn = line.getViewLineMaxColumn(this.model, lineIndex + 1, remainder);\n        if (viewColumn < minColumn) {\n            viewColumn = minColumn;\n        }\n        if (viewColumn > maxColumn) {\n            viewColumn = maxColumn;\n        }\n        const computedModelColumn = line.getModelColumnOfViewPosition(remainder, viewColumn);\n        const computedModelPosition = this.model.validatePosition(new Position(lineIndex + 1, computedModelColumn));\n        if (computedModelPosition.equals(expectedModelPosition)) {\n            return new Position(viewLineNumber, viewColumn);\n        }\n        return this.convertModelPositionToViewPosition(expectedModelPosition.lineNumber, expectedModelPosition.column);\n    }\n    validateViewRange(viewRange, expectedModelRange) {\n        const validViewStart = this.validateViewPosition(viewRange.startLineNumber, viewRange.startColumn, expectedModelRange.getStartPosition());\n        const validViewEnd = this.validateViewPosition(viewRange.endLineNumber, viewRange.endColumn, expectedModelRange.getEndPosition());\n        return new Range(validViewStart.lineNumber, validViewStart.column, validViewEnd.lineNumber, validViewEnd.column);\n    }\n    convertViewPositionToModelPosition(viewLineNumber, viewColumn) {\n        const info = this.getViewLineInfo(viewLineNumber);\n        const inputColumn = this.modelLineProjections[info.modelLineNumber - 1].getModelColumnOfViewPosition(info.modelLineWrappedLineIdx, viewColumn);\n        // console.log('out -> in ' + viewLineNumber + ',' + viewColumn + ' ===> ' + (lineIndex+1) + ',' + inputColumn);\n        return this.model.validatePosition(new Position(info.modelLineNumber, inputColumn));\n    }\n    convertViewRangeToModelRange(viewRange) {\n        const start = this.convertViewPositionToModelPosition(viewRange.startLineNumber, viewRange.startColumn);\n        const end = this.convertViewPositionToModelPosition(viewRange.endLineNumber, viewRange.endColumn);\n        return new Range(start.lineNumber, start.column, end.lineNumber, end.column);\n    }\n    convertModelPositionToViewPosition(_modelLineNumber, _modelColumn, affinity = 2 /* PositionAffinity.None */) {\n        const validPosition = this.model.validatePosition(new Position(_modelLineNumber, _modelColumn));\n        const inputLineNumber = validPosition.lineNumber;\n        const inputColumn = validPosition.column;\n        let lineIndex = inputLineNumber - 1, lineIndexChanged = false;\n        while (lineIndex > 0 && !this.modelLineProjections[lineIndex].isVisible()) {\n            lineIndex--;\n            lineIndexChanged = true;\n        }\n        if (lineIndex === 0 && !this.modelLineProjections[lineIndex].isVisible()) {\n            // Could not reach a real line\n            // console.log('in -> out ' + inputLineNumber + ',' + inputColumn + ' ===> ' + 1 + ',' + 1);\n            return new Position(1, 1);\n        }\n        const deltaLineNumber = 1 + this.projectedModelLineLineCounts.getPrefixSum(lineIndex);\n        let r;\n        if (lineIndexChanged) {\n            r = this.modelLineProjections[lineIndex].getViewPositionOfModelPosition(deltaLineNumber, this.model.getLineMaxColumn(lineIndex + 1), affinity);\n        }\n        else {\n            r = this.modelLineProjections[inputLineNumber - 1].getViewPositionOfModelPosition(deltaLineNumber, inputColumn, affinity);\n        }\n        // console.log('in -> out ' + inputLineNumber + ',' + inputColumn + ' ===> ' + r.lineNumber + ',' + r);\n        return r;\n    }\n    /**\n     * @param affinity The affinity in case of an empty range. Has no effect for non-empty ranges.\n    */\n    convertModelRangeToViewRange(modelRange, affinity = 0 /* PositionAffinity.Left */) {\n        if (modelRange.isEmpty()) {\n            const start = this.convertModelPositionToViewPosition(modelRange.startLineNumber, modelRange.startColumn, affinity);\n            return Range.fromPositions(start);\n        }\n        else {\n            const start = this.convertModelPositionToViewPosition(modelRange.startLineNumber, modelRange.startColumn, 1 /* PositionAffinity.Right */);\n            const end = this.convertModelPositionToViewPosition(modelRange.endLineNumber, modelRange.endColumn, 0 /* PositionAffinity.Left */);\n            return new Range(start.lineNumber, start.column, end.lineNumber, end.column);\n        }\n    }\n    getViewLineNumberOfModelPosition(modelLineNumber, modelColumn) {\n        let lineIndex = modelLineNumber - 1;\n        if (this.modelLineProjections[lineIndex].isVisible()) {\n            // this model line is visible\n            const deltaLineNumber = 1 + this.projectedModelLineLineCounts.getPrefixSum(lineIndex);\n            return this.modelLineProjections[lineIndex].getViewLineNumberOfModelPosition(deltaLineNumber, modelColumn);\n        }\n        // this model line is not visible\n        while (lineIndex > 0 && !this.modelLineProjections[lineIndex].isVisible()) {\n            lineIndex--;\n        }\n        if (lineIndex === 0 && !this.modelLineProjections[lineIndex].isVisible()) {\n            // Could not reach a real line\n            return 1;\n        }\n        const deltaLineNumber = 1 + this.projectedModelLineLineCounts.getPrefixSum(lineIndex);\n        return this.modelLineProjections[lineIndex].getViewLineNumberOfModelPosition(deltaLineNumber, this.model.getLineMaxColumn(lineIndex + 1));\n    }\n    getDecorationsInRange(range, ownerId, filterOutValidation) {\n        const modelStart = this.convertViewPositionToModelPosition(range.startLineNumber, range.startColumn);\n        const modelEnd = this.convertViewPositionToModelPosition(range.endLineNumber, range.endColumn);\n        if (modelEnd.lineNumber - modelStart.lineNumber <= range.endLineNumber - range.startLineNumber) {\n            // most likely there are no hidden lines => fast path\n            // fetch decorations from column 1 to cover the case of wrapped lines that have whole line decorations at column 1\n            return this.model.getDecorationsInRange(new Range(modelStart.lineNumber, 1, modelEnd.lineNumber, modelEnd.column), ownerId, filterOutValidation);\n        }\n        let result = [];\n        const modelStartLineIndex = modelStart.lineNumber - 1;\n        const modelEndLineIndex = modelEnd.lineNumber - 1;\n        let reqStart = null;\n        for (let modelLineIndex = modelStartLineIndex; modelLineIndex <= modelEndLineIndex; modelLineIndex++) {\n            const line = this.modelLineProjections[modelLineIndex];\n            if (line.isVisible()) {\n                // merge into previous request\n                if (reqStart === null) {\n                    reqStart = new Position(modelLineIndex + 1, modelLineIndex === modelStartLineIndex ? modelStart.column : 1);\n                }\n            }\n            else {\n                // hit invisible line => flush request\n                if (reqStart !== null) {\n                    const maxLineColumn = this.model.getLineMaxColumn(modelLineIndex);\n                    result = result.concat(this.model.getDecorationsInRange(new Range(reqStart.lineNumber, reqStart.column, modelLineIndex, maxLineColumn), ownerId, filterOutValidation));\n                    reqStart = null;\n                }\n            }\n        }\n        if (reqStart !== null) {\n            result = result.concat(this.model.getDecorationsInRange(new Range(reqStart.lineNumber, reqStart.column, modelEnd.lineNumber, modelEnd.column), ownerId, filterOutValidation));\n            reqStart = null;\n        }\n        result.sort((a, b) => {\n            const res = Range.compareRangesUsingStarts(a.range, b.range);\n            if (res === 0) {\n                if (a.id < b.id) {\n                    return -1;\n                }\n                if (a.id > b.id) {\n                    return 1;\n                }\n                return 0;\n            }\n            return res;\n        });\n        // Eliminate duplicate decorations that might have intersected our visible ranges multiple times\n        const finalResult = [];\n        let finalResultLen = 0;\n        let prevDecId = null;\n        for (const dec of result) {\n            const decId = dec.id;\n            if (prevDecId === decId) {\n                // skip\n                continue;\n            }\n            prevDecId = decId;\n            finalResult[finalResultLen++] = dec;\n        }\n        return finalResult;\n    }\n    getInjectedTextAt(position) {\n        const info = this.getViewLineInfo(position.lineNumber);\n        return this.modelLineProjections[info.modelLineNumber - 1].getInjectedTextAt(info.modelLineWrappedLineIdx, position.column);\n    }\n    normalizePosition(position, affinity) {\n        const info = this.getViewLineInfo(position.lineNumber);\n        return this.modelLineProjections[info.modelLineNumber - 1].normalizePosition(info.modelLineWrappedLineIdx, position, affinity);\n    }\n    getLineIndentColumn(lineNumber) {\n        const info = this.getViewLineInfo(lineNumber);\n        if (info.modelLineWrappedLineIdx === 0) {\n            return this.model.getLineIndentColumn(info.modelLineNumber);\n        }\n        // wrapped lines have no indentation.\n        // We deliberately don't handle the case that indentation is wrapped\n        // to avoid two view lines reporting indentation for the very same model line.\n        return 0;\n    }\n}\n/**\n * Overlapping unsorted ranges:\n * [   )      [ )       [  )\n *    [    )      [       )\n * ->\n * Non overlapping sorted ranges:\n * [       )  [ ) [        )\n *\n * Note: This function only considers line information! Columns are ignored.\n*/\nfunction normalizeLineRanges(ranges) {\n    if (ranges.length === 0) {\n        return [];\n    }\n    const sortedRanges = ranges.slice();\n    sortedRanges.sort(Range.compareRangesUsingStarts);\n    const result = [];\n    let currentRangeStart = sortedRanges[0].startLineNumber;\n    let currentRangeEnd = sortedRanges[0].endLineNumber;\n    for (let i = 1, len = sortedRanges.length; i < len; i++) {\n        const range = sortedRanges[i];\n        if (range.startLineNumber > currentRangeEnd + 1) {\n            result.push(new Range(currentRangeStart, 1, currentRangeEnd, 1));\n            currentRangeStart = range.startLineNumber;\n            currentRangeEnd = range.endLineNumber;\n        }\n        else if (range.endLineNumber > currentRangeEnd) {\n            currentRangeEnd = range.endLineNumber;\n        }\n    }\n    result.push(new Range(currentRangeStart, 1, currentRangeEnd, 1));\n    return result;\n}\n/**\n * Represents a view line. Can be used to efficiently query more information about it.\n */\nclass ViewLineInfo {\n    constructor(modelLineNumber, modelLineWrappedLineIdx) {\n        this.modelLineNumber = modelLineNumber;\n        this.modelLineWrappedLineIdx = modelLineWrappedLineIdx;\n    }\n}\n/**\n * A list of view lines that have a contiguous span in the model.\n*/\nclass ViewLineInfoGroupedByModelRange {\n    constructor(modelRange, viewLines) {\n        this.modelRange = modelRange;\n        this.viewLines = viewLines;\n    }\n}\nclass CoordinatesConverter {\n    constructor(lines) {\n        this._lines = lines;\n    }\n    // View -> Model conversion and related methods\n    convertViewPositionToModelPosition(viewPosition) {\n        return this._lines.convertViewPositionToModelPosition(viewPosition.lineNumber, viewPosition.column);\n    }\n    convertViewRangeToModelRange(viewRange) {\n        return this._lines.convertViewRangeToModelRange(viewRange);\n    }\n    validateViewPosition(viewPosition, expectedModelPosition) {\n        return this._lines.validateViewPosition(viewPosition.lineNumber, viewPosition.column, expectedModelPosition);\n    }\n    validateViewRange(viewRange, expectedModelRange) {\n        return this._lines.validateViewRange(viewRange, expectedModelRange);\n    }\n    // Model -> View conversion and related methods\n    convertModelPositionToViewPosition(modelPosition, affinity) {\n        return this._lines.convertModelPositionToViewPosition(modelPosition.lineNumber, modelPosition.column, affinity);\n    }\n    convertModelRangeToViewRange(modelRange, affinity) {\n        return this._lines.convertModelRangeToViewRange(modelRange, affinity);\n    }\n    modelPositionIsVisible(modelPosition) {\n        return this._lines.modelPositionIsVisible(modelPosition.lineNumber, modelPosition.column);\n    }\n    getModelLineViewLineCount(modelLineNumber) {\n        return this._lines.getModelLineViewLineCount(modelLineNumber);\n    }\n    getViewLineNumberOfModelPosition(modelLineNumber, modelColumn) {\n        return this._lines.getViewLineNumberOfModelPosition(modelLineNumber, modelColumn);\n    }\n}\nexport class ViewModelLinesFromModelAsIs {\n    constructor(model) {\n        this.model = model;\n    }\n    dispose() {\n    }\n    createCoordinatesConverter() {\n        return new IdentityCoordinatesConverter(this);\n    }\n    getHiddenAreas() {\n        return [];\n    }\n    setHiddenAreas(_ranges) {\n        return false;\n    }\n    setTabSize(_newTabSize) {\n        return false;\n    }\n    setWrappingSettings(_fontInfo, _wrappingStrategy, _wrappingColumn, _wrappingIndent) {\n        return false;\n    }\n    createLineBreaksComputer() {\n        const result = [];\n        return {\n            addRequest: (lineText, injectedText, previousLineBreakData) => {\n                result.push(null);\n            },\n            finalize: () => {\n                return result;\n            }\n        };\n    }\n    onModelFlushed() {\n    }\n    onModelLinesDeleted(_versionId, fromLineNumber, toLineNumber) {\n        return new viewEvents.ViewLinesDeletedEvent(fromLineNumber, toLineNumber);\n    }\n    onModelLinesInserted(_versionId, fromLineNumber, toLineNumber, lineBreaks) {\n        return new viewEvents.ViewLinesInsertedEvent(fromLineNumber, toLineNumber);\n    }\n    onModelLineChanged(_versionId, lineNumber, lineBreakData) {\n        return [false, new viewEvents.ViewLinesChangedEvent(lineNumber, 1), null, null];\n    }\n    acceptVersionId(_versionId) {\n    }\n    getViewLineCount() {\n        return this.model.getLineCount();\n    }\n    getActiveIndentGuide(viewLineNumber, _minLineNumber, _maxLineNumber) {\n        return {\n            startLineNumber: viewLineNumber,\n            endLineNumber: viewLineNumber,\n            indent: 0\n        };\n    }\n    getViewLinesBracketGuides(startLineNumber, endLineNumber, activePosition) {\n        return new Array(endLineNumber - startLineNumber + 1).fill([]);\n    }\n    getViewLinesIndentGuides(viewStartLineNumber, viewEndLineNumber) {\n        const viewLineCount = viewEndLineNumber - viewStartLineNumber + 1;\n        const result = new Array(viewLineCount);\n        for (let i = 0; i < viewLineCount; i++) {\n            result[i] = 0;\n        }\n        return result;\n    }\n    getViewLineContent(viewLineNumber) {\n        return this.model.getLineContent(viewLineNumber);\n    }\n    getViewLineLength(viewLineNumber) {\n        return this.model.getLineLength(viewLineNumber);\n    }\n    getViewLineMinColumn(viewLineNumber) {\n        return this.model.getLineMinColumn(viewLineNumber);\n    }\n    getViewLineMaxColumn(viewLineNumber) {\n        return this.model.getLineMaxColumn(viewLineNumber);\n    }\n    getViewLineData(viewLineNumber) {\n        const lineTokens = this.model.tokenization.getLineTokens(viewLineNumber);\n        const lineContent = lineTokens.getLineContent();\n        return new ViewLineData(lineContent, false, 1, lineContent.length + 1, 0, lineTokens.inflate(), null);\n    }\n    getViewLinesData(viewStartLineNumber, viewEndLineNumber, needed) {\n        const lineCount = this.model.getLineCount();\n        viewStartLineNumber = Math.min(Math.max(1, viewStartLineNumber), lineCount);\n        viewEndLineNumber = Math.min(Math.max(1, viewEndLineNumber), lineCount);\n        const result = [];\n        for (let lineNumber = viewStartLineNumber; lineNumber <= viewEndLineNumber; lineNumber++) {\n            const idx = lineNumber - viewStartLineNumber;\n            result[idx] = needed[idx] ? this.getViewLineData(lineNumber) : null;\n        }\n        return result;\n    }\n    getDecorationsInRange(range, ownerId, filterOutValidation) {\n        return this.model.getDecorationsInRange(range, ownerId, filterOutValidation);\n    }\n    normalizePosition(position, affinity) {\n        return this.model.normalizePosition(position, affinity);\n    }\n    getLineIndentColumn(lineNumber) {\n        return this.model.getLineIndentColumn(lineNumber);\n    }\n    getInjectedTextAt(position) {\n        // Identity lines collection does not support injected text.\n        return null;\n    }\n}\nclass IdentityCoordinatesConverter {\n    constructor(lines) {\n        this._lines = lines;\n    }\n    _validPosition(pos) {\n        return this._lines.model.validatePosition(pos);\n    }\n    _validRange(range) {\n        return this._lines.model.validateRange(range);\n    }\n    // View -> Model conversion and related methods\n    convertViewPositionToModelPosition(viewPosition) {\n        return this._validPosition(viewPosition);\n    }\n    convertViewRangeToModelRange(viewRange) {\n        return this._validRange(viewRange);\n    }\n    validateViewPosition(_viewPosition, expectedModelPosition) {\n        return this._validPosition(expectedModelPosition);\n    }\n    validateViewRange(_viewRange, expectedModelRange) {\n        return this._validRange(expectedModelRange);\n    }\n    // Model -> View conversion and related methods\n    convertModelPositionToViewPosition(modelPosition) {\n        return this._validPosition(modelPosition);\n    }\n    convertModelRangeToViewRange(modelRange) {\n        return this._validRange(modelRange);\n    }\n    modelPositionIsVisible(modelPosition) {\n        const lineCount = this._lines.model.getLineCount();\n        if (modelPosition.lineNumber < 1 || modelPosition.lineNumber > lineCount) {\n            // invalid arguments\n            return false;\n        }\n        return true;\n    }\n    getModelLineViewLineCount(modelLineNumber) {\n        return 1;\n    }\n    getViewLineNumberOfModelPosition(modelLineNumber, modelColumn) {\n        return modelLineNumber;\n    }\n}\n"],"mappings":"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"}]}