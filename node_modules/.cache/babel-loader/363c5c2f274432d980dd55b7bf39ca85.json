{"remainingRequest":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js!/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/common/model/intervalTree.js","dependencies":[{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/common/model/intervalTree.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/babel.config.js","mtime":1668271197000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js","mtime":456789000000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICIvVXNlcnMveWFuamlhamlhL0Rlc2t0b3Avd29ya3NwYWNlL2F2dWUtZGF0YS1uZXcvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NsYXNzQ2FsbENoZWNrLmpzIjsKaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tICIvVXNlcnMveWFuamlhamlhL0Rlc2t0b3Avd29ya3NwYWNlL2F2dWUtZGF0YS1uZXcvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzLmpzIjsKLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICogIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLgogKiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi4KICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovCmV4cG9ydCBmdW5jdGlvbiBnZXROb2RlQ29sb3Iobm9kZSkgewogIHJldHVybiAobm9kZS5tZXRhZGF0YSAmIDEgLyogQ29uc3RhbnRzLkNvbG9yTWFzayAqLykgPj4+IDAgLyogQ29uc3RhbnRzLkNvbG9yT2Zmc2V0ICovOwp9CgpmdW5jdGlvbiBzZXROb2RlQ29sb3Iobm9kZSwgY29sb3IpIHsKICBub2RlLm1ldGFkYXRhID0gbm9kZS5tZXRhZGF0YSAmIDI1NCAvKiBDb25zdGFudHMuQ29sb3JNYXNrSW52ZXJzZSAqLyB8IGNvbG9yIDw8IDAgLyogQ29uc3RhbnRzLkNvbG9yT2Zmc2V0ICovOwp9CgpmdW5jdGlvbiBnZXROb2RlSXNWaXNpdGVkKG5vZGUpIHsKICByZXR1cm4gKG5vZGUubWV0YWRhdGEgJiAyIC8qIENvbnN0YW50cy5Jc1Zpc2l0ZWRNYXNrICovKSA+Pj4gMSAvKiBDb25zdGFudHMuSXNWaXNpdGVkT2Zmc2V0ICovID09PSAxOwp9CmZ1bmN0aW9uIHNldE5vZGVJc1Zpc2l0ZWQobm9kZSwgdmFsdWUpIHsKICBub2RlLm1ldGFkYXRhID0gbm9kZS5tZXRhZGF0YSAmIDI1MyAvKiBDb25zdGFudHMuSXNWaXNpdGVkTWFza0ludmVyc2UgKi8gfCAodmFsdWUgPyAxIDogMCkgPDwgMSAvKiBDb25zdGFudHMuSXNWaXNpdGVkT2Zmc2V0ICovOwp9CgpmdW5jdGlvbiBnZXROb2RlSXNGb3JWYWxpZGF0aW9uKG5vZGUpIHsKICByZXR1cm4gKG5vZGUubWV0YWRhdGEgJiA0IC8qIENvbnN0YW50cy5Jc0ZvclZhbGlkYXRpb25NYXNrICovKSA+Pj4gMiAvKiBDb25zdGFudHMuSXNGb3JWYWxpZGF0aW9uT2Zmc2V0ICovID09PSAxOwp9CmZ1bmN0aW9uIHNldE5vZGVJc0ZvclZhbGlkYXRpb24obm9kZSwgdmFsdWUpIHsKICBub2RlLm1ldGFkYXRhID0gbm9kZS5tZXRhZGF0YSAmIDI1MSAvKiBDb25zdGFudHMuSXNGb3JWYWxpZGF0aW9uTWFza0ludmVyc2UgKi8gfCAodmFsdWUgPyAxIDogMCkgPDwgMiAvKiBDb25zdGFudHMuSXNGb3JWYWxpZGF0aW9uT2Zmc2V0ICovOwp9CgpmdW5jdGlvbiBnZXROb2RlU3RpY2tpbmVzcyhub2RlKSB7CiAgcmV0dXJuIChub2RlLm1ldGFkYXRhICYgMjQgLyogQ29uc3RhbnRzLlN0aWNraW5lc3NNYXNrICovKSA+Pj4gMyAvKiBDb25zdGFudHMuU3RpY2tpbmVzc09mZnNldCAqLzsKfQoKZnVuY3Rpb24gX3NldE5vZGVTdGlja2luZXNzKG5vZGUsIHN0aWNraW5lc3MpIHsKICBub2RlLm1ldGFkYXRhID0gbm9kZS5tZXRhZGF0YSAmIDIzMSAvKiBDb25zdGFudHMuU3RpY2tpbmVzc01hc2tJbnZlcnNlICovIHwgc3RpY2tpbmVzcyA8PCAzIC8qIENvbnN0YW50cy5TdGlja2luZXNzT2Zmc2V0ICovOwp9CgpmdW5jdGlvbiBnZXRDb2xsYXBzZU9uUmVwbGFjZUVkaXQobm9kZSkgewogIHJldHVybiAobm9kZS5tZXRhZGF0YSAmIDMyIC8qIENvbnN0YW50cy5Db2xsYXBzZU9uUmVwbGFjZUVkaXRNYXNrICovKSA+Pj4gNSAvKiBDb25zdGFudHMuQ29sbGFwc2VPblJlcGxhY2VFZGl0T2Zmc2V0ICovID09PSAxOwp9CmZ1bmN0aW9uIHNldENvbGxhcHNlT25SZXBsYWNlRWRpdChub2RlLCB2YWx1ZSkgewogIG5vZGUubWV0YWRhdGEgPSBub2RlLm1ldGFkYXRhICYgMjIzIC8qIENvbnN0YW50cy5Db2xsYXBzZU9uUmVwbGFjZUVkaXRNYXNrSW52ZXJzZSAqLyB8ICh2YWx1ZSA/IDEgOiAwKSA8PCA1IC8qIENvbnN0YW50cy5Db2xsYXBzZU9uUmVwbGFjZUVkaXRPZmZzZXQgKi87Cn0KCmV4cG9ydCB2YXIgSW50ZXJ2YWxOb2RlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBJbnRlcnZhbE5vZGUoaWQsIHN0YXJ0LCBlbmQpIHsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBJbnRlcnZhbE5vZGUpOwogICAgdGhpcy5tZXRhZGF0YSA9IDA7CiAgICB0aGlzLnBhcmVudCA9IHRoaXM7CiAgICB0aGlzLmxlZnQgPSB0aGlzOwogICAgdGhpcy5yaWdodCA9IHRoaXM7CiAgICBzZXROb2RlQ29sb3IodGhpcywgMSAvKiBOb2RlQ29sb3IuUmVkICovKTsKICAgIHRoaXMuc3RhcnQgPSBzdGFydDsKICAgIHRoaXMuZW5kID0gZW5kOwogICAgLy8gRk9SQ0VfT1ZFUkZMT1dJTkdfVEVTVDogdGhpcy5kZWx0YSA9IHN0YXJ0OwogICAgdGhpcy5kZWx0YSA9IDA7CiAgICB0aGlzLm1heEVuZCA9IGVuZDsKICAgIHRoaXMuaWQgPSBpZDsKICAgIHRoaXMub3duZXJJZCA9IDA7CiAgICB0aGlzLm9wdGlvbnMgPSBudWxsOwogICAgc2V0Tm9kZUlzRm9yVmFsaWRhdGlvbih0aGlzLCBmYWxzZSk7CiAgICBfc2V0Tm9kZVN0aWNraW5lc3ModGhpcywgMSAvKiBUcmFja2VkUmFuZ2VTdGlja2luZXNzLk5ldmVyR3Jvd3NXaGVuVHlwaW5nQXRFZGdlcyAqLyk7CiAgICBzZXRDb2xsYXBzZU9uUmVwbGFjZUVkaXQodGhpcywgZmFsc2UpOwogICAgdGhpcy5jYWNoZWRWZXJzaW9uSWQgPSAwOwogICAgdGhpcy5jYWNoZWRBYnNvbHV0ZVN0YXJ0ID0gc3RhcnQ7CiAgICB0aGlzLmNhY2hlZEFic29sdXRlRW5kID0gZW5kOwogICAgdGhpcy5yYW5nZSA9IG51bGw7CiAgICBzZXROb2RlSXNWaXNpdGVkKHRoaXMsIGZhbHNlKTsKICB9CiAgX2NyZWF0ZUNsYXNzKEludGVydmFsTm9kZSwgW3sKICAgIGtleTogInJlc2V0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZXNldCh2ZXJzaW9uSWQsIHN0YXJ0LCBlbmQsIHJhbmdlKSB7CiAgICAgIHRoaXMuc3RhcnQgPSBzdGFydDsKICAgICAgdGhpcy5lbmQgPSBlbmQ7CiAgICAgIHRoaXMubWF4RW5kID0gZW5kOwogICAgICB0aGlzLmNhY2hlZFZlcnNpb25JZCA9IHZlcnNpb25JZDsKICAgICAgdGhpcy5jYWNoZWRBYnNvbHV0ZVN0YXJ0ID0gc3RhcnQ7CiAgICAgIHRoaXMuY2FjaGVkQWJzb2x1dGVFbmQgPSBlbmQ7CiAgICAgIHRoaXMucmFuZ2UgPSByYW5nZTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJzZXRPcHRpb25zIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRPcHRpb25zKG9wdGlvbnMpIHsKICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9uczsKICAgICAgdmFyIGNsYXNzTmFtZSA9IHRoaXMub3B0aW9ucy5jbGFzc05hbWU7CiAgICAgIHNldE5vZGVJc0ZvclZhbGlkYXRpb24odGhpcywgY2xhc3NOYW1lID09PSAic3F1aWdnbHktZXJyb3IiIC8qIENsYXNzTmFtZS5FZGl0b3JFcnJvckRlY29yYXRpb24gKi8gfHwgY2xhc3NOYW1lID09PSAic3F1aWdnbHktd2FybmluZyIgLyogQ2xhc3NOYW1lLkVkaXRvcldhcm5pbmdEZWNvcmF0aW9uICovIHx8IGNsYXNzTmFtZSA9PT0gInNxdWlnZ2x5LWluZm8iIC8qIENsYXNzTmFtZS5FZGl0b3JJbmZvRGVjb3JhdGlvbiAqLyk7CiAgICAgIF9zZXROb2RlU3RpY2tpbmVzcyh0aGlzLCB0aGlzLm9wdGlvbnMuc3RpY2tpbmVzcyk7CiAgICAgIHNldENvbGxhcHNlT25SZXBsYWNlRWRpdCh0aGlzLCB0aGlzLm9wdGlvbnMuY29sbGFwc2VPblJlcGxhY2VFZGl0KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJzZXRDYWNoZWRPZmZzZXRzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRDYWNoZWRPZmZzZXRzKGFic29sdXRlU3RhcnQsIGFic29sdXRlRW5kLCBjYWNoZWRWZXJzaW9uSWQpIHsKICAgICAgaWYgKHRoaXMuY2FjaGVkVmVyc2lvbklkICE9PSBjYWNoZWRWZXJzaW9uSWQpIHsKICAgICAgICB0aGlzLnJhbmdlID0gbnVsbDsKICAgICAgfQogICAgICB0aGlzLmNhY2hlZFZlcnNpb25JZCA9IGNhY2hlZFZlcnNpb25JZDsKICAgICAgdGhpcy5jYWNoZWRBYnNvbHV0ZVN0YXJ0ID0gYWJzb2x1dGVTdGFydDsKICAgICAgdGhpcy5jYWNoZWRBYnNvbHV0ZUVuZCA9IGFic29sdXRlRW5kOwogICAgfQogIH0sIHsKICAgIGtleTogImRldGFjaCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZGV0YWNoKCkgewogICAgICB0aGlzLnBhcmVudCA9IG51bGw7CiAgICAgIHRoaXMubGVmdCA9IG51bGw7CiAgICAgIHRoaXMucmlnaHQgPSBudWxsOwogICAgfQogIH1dKTsKICByZXR1cm4gSW50ZXJ2YWxOb2RlOwp9KCk7CmV4cG9ydCB2YXIgU0VOVElORUwgPSBuZXcgSW50ZXJ2YWxOb2RlKG51bGwsIDAsIDApOwpTRU5USU5FTC5wYXJlbnQgPSBTRU5USU5FTDsKU0VOVElORUwubGVmdCA9IFNFTlRJTkVMOwpTRU5USU5FTC5yaWdodCA9IFNFTlRJTkVMOwpzZXROb2RlQ29sb3IoU0VOVElORUwsIDAgLyogTm9kZUNvbG9yLkJsYWNrICovKTsKZXhwb3J0IHZhciBJbnRlcnZhbFRyZWUgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIEludGVydmFsVHJlZSgpIHsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBJbnRlcnZhbFRyZWUpOwogICAgdGhpcy5yb290ID0gU0VOVElORUw7CiAgICB0aGlzLnJlcXVlc3ROb3JtYWxpemVEZWx0YSA9IGZhbHNlOwogIH0KICBfY3JlYXRlQ2xhc3MoSW50ZXJ2YWxUcmVlLCBbewogICAga2V5OiAiaW50ZXJ2YWxTZWFyY2giLAogICAgdmFsdWU6IGZ1bmN0aW9uIGludGVydmFsU2VhcmNoKHN0YXJ0LCBlbmQsIGZpbHRlck93bmVySWQsIGZpbHRlck91dFZhbGlkYXRpb24sIGNhY2hlZFZlcnNpb25JZCkgewogICAgICBpZiAodGhpcy5yb290ID09PSBTRU5USU5FTCkgewogICAgICAgIHJldHVybiBbXTsKICAgICAgfQogICAgICByZXR1cm4gX2ludGVydmFsU2VhcmNoKHRoaXMsIHN0YXJ0LCBlbmQsIGZpbHRlck93bmVySWQsIGZpbHRlck91dFZhbGlkYXRpb24sIGNhY2hlZFZlcnNpb25JZCk7CiAgICB9CiAgfSwgewogICAga2V5OiAic2VhcmNoIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBzZWFyY2goZmlsdGVyT3duZXJJZCwgZmlsdGVyT3V0VmFsaWRhdGlvbiwgY2FjaGVkVmVyc2lvbklkKSB7CiAgICAgIGlmICh0aGlzLnJvb3QgPT09IFNFTlRJTkVMKSB7CiAgICAgICAgcmV0dXJuIFtdOwogICAgICB9CiAgICAgIHJldHVybiBfc2VhcmNoKHRoaXMsIGZpbHRlck93bmVySWQsIGZpbHRlck91dFZhbGlkYXRpb24sIGNhY2hlZFZlcnNpb25JZCk7CiAgICB9CiAgICAvKioKICAgICAqIFdpbGwgbm90IHNldCBgY2FjaGVkQWJzb2x1dGVTdGFydGAgbm9yIGBjYWNoZWRBYnNvbHV0ZUVuZGAgb24gdGhlIHJldHVybmVkIG5vZGVzIQogICAgICovCiAgfSwgewogICAga2V5OiAiY29sbGVjdE5vZGVzRnJvbU93bmVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBjb2xsZWN0Tm9kZXNGcm9tT3duZXIob3duZXJJZCkgewogICAgICByZXR1cm4gX2NvbGxlY3ROb2Rlc0Zyb21Pd25lcih0aGlzLCBvd25lcklkKTsKICAgIH0KICAgIC8qKgogICAgICogV2lsbCBub3Qgc2V0IGBjYWNoZWRBYnNvbHV0ZVN0YXJ0YCBub3IgYGNhY2hlZEFic29sdXRlRW5kYCBvbiB0aGUgcmV0dXJuZWQgbm9kZXMhCiAgICAgKi8KICB9LCB7CiAgICBrZXk6ICJjb2xsZWN0Tm9kZXNQb3N0T3JkZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGNvbGxlY3ROb2Rlc1Bvc3RPcmRlcigpIHsKICAgICAgcmV0dXJuIF9jb2xsZWN0Tm9kZXNQb3N0T3JkZXIodGhpcyk7CiAgICB9CiAgfSwgewogICAga2V5OiAiaW5zZXJ0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBpbnNlcnQobm9kZSkgewogICAgICByYlRyZWVJbnNlcnQodGhpcywgbm9kZSk7CiAgICAgIHRoaXMuX25vcm1hbGl6ZURlbHRhSWZOZWNlc3NhcnkoKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJkZWxldGUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9kZWxldGUobm9kZSkgewogICAgICByYlRyZWVEZWxldGUodGhpcywgbm9kZSk7CiAgICAgIHRoaXMuX25vcm1hbGl6ZURlbHRhSWZOZWNlc3NhcnkoKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJyZXNvbHZlTm9kZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVzb2x2ZU5vZGUobm9kZSwgY2FjaGVkVmVyc2lvbklkKSB7CiAgICAgIHZhciBpbml0aWFsTm9kZSA9IG5vZGU7CiAgICAgIHZhciBkZWx0YSA9IDA7CiAgICAgIHdoaWxlIChub2RlICE9PSB0aGlzLnJvb3QpIHsKICAgICAgICBpZiAobm9kZSA9PT0gbm9kZS5wYXJlbnQucmlnaHQpIHsKICAgICAgICAgIGRlbHRhICs9IG5vZGUucGFyZW50LmRlbHRhOwogICAgICAgIH0KICAgICAgICBub2RlID0gbm9kZS5wYXJlbnQ7CiAgICAgIH0KICAgICAgdmFyIG5vZGVTdGFydCA9IGluaXRpYWxOb2RlLnN0YXJ0ICsgZGVsdGE7CiAgICAgIHZhciBub2RlRW5kID0gaW5pdGlhbE5vZGUuZW5kICsgZGVsdGE7CiAgICAgIGluaXRpYWxOb2RlLnNldENhY2hlZE9mZnNldHMobm9kZVN0YXJ0LCBub2RlRW5kLCBjYWNoZWRWZXJzaW9uSWQpOwogICAgfQogIH0sIHsKICAgIGtleTogImFjY2VwdFJlcGxhY2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGFjY2VwdFJlcGxhY2Uob2Zmc2V0LCBsZW5ndGgsIHRleHRMZW5ndGgsIGZvcmNlTW92ZU1hcmtlcnMpIHsKICAgICAgLy8gT3VyIHN0cmF0ZWd5IGlzIHRvIHJlbW92ZSBhbGwgZGlyZWN0bHkgaW1wYWN0ZWQgbm9kZXMsIGFuZCB0aGVuIGFkZCB0aGVtIGJhY2sgdG8gdGhlIHRyZWUuCiAgICAgIC8vICgxKSBjb2xsZWN0IGFsbCBub2RlcyB0aGF0IGFyZSBpbnRlcnNlY3RpbmcgdGhpcyBlZGl0IGFzIG5vZGVzIG9mIGludGVyZXN0CiAgICAgIHZhciBub2Rlc09mSW50ZXJlc3QgPSBzZWFyY2hGb3JFZGl0aW5nKHRoaXMsIG9mZnNldCwgb2Zmc2V0ICsgbGVuZ3RoKTsKICAgICAgLy8gKDIpIHJlbW92ZSBhbGwgbm9kZXMgdGhhdCBhcmUgaW50ZXJzZWN0aW5nIHRoaXMgZWRpdAogICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gbm9kZXNPZkludGVyZXN0Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7CiAgICAgICAgdmFyIG5vZGUgPSBub2Rlc09mSW50ZXJlc3RbaV07CiAgICAgICAgcmJUcmVlRGVsZXRlKHRoaXMsIG5vZGUpOwogICAgICB9CiAgICAgIHRoaXMuX25vcm1hbGl6ZURlbHRhSWZOZWNlc3NhcnkoKTsKICAgICAgLy8gKDMpIGVkaXQgYWxsIHRyZWUgbm9kZXMgZXhjZXB0IHRoZSBub2RlcyBvZiBpbnRlcmVzdAogICAgICBub092ZXJsYXBSZXBsYWNlKHRoaXMsIG9mZnNldCwgb2Zmc2V0ICsgbGVuZ3RoLCB0ZXh0TGVuZ3RoKTsKICAgICAgdGhpcy5fbm9ybWFsaXplRGVsdGFJZk5lY2Vzc2FyeSgpOwogICAgICAvLyAoNCkgZWRpdCB0aGUgbm9kZXMgb2YgaW50ZXJlc3QgYW5kIGluc2VydCB0aGVtIGJhY2sgaW4gdGhlIHRyZWUKICAgICAgZm9yICh2YXIgX2kgPSAwLCBfbGVuID0gbm9kZXNPZkludGVyZXN0Lmxlbmd0aDsgX2kgPCBfbGVuOyBfaSsrKSB7CiAgICAgICAgdmFyIF9ub2RlID0gbm9kZXNPZkludGVyZXN0W19pXTsKICAgICAgICBfbm9kZS5zdGFydCA9IF9ub2RlLmNhY2hlZEFic29sdXRlU3RhcnQ7CiAgICAgICAgX25vZGUuZW5kID0gX25vZGUuY2FjaGVkQWJzb2x1dGVFbmQ7CiAgICAgICAgbm9kZUFjY2VwdEVkaXQoX25vZGUsIG9mZnNldCwgb2Zmc2V0ICsgbGVuZ3RoLCB0ZXh0TGVuZ3RoLCBmb3JjZU1vdmVNYXJrZXJzKTsKICAgICAgICBfbm9kZS5tYXhFbmQgPSBfbm9kZS5lbmQ7CiAgICAgICAgcmJUcmVlSW5zZXJ0KHRoaXMsIF9ub2RlKTsKICAgICAgfQogICAgICB0aGlzLl9ub3JtYWxpemVEZWx0YUlmTmVjZXNzYXJ5KCk7CiAgICB9CiAgfSwgewogICAga2V5OiAiX25vcm1hbGl6ZURlbHRhSWZOZWNlc3NhcnkiLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9ub3JtYWxpemVEZWx0YUlmTmVjZXNzYXJ5KCkgewogICAgICBpZiAoIXRoaXMucmVxdWVzdE5vcm1hbGl6ZURlbHRhKSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CiAgICAgIHRoaXMucmVxdWVzdE5vcm1hbGl6ZURlbHRhID0gZmFsc2U7CiAgICAgIG5vcm1hbGl6ZURlbHRhKHRoaXMpOwogICAgfQogIH1dKTsKICByZXR1cm4gSW50ZXJ2YWxUcmVlOwp9KCk7Ci8vI3JlZ2lvbiBEZWx0YSBOb3JtYWxpemF0aW9uCmZ1bmN0aW9uIG5vcm1hbGl6ZURlbHRhKFQpIHsKICB2YXIgbm9kZSA9IFQucm9vdDsKICB2YXIgZGVsdGEgPSAwOwogIHdoaWxlIChub2RlICE9PSBTRU5USU5FTCkgewogICAgaWYgKG5vZGUubGVmdCAhPT0gU0VOVElORUwgJiYgIWdldE5vZGVJc1Zpc2l0ZWQobm9kZS5sZWZ0KSkgewogICAgICAvLyBnbyBsZWZ0CiAgICAgIG5vZGUgPSBub2RlLmxlZnQ7CiAgICAgIGNvbnRpbnVlOwogICAgfQogICAgaWYgKG5vZGUucmlnaHQgIT09IFNFTlRJTkVMICYmICFnZXROb2RlSXNWaXNpdGVkKG5vZGUucmlnaHQpKSB7CiAgICAgIC8vIGdvIHJpZ2h0CiAgICAgIGRlbHRhICs9IG5vZGUuZGVsdGE7CiAgICAgIG5vZGUgPSBub2RlLnJpZ2h0OwogICAgICBjb250aW51ZTsKICAgIH0KICAgIC8vIGhhbmRsZSBjdXJyZW50IG5vZGUKICAgIG5vZGUuc3RhcnQgPSBkZWx0YSArIG5vZGUuc3RhcnQ7CiAgICBub2RlLmVuZCA9IGRlbHRhICsgbm9kZS5lbmQ7CiAgICBub2RlLmRlbHRhID0gMDsKICAgIHJlY29tcHV0ZU1heEVuZChub2RlKTsKICAgIHNldE5vZGVJc1Zpc2l0ZWQobm9kZSwgdHJ1ZSk7CiAgICAvLyBnb2luZyB1cCBmcm9tIHRoaXMgbm9kZQogICAgc2V0Tm9kZUlzVmlzaXRlZChub2RlLmxlZnQsIGZhbHNlKTsKICAgIHNldE5vZGVJc1Zpc2l0ZWQobm9kZS5yaWdodCwgZmFsc2UpOwogICAgaWYgKG5vZGUgPT09IG5vZGUucGFyZW50LnJpZ2h0KSB7CiAgICAgIGRlbHRhIC09IG5vZGUucGFyZW50LmRlbHRhOwogICAgfQogICAgbm9kZSA9IG5vZGUucGFyZW50OwogIH0KICBzZXROb2RlSXNWaXNpdGVkKFQucm9vdCwgZmFsc2UpOwp9CmZ1bmN0aW9uIGFkanVzdE1hcmtlckJlZm9yZUNvbHVtbihtYXJrZXJPZmZzZXQsIG1hcmtlclN0aWNrVG9QcmV2aW91c0NoYXJhY3RlciwgY2hlY2tPZmZzZXQsIG1vdmVTZW1hbnRpY3MpIHsKICBpZiAobWFya2VyT2Zmc2V0IDwgY2hlY2tPZmZzZXQpIHsKICAgIHJldHVybiB0cnVlOwogIH0KICBpZiAobWFya2VyT2Zmc2V0ID4gY2hlY2tPZmZzZXQpIHsKICAgIHJldHVybiBmYWxzZTsKICB9CiAgaWYgKG1vdmVTZW1hbnRpY3MgPT09IDEgLyogTWFya2VyTW92ZVNlbWFudGljcy5Gb3JjZU1vdmUgKi8pIHsKICAgIHJldHVybiBmYWxzZTsKICB9CiAgaWYgKG1vdmVTZW1hbnRpY3MgPT09IDIgLyogTWFya2VyTW92ZVNlbWFudGljcy5Gb3JjZVN0YXkgKi8pIHsKICAgIHJldHVybiB0cnVlOwogIH0KICByZXR1cm4gbWFya2VyU3RpY2tUb1ByZXZpb3VzQ2hhcmFjdGVyOwp9Ci8qKgogKiBUaGlzIGlzIGEgbG90IG1vcmUgY29tcGxpY2F0ZWQgdGhhbiBzdHJpY3RseSBuZWNlc3NhcnkgdG8gbWFpbnRhaW4gdGhlIHNhbWUgYmVoYXZpb3VyCiAqIGFzIHdoZW4gZGVjb3JhdGlvbnMgd2VyZSBpbXBsZW1lbnRlZCB1c2luZyB0d28gbWFya2Vycy4KICovCmV4cG9ydCBmdW5jdGlvbiBub2RlQWNjZXB0RWRpdChub2RlLCBzdGFydCwgZW5kLCB0ZXh0TGVuZ3RoLCBmb3JjZU1vdmVNYXJrZXJzKSB7CiAgdmFyIG5vZGVTdGlja2luZXNzID0gZ2V0Tm9kZVN0aWNraW5lc3Mobm9kZSk7CiAgdmFyIHN0YXJ0U3RpY2tUb1ByZXZpb3VzQ2hhcmFjdGVyID0gbm9kZVN0aWNraW5lc3MgPT09IDAgLyogVHJhY2tlZFJhbmdlU3RpY2tpbmVzcy5BbHdheXNHcm93c1doZW5UeXBpbmdBdEVkZ2VzICovIHx8IG5vZGVTdGlja2luZXNzID09PSAyIC8qIFRyYWNrZWRSYW5nZVN0aWNraW5lc3MuR3Jvd3NPbmx5V2hlblR5cGluZ0JlZm9yZSAqLzsKICB2YXIgZW5kU3RpY2tUb1ByZXZpb3VzQ2hhcmFjdGVyID0gbm9kZVN0aWNraW5lc3MgPT09IDEgLyogVHJhY2tlZFJhbmdlU3RpY2tpbmVzcy5OZXZlckdyb3dzV2hlblR5cGluZ0F0RWRnZXMgKi8gfHwgbm9kZVN0aWNraW5lc3MgPT09IDIgLyogVHJhY2tlZFJhbmdlU3RpY2tpbmVzcy5Hcm93c09ubHlXaGVuVHlwaW5nQmVmb3JlICovOwogIHZhciBkZWxldGluZ0NudCA9IGVuZCAtIHN0YXJ0OwogIHZhciBpbnNlcnRpbmdDbnQgPSB0ZXh0TGVuZ3RoOwogIHZhciBjb21tb25MZW5ndGggPSBNYXRoLm1pbihkZWxldGluZ0NudCwgaW5zZXJ0aW5nQ250KTsKICB2YXIgbm9kZVN0YXJ0ID0gbm9kZS5zdGFydDsKICB2YXIgc3RhcnREb25lID0gZmFsc2U7CiAgdmFyIG5vZGVFbmQgPSBub2RlLmVuZDsKICB2YXIgZW5kRG9uZSA9IGZhbHNlOwogIGlmIChzdGFydCA8PSBub2RlU3RhcnQgJiYgbm9kZUVuZCA8PSBlbmQgJiYgZ2V0Q29sbGFwc2VPblJlcGxhY2VFZGl0KG5vZGUpKSB7CiAgICAvLyBUaGlzIGVkaXQgZW5jb21wYXNzZXMgdGhlIGVudGlyZSBkZWNvcmF0aW9uIHJhbmdlCiAgICAvLyBhbmQgdGhlIGRlY29yYXRpb24gaGFzIGFza2VkIHRvIGJlY29tZSBjb2xsYXBzZWQKICAgIG5vZGUuc3RhcnQgPSBzdGFydDsKICAgIHN0YXJ0RG9uZSA9IHRydWU7CiAgICBub2RlLmVuZCA9IHN0YXJ0OwogICAgZW5kRG9uZSA9IHRydWU7CiAgfQogIHsKICAgIHZhciBtb3ZlU2VtYW50aWNzID0gZm9yY2VNb3ZlTWFya2VycyA/IDEgLyogTWFya2VyTW92ZVNlbWFudGljcy5Gb3JjZU1vdmUgKi8gOiBkZWxldGluZ0NudCA+IDAgPyAyIC8qIE1hcmtlck1vdmVTZW1hbnRpY3MuRm9yY2VTdGF5ICovIDogMCAvKiBNYXJrZXJNb3ZlU2VtYW50aWNzLk1hcmtlckRlZmluZWQgKi87CiAgICBpZiAoIXN0YXJ0RG9uZSAmJiBhZGp1c3RNYXJrZXJCZWZvcmVDb2x1bW4obm9kZVN0YXJ0LCBzdGFydFN0aWNrVG9QcmV2aW91c0NoYXJhY3Rlciwgc3RhcnQsIG1vdmVTZW1hbnRpY3MpKSB7CiAgICAgIHN0YXJ0RG9uZSA9IHRydWU7CiAgICB9CiAgICBpZiAoIWVuZERvbmUgJiYgYWRqdXN0TWFya2VyQmVmb3JlQ29sdW1uKG5vZGVFbmQsIGVuZFN0aWNrVG9QcmV2aW91c0NoYXJhY3Rlciwgc3RhcnQsIG1vdmVTZW1hbnRpY3MpKSB7CiAgICAgIGVuZERvbmUgPSB0cnVlOwogICAgfQogIH0KICBpZiAoY29tbW9uTGVuZ3RoID4gMCAmJiAhZm9yY2VNb3ZlTWFya2VycykgewogICAgdmFyIF9tb3ZlU2VtYW50aWNzID0gZGVsZXRpbmdDbnQgPiBpbnNlcnRpbmdDbnQgPyAyIC8qIE1hcmtlck1vdmVTZW1hbnRpY3MuRm9yY2VTdGF5ICovIDogMCAvKiBNYXJrZXJNb3ZlU2VtYW50aWNzLk1hcmtlckRlZmluZWQgKi87CiAgICBpZiAoIXN0YXJ0RG9uZSAmJiBhZGp1c3RNYXJrZXJCZWZvcmVDb2x1bW4obm9kZVN0YXJ0LCBzdGFydFN0aWNrVG9QcmV2aW91c0NoYXJhY3Rlciwgc3RhcnQgKyBjb21tb25MZW5ndGgsIF9tb3ZlU2VtYW50aWNzKSkgewogICAgICBzdGFydERvbmUgPSB0cnVlOwogICAgfQogICAgaWYgKCFlbmREb25lICYmIGFkanVzdE1hcmtlckJlZm9yZUNvbHVtbihub2RlRW5kLCBlbmRTdGlja1RvUHJldmlvdXNDaGFyYWN0ZXIsIHN0YXJ0ICsgY29tbW9uTGVuZ3RoLCBfbW92ZVNlbWFudGljcykpIHsKICAgICAgZW5kRG9uZSA9IHRydWU7CiAgICB9CiAgfQogIHsKICAgIHZhciBfbW92ZVNlbWFudGljczIgPSBmb3JjZU1vdmVNYXJrZXJzID8gMSAvKiBNYXJrZXJNb3ZlU2VtYW50aWNzLkZvcmNlTW92ZSAqLyA6IDAgLyogTWFya2VyTW92ZVNlbWFudGljcy5NYXJrZXJEZWZpbmVkICovOwogICAgaWYgKCFzdGFydERvbmUgJiYgYWRqdXN0TWFya2VyQmVmb3JlQ29sdW1uKG5vZGVTdGFydCwgc3RhcnRTdGlja1RvUHJldmlvdXNDaGFyYWN0ZXIsIGVuZCwgX21vdmVTZW1hbnRpY3MyKSkgewogICAgICBub2RlLnN0YXJ0ID0gc3RhcnQgKyBpbnNlcnRpbmdDbnQ7CiAgICAgIHN0YXJ0RG9uZSA9IHRydWU7CiAgICB9CiAgICBpZiAoIWVuZERvbmUgJiYgYWRqdXN0TWFya2VyQmVmb3JlQ29sdW1uKG5vZGVFbmQsIGVuZFN0aWNrVG9QcmV2aW91c0NoYXJhY3RlciwgZW5kLCBfbW92ZVNlbWFudGljczIpKSB7CiAgICAgIG5vZGUuZW5kID0gc3RhcnQgKyBpbnNlcnRpbmdDbnQ7CiAgICAgIGVuZERvbmUgPSB0cnVlOwogICAgfQogIH0KICAvLyBGaW5pc2gKICB2YXIgZGVsdGFDb2x1bW4gPSBpbnNlcnRpbmdDbnQgLSBkZWxldGluZ0NudDsKICBpZiAoIXN0YXJ0RG9uZSkgewogICAgbm9kZS5zdGFydCA9IE1hdGgubWF4KDAsIG5vZGVTdGFydCArIGRlbHRhQ29sdW1uKTsKICB9CiAgaWYgKCFlbmREb25lKSB7CiAgICBub2RlLmVuZCA9IE1hdGgubWF4KDAsIG5vZGVFbmQgKyBkZWx0YUNvbHVtbik7CiAgfQogIGlmIChub2RlLnN0YXJ0ID4gbm9kZS5lbmQpIHsKICAgIG5vZGUuZW5kID0gbm9kZS5zdGFydDsKICB9Cn0KZnVuY3Rpb24gc2VhcmNoRm9yRWRpdGluZyhULCBzdGFydCwgZW5kKSB7CiAgLy8gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSW50ZXJ2YWxfdHJlZSNBdWdtZW50ZWRfdHJlZQogIC8vIE5vdywgaXQgaXMga25vd24gdGhhdCB0d28gaW50ZXJ2YWxzIEEgYW5kIEIgb3ZlcmxhcCBvbmx5IHdoZW4gYm90aAogIC8vIEEubG93IDw9IEIuaGlnaCBhbmQgQS5oaWdoID49IEIubG93LiBXaGVuIHNlYXJjaGluZyB0aGUgdHJlZXMgZm9yCiAgLy8gbm9kZXMgb3ZlcmxhcHBpbmcgd2l0aCBhIGdpdmVuIGludGVydmFsLCB5b3UgY2FuIGltbWVkaWF0ZWx5IHNraXA6CiAgLy8gIGEpIGFsbCBub2RlcyB0byB0aGUgcmlnaHQgb2Ygbm9kZXMgd2hvc2UgbG93IHZhbHVlIGlzIHBhc3QgdGhlIGVuZCBvZiB0aGUgZ2l2ZW4gaW50ZXJ2YWwuCiAgLy8gIGIpIGFsbCBub2RlcyB0aGF0IGhhdmUgdGhlaXIgbWF4aW11bSAnaGlnaCcgdmFsdWUgYmVsb3cgdGhlIHN0YXJ0IG9mIHRoZSBnaXZlbiBpbnRlcnZhbC4KICB2YXIgbm9kZSA9IFQucm9vdDsKICB2YXIgZGVsdGEgPSAwOwogIHZhciBub2RlTWF4RW5kID0gMDsKICB2YXIgbm9kZVN0YXJ0ID0gMDsKICB2YXIgbm9kZUVuZCA9IDA7CiAgdmFyIHJlc3VsdCA9IFtdOwogIHZhciByZXN1bHRMZW4gPSAwOwogIHdoaWxlIChub2RlICE9PSBTRU5USU5FTCkgewogICAgaWYgKGdldE5vZGVJc1Zpc2l0ZWQobm9kZSkpIHsKICAgICAgLy8gZ29pbmcgdXAgZnJvbSB0aGlzIG5vZGUKICAgICAgc2V0Tm9kZUlzVmlzaXRlZChub2RlLmxlZnQsIGZhbHNlKTsKICAgICAgc2V0Tm9kZUlzVmlzaXRlZChub2RlLnJpZ2h0LCBmYWxzZSk7CiAgICAgIGlmIChub2RlID09PSBub2RlLnBhcmVudC5yaWdodCkgewogICAgICAgIGRlbHRhIC09IG5vZGUucGFyZW50LmRlbHRhOwogICAgICB9CiAgICAgIG5vZGUgPSBub2RlLnBhcmVudDsKICAgICAgY29udGludWU7CiAgICB9CiAgICBpZiAoIWdldE5vZGVJc1Zpc2l0ZWQobm9kZS5sZWZ0KSkgewogICAgICAvLyBmaXJzdCB0aW1lIHNlZWluZyB0aGlzIG5vZGUKICAgICAgbm9kZU1heEVuZCA9IGRlbHRhICsgbm9kZS5tYXhFbmQ7CiAgICAgIGlmIChub2RlTWF4RW5kIDwgc3RhcnQpIHsKICAgICAgICAvLyBjb3ZlciBjYXNlIGIpIGZyb20gYWJvdmUKICAgICAgICAvLyB0aGVyZSBpcyBubyBuZWVkIHRvIHNlYXJjaCB0aGlzIG5vZGUgb3IgaXRzIGNoaWxkcmVuCiAgICAgICAgc2V0Tm9kZUlzVmlzaXRlZChub2RlLCB0cnVlKTsKICAgICAgICBjb250aW51ZTsKICAgICAgfQogICAgICBpZiAobm9kZS5sZWZ0ICE9PSBTRU5USU5FTCkgewogICAgICAgIC8vIGdvIGxlZnQKICAgICAgICBub2RlID0gbm9kZS5sZWZ0OwogICAgICAgIGNvbnRpbnVlOwogICAgICB9CiAgICB9CiAgICAvLyBoYW5kbGUgY3VycmVudCBub2RlCiAgICBub2RlU3RhcnQgPSBkZWx0YSArIG5vZGUuc3RhcnQ7CiAgICBpZiAobm9kZVN0YXJ0ID4gZW5kKSB7CiAgICAgIC8vIGNvdmVyIGNhc2UgYSkgZnJvbSBhYm92ZQogICAgICAvLyB0aGVyZSBpcyBubyBuZWVkIHRvIHNlYXJjaCB0aGlzIG5vZGUgb3IgaXRzIHJpZ2h0IHN1YnRyZWUKICAgICAgc2V0Tm9kZUlzVmlzaXRlZChub2RlLCB0cnVlKTsKICAgICAgY29udGludWU7CiAgICB9CiAgICBub2RlRW5kID0gZGVsdGEgKyBub2RlLmVuZDsKICAgIGlmIChub2RlRW5kID49IHN0YXJ0KSB7CiAgICAgIG5vZGUuc2V0Q2FjaGVkT2Zmc2V0cyhub2RlU3RhcnQsIG5vZGVFbmQsIDApOwogICAgICByZXN1bHRbcmVzdWx0TGVuKytdID0gbm9kZTsKICAgIH0KICAgIHNldE5vZGVJc1Zpc2l0ZWQobm9kZSwgdHJ1ZSk7CiAgICBpZiAobm9kZS5yaWdodCAhPT0gU0VOVElORUwgJiYgIWdldE5vZGVJc1Zpc2l0ZWQobm9kZS5yaWdodCkpIHsKICAgICAgLy8gZ28gcmlnaHQKICAgICAgZGVsdGEgKz0gbm9kZS5kZWx0YTsKICAgICAgbm9kZSA9IG5vZGUucmlnaHQ7CiAgICAgIGNvbnRpbnVlOwogICAgfQogIH0KICBzZXROb2RlSXNWaXNpdGVkKFQucm9vdCwgZmFsc2UpOwogIHJldHVybiByZXN1bHQ7Cn0KZnVuY3Rpb24gbm9PdmVybGFwUmVwbGFjZShULCBzdGFydCwgZW5kLCB0ZXh0TGVuZ3RoKSB7CiAgLy8gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSW50ZXJ2YWxfdHJlZSNBdWdtZW50ZWRfdHJlZQogIC8vIE5vdywgaXQgaXMga25vd24gdGhhdCB0d28gaW50ZXJ2YWxzIEEgYW5kIEIgb3ZlcmxhcCBvbmx5IHdoZW4gYm90aAogIC8vIEEubG93IDw9IEIuaGlnaCBhbmQgQS5oaWdoID49IEIubG93LiBXaGVuIHNlYXJjaGluZyB0aGUgdHJlZXMgZm9yCiAgLy8gbm9kZXMgb3ZlcmxhcHBpbmcgd2l0aCBhIGdpdmVuIGludGVydmFsLCB5b3UgY2FuIGltbWVkaWF0ZWx5IHNraXA6CiAgLy8gIGEpIGFsbCBub2RlcyB0byB0aGUgcmlnaHQgb2Ygbm9kZXMgd2hvc2UgbG93IHZhbHVlIGlzIHBhc3QgdGhlIGVuZCBvZiB0aGUgZ2l2ZW4gaW50ZXJ2YWwuCiAgLy8gIGIpIGFsbCBub2RlcyB0aGF0IGhhdmUgdGhlaXIgbWF4aW11bSAnaGlnaCcgdmFsdWUgYmVsb3cgdGhlIHN0YXJ0IG9mIHRoZSBnaXZlbiBpbnRlcnZhbC4KICB2YXIgbm9kZSA9IFQucm9vdDsKICB2YXIgZGVsdGEgPSAwOwogIHZhciBub2RlTWF4RW5kID0gMDsKICB2YXIgbm9kZVN0YXJ0ID0gMDsKICB2YXIgZWRpdERlbHRhID0gdGV4dExlbmd0aCAtIChlbmQgLSBzdGFydCk7CiAgd2hpbGUgKG5vZGUgIT09IFNFTlRJTkVMKSB7CiAgICBpZiAoZ2V0Tm9kZUlzVmlzaXRlZChub2RlKSkgewogICAgICAvLyBnb2luZyB1cCBmcm9tIHRoaXMgbm9kZQogICAgICBzZXROb2RlSXNWaXNpdGVkKG5vZGUubGVmdCwgZmFsc2UpOwogICAgICBzZXROb2RlSXNWaXNpdGVkKG5vZGUucmlnaHQsIGZhbHNlKTsKICAgICAgaWYgKG5vZGUgPT09IG5vZGUucGFyZW50LnJpZ2h0KSB7CiAgICAgICAgZGVsdGEgLT0gbm9kZS5wYXJlbnQuZGVsdGE7CiAgICAgIH0KICAgICAgcmVjb21wdXRlTWF4RW5kKG5vZGUpOwogICAgICBub2RlID0gbm9kZS5wYXJlbnQ7CiAgICAgIGNvbnRpbnVlOwogICAgfQogICAgaWYgKCFnZXROb2RlSXNWaXNpdGVkKG5vZGUubGVmdCkpIHsKICAgICAgLy8gZmlyc3QgdGltZSBzZWVpbmcgdGhpcyBub2RlCiAgICAgIG5vZGVNYXhFbmQgPSBkZWx0YSArIG5vZGUubWF4RW5kOwogICAgICBpZiAobm9kZU1heEVuZCA8IHN0YXJ0KSB7CiAgICAgICAgLy8gY292ZXIgY2FzZSBiKSBmcm9tIGFib3ZlCiAgICAgICAgLy8gdGhlcmUgaXMgbm8gbmVlZCB0byBzZWFyY2ggdGhpcyBub2RlIG9yIGl0cyBjaGlsZHJlbgogICAgICAgIHNldE5vZGVJc1Zpc2l0ZWQobm9kZSwgdHJ1ZSk7CiAgICAgICAgY29udGludWU7CiAgICAgIH0KICAgICAgaWYgKG5vZGUubGVmdCAhPT0gU0VOVElORUwpIHsKICAgICAgICAvLyBnbyBsZWZ0CiAgICAgICAgbm9kZSA9IG5vZGUubGVmdDsKICAgICAgICBjb250aW51ZTsKICAgICAgfQogICAgfQogICAgLy8gaGFuZGxlIGN1cnJlbnQgbm9kZQogICAgbm9kZVN0YXJ0ID0gZGVsdGEgKyBub2RlLnN0YXJ0OwogICAgaWYgKG5vZGVTdGFydCA+IGVuZCkgewogICAgICBub2RlLnN0YXJ0ICs9IGVkaXREZWx0YTsKICAgICAgbm9kZS5lbmQgKz0gZWRpdERlbHRhOwogICAgICBub2RlLmRlbHRhICs9IGVkaXREZWx0YTsKICAgICAgaWYgKG5vZGUuZGVsdGEgPCAtMTA3Mzc0MTgyNCAvKiBDb25zdGFudHMuTUlOX1NBRkVfREVMVEEgKi8gfHwgbm9kZS5kZWx0YSA+IDEwNzM3NDE4MjQgLyogQ29uc3RhbnRzLk1BWF9TQUZFX0RFTFRBICovKSB7CiAgICAgICAgVC5yZXF1ZXN0Tm9ybWFsaXplRGVsdGEgPSB0cnVlOwogICAgICB9CiAgICAgIC8vIGNvdmVyIGNhc2UgYSkgZnJvbSBhYm92ZQogICAgICAvLyB0aGVyZSBpcyBubyBuZWVkIHRvIHNlYXJjaCB0aGlzIG5vZGUgb3IgaXRzIHJpZ2h0IHN1YnRyZWUKICAgICAgc2V0Tm9kZUlzVmlzaXRlZChub2RlLCB0cnVlKTsKICAgICAgY29udGludWU7CiAgICB9CiAgICBzZXROb2RlSXNWaXNpdGVkKG5vZGUsIHRydWUpOwogICAgaWYgKG5vZGUucmlnaHQgIT09IFNFTlRJTkVMICYmICFnZXROb2RlSXNWaXNpdGVkKG5vZGUucmlnaHQpKSB7CiAgICAgIC8vIGdvIHJpZ2h0CiAgICAgIGRlbHRhICs9IG5vZGUuZGVsdGE7CiAgICAgIG5vZGUgPSBub2RlLnJpZ2h0OwogICAgICBjb250aW51ZTsKICAgIH0KICB9CiAgc2V0Tm9kZUlzVmlzaXRlZChULnJvb3QsIGZhbHNlKTsKfQovLyNlbmRyZWdpb24KLy8jcmVnaW9uIFNlYXJjaGluZwpmdW5jdGlvbiBfY29sbGVjdE5vZGVzRnJvbU93bmVyKFQsIG93bmVySWQpIHsKICB2YXIgbm9kZSA9IFQucm9vdDsKICB2YXIgcmVzdWx0ID0gW107CiAgdmFyIHJlc3VsdExlbiA9IDA7CiAgd2hpbGUgKG5vZGUgIT09IFNFTlRJTkVMKSB7CiAgICBpZiAoZ2V0Tm9kZUlzVmlzaXRlZChub2RlKSkgewogICAgICAvLyBnb2luZyB1cCBmcm9tIHRoaXMgbm9kZQogICAgICBzZXROb2RlSXNWaXNpdGVkKG5vZGUubGVmdCwgZmFsc2UpOwogICAgICBzZXROb2RlSXNWaXNpdGVkKG5vZGUucmlnaHQsIGZhbHNlKTsKICAgICAgbm9kZSA9IG5vZGUucGFyZW50OwogICAgICBjb250aW51ZTsKICAgIH0KICAgIGlmIChub2RlLmxlZnQgIT09IFNFTlRJTkVMICYmICFnZXROb2RlSXNWaXNpdGVkKG5vZGUubGVmdCkpIHsKICAgICAgLy8gZ28gbGVmdAogICAgICBub2RlID0gbm9kZS5sZWZ0OwogICAgICBjb250aW51ZTsKICAgIH0KICAgIC8vIGhhbmRsZSBjdXJyZW50IG5vZGUKICAgIGlmIChub2RlLm93bmVySWQgPT09IG93bmVySWQpIHsKICAgICAgcmVzdWx0W3Jlc3VsdExlbisrXSA9IG5vZGU7CiAgICB9CiAgICBzZXROb2RlSXNWaXNpdGVkKG5vZGUsIHRydWUpOwogICAgaWYgKG5vZGUucmlnaHQgIT09IFNFTlRJTkVMICYmICFnZXROb2RlSXNWaXNpdGVkKG5vZGUucmlnaHQpKSB7CiAgICAgIC8vIGdvIHJpZ2h0CiAgICAgIG5vZGUgPSBub2RlLnJpZ2h0OwogICAgICBjb250aW51ZTsKICAgIH0KICB9CiAgc2V0Tm9kZUlzVmlzaXRlZChULnJvb3QsIGZhbHNlKTsKICByZXR1cm4gcmVzdWx0Owp9CmZ1bmN0aW9uIF9jb2xsZWN0Tm9kZXNQb3N0T3JkZXIoVCkgewogIHZhciBub2RlID0gVC5yb290OwogIHZhciByZXN1bHQgPSBbXTsKICB2YXIgcmVzdWx0TGVuID0gMDsKICB3aGlsZSAobm9kZSAhPT0gU0VOVElORUwpIHsKICAgIGlmIChnZXROb2RlSXNWaXNpdGVkKG5vZGUpKSB7CiAgICAgIC8vIGdvaW5nIHVwIGZyb20gdGhpcyBub2RlCiAgICAgIHNldE5vZGVJc1Zpc2l0ZWQobm9kZS5sZWZ0LCBmYWxzZSk7CiAgICAgIHNldE5vZGVJc1Zpc2l0ZWQobm9kZS5yaWdodCwgZmFsc2UpOwogICAgICBub2RlID0gbm9kZS5wYXJlbnQ7CiAgICAgIGNvbnRpbnVlOwogICAgfQogICAgaWYgKG5vZGUubGVmdCAhPT0gU0VOVElORUwgJiYgIWdldE5vZGVJc1Zpc2l0ZWQobm9kZS5sZWZ0KSkgewogICAgICAvLyBnbyBsZWZ0CiAgICAgIG5vZGUgPSBub2RlLmxlZnQ7CiAgICAgIGNvbnRpbnVlOwogICAgfQogICAgaWYgKG5vZGUucmlnaHQgIT09IFNFTlRJTkVMICYmICFnZXROb2RlSXNWaXNpdGVkKG5vZGUucmlnaHQpKSB7CiAgICAgIC8vIGdvIHJpZ2h0CiAgICAgIG5vZGUgPSBub2RlLnJpZ2h0OwogICAgICBjb250aW51ZTsKICAgIH0KICAgIC8vIGhhbmRsZSBjdXJyZW50IG5vZGUKICAgIHJlc3VsdFtyZXN1bHRMZW4rK10gPSBub2RlOwogICAgc2V0Tm9kZUlzVmlzaXRlZChub2RlLCB0cnVlKTsKICB9CiAgc2V0Tm9kZUlzVmlzaXRlZChULnJvb3QsIGZhbHNlKTsKICByZXR1cm4gcmVzdWx0Owp9CmZ1bmN0aW9uIF9zZWFyY2goVCwgZmlsdGVyT3duZXJJZCwgZmlsdGVyT3V0VmFsaWRhdGlvbiwgY2FjaGVkVmVyc2lvbklkKSB7CiAgdmFyIG5vZGUgPSBULnJvb3Q7CiAgdmFyIGRlbHRhID0gMDsKICB2YXIgbm9kZVN0YXJ0ID0gMDsKICB2YXIgbm9kZUVuZCA9IDA7CiAgdmFyIHJlc3VsdCA9IFtdOwogIHZhciByZXN1bHRMZW4gPSAwOwogIHdoaWxlIChub2RlICE9PSBTRU5USU5FTCkgewogICAgaWYgKGdldE5vZGVJc1Zpc2l0ZWQobm9kZSkpIHsKICAgICAgLy8gZ29pbmcgdXAgZnJvbSB0aGlzIG5vZGUKICAgICAgc2V0Tm9kZUlzVmlzaXRlZChub2RlLmxlZnQsIGZhbHNlKTsKICAgICAgc2V0Tm9kZUlzVmlzaXRlZChub2RlLnJpZ2h0LCBmYWxzZSk7CiAgICAgIGlmIChub2RlID09PSBub2RlLnBhcmVudC5yaWdodCkgewogICAgICAgIGRlbHRhIC09IG5vZGUucGFyZW50LmRlbHRhOwogICAgICB9CiAgICAgIG5vZGUgPSBub2RlLnBhcmVudDsKICAgICAgY29udGludWU7CiAgICB9CiAgICBpZiAobm9kZS5sZWZ0ICE9PSBTRU5USU5FTCAmJiAhZ2V0Tm9kZUlzVmlzaXRlZChub2RlLmxlZnQpKSB7CiAgICAgIC8vIGdvIGxlZnQKICAgICAgbm9kZSA9IG5vZGUubGVmdDsKICAgICAgY29udGludWU7CiAgICB9CiAgICAvLyBoYW5kbGUgY3VycmVudCBub2RlCiAgICBub2RlU3RhcnQgPSBkZWx0YSArIG5vZGUuc3RhcnQ7CiAgICBub2RlRW5kID0gZGVsdGEgKyBub2RlLmVuZDsKICAgIG5vZGUuc2V0Q2FjaGVkT2Zmc2V0cyhub2RlU3RhcnQsIG5vZGVFbmQsIGNhY2hlZFZlcnNpb25JZCk7CiAgICB2YXIgaW5jbHVkZSA9IHRydWU7CiAgICBpZiAoZmlsdGVyT3duZXJJZCAmJiBub2RlLm93bmVySWQgJiYgbm9kZS5vd25lcklkICE9PSBmaWx0ZXJPd25lcklkKSB7CiAgICAgIGluY2x1ZGUgPSBmYWxzZTsKICAgIH0KICAgIGlmIChmaWx0ZXJPdXRWYWxpZGF0aW9uICYmIGdldE5vZGVJc0ZvclZhbGlkYXRpb24obm9kZSkpIHsKICAgICAgaW5jbHVkZSA9IGZhbHNlOwogICAgfQogICAgaWYgKGluY2x1ZGUpIHsKICAgICAgcmVzdWx0W3Jlc3VsdExlbisrXSA9IG5vZGU7CiAgICB9CiAgICBzZXROb2RlSXNWaXNpdGVkKG5vZGUsIHRydWUpOwogICAgaWYgKG5vZGUucmlnaHQgIT09IFNFTlRJTkVMICYmICFnZXROb2RlSXNWaXNpdGVkKG5vZGUucmlnaHQpKSB7CiAgICAgIC8vIGdvIHJpZ2h0CiAgICAgIGRlbHRhICs9IG5vZGUuZGVsdGE7CiAgICAgIG5vZGUgPSBub2RlLnJpZ2h0OwogICAgICBjb250aW51ZTsKICAgIH0KICB9CiAgc2V0Tm9kZUlzVmlzaXRlZChULnJvb3QsIGZhbHNlKTsKICByZXR1cm4gcmVzdWx0Owp9CmZ1bmN0aW9uIF9pbnRlcnZhbFNlYXJjaChULCBpbnRlcnZhbFN0YXJ0LCBpbnRlcnZhbEVuZCwgZmlsdGVyT3duZXJJZCwgZmlsdGVyT3V0VmFsaWRhdGlvbiwgY2FjaGVkVmVyc2lvbklkKSB7CiAgLy8gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSW50ZXJ2YWxfdHJlZSNBdWdtZW50ZWRfdHJlZQogIC8vIE5vdywgaXQgaXMga25vd24gdGhhdCB0d28gaW50ZXJ2YWxzIEEgYW5kIEIgb3ZlcmxhcCBvbmx5IHdoZW4gYm90aAogIC8vIEEubG93IDw9IEIuaGlnaCBhbmQgQS5oaWdoID49IEIubG93LiBXaGVuIHNlYXJjaGluZyB0aGUgdHJlZXMgZm9yCiAgLy8gbm9kZXMgb3ZlcmxhcHBpbmcgd2l0aCBhIGdpdmVuIGludGVydmFsLCB5b3UgY2FuIGltbWVkaWF0ZWx5IHNraXA6CiAgLy8gIGEpIGFsbCBub2RlcyB0byB0aGUgcmlnaHQgb2Ygbm9kZXMgd2hvc2UgbG93IHZhbHVlIGlzIHBhc3QgdGhlIGVuZCBvZiB0aGUgZ2l2ZW4gaW50ZXJ2YWwuCiAgLy8gIGIpIGFsbCBub2RlcyB0aGF0IGhhdmUgdGhlaXIgbWF4aW11bSAnaGlnaCcgdmFsdWUgYmVsb3cgdGhlIHN0YXJ0IG9mIHRoZSBnaXZlbiBpbnRlcnZhbC4KICB2YXIgbm9kZSA9IFQucm9vdDsKICB2YXIgZGVsdGEgPSAwOwogIHZhciBub2RlTWF4RW5kID0gMDsKICB2YXIgbm9kZVN0YXJ0ID0gMDsKICB2YXIgbm9kZUVuZCA9IDA7CiAgdmFyIHJlc3VsdCA9IFtdOwogIHZhciByZXN1bHRMZW4gPSAwOwogIHdoaWxlIChub2RlICE9PSBTRU5USU5FTCkgewogICAgaWYgKGdldE5vZGVJc1Zpc2l0ZWQobm9kZSkpIHsKICAgICAgLy8gZ29pbmcgdXAgZnJvbSB0aGlzIG5vZGUKICAgICAgc2V0Tm9kZUlzVmlzaXRlZChub2RlLmxlZnQsIGZhbHNlKTsKICAgICAgc2V0Tm9kZUlzVmlzaXRlZChub2RlLnJpZ2h0LCBmYWxzZSk7CiAgICAgIGlmIChub2RlID09PSBub2RlLnBhcmVudC5yaWdodCkgewogICAgICAgIGRlbHRhIC09IG5vZGUucGFyZW50LmRlbHRhOwogICAgICB9CiAgICAgIG5vZGUgPSBub2RlLnBhcmVudDsKICAgICAgY29udGludWU7CiAgICB9CiAgICBpZiAoIWdldE5vZGVJc1Zpc2l0ZWQobm9kZS5sZWZ0KSkgewogICAgICAvLyBmaXJzdCB0aW1lIHNlZWluZyB0aGlzIG5vZGUKICAgICAgbm9kZU1heEVuZCA9IGRlbHRhICsgbm9kZS5tYXhFbmQ7CiAgICAgIGlmIChub2RlTWF4RW5kIDwgaW50ZXJ2YWxTdGFydCkgewogICAgICAgIC8vIGNvdmVyIGNhc2UgYikgZnJvbSBhYm92ZQogICAgICAgIC8vIHRoZXJlIGlzIG5vIG5lZWQgdG8gc2VhcmNoIHRoaXMgbm9kZSBvciBpdHMgY2hpbGRyZW4KICAgICAgICBzZXROb2RlSXNWaXNpdGVkKG5vZGUsIHRydWUpOwogICAgICAgIGNvbnRpbnVlOwogICAgICB9CiAgICAgIGlmIChub2RlLmxlZnQgIT09IFNFTlRJTkVMKSB7CiAgICAgICAgLy8gZ28gbGVmdAogICAgICAgIG5vZGUgPSBub2RlLmxlZnQ7CiAgICAgICAgY29udGludWU7CiAgICAgIH0KICAgIH0KICAgIC8vIGhhbmRsZSBjdXJyZW50IG5vZGUKICAgIG5vZGVTdGFydCA9IGRlbHRhICsgbm9kZS5zdGFydDsKICAgIGlmIChub2RlU3RhcnQgPiBpbnRlcnZhbEVuZCkgewogICAgICAvLyBjb3ZlciBjYXNlIGEpIGZyb20gYWJvdmUKICAgICAgLy8gdGhlcmUgaXMgbm8gbmVlZCB0byBzZWFyY2ggdGhpcyBub2RlIG9yIGl0cyByaWdodCBzdWJ0cmVlCiAgICAgIHNldE5vZGVJc1Zpc2l0ZWQobm9kZSwgdHJ1ZSk7CiAgICAgIGNvbnRpbnVlOwogICAgfQogICAgbm9kZUVuZCA9IGRlbHRhICsgbm9kZS5lbmQ7CiAgICBpZiAobm9kZUVuZCA+PSBpbnRlcnZhbFN0YXJ0KSB7CiAgICAgIC8vIFRoZXJlIGlzIG92ZXJsYXAKICAgICAgbm9kZS5zZXRDYWNoZWRPZmZzZXRzKG5vZGVTdGFydCwgbm9kZUVuZCwgY2FjaGVkVmVyc2lvbklkKTsKICAgICAgdmFyIGluY2x1ZGUgPSB0cnVlOwogICAgICBpZiAoZmlsdGVyT3duZXJJZCAmJiBub2RlLm93bmVySWQgJiYgbm9kZS5vd25lcklkICE9PSBmaWx0ZXJPd25lcklkKSB7CiAgICAgICAgaW5jbHVkZSA9IGZhbHNlOwogICAgICB9CiAgICAgIGlmIChmaWx0ZXJPdXRWYWxpZGF0aW9uICYmIGdldE5vZGVJc0ZvclZhbGlkYXRpb24obm9kZSkpIHsKICAgICAgICBpbmNsdWRlID0gZmFsc2U7CiAgICAgIH0KICAgICAgaWYgKGluY2x1ZGUpIHsKICAgICAgICByZXN1bHRbcmVzdWx0TGVuKytdID0gbm9kZTsKICAgICAgfQogICAgfQogICAgc2V0Tm9kZUlzVmlzaXRlZChub2RlLCB0cnVlKTsKICAgIGlmIChub2RlLnJpZ2h0ICE9PSBTRU5USU5FTCAmJiAhZ2V0Tm9kZUlzVmlzaXRlZChub2RlLnJpZ2h0KSkgewogICAgICAvLyBnbyByaWdodAogICAgICBkZWx0YSArPSBub2RlLmRlbHRhOwogICAgICBub2RlID0gbm9kZS5yaWdodDsKICAgICAgY29udGludWU7CiAgICB9CiAgfQogIHNldE5vZGVJc1Zpc2l0ZWQoVC5yb290LCBmYWxzZSk7CiAgcmV0dXJuIHJlc3VsdDsKfQovLyNlbmRyZWdpb24KLy8jcmVnaW9uIEluc2VydGlvbgpmdW5jdGlvbiByYlRyZWVJbnNlcnQoVCwgbmV3Tm9kZSkgewogIGlmIChULnJvb3QgPT09IFNFTlRJTkVMKSB7CiAgICBuZXdOb2RlLnBhcmVudCA9IFNFTlRJTkVMOwogICAgbmV3Tm9kZS5sZWZ0ID0gU0VOVElORUw7CiAgICBuZXdOb2RlLnJpZ2h0ID0gU0VOVElORUw7CiAgICBzZXROb2RlQ29sb3IobmV3Tm9kZSwgMCAvKiBOb2RlQ29sb3IuQmxhY2sgKi8pOwogICAgVC5yb290ID0gbmV3Tm9kZTsKICAgIHJldHVybiBULnJvb3Q7CiAgfQogIHRyZWVJbnNlcnQoVCwgbmV3Tm9kZSk7CiAgcmVjb21wdXRlTWF4RW5kV2Fsa1RvUm9vdChuZXdOb2RlLnBhcmVudCk7CiAgLy8gcmVwYWlyIHRyZWUKICB2YXIgeCA9IG5ld05vZGU7CiAgd2hpbGUgKHggIT09IFQucm9vdCAmJiBnZXROb2RlQ29sb3IoeC5wYXJlbnQpID09PSAxIC8qIE5vZGVDb2xvci5SZWQgKi8pIHsKICAgIGlmICh4LnBhcmVudCA9PT0geC5wYXJlbnQucGFyZW50LmxlZnQpIHsKICAgICAgdmFyIHkgPSB4LnBhcmVudC5wYXJlbnQucmlnaHQ7CiAgICAgIGlmIChnZXROb2RlQ29sb3IoeSkgPT09IDEgLyogTm9kZUNvbG9yLlJlZCAqLykgewogICAgICAgIHNldE5vZGVDb2xvcih4LnBhcmVudCwgMCAvKiBOb2RlQ29sb3IuQmxhY2sgKi8pOwogICAgICAgIHNldE5vZGVDb2xvcih5LCAwIC8qIE5vZGVDb2xvci5CbGFjayAqLyk7CiAgICAgICAgc2V0Tm9kZUNvbG9yKHgucGFyZW50LnBhcmVudCwgMSAvKiBOb2RlQ29sb3IuUmVkICovKTsKICAgICAgICB4ID0geC5wYXJlbnQucGFyZW50OwogICAgICB9IGVsc2UgewogICAgICAgIGlmICh4ID09PSB4LnBhcmVudC5yaWdodCkgewogICAgICAgICAgeCA9IHgucGFyZW50OwogICAgICAgICAgbGVmdFJvdGF0ZShULCB4KTsKICAgICAgICB9CiAgICAgICAgc2V0Tm9kZUNvbG9yKHgucGFyZW50LCAwIC8qIE5vZGVDb2xvci5CbGFjayAqLyk7CiAgICAgICAgc2V0Tm9kZUNvbG9yKHgucGFyZW50LnBhcmVudCwgMSAvKiBOb2RlQ29sb3IuUmVkICovKTsKICAgICAgICByaWdodFJvdGF0ZShULCB4LnBhcmVudC5wYXJlbnQpOwogICAgICB9CiAgICB9IGVsc2UgewogICAgICB2YXIgX3kgPSB4LnBhcmVudC5wYXJlbnQubGVmdDsKICAgICAgaWYgKGdldE5vZGVDb2xvcihfeSkgPT09IDEgLyogTm9kZUNvbG9yLlJlZCAqLykgewogICAgICAgIHNldE5vZGVDb2xvcih4LnBhcmVudCwgMCAvKiBOb2RlQ29sb3IuQmxhY2sgKi8pOwogICAgICAgIHNldE5vZGVDb2xvcihfeSwgMCAvKiBOb2RlQ29sb3IuQmxhY2sgKi8pOwogICAgICAgIHNldE5vZGVDb2xvcih4LnBhcmVudC5wYXJlbnQsIDEgLyogTm9kZUNvbG9yLlJlZCAqLyk7CiAgICAgICAgeCA9IHgucGFyZW50LnBhcmVudDsKICAgICAgfSBlbHNlIHsKICAgICAgICBpZiAoeCA9PT0geC5wYXJlbnQubGVmdCkgewogICAgICAgICAgeCA9IHgucGFyZW50OwogICAgICAgICAgcmlnaHRSb3RhdGUoVCwgeCk7CiAgICAgICAgfQogICAgICAgIHNldE5vZGVDb2xvcih4LnBhcmVudCwgMCAvKiBOb2RlQ29sb3IuQmxhY2sgKi8pOwogICAgICAgIHNldE5vZGVDb2xvcih4LnBhcmVudC5wYXJlbnQsIDEgLyogTm9kZUNvbG9yLlJlZCAqLyk7CiAgICAgICAgbGVmdFJvdGF0ZShULCB4LnBhcmVudC5wYXJlbnQpOwogICAgICB9CiAgICB9CiAgfQogIHNldE5vZGVDb2xvcihULnJvb3QsIDAgLyogTm9kZUNvbG9yLkJsYWNrICovKTsKICByZXR1cm4gbmV3Tm9kZTsKfQpmdW5jdGlvbiB0cmVlSW5zZXJ0KFQsIHopIHsKICB2YXIgZGVsdGEgPSAwOwogIHZhciB4ID0gVC5yb290OwogIHZhciB6QWJzb2x1dGVTdGFydCA9IHouc3RhcnQ7CiAgdmFyIHpBYnNvbHV0ZUVuZCA9IHouZW5kOwogIHdoaWxlICh0cnVlKSB7CiAgICB2YXIgY21wID0gaW50ZXJ2YWxDb21wYXJlKHpBYnNvbHV0ZVN0YXJ0LCB6QWJzb2x1dGVFbmQsIHguc3RhcnQgKyBkZWx0YSwgeC5lbmQgKyBkZWx0YSk7CiAgICBpZiAoY21wIDwgMCkgewogICAgICAvLyB0aGlzIG5vZGUgc2hvdWxkIGJlIGluc2VydGVkIHRvIHRoZSBsZWZ0CiAgICAgIC8vID0+IGl0IGlzIG5vdCBhZmZlY3RlZCBieSB0aGUgbm9kZSdzIGRlbHRhCiAgICAgIGlmICh4LmxlZnQgPT09IFNFTlRJTkVMKSB7CiAgICAgICAgei5zdGFydCAtPSBkZWx0YTsKICAgICAgICB6LmVuZCAtPSBkZWx0YTsKICAgICAgICB6Lm1heEVuZCAtPSBkZWx0YTsKICAgICAgICB4LmxlZnQgPSB6OwogICAgICAgIGJyZWFrOwogICAgICB9IGVsc2UgewogICAgICAgIHggPSB4LmxlZnQ7CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIC8vIHRoaXMgbm9kZSBzaG91bGQgYmUgaW5zZXJ0ZWQgdG8gdGhlIHJpZ2h0CiAgICAgIC8vID0+IGl0IGlzIG5vdCBhZmZlY3RlZCBieSB0aGUgbm9kZSdzIGRlbHRhCiAgICAgIGlmICh4LnJpZ2h0ID09PSBTRU5USU5FTCkgewogICAgICAgIHouc3RhcnQgLT0gZGVsdGEgKyB4LmRlbHRhOwogICAgICAgIHouZW5kIC09IGRlbHRhICsgeC5kZWx0YTsKICAgICAgICB6Lm1heEVuZCAtPSBkZWx0YSArIHguZGVsdGE7CiAgICAgICAgeC5yaWdodCA9IHo7CiAgICAgICAgYnJlYWs7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgZGVsdGEgKz0geC5kZWx0YTsKICAgICAgICB4ID0geC5yaWdodDsKICAgICAgfQogICAgfQogIH0KICB6LnBhcmVudCA9IHg7CiAgei5sZWZ0ID0gU0VOVElORUw7CiAgei5yaWdodCA9IFNFTlRJTkVMOwogIHNldE5vZGVDb2xvcih6LCAxIC8qIE5vZGVDb2xvci5SZWQgKi8pOwp9Ci8vI2VuZHJlZ2lvbgovLyNyZWdpb24gRGVsZXRpb24KZnVuY3Rpb24gcmJUcmVlRGVsZXRlKFQsIHopIHsKICB2YXIgeDsKICB2YXIgeTsKICAvLyBSQi1ERUxFVEUgZXhjZXB0IHdlIGRvbid0IHN3YXAgeiBhbmQgeSBpbiBjYXNlIGMpCiAgLy8gaS5lLiB3ZSBhbHdheXMgZGVsZXRlIHdoYXQncyBwb2ludGVkIGF0IGJ5IHouCiAgaWYgKHoubGVmdCA9PT0gU0VOVElORUwpIHsKICAgIHggPSB6LnJpZ2h0OwogICAgeSA9IHo7CiAgICAvLyB4J3MgZGVsdGEgaXMgbm8gbG9uZ2VyIGluZmx1ZW5jZWQgYnkgeidzIGRlbHRhCiAgICB4LmRlbHRhICs9IHouZGVsdGE7CiAgICBpZiAoeC5kZWx0YSA8IC0xMDczNzQxODI0IC8qIENvbnN0YW50cy5NSU5fU0FGRV9ERUxUQSAqLyB8fCB4LmRlbHRhID4gMTA3Mzc0MTgyNCAvKiBDb25zdGFudHMuTUFYX1NBRkVfREVMVEEgKi8pIHsKICAgICAgVC5yZXF1ZXN0Tm9ybWFsaXplRGVsdGEgPSB0cnVlOwogICAgfQogICAgeC5zdGFydCArPSB6LmRlbHRhOwogICAgeC5lbmQgKz0gei5kZWx0YTsKICB9IGVsc2UgaWYgKHoucmlnaHQgPT09IFNFTlRJTkVMKSB7CiAgICB4ID0gei5sZWZ0OwogICAgeSA9IHo7CiAgfSBlbHNlIHsKICAgIHkgPSBsZWZ0ZXN0KHoucmlnaHQpOwogICAgeCA9IHkucmlnaHQ7CiAgICAvLyB5J3MgZGVsdGEgaXMgbm8gbG9uZ2VyIGluZmx1ZW5jZWQgYnkgeidzIGRlbHRhLAogICAgLy8gYnV0IHdlIGRvbid0IHdhbnQgdG8gd2FsayB0aGUgZW50aXJlIHJpZ2h0LWhhbmQtc2lkZSBzdWJ0cmVlIG9mIHguCiAgICAvLyB3ZSB0aGVyZWZvcmUgbWFpbnRhaW4geidzIGRlbHRhIGluIHksIGFuZCBhZGp1c3Qgb25seSB4CiAgICB4LnN0YXJ0ICs9IHkuZGVsdGE7CiAgICB4LmVuZCArPSB5LmRlbHRhOwogICAgeC5kZWx0YSArPSB5LmRlbHRhOwogICAgaWYgKHguZGVsdGEgPCAtMTA3Mzc0MTgyNCAvKiBDb25zdGFudHMuTUlOX1NBRkVfREVMVEEgKi8gfHwgeC5kZWx0YSA+IDEwNzM3NDE4MjQgLyogQ29uc3RhbnRzLk1BWF9TQUZFX0RFTFRBICovKSB7CiAgICAgIFQucmVxdWVzdE5vcm1hbGl6ZURlbHRhID0gdHJ1ZTsKICAgIH0KICAgIHkuc3RhcnQgKz0gei5kZWx0YTsKICAgIHkuZW5kICs9IHouZGVsdGE7CiAgICB5LmRlbHRhID0gei5kZWx0YTsKICAgIGlmICh5LmRlbHRhIDwgLTEwNzM3NDE4MjQgLyogQ29uc3RhbnRzLk1JTl9TQUZFX0RFTFRBICovIHx8IHkuZGVsdGEgPiAxMDczNzQxODI0IC8qIENvbnN0YW50cy5NQVhfU0FGRV9ERUxUQSAqLykgewogICAgICBULnJlcXVlc3ROb3JtYWxpemVEZWx0YSA9IHRydWU7CiAgICB9CiAgfQogIGlmICh5ID09PSBULnJvb3QpIHsKICAgIFQucm9vdCA9IHg7CiAgICBzZXROb2RlQ29sb3IoeCwgMCAvKiBOb2RlQ29sb3IuQmxhY2sgKi8pOwogICAgei5kZXRhY2goKTsKICAgIHJlc2V0U2VudGluZWwoKTsKICAgIHJlY29tcHV0ZU1heEVuZCh4KTsKICAgIFQucm9vdC5wYXJlbnQgPSBTRU5USU5FTDsKICAgIHJldHVybjsKICB9CiAgdmFyIHlXYXNSZWQgPSBnZXROb2RlQ29sb3IoeSkgPT09IDEgLyogTm9kZUNvbG9yLlJlZCAqLzsKICBpZiAoeSA9PT0geS5wYXJlbnQubGVmdCkgewogICAgeS5wYXJlbnQubGVmdCA9IHg7CiAgfSBlbHNlIHsKICAgIHkucGFyZW50LnJpZ2h0ID0geDsKICB9CiAgaWYgKHkgPT09IHopIHsKICAgIHgucGFyZW50ID0geS5wYXJlbnQ7CiAgfSBlbHNlIHsKICAgIGlmICh5LnBhcmVudCA9PT0geikgewogICAgICB4LnBhcmVudCA9IHk7CiAgICB9IGVsc2UgewogICAgICB4LnBhcmVudCA9IHkucGFyZW50OwogICAgfQogICAgeS5sZWZ0ID0gei5sZWZ0OwogICAgeS5yaWdodCA9IHoucmlnaHQ7CiAgICB5LnBhcmVudCA9IHoucGFyZW50OwogICAgc2V0Tm9kZUNvbG9yKHksIGdldE5vZGVDb2xvcih6KSk7CiAgICBpZiAoeiA9PT0gVC5yb290KSB7CiAgICAgIFQucm9vdCA9IHk7CiAgICB9IGVsc2UgewogICAgICBpZiAoeiA9PT0gei5wYXJlbnQubGVmdCkgewogICAgICAgIHoucGFyZW50LmxlZnQgPSB5OwogICAgICB9IGVsc2UgewogICAgICAgIHoucGFyZW50LnJpZ2h0ID0geTsKICAgICAgfQogICAgfQogICAgaWYgKHkubGVmdCAhPT0gU0VOVElORUwpIHsKICAgICAgeS5sZWZ0LnBhcmVudCA9IHk7CiAgICB9CiAgICBpZiAoeS5yaWdodCAhPT0gU0VOVElORUwpIHsKICAgICAgeS5yaWdodC5wYXJlbnQgPSB5OwogICAgfQogIH0KICB6LmRldGFjaCgpOwogIGlmICh5V2FzUmVkKSB7CiAgICByZWNvbXB1dGVNYXhFbmRXYWxrVG9Sb290KHgucGFyZW50KTsKICAgIGlmICh5ICE9PSB6KSB7CiAgICAgIHJlY29tcHV0ZU1heEVuZFdhbGtUb1Jvb3QoeSk7CiAgICAgIHJlY29tcHV0ZU1heEVuZFdhbGtUb1Jvb3QoeS5wYXJlbnQpOwogICAgfQogICAgcmVzZXRTZW50aW5lbCgpOwogICAgcmV0dXJuOwogIH0KICByZWNvbXB1dGVNYXhFbmRXYWxrVG9Sb290KHgpOwogIHJlY29tcHV0ZU1heEVuZFdhbGtUb1Jvb3QoeC5wYXJlbnQpOwogIGlmICh5ICE9PSB6KSB7CiAgICByZWNvbXB1dGVNYXhFbmRXYWxrVG9Sb290KHkpOwogICAgcmVjb21wdXRlTWF4RW5kV2Fsa1RvUm9vdCh5LnBhcmVudCk7CiAgfQogIC8vIFJCLURFTEVURS1GSVhVUAogIHZhciB3OwogIHdoaWxlICh4ICE9PSBULnJvb3QgJiYgZ2V0Tm9kZUNvbG9yKHgpID09PSAwIC8qIE5vZGVDb2xvci5CbGFjayAqLykgewogICAgaWYgKHggPT09IHgucGFyZW50LmxlZnQpIHsKICAgICAgdyA9IHgucGFyZW50LnJpZ2h0OwogICAgICBpZiAoZ2V0Tm9kZUNvbG9yKHcpID09PSAxIC8qIE5vZGVDb2xvci5SZWQgKi8pIHsKICAgICAgICBzZXROb2RlQ29sb3IodywgMCAvKiBOb2RlQ29sb3IuQmxhY2sgKi8pOwogICAgICAgIHNldE5vZGVDb2xvcih4LnBhcmVudCwgMSAvKiBOb2RlQ29sb3IuUmVkICovKTsKICAgICAgICBsZWZ0Um90YXRlKFQsIHgucGFyZW50KTsKICAgICAgICB3ID0geC5wYXJlbnQucmlnaHQ7CiAgICAgIH0KICAgICAgaWYgKGdldE5vZGVDb2xvcih3LmxlZnQpID09PSAwIC8qIE5vZGVDb2xvci5CbGFjayAqLyAmJiBnZXROb2RlQ29sb3Iody5yaWdodCkgPT09IDAgLyogTm9kZUNvbG9yLkJsYWNrICovKSB7CiAgICAgICAgc2V0Tm9kZUNvbG9yKHcsIDEgLyogTm9kZUNvbG9yLlJlZCAqLyk7CiAgICAgICAgeCA9IHgucGFyZW50OwogICAgICB9IGVsc2UgewogICAgICAgIGlmIChnZXROb2RlQ29sb3Iody5yaWdodCkgPT09IDAgLyogTm9kZUNvbG9yLkJsYWNrICovKSB7CiAgICAgICAgICBzZXROb2RlQ29sb3Iody5sZWZ0LCAwIC8qIE5vZGVDb2xvci5CbGFjayAqLyk7CiAgICAgICAgICBzZXROb2RlQ29sb3IodywgMSAvKiBOb2RlQ29sb3IuUmVkICovKTsKICAgICAgICAgIHJpZ2h0Um90YXRlKFQsIHcpOwogICAgICAgICAgdyA9IHgucGFyZW50LnJpZ2h0OwogICAgICAgIH0KICAgICAgICBzZXROb2RlQ29sb3IodywgZ2V0Tm9kZUNvbG9yKHgucGFyZW50KSk7CiAgICAgICAgc2V0Tm9kZUNvbG9yKHgucGFyZW50LCAwIC8qIE5vZGVDb2xvci5CbGFjayAqLyk7CiAgICAgICAgc2V0Tm9kZUNvbG9yKHcucmlnaHQsIDAgLyogTm9kZUNvbG9yLkJsYWNrICovKTsKICAgICAgICBsZWZ0Um90YXRlKFQsIHgucGFyZW50KTsKICAgICAgICB4ID0gVC5yb290OwogICAgICB9CiAgICB9IGVsc2UgewogICAgICB3ID0geC5wYXJlbnQubGVmdDsKICAgICAgaWYgKGdldE5vZGVDb2xvcih3KSA9PT0gMSAvKiBOb2RlQ29sb3IuUmVkICovKSB7CiAgICAgICAgc2V0Tm9kZUNvbG9yKHcsIDAgLyogTm9kZUNvbG9yLkJsYWNrICovKTsKICAgICAgICBzZXROb2RlQ29sb3IoeC5wYXJlbnQsIDEgLyogTm9kZUNvbG9yLlJlZCAqLyk7CiAgICAgICAgcmlnaHRSb3RhdGUoVCwgeC5wYXJlbnQpOwogICAgICAgIHcgPSB4LnBhcmVudC5sZWZ0OwogICAgICB9CiAgICAgIGlmIChnZXROb2RlQ29sb3Iody5sZWZ0KSA9PT0gMCAvKiBOb2RlQ29sb3IuQmxhY2sgKi8gJiYgZ2V0Tm9kZUNvbG9yKHcucmlnaHQpID09PSAwIC8qIE5vZGVDb2xvci5CbGFjayAqLykgewogICAgICAgIHNldE5vZGVDb2xvcih3LCAxIC8qIE5vZGVDb2xvci5SZWQgKi8pOwogICAgICAgIHggPSB4LnBhcmVudDsKICAgICAgfSBlbHNlIHsKICAgICAgICBpZiAoZ2V0Tm9kZUNvbG9yKHcubGVmdCkgPT09IDAgLyogTm9kZUNvbG9yLkJsYWNrICovKSB7CiAgICAgICAgICBzZXROb2RlQ29sb3Iody5yaWdodCwgMCAvKiBOb2RlQ29sb3IuQmxhY2sgKi8pOwogICAgICAgICAgc2V0Tm9kZUNvbG9yKHcsIDEgLyogTm9kZUNvbG9yLlJlZCAqLyk7CiAgICAgICAgICBsZWZ0Um90YXRlKFQsIHcpOwogICAgICAgICAgdyA9IHgucGFyZW50LmxlZnQ7CiAgICAgICAgfQogICAgICAgIHNldE5vZGVDb2xvcih3LCBnZXROb2RlQ29sb3IoeC5wYXJlbnQpKTsKICAgICAgICBzZXROb2RlQ29sb3IoeC5wYXJlbnQsIDAgLyogTm9kZUNvbG9yLkJsYWNrICovKTsKICAgICAgICBzZXROb2RlQ29sb3Iody5sZWZ0LCAwIC8qIE5vZGVDb2xvci5CbGFjayAqLyk7CiAgICAgICAgcmlnaHRSb3RhdGUoVCwgeC5wYXJlbnQpOwogICAgICAgIHggPSBULnJvb3Q7CiAgICAgIH0KICAgIH0KICB9CiAgc2V0Tm9kZUNvbG9yKHgsIDAgLyogTm9kZUNvbG9yLkJsYWNrICovKTsKICByZXNldFNlbnRpbmVsKCk7Cn0KZnVuY3Rpb24gbGVmdGVzdChub2RlKSB7CiAgd2hpbGUgKG5vZGUubGVmdCAhPT0gU0VOVElORUwpIHsKICAgIG5vZGUgPSBub2RlLmxlZnQ7CiAgfQogIHJldHVybiBub2RlOwp9CmZ1bmN0aW9uIHJlc2V0U2VudGluZWwoKSB7CiAgU0VOVElORUwucGFyZW50ID0gU0VOVElORUw7CiAgU0VOVElORUwuZGVsdGEgPSAwOyAvLyBvcHRpb25hbAogIFNFTlRJTkVMLnN0YXJ0ID0gMDsgLy8gb3B0aW9uYWwKICBTRU5USU5FTC5lbmQgPSAwOyAvLyBvcHRpb25hbAp9Ci8vI2VuZHJlZ2lvbgovLyNyZWdpb24gUm90YXRpb25zCmZ1bmN0aW9uIGxlZnRSb3RhdGUoVCwgeCkgewogIHZhciB5ID0geC5yaWdodDsgLy8gc2V0IHkuCiAgeS5kZWx0YSArPSB4LmRlbHRhOyAvLyB5J3MgZGVsdGEgaXMgbm8gbG9uZ2VyIGluZmx1ZW5jZWQgYnkgeCdzIGRlbHRhCiAgaWYgKHkuZGVsdGEgPCAtMTA3Mzc0MTgyNCAvKiBDb25zdGFudHMuTUlOX1NBRkVfREVMVEEgKi8gfHwgeS5kZWx0YSA+IDEwNzM3NDE4MjQgLyogQ29uc3RhbnRzLk1BWF9TQUZFX0RFTFRBICovKSB7CiAgICBULnJlcXVlc3ROb3JtYWxpemVEZWx0YSA9IHRydWU7CiAgfQogIHkuc3RhcnQgKz0geC5kZWx0YTsKICB5LmVuZCArPSB4LmRlbHRhOwogIHgucmlnaHQgPSB5LmxlZnQ7IC8vIHR1cm4geSdzIGxlZnQgc3VidHJlZSBpbnRvIHgncyByaWdodCBzdWJ0cmVlLgogIGlmICh5LmxlZnQgIT09IFNFTlRJTkVMKSB7CiAgICB5LmxlZnQucGFyZW50ID0geDsKICB9CiAgeS5wYXJlbnQgPSB4LnBhcmVudDsgLy8gbGluayB4J3MgcGFyZW50IHRvIHkuCiAgaWYgKHgucGFyZW50ID09PSBTRU5USU5FTCkgewogICAgVC5yb290ID0geTsKICB9IGVsc2UgaWYgKHggPT09IHgucGFyZW50LmxlZnQpIHsKICAgIHgucGFyZW50LmxlZnQgPSB5OwogIH0gZWxzZSB7CiAgICB4LnBhcmVudC5yaWdodCA9IHk7CiAgfQogIHkubGVmdCA9IHg7IC8vIHB1dCB4IG9uIHkncyBsZWZ0LgogIHgucGFyZW50ID0geTsKICByZWNvbXB1dGVNYXhFbmQoeCk7CiAgcmVjb21wdXRlTWF4RW5kKHkpOwp9CmZ1bmN0aW9uIHJpZ2h0Um90YXRlKFQsIHkpIHsKICB2YXIgeCA9IHkubGVmdDsKICB5LmRlbHRhIC09IHguZGVsdGE7CiAgaWYgKHkuZGVsdGEgPCAtMTA3Mzc0MTgyNCAvKiBDb25zdGFudHMuTUlOX1NBRkVfREVMVEEgKi8gfHwgeS5kZWx0YSA+IDEwNzM3NDE4MjQgLyogQ29uc3RhbnRzLk1BWF9TQUZFX0RFTFRBICovKSB7CiAgICBULnJlcXVlc3ROb3JtYWxpemVEZWx0YSA9IHRydWU7CiAgfQogIHkuc3RhcnQgLT0geC5kZWx0YTsKICB5LmVuZCAtPSB4LmRlbHRhOwogIHkubGVmdCA9IHgucmlnaHQ7CiAgaWYgKHgucmlnaHQgIT09IFNFTlRJTkVMKSB7CiAgICB4LnJpZ2h0LnBhcmVudCA9IHk7CiAgfQogIHgucGFyZW50ID0geS5wYXJlbnQ7CiAgaWYgKHkucGFyZW50ID09PSBTRU5USU5FTCkgewogICAgVC5yb290ID0geDsKICB9IGVsc2UgaWYgKHkgPT09IHkucGFyZW50LnJpZ2h0KSB7CiAgICB5LnBhcmVudC5yaWdodCA9IHg7CiAgfSBlbHNlIHsKICAgIHkucGFyZW50LmxlZnQgPSB4OwogIH0KICB4LnJpZ2h0ID0geTsKICB5LnBhcmVudCA9IHg7CiAgcmVjb21wdXRlTWF4RW5kKHkpOwogIHJlY29tcHV0ZU1heEVuZCh4KTsKfQovLyNlbmRyZWdpb24KLy8jcmVnaW9uIG1heCBlbmQgY29tcHV0YXRpb24KZnVuY3Rpb24gY29tcHV0ZU1heEVuZChub2RlKSB7CiAgdmFyIG1heEVuZCA9IG5vZGUuZW5kOwogIGlmIChub2RlLmxlZnQgIT09IFNFTlRJTkVMKSB7CiAgICB2YXIgbGVmdE1heEVuZCA9IG5vZGUubGVmdC5tYXhFbmQ7CiAgICBpZiAobGVmdE1heEVuZCA+IG1heEVuZCkgewogICAgICBtYXhFbmQgPSBsZWZ0TWF4RW5kOwogICAgfQogIH0KICBpZiAobm9kZS5yaWdodCAhPT0gU0VOVElORUwpIHsKICAgIHZhciByaWdodE1heEVuZCA9IG5vZGUucmlnaHQubWF4RW5kICsgbm9kZS5kZWx0YTsKICAgIGlmIChyaWdodE1heEVuZCA+IG1heEVuZCkgewogICAgICBtYXhFbmQgPSByaWdodE1heEVuZDsKICAgIH0KICB9CiAgcmV0dXJuIG1heEVuZDsKfQpleHBvcnQgZnVuY3Rpb24gcmVjb21wdXRlTWF4RW5kKG5vZGUpIHsKICBub2RlLm1heEVuZCA9IGNvbXB1dGVNYXhFbmQobm9kZSk7Cn0KZnVuY3Rpb24gcmVjb21wdXRlTWF4RW5kV2Fsa1RvUm9vdChub2RlKSB7CiAgd2hpbGUgKG5vZGUgIT09IFNFTlRJTkVMKSB7CiAgICB2YXIgbWF4RW5kID0gY29tcHV0ZU1heEVuZChub2RlKTsKICAgIGlmIChub2RlLm1heEVuZCA9PT0gbWF4RW5kKSB7CiAgICAgIC8vIG5vIG5lZWQgdG8gZ28gZnVydGhlcgogICAgICByZXR1cm47CiAgICB9CiAgICBub2RlLm1heEVuZCA9IG1heEVuZDsKICAgIG5vZGUgPSBub2RlLnBhcmVudDsKICB9Cn0KLy8jZW5kcmVnaW9uCi8vI3JlZ2lvbiB1dGlscwpleHBvcnQgZnVuY3Rpb24gaW50ZXJ2YWxDb21wYXJlKGFTdGFydCwgYUVuZCwgYlN0YXJ0LCBiRW5kKSB7CiAgaWYgKGFTdGFydCA9PT0gYlN0YXJ0KSB7CiAgICByZXR1cm4gYUVuZCAtIGJFbmQ7CiAgfQogIHJldHVybiBhU3RhcnQgLSBiU3RhcnQ7Cn0KLy8jZW5kcmVnaW9u"},{"version":3,"names":["getNodeColor","node","metadata","setNodeColor","color","getNodeIsVisited","setNodeIsVisited","value","getNodeIsForValidation","setNodeIsForValidation","getNodeStickiness","_setNodeStickiness","stickiness","getCollapseOnReplaceEdit","setCollapseOnReplaceEdit","IntervalNode","id","start","end","parent","left","right","delta","maxEnd","ownerId","options","cachedVersionId","cachedAbsoluteStart","cachedAbsoluteEnd","range","versionId","className","collapseOnReplaceEdit","absoluteStart","absoluteEnd","SENTINEL","IntervalTree","root","requestNormalizeDelta","filterOwnerId","filterOutValidation","intervalSearch","search","collectNodesFromOwner","collectNodesPostOrder","rbTreeInsert","_normalizeDeltaIfNecessary","rbTreeDelete","initialNode","nodeStart","nodeEnd","setCachedOffsets","offset","length","textLength","forceMoveMarkers","nodesOfInterest","searchForEditing","i","len","noOverlapReplace","nodeAcceptEdit","normalizeDelta","T","recomputeMaxEnd","adjustMarkerBeforeColumn","markerOffset","markerStickToPreviousCharacter","checkOffset","moveSemantics","nodeStickiness","startStickToPreviousCharacter","endStickToPreviousCharacter","deletingCnt","insertingCnt","commonLength","Math","min","startDone","endDone","deltaColumn","max","nodeMaxEnd","result","resultLen","editDelta","include","intervalStart","intervalEnd","newNode","treeInsert","recomputeMaxEndWalkToRoot","x","y","leftRotate","rightRotate","z","zAbsoluteStart","zAbsoluteEnd","cmp","intervalCompare","leftest","detach","resetSentinel","yWasRed","w","computeMaxEnd","leftMaxEnd","rightMaxEnd","aStart","aEnd","bStart","bEnd"],"sources":["/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/common/model/intervalTree.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport function getNodeColor(node) {\n    return ((node.metadata & 1 /* Constants.ColorMask */) >>> 0 /* Constants.ColorOffset */);\n}\nfunction setNodeColor(node, color) {\n    node.metadata = ((node.metadata & 254 /* Constants.ColorMaskInverse */) | (color << 0 /* Constants.ColorOffset */));\n}\nfunction getNodeIsVisited(node) {\n    return ((node.metadata & 2 /* Constants.IsVisitedMask */) >>> 1 /* Constants.IsVisitedOffset */) === 1;\n}\nfunction setNodeIsVisited(node, value) {\n    node.metadata = ((node.metadata & 253 /* Constants.IsVisitedMaskInverse */) | ((value ? 1 : 0) << 1 /* Constants.IsVisitedOffset */));\n}\nfunction getNodeIsForValidation(node) {\n    return ((node.metadata & 4 /* Constants.IsForValidationMask */) >>> 2 /* Constants.IsForValidationOffset */) === 1;\n}\nfunction setNodeIsForValidation(node, value) {\n    node.metadata = ((node.metadata & 251 /* Constants.IsForValidationMaskInverse */) | ((value ? 1 : 0) << 2 /* Constants.IsForValidationOffset */));\n}\nfunction getNodeStickiness(node) {\n    return ((node.metadata & 24 /* Constants.StickinessMask */) >>> 3 /* Constants.StickinessOffset */);\n}\nfunction _setNodeStickiness(node, stickiness) {\n    node.metadata = ((node.metadata & 231 /* Constants.StickinessMaskInverse */) | (stickiness << 3 /* Constants.StickinessOffset */));\n}\nfunction getCollapseOnReplaceEdit(node) {\n    return ((node.metadata & 32 /* Constants.CollapseOnReplaceEditMask */) >>> 5 /* Constants.CollapseOnReplaceEditOffset */) === 1;\n}\nfunction setCollapseOnReplaceEdit(node, value) {\n    node.metadata = ((node.metadata & 223 /* Constants.CollapseOnReplaceEditMaskInverse */) | ((value ? 1 : 0) << 5 /* Constants.CollapseOnReplaceEditOffset */));\n}\nexport class IntervalNode {\n    constructor(id, start, end) {\n        this.metadata = 0;\n        this.parent = this;\n        this.left = this;\n        this.right = this;\n        setNodeColor(this, 1 /* NodeColor.Red */);\n        this.start = start;\n        this.end = end;\n        // FORCE_OVERFLOWING_TEST: this.delta = start;\n        this.delta = 0;\n        this.maxEnd = end;\n        this.id = id;\n        this.ownerId = 0;\n        this.options = null;\n        setNodeIsForValidation(this, false);\n        _setNodeStickiness(this, 1 /* TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges */);\n        setCollapseOnReplaceEdit(this, false);\n        this.cachedVersionId = 0;\n        this.cachedAbsoluteStart = start;\n        this.cachedAbsoluteEnd = end;\n        this.range = null;\n        setNodeIsVisited(this, false);\n    }\n    reset(versionId, start, end, range) {\n        this.start = start;\n        this.end = end;\n        this.maxEnd = end;\n        this.cachedVersionId = versionId;\n        this.cachedAbsoluteStart = start;\n        this.cachedAbsoluteEnd = end;\n        this.range = range;\n    }\n    setOptions(options) {\n        this.options = options;\n        const className = this.options.className;\n        setNodeIsForValidation(this, (className === \"squiggly-error\" /* ClassName.EditorErrorDecoration */\n            || className === \"squiggly-warning\" /* ClassName.EditorWarningDecoration */\n            || className === \"squiggly-info\" /* ClassName.EditorInfoDecoration */));\n        _setNodeStickiness(this, this.options.stickiness);\n        setCollapseOnReplaceEdit(this, this.options.collapseOnReplaceEdit);\n    }\n    setCachedOffsets(absoluteStart, absoluteEnd, cachedVersionId) {\n        if (this.cachedVersionId !== cachedVersionId) {\n            this.range = null;\n        }\n        this.cachedVersionId = cachedVersionId;\n        this.cachedAbsoluteStart = absoluteStart;\n        this.cachedAbsoluteEnd = absoluteEnd;\n    }\n    detach() {\n        this.parent = null;\n        this.left = null;\n        this.right = null;\n    }\n}\nexport const SENTINEL = new IntervalNode(null, 0, 0);\nSENTINEL.parent = SENTINEL;\nSENTINEL.left = SENTINEL;\nSENTINEL.right = SENTINEL;\nsetNodeColor(SENTINEL, 0 /* NodeColor.Black */);\nexport class IntervalTree {\n    constructor() {\n        this.root = SENTINEL;\n        this.requestNormalizeDelta = false;\n    }\n    intervalSearch(start, end, filterOwnerId, filterOutValidation, cachedVersionId) {\n        if (this.root === SENTINEL) {\n            return [];\n        }\n        return intervalSearch(this, start, end, filterOwnerId, filterOutValidation, cachedVersionId);\n    }\n    search(filterOwnerId, filterOutValidation, cachedVersionId) {\n        if (this.root === SENTINEL) {\n            return [];\n        }\n        return search(this, filterOwnerId, filterOutValidation, cachedVersionId);\n    }\n    /**\n     * Will not set `cachedAbsoluteStart` nor `cachedAbsoluteEnd` on the returned nodes!\n     */\n    collectNodesFromOwner(ownerId) {\n        return collectNodesFromOwner(this, ownerId);\n    }\n    /**\n     * Will not set `cachedAbsoluteStart` nor `cachedAbsoluteEnd` on the returned nodes!\n     */\n    collectNodesPostOrder() {\n        return collectNodesPostOrder(this);\n    }\n    insert(node) {\n        rbTreeInsert(this, node);\n        this._normalizeDeltaIfNecessary();\n    }\n    delete(node) {\n        rbTreeDelete(this, node);\n        this._normalizeDeltaIfNecessary();\n    }\n    resolveNode(node, cachedVersionId) {\n        const initialNode = node;\n        let delta = 0;\n        while (node !== this.root) {\n            if (node === node.parent.right) {\n                delta += node.parent.delta;\n            }\n            node = node.parent;\n        }\n        const nodeStart = initialNode.start + delta;\n        const nodeEnd = initialNode.end + delta;\n        initialNode.setCachedOffsets(nodeStart, nodeEnd, cachedVersionId);\n    }\n    acceptReplace(offset, length, textLength, forceMoveMarkers) {\n        // Our strategy is to remove all directly impacted nodes, and then add them back to the tree.\n        // (1) collect all nodes that are intersecting this edit as nodes of interest\n        const nodesOfInterest = searchForEditing(this, offset, offset + length);\n        // (2) remove all nodes that are intersecting this edit\n        for (let i = 0, len = nodesOfInterest.length; i < len; i++) {\n            const node = nodesOfInterest[i];\n            rbTreeDelete(this, node);\n        }\n        this._normalizeDeltaIfNecessary();\n        // (3) edit all tree nodes except the nodes of interest\n        noOverlapReplace(this, offset, offset + length, textLength);\n        this._normalizeDeltaIfNecessary();\n        // (4) edit the nodes of interest and insert them back in the tree\n        for (let i = 0, len = nodesOfInterest.length; i < len; i++) {\n            const node = nodesOfInterest[i];\n            node.start = node.cachedAbsoluteStart;\n            node.end = node.cachedAbsoluteEnd;\n            nodeAcceptEdit(node, offset, (offset + length), textLength, forceMoveMarkers);\n            node.maxEnd = node.end;\n            rbTreeInsert(this, node);\n        }\n        this._normalizeDeltaIfNecessary();\n    }\n    _normalizeDeltaIfNecessary() {\n        if (!this.requestNormalizeDelta) {\n            return;\n        }\n        this.requestNormalizeDelta = false;\n        normalizeDelta(this);\n    }\n}\n//#region Delta Normalization\nfunction normalizeDelta(T) {\n    let node = T.root;\n    let delta = 0;\n    while (node !== SENTINEL) {\n        if (node.left !== SENTINEL && !getNodeIsVisited(node.left)) {\n            // go left\n            node = node.left;\n            continue;\n        }\n        if (node.right !== SENTINEL && !getNodeIsVisited(node.right)) {\n            // go right\n            delta += node.delta;\n            node = node.right;\n            continue;\n        }\n        // handle current node\n        node.start = delta + node.start;\n        node.end = delta + node.end;\n        node.delta = 0;\n        recomputeMaxEnd(node);\n        setNodeIsVisited(node, true);\n        // going up from this node\n        setNodeIsVisited(node.left, false);\n        setNodeIsVisited(node.right, false);\n        if (node === node.parent.right) {\n            delta -= node.parent.delta;\n        }\n        node = node.parent;\n    }\n    setNodeIsVisited(T.root, false);\n}\nfunction adjustMarkerBeforeColumn(markerOffset, markerStickToPreviousCharacter, checkOffset, moveSemantics) {\n    if (markerOffset < checkOffset) {\n        return true;\n    }\n    if (markerOffset > checkOffset) {\n        return false;\n    }\n    if (moveSemantics === 1 /* MarkerMoveSemantics.ForceMove */) {\n        return false;\n    }\n    if (moveSemantics === 2 /* MarkerMoveSemantics.ForceStay */) {\n        return true;\n    }\n    return markerStickToPreviousCharacter;\n}\n/**\n * This is a lot more complicated than strictly necessary to maintain the same behaviour\n * as when decorations were implemented using two markers.\n */\nexport function nodeAcceptEdit(node, start, end, textLength, forceMoveMarkers) {\n    const nodeStickiness = getNodeStickiness(node);\n    const startStickToPreviousCharacter = (nodeStickiness === 0 /* TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges */\n        || nodeStickiness === 2 /* TrackedRangeStickiness.GrowsOnlyWhenTypingBefore */);\n    const endStickToPreviousCharacter = (nodeStickiness === 1 /* TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges */\n        || nodeStickiness === 2 /* TrackedRangeStickiness.GrowsOnlyWhenTypingBefore */);\n    const deletingCnt = (end - start);\n    const insertingCnt = textLength;\n    const commonLength = Math.min(deletingCnt, insertingCnt);\n    const nodeStart = node.start;\n    let startDone = false;\n    const nodeEnd = node.end;\n    let endDone = false;\n    if (start <= nodeStart && nodeEnd <= end && getCollapseOnReplaceEdit(node)) {\n        // This edit encompasses the entire decoration range\n        // and the decoration has asked to become collapsed\n        node.start = start;\n        startDone = true;\n        node.end = start;\n        endDone = true;\n    }\n    {\n        const moveSemantics = forceMoveMarkers ? 1 /* MarkerMoveSemantics.ForceMove */ : (deletingCnt > 0 ? 2 /* MarkerMoveSemantics.ForceStay */ : 0 /* MarkerMoveSemantics.MarkerDefined */);\n        if (!startDone && adjustMarkerBeforeColumn(nodeStart, startStickToPreviousCharacter, start, moveSemantics)) {\n            startDone = true;\n        }\n        if (!endDone && adjustMarkerBeforeColumn(nodeEnd, endStickToPreviousCharacter, start, moveSemantics)) {\n            endDone = true;\n        }\n    }\n    if (commonLength > 0 && !forceMoveMarkers) {\n        const moveSemantics = (deletingCnt > insertingCnt ? 2 /* MarkerMoveSemantics.ForceStay */ : 0 /* MarkerMoveSemantics.MarkerDefined */);\n        if (!startDone && adjustMarkerBeforeColumn(nodeStart, startStickToPreviousCharacter, start + commonLength, moveSemantics)) {\n            startDone = true;\n        }\n        if (!endDone && adjustMarkerBeforeColumn(nodeEnd, endStickToPreviousCharacter, start + commonLength, moveSemantics)) {\n            endDone = true;\n        }\n    }\n    {\n        const moveSemantics = forceMoveMarkers ? 1 /* MarkerMoveSemantics.ForceMove */ : 0 /* MarkerMoveSemantics.MarkerDefined */;\n        if (!startDone && adjustMarkerBeforeColumn(nodeStart, startStickToPreviousCharacter, end, moveSemantics)) {\n            node.start = start + insertingCnt;\n            startDone = true;\n        }\n        if (!endDone && adjustMarkerBeforeColumn(nodeEnd, endStickToPreviousCharacter, end, moveSemantics)) {\n            node.end = start + insertingCnt;\n            endDone = true;\n        }\n    }\n    // Finish\n    const deltaColumn = (insertingCnt - deletingCnt);\n    if (!startDone) {\n        node.start = Math.max(0, nodeStart + deltaColumn);\n    }\n    if (!endDone) {\n        node.end = Math.max(0, nodeEnd + deltaColumn);\n    }\n    if (node.start > node.end) {\n        node.end = node.start;\n    }\n}\nfunction searchForEditing(T, start, end) {\n    // https://en.wikipedia.org/wiki/Interval_tree#Augmented_tree\n    // Now, it is known that two intervals A and B overlap only when both\n    // A.low <= B.high and A.high >= B.low. When searching the trees for\n    // nodes overlapping with a given interval, you can immediately skip:\n    //  a) all nodes to the right of nodes whose low value is past the end of the given interval.\n    //  b) all nodes that have their maximum 'high' value below the start of the given interval.\n    let node = T.root;\n    let delta = 0;\n    let nodeMaxEnd = 0;\n    let nodeStart = 0;\n    let nodeEnd = 0;\n    const result = [];\n    let resultLen = 0;\n    while (node !== SENTINEL) {\n        if (getNodeIsVisited(node)) {\n            // going up from this node\n            setNodeIsVisited(node.left, false);\n            setNodeIsVisited(node.right, false);\n            if (node === node.parent.right) {\n                delta -= node.parent.delta;\n            }\n            node = node.parent;\n            continue;\n        }\n        if (!getNodeIsVisited(node.left)) {\n            // first time seeing this node\n            nodeMaxEnd = delta + node.maxEnd;\n            if (nodeMaxEnd < start) {\n                // cover case b) from above\n                // there is no need to search this node or its children\n                setNodeIsVisited(node, true);\n                continue;\n            }\n            if (node.left !== SENTINEL) {\n                // go left\n                node = node.left;\n                continue;\n            }\n        }\n        // handle current node\n        nodeStart = delta + node.start;\n        if (nodeStart > end) {\n            // cover case a) from above\n            // there is no need to search this node or its right subtree\n            setNodeIsVisited(node, true);\n            continue;\n        }\n        nodeEnd = delta + node.end;\n        if (nodeEnd >= start) {\n            node.setCachedOffsets(nodeStart, nodeEnd, 0);\n            result[resultLen++] = node;\n        }\n        setNodeIsVisited(node, true);\n        if (node.right !== SENTINEL && !getNodeIsVisited(node.right)) {\n            // go right\n            delta += node.delta;\n            node = node.right;\n            continue;\n        }\n    }\n    setNodeIsVisited(T.root, false);\n    return result;\n}\nfunction noOverlapReplace(T, start, end, textLength) {\n    // https://en.wikipedia.org/wiki/Interval_tree#Augmented_tree\n    // Now, it is known that two intervals A and B overlap only when both\n    // A.low <= B.high and A.high >= B.low. When searching the trees for\n    // nodes overlapping with a given interval, you can immediately skip:\n    //  a) all nodes to the right of nodes whose low value is past the end of the given interval.\n    //  b) all nodes that have their maximum 'high' value below the start of the given interval.\n    let node = T.root;\n    let delta = 0;\n    let nodeMaxEnd = 0;\n    let nodeStart = 0;\n    const editDelta = (textLength - (end - start));\n    while (node !== SENTINEL) {\n        if (getNodeIsVisited(node)) {\n            // going up from this node\n            setNodeIsVisited(node.left, false);\n            setNodeIsVisited(node.right, false);\n            if (node === node.parent.right) {\n                delta -= node.parent.delta;\n            }\n            recomputeMaxEnd(node);\n            node = node.parent;\n            continue;\n        }\n        if (!getNodeIsVisited(node.left)) {\n            // first time seeing this node\n            nodeMaxEnd = delta + node.maxEnd;\n            if (nodeMaxEnd < start) {\n                // cover case b) from above\n                // there is no need to search this node or its children\n                setNodeIsVisited(node, true);\n                continue;\n            }\n            if (node.left !== SENTINEL) {\n                // go left\n                node = node.left;\n                continue;\n            }\n        }\n        // handle current node\n        nodeStart = delta + node.start;\n        if (nodeStart > end) {\n            node.start += editDelta;\n            node.end += editDelta;\n            node.delta += editDelta;\n            if (node.delta < -1073741824 /* Constants.MIN_SAFE_DELTA */ || node.delta > 1073741824 /* Constants.MAX_SAFE_DELTA */) {\n                T.requestNormalizeDelta = true;\n            }\n            // cover case a) from above\n            // there is no need to search this node or its right subtree\n            setNodeIsVisited(node, true);\n            continue;\n        }\n        setNodeIsVisited(node, true);\n        if (node.right !== SENTINEL && !getNodeIsVisited(node.right)) {\n            // go right\n            delta += node.delta;\n            node = node.right;\n            continue;\n        }\n    }\n    setNodeIsVisited(T.root, false);\n}\n//#endregion\n//#region Searching\nfunction collectNodesFromOwner(T, ownerId) {\n    let node = T.root;\n    const result = [];\n    let resultLen = 0;\n    while (node !== SENTINEL) {\n        if (getNodeIsVisited(node)) {\n            // going up from this node\n            setNodeIsVisited(node.left, false);\n            setNodeIsVisited(node.right, false);\n            node = node.parent;\n            continue;\n        }\n        if (node.left !== SENTINEL && !getNodeIsVisited(node.left)) {\n            // go left\n            node = node.left;\n            continue;\n        }\n        // handle current node\n        if (node.ownerId === ownerId) {\n            result[resultLen++] = node;\n        }\n        setNodeIsVisited(node, true);\n        if (node.right !== SENTINEL && !getNodeIsVisited(node.right)) {\n            // go right\n            node = node.right;\n            continue;\n        }\n    }\n    setNodeIsVisited(T.root, false);\n    return result;\n}\nfunction collectNodesPostOrder(T) {\n    let node = T.root;\n    const result = [];\n    let resultLen = 0;\n    while (node !== SENTINEL) {\n        if (getNodeIsVisited(node)) {\n            // going up from this node\n            setNodeIsVisited(node.left, false);\n            setNodeIsVisited(node.right, false);\n            node = node.parent;\n            continue;\n        }\n        if (node.left !== SENTINEL && !getNodeIsVisited(node.left)) {\n            // go left\n            node = node.left;\n            continue;\n        }\n        if (node.right !== SENTINEL && !getNodeIsVisited(node.right)) {\n            // go right\n            node = node.right;\n            continue;\n        }\n        // handle current node\n        result[resultLen++] = node;\n        setNodeIsVisited(node, true);\n    }\n    setNodeIsVisited(T.root, false);\n    return result;\n}\nfunction search(T, filterOwnerId, filterOutValidation, cachedVersionId) {\n    let node = T.root;\n    let delta = 0;\n    let nodeStart = 0;\n    let nodeEnd = 0;\n    const result = [];\n    let resultLen = 0;\n    while (node !== SENTINEL) {\n        if (getNodeIsVisited(node)) {\n            // going up from this node\n            setNodeIsVisited(node.left, false);\n            setNodeIsVisited(node.right, false);\n            if (node === node.parent.right) {\n                delta -= node.parent.delta;\n            }\n            node = node.parent;\n            continue;\n        }\n        if (node.left !== SENTINEL && !getNodeIsVisited(node.left)) {\n            // go left\n            node = node.left;\n            continue;\n        }\n        // handle current node\n        nodeStart = delta + node.start;\n        nodeEnd = delta + node.end;\n        node.setCachedOffsets(nodeStart, nodeEnd, cachedVersionId);\n        let include = true;\n        if (filterOwnerId && node.ownerId && node.ownerId !== filterOwnerId) {\n            include = false;\n        }\n        if (filterOutValidation && getNodeIsForValidation(node)) {\n            include = false;\n        }\n        if (include) {\n            result[resultLen++] = node;\n        }\n        setNodeIsVisited(node, true);\n        if (node.right !== SENTINEL && !getNodeIsVisited(node.right)) {\n            // go right\n            delta += node.delta;\n            node = node.right;\n            continue;\n        }\n    }\n    setNodeIsVisited(T.root, false);\n    return result;\n}\nfunction intervalSearch(T, intervalStart, intervalEnd, filterOwnerId, filterOutValidation, cachedVersionId) {\n    // https://en.wikipedia.org/wiki/Interval_tree#Augmented_tree\n    // Now, it is known that two intervals A and B overlap only when both\n    // A.low <= B.high and A.high >= B.low. When searching the trees for\n    // nodes overlapping with a given interval, you can immediately skip:\n    //  a) all nodes to the right of nodes whose low value is past the end of the given interval.\n    //  b) all nodes that have their maximum 'high' value below the start of the given interval.\n    let node = T.root;\n    let delta = 0;\n    let nodeMaxEnd = 0;\n    let nodeStart = 0;\n    let nodeEnd = 0;\n    const result = [];\n    let resultLen = 0;\n    while (node !== SENTINEL) {\n        if (getNodeIsVisited(node)) {\n            // going up from this node\n            setNodeIsVisited(node.left, false);\n            setNodeIsVisited(node.right, false);\n            if (node === node.parent.right) {\n                delta -= node.parent.delta;\n            }\n            node = node.parent;\n            continue;\n        }\n        if (!getNodeIsVisited(node.left)) {\n            // first time seeing this node\n            nodeMaxEnd = delta + node.maxEnd;\n            if (nodeMaxEnd < intervalStart) {\n                // cover case b) from above\n                // there is no need to search this node or its children\n                setNodeIsVisited(node, true);\n                continue;\n            }\n            if (node.left !== SENTINEL) {\n                // go left\n                node = node.left;\n                continue;\n            }\n        }\n        // handle current node\n        nodeStart = delta + node.start;\n        if (nodeStart > intervalEnd) {\n            // cover case a) from above\n            // there is no need to search this node or its right subtree\n            setNodeIsVisited(node, true);\n            continue;\n        }\n        nodeEnd = delta + node.end;\n        if (nodeEnd >= intervalStart) {\n            // There is overlap\n            node.setCachedOffsets(nodeStart, nodeEnd, cachedVersionId);\n            let include = true;\n            if (filterOwnerId && node.ownerId && node.ownerId !== filterOwnerId) {\n                include = false;\n            }\n            if (filterOutValidation && getNodeIsForValidation(node)) {\n                include = false;\n            }\n            if (include) {\n                result[resultLen++] = node;\n            }\n        }\n        setNodeIsVisited(node, true);\n        if (node.right !== SENTINEL && !getNodeIsVisited(node.right)) {\n            // go right\n            delta += node.delta;\n            node = node.right;\n            continue;\n        }\n    }\n    setNodeIsVisited(T.root, false);\n    return result;\n}\n//#endregion\n//#region Insertion\nfunction rbTreeInsert(T, newNode) {\n    if (T.root === SENTINEL) {\n        newNode.parent = SENTINEL;\n        newNode.left = SENTINEL;\n        newNode.right = SENTINEL;\n        setNodeColor(newNode, 0 /* NodeColor.Black */);\n        T.root = newNode;\n        return T.root;\n    }\n    treeInsert(T, newNode);\n    recomputeMaxEndWalkToRoot(newNode.parent);\n    // repair tree\n    let x = newNode;\n    while (x !== T.root && getNodeColor(x.parent) === 1 /* NodeColor.Red */) {\n        if (x.parent === x.parent.parent.left) {\n            const y = x.parent.parent.right;\n            if (getNodeColor(y) === 1 /* NodeColor.Red */) {\n                setNodeColor(x.parent, 0 /* NodeColor.Black */);\n                setNodeColor(y, 0 /* NodeColor.Black */);\n                setNodeColor(x.parent.parent, 1 /* NodeColor.Red */);\n                x = x.parent.parent;\n            }\n            else {\n                if (x === x.parent.right) {\n                    x = x.parent;\n                    leftRotate(T, x);\n                }\n                setNodeColor(x.parent, 0 /* NodeColor.Black */);\n                setNodeColor(x.parent.parent, 1 /* NodeColor.Red */);\n                rightRotate(T, x.parent.parent);\n            }\n        }\n        else {\n            const y = x.parent.parent.left;\n            if (getNodeColor(y) === 1 /* NodeColor.Red */) {\n                setNodeColor(x.parent, 0 /* NodeColor.Black */);\n                setNodeColor(y, 0 /* NodeColor.Black */);\n                setNodeColor(x.parent.parent, 1 /* NodeColor.Red */);\n                x = x.parent.parent;\n            }\n            else {\n                if (x === x.parent.left) {\n                    x = x.parent;\n                    rightRotate(T, x);\n                }\n                setNodeColor(x.parent, 0 /* NodeColor.Black */);\n                setNodeColor(x.parent.parent, 1 /* NodeColor.Red */);\n                leftRotate(T, x.parent.parent);\n            }\n        }\n    }\n    setNodeColor(T.root, 0 /* NodeColor.Black */);\n    return newNode;\n}\nfunction treeInsert(T, z) {\n    let delta = 0;\n    let x = T.root;\n    const zAbsoluteStart = z.start;\n    const zAbsoluteEnd = z.end;\n    while (true) {\n        const cmp = intervalCompare(zAbsoluteStart, zAbsoluteEnd, x.start + delta, x.end + delta);\n        if (cmp < 0) {\n            // this node should be inserted to the left\n            // => it is not affected by the node's delta\n            if (x.left === SENTINEL) {\n                z.start -= delta;\n                z.end -= delta;\n                z.maxEnd -= delta;\n                x.left = z;\n                break;\n            }\n            else {\n                x = x.left;\n            }\n        }\n        else {\n            // this node should be inserted to the right\n            // => it is not affected by the node's delta\n            if (x.right === SENTINEL) {\n                z.start -= (delta + x.delta);\n                z.end -= (delta + x.delta);\n                z.maxEnd -= (delta + x.delta);\n                x.right = z;\n                break;\n            }\n            else {\n                delta += x.delta;\n                x = x.right;\n            }\n        }\n    }\n    z.parent = x;\n    z.left = SENTINEL;\n    z.right = SENTINEL;\n    setNodeColor(z, 1 /* NodeColor.Red */);\n}\n//#endregion\n//#region Deletion\nfunction rbTreeDelete(T, z) {\n    let x;\n    let y;\n    // RB-DELETE except we don't swap z and y in case c)\n    // i.e. we always delete what's pointed at by z.\n    if (z.left === SENTINEL) {\n        x = z.right;\n        y = z;\n        // x's delta is no longer influenced by z's delta\n        x.delta += z.delta;\n        if (x.delta < -1073741824 /* Constants.MIN_SAFE_DELTA */ || x.delta > 1073741824 /* Constants.MAX_SAFE_DELTA */) {\n            T.requestNormalizeDelta = true;\n        }\n        x.start += z.delta;\n        x.end += z.delta;\n    }\n    else if (z.right === SENTINEL) {\n        x = z.left;\n        y = z;\n    }\n    else {\n        y = leftest(z.right);\n        x = y.right;\n        // y's delta is no longer influenced by z's delta,\n        // but we don't want to walk the entire right-hand-side subtree of x.\n        // we therefore maintain z's delta in y, and adjust only x\n        x.start += y.delta;\n        x.end += y.delta;\n        x.delta += y.delta;\n        if (x.delta < -1073741824 /* Constants.MIN_SAFE_DELTA */ || x.delta > 1073741824 /* Constants.MAX_SAFE_DELTA */) {\n            T.requestNormalizeDelta = true;\n        }\n        y.start += z.delta;\n        y.end += z.delta;\n        y.delta = z.delta;\n        if (y.delta < -1073741824 /* Constants.MIN_SAFE_DELTA */ || y.delta > 1073741824 /* Constants.MAX_SAFE_DELTA */) {\n            T.requestNormalizeDelta = true;\n        }\n    }\n    if (y === T.root) {\n        T.root = x;\n        setNodeColor(x, 0 /* NodeColor.Black */);\n        z.detach();\n        resetSentinel();\n        recomputeMaxEnd(x);\n        T.root.parent = SENTINEL;\n        return;\n    }\n    const yWasRed = (getNodeColor(y) === 1 /* NodeColor.Red */);\n    if (y === y.parent.left) {\n        y.parent.left = x;\n    }\n    else {\n        y.parent.right = x;\n    }\n    if (y === z) {\n        x.parent = y.parent;\n    }\n    else {\n        if (y.parent === z) {\n            x.parent = y;\n        }\n        else {\n            x.parent = y.parent;\n        }\n        y.left = z.left;\n        y.right = z.right;\n        y.parent = z.parent;\n        setNodeColor(y, getNodeColor(z));\n        if (z === T.root) {\n            T.root = y;\n        }\n        else {\n            if (z === z.parent.left) {\n                z.parent.left = y;\n            }\n            else {\n                z.parent.right = y;\n            }\n        }\n        if (y.left !== SENTINEL) {\n            y.left.parent = y;\n        }\n        if (y.right !== SENTINEL) {\n            y.right.parent = y;\n        }\n    }\n    z.detach();\n    if (yWasRed) {\n        recomputeMaxEndWalkToRoot(x.parent);\n        if (y !== z) {\n            recomputeMaxEndWalkToRoot(y);\n            recomputeMaxEndWalkToRoot(y.parent);\n        }\n        resetSentinel();\n        return;\n    }\n    recomputeMaxEndWalkToRoot(x);\n    recomputeMaxEndWalkToRoot(x.parent);\n    if (y !== z) {\n        recomputeMaxEndWalkToRoot(y);\n        recomputeMaxEndWalkToRoot(y.parent);\n    }\n    // RB-DELETE-FIXUP\n    let w;\n    while (x !== T.root && getNodeColor(x) === 0 /* NodeColor.Black */) {\n        if (x === x.parent.left) {\n            w = x.parent.right;\n            if (getNodeColor(w) === 1 /* NodeColor.Red */) {\n                setNodeColor(w, 0 /* NodeColor.Black */);\n                setNodeColor(x.parent, 1 /* NodeColor.Red */);\n                leftRotate(T, x.parent);\n                w = x.parent.right;\n            }\n            if (getNodeColor(w.left) === 0 /* NodeColor.Black */ && getNodeColor(w.right) === 0 /* NodeColor.Black */) {\n                setNodeColor(w, 1 /* NodeColor.Red */);\n                x = x.parent;\n            }\n            else {\n                if (getNodeColor(w.right) === 0 /* NodeColor.Black */) {\n                    setNodeColor(w.left, 0 /* NodeColor.Black */);\n                    setNodeColor(w, 1 /* NodeColor.Red */);\n                    rightRotate(T, w);\n                    w = x.parent.right;\n                }\n                setNodeColor(w, getNodeColor(x.parent));\n                setNodeColor(x.parent, 0 /* NodeColor.Black */);\n                setNodeColor(w.right, 0 /* NodeColor.Black */);\n                leftRotate(T, x.parent);\n                x = T.root;\n            }\n        }\n        else {\n            w = x.parent.left;\n            if (getNodeColor(w) === 1 /* NodeColor.Red */) {\n                setNodeColor(w, 0 /* NodeColor.Black */);\n                setNodeColor(x.parent, 1 /* NodeColor.Red */);\n                rightRotate(T, x.parent);\n                w = x.parent.left;\n            }\n            if (getNodeColor(w.left) === 0 /* NodeColor.Black */ && getNodeColor(w.right) === 0 /* NodeColor.Black */) {\n                setNodeColor(w, 1 /* NodeColor.Red */);\n                x = x.parent;\n            }\n            else {\n                if (getNodeColor(w.left) === 0 /* NodeColor.Black */) {\n                    setNodeColor(w.right, 0 /* NodeColor.Black */);\n                    setNodeColor(w, 1 /* NodeColor.Red */);\n                    leftRotate(T, w);\n                    w = x.parent.left;\n                }\n                setNodeColor(w, getNodeColor(x.parent));\n                setNodeColor(x.parent, 0 /* NodeColor.Black */);\n                setNodeColor(w.left, 0 /* NodeColor.Black */);\n                rightRotate(T, x.parent);\n                x = T.root;\n            }\n        }\n    }\n    setNodeColor(x, 0 /* NodeColor.Black */);\n    resetSentinel();\n}\nfunction leftest(node) {\n    while (node.left !== SENTINEL) {\n        node = node.left;\n    }\n    return node;\n}\nfunction resetSentinel() {\n    SENTINEL.parent = SENTINEL;\n    SENTINEL.delta = 0; // optional\n    SENTINEL.start = 0; // optional\n    SENTINEL.end = 0; // optional\n}\n//#endregion\n//#region Rotations\nfunction leftRotate(T, x) {\n    const y = x.right; // set y.\n    y.delta += x.delta; // y's delta is no longer influenced by x's delta\n    if (y.delta < -1073741824 /* Constants.MIN_SAFE_DELTA */ || y.delta > 1073741824 /* Constants.MAX_SAFE_DELTA */) {\n        T.requestNormalizeDelta = true;\n    }\n    y.start += x.delta;\n    y.end += x.delta;\n    x.right = y.left; // turn y's left subtree into x's right subtree.\n    if (y.left !== SENTINEL) {\n        y.left.parent = x;\n    }\n    y.parent = x.parent; // link x's parent to y.\n    if (x.parent === SENTINEL) {\n        T.root = y;\n    }\n    else if (x === x.parent.left) {\n        x.parent.left = y;\n    }\n    else {\n        x.parent.right = y;\n    }\n    y.left = x; // put x on y's left.\n    x.parent = y;\n    recomputeMaxEnd(x);\n    recomputeMaxEnd(y);\n}\nfunction rightRotate(T, y) {\n    const x = y.left;\n    y.delta -= x.delta;\n    if (y.delta < -1073741824 /* Constants.MIN_SAFE_DELTA */ || y.delta > 1073741824 /* Constants.MAX_SAFE_DELTA */) {\n        T.requestNormalizeDelta = true;\n    }\n    y.start -= x.delta;\n    y.end -= x.delta;\n    y.left = x.right;\n    if (x.right !== SENTINEL) {\n        x.right.parent = y;\n    }\n    x.parent = y.parent;\n    if (y.parent === SENTINEL) {\n        T.root = x;\n    }\n    else if (y === y.parent.right) {\n        y.parent.right = x;\n    }\n    else {\n        y.parent.left = x;\n    }\n    x.right = y;\n    y.parent = x;\n    recomputeMaxEnd(y);\n    recomputeMaxEnd(x);\n}\n//#endregion\n//#region max end computation\nfunction computeMaxEnd(node) {\n    let maxEnd = node.end;\n    if (node.left !== SENTINEL) {\n        const leftMaxEnd = node.left.maxEnd;\n        if (leftMaxEnd > maxEnd) {\n            maxEnd = leftMaxEnd;\n        }\n    }\n    if (node.right !== SENTINEL) {\n        const rightMaxEnd = node.right.maxEnd + node.delta;\n        if (rightMaxEnd > maxEnd) {\n            maxEnd = rightMaxEnd;\n        }\n    }\n    return maxEnd;\n}\nexport function recomputeMaxEnd(node) {\n    node.maxEnd = computeMaxEnd(node);\n}\nfunction recomputeMaxEndWalkToRoot(node) {\n    while (node !== SENTINEL) {\n        const maxEnd = computeMaxEnd(node);\n        if (node.maxEnd === maxEnd) {\n            // no need to go further\n            return;\n        }\n        node.maxEnd = maxEnd;\n        node = node.parent;\n    }\n}\n//#endregion\n//#region utils\nexport function intervalCompare(aStart, aEnd, bStart, bEnd) {\n    if (aStart === bStart) {\n        return aEnd - bEnd;\n    }\n    return aStart - bStart;\n}\n//#endregion\n"],"mappings":"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"}]}