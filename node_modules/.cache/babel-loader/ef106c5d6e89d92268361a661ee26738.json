{"remainingRequest":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js!/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/platform/undoRedo/common/undoRedoService.js","dependencies":[{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/platform/undoRedo/common/undoRedoService.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/babel.config.js","mtime":1668271197000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js","mtime":456789000000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","onUnexpectedError","Disposable","isDisposable","Schemas","Severity","nls","IDialogService","registerSingleton","INotificationService","IUndoRedoService","ResourceEditStackSnapshot","UndoRedoGroup","UndoRedoSource","DEBUG","getResourceLabel","resource","scheme","file","fsPath","path","stackElementCounter","ResourceStackElement","actual","resourceLabel","strResource","groupId","groupOrder","sourceId","sourceOrder","id","type","label","confirmBeforeUndo","resourceLabels","strResources","isValid","constructor","name","ResourceReasonPair","reason","RemovedResources","elements","Map","externalRemoval","noParallelUniverses","element","dest","push","messages","localize","comment","join","size","has","set","delete","WorkspaceStackElement","removedResources","invalidatedResources","split","ResourceEditStack","_past","_future","locked","versionId","removeResource","setValid","filter","_setElementValidFlag","futureElement","len","snapshot","snapshotLength","isOK","snapshotIndex","removePastAfter","removeFutureBefore","slice","past","future","toRemove","individualMap","j","get","splice","pop","EditStackSnapshot","editStacks","_versionIds","missingEditStack","UndoRedoService","_dialogService","_notificationService","_editStacks","_uriComparisonKeyComputers","uriComparisonKeyComputer","getComparisonKey","toString","console","log","str","group","None","source","getUriComparisonKey","_pushElement","nextOrder","seen","Set","resources","add","_print","editStack","pushElement","hasFutureElements","closestPastElement","getClosestPastElement","ignoreResources","individualArr","_element","splitPastWorkspaceElement","splitFutureWorkspaceElement","dispose","setElementsValidFlag","createSnapshot","restoreSnapshot","hasPastElements","getElements","matchedElement","matchedStrResource","candidate","resourceOrSource","_findClosestUndoElementWithSource","err","removeElements","error","editStackSnapshot","Error","invoke","cleanup","continuation","releaseLocks","_acquireLocks","_onError","prepareUndoRedo","callback","disposable","affectedEditStacks","message","canSplit","_splitPastWorkspaceElement","warn","WorkspaceVerificationError","_undo","checkInvalidatedResources","_tryToSplitAndUndo","createMessage","cannotUndoDueToResources","cannotLockDueToResources","undoConfirmed","_getAffectedEditStacks","verificationError","_checkWorkspaceUndo","returnValue","_confirmAndExecuteWorkspaceUndo","pastElement","secondPastElement","getSecondClosestPastElement","_isPartOfUndoGroup","show","Info","cancelId","choice","verificationError1","_invokeWorkspacePrepare","verificationError2","moveBackward","_safeInvokeWithLocks","undo","_continueUndoInGroup","flushAllElements","_invokeResourcePrepare","_findClosestUndoElementInGroup","undefined","shouldPromptForConfirmation","_confirmAndContinueUndo","_workspaceUndo","_resourceUndo","getClosestFutureElement","_findClosestRedoElementWithSource","_splitFutureWorkspaceElement","_redo","_tryToSplitAndRedo","cannotRedoDueToResources","_checkWorkspaceRedo","_executeWorkspaceRedo","moveForward","redo","_continueRedoInGroup","_findClosestRedoElementInGroup","_workspaceRedo","_resourceRedo"],"sources":["/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/platform/undoRedo/common/undoRedoService.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { onUnexpectedError } from '../../../base/common/errors.js';\nimport { Disposable, isDisposable } from '../../../base/common/lifecycle.js';\nimport { Schemas } from '../../../base/common/network.js';\nimport Severity from '../../../base/common/severity.js';\nimport * as nls from '../../../nls.js';\nimport { IDialogService } from '../../dialogs/common/dialogs.js';\nimport { registerSingleton } from '../../instantiation/common/extensions.js';\nimport { INotificationService } from '../../notification/common/notification.js';\nimport { IUndoRedoService, ResourceEditStackSnapshot, UndoRedoGroup, UndoRedoSource } from './undoRedo.js';\nconst DEBUG = false;\nfunction getResourceLabel(resource) {\n    return resource.scheme === Schemas.file ? resource.fsPath : resource.path;\n}\nlet stackElementCounter = 0;\nclass ResourceStackElement {\n    constructor(actual, resourceLabel, strResource, groupId, groupOrder, sourceId, sourceOrder) {\n        this.id = (++stackElementCounter);\n        this.type = 0 /* UndoRedoElementType.Resource */;\n        this.actual = actual;\n        this.label = actual.label;\n        this.confirmBeforeUndo = actual.confirmBeforeUndo || false;\n        this.resourceLabel = resourceLabel;\n        this.strResource = strResource;\n        this.resourceLabels = [this.resourceLabel];\n        this.strResources = [this.strResource];\n        this.groupId = groupId;\n        this.groupOrder = groupOrder;\n        this.sourceId = sourceId;\n        this.sourceOrder = sourceOrder;\n        this.isValid = true;\n    }\n    setValid(isValid) {\n        this.isValid = isValid;\n    }\n    toString() {\n        return `[id:${this.id}] [group:${this.groupId}] [${this.isValid ? '  VALID' : 'INVALID'}] ${this.actual.constructor.name} - ${this.actual}`;\n    }\n}\nclass ResourceReasonPair {\n    constructor(resourceLabel, reason) {\n        this.resourceLabel = resourceLabel;\n        this.reason = reason;\n    }\n}\nclass RemovedResources {\n    constructor() {\n        this.elements = new Map();\n    }\n    createMessage() {\n        const externalRemoval = [];\n        const noParallelUniverses = [];\n        for (const [, element] of this.elements) {\n            const dest = (element.reason === 0 /* RemovedResourceReason.ExternalRemoval */\n                ? externalRemoval\n                : noParallelUniverses);\n            dest.push(element.resourceLabel);\n        }\n        const messages = [];\n        if (externalRemoval.length > 0) {\n            messages.push(nls.localize({ key: 'externalRemoval', comment: ['{0} is a list of filenames'] }, \"The following files have been closed and modified on disk: {0}.\", externalRemoval.join(', ')));\n        }\n        if (noParallelUniverses.length > 0) {\n            messages.push(nls.localize({ key: 'noParallelUniverses', comment: ['{0} is a list of filenames'] }, \"The following files have been modified in an incompatible way: {0}.\", noParallelUniverses.join(', ')));\n        }\n        return messages.join('\\n');\n    }\n    get size() {\n        return this.elements.size;\n    }\n    has(strResource) {\n        return this.elements.has(strResource);\n    }\n    set(strResource, value) {\n        this.elements.set(strResource, value);\n    }\n    delete(strResource) {\n        return this.elements.delete(strResource);\n    }\n}\nclass WorkspaceStackElement {\n    constructor(actual, resourceLabels, strResources, groupId, groupOrder, sourceId, sourceOrder) {\n        this.id = (++stackElementCounter);\n        this.type = 1 /* UndoRedoElementType.Workspace */;\n        this.actual = actual;\n        this.label = actual.label;\n        this.confirmBeforeUndo = actual.confirmBeforeUndo || false;\n        this.resourceLabels = resourceLabels;\n        this.strResources = strResources;\n        this.groupId = groupId;\n        this.groupOrder = groupOrder;\n        this.sourceId = sourceId;\n        this.sourceOrder = sourceOrder;\n        this.removedResources = null;\n        this.invalidatedResources = null;\n    }\n    canSplit() {\n        return (typeof this.actual.split === 'function');\n    }\n    removeResource(resourceLabel, strResource, reason) {\n        if (!this.removedResources) {\n            this.removedResources = new RemovedResources();\n        }\n        if (!this.removedResources.has(strResource)) {\n            this.removedResources.set(strResource, new ResourceReasonPair(resourceLabel, reason));\n        }\n    }\n    setValid(resourceLabel, strResource, isValid) {\n        if (isValid) {\n            if (this.invalidatedResources) {\n                this.invalidatedResources.delete(strResource);\n                if (this.invalidatedResources.size === 0) {\n                    this.invalidatedResources = null;\n                }\n            }\n        }\n        else {\n            if (!this.invalidatedResources) {\n                this.invalidatedResources = new RemovedResources();\n            }\n            if (!this.invalidatedResources.has(strResource)) {\n                this.invalidatedResources.set(strResource, new ResourceReasonPair(resourceLabel, 0 /* RemovedResourceReason.ExternalRemoval */));\n            }\n        }\n    }\n    toString() {\n        return `[id:${this.id}] [group:${this.groupId}] [${this.invalidatedResources ? 'INVALID' : '  VALID'}] ${this.actual.constructor.name} - ${this.actual}`;\n    }\n}\nclass ResourceEditStack {\n    constructor(resourceLabel, strResource) {\n        this.resourceLabel = resourceLabel;\n        this.strResource = strResource;\n        this._past = [];\n        this._future = [];\n        this.locked = false;\n        this.versionId = 1;\n    }\n    dispose() {\n        for (const element of this._past) {\n            if (element.type === 1 /* UndoRedoElementType.Workspace */) {\n                element.removeResource(this.resourceLabel, this.strResource, 0 /* RemovedResourceReason.ExternalRemoval */);\n            }\n        }\n        for (const element of this._future) {\n            if (element.type === 1 /* UndoRedoElementType.Workspace */) {\n                element.removeResource(this.resourceLabel, this.strResource, 0 /* RemovedResourceReason.ExternalRemoval */);\n            }\n        }\n        this.versionId++;\n    }\n    toString() {\n        const result = [];\n        result.push(`* ${this.strResource}:`);\n        for (let i = 0; i < this._past.length; i++) {\n            result.push(`   * [UNDO] ${this._past[i]}`);\n        }\n        for (let i = this._future.length - 1; i >= 0; i--) {\n            result.push(`   * [REDO] ${this._future[i]}`);\n        }\n        return result.join('\\n');\n    }\n    flushAllElements() {\n        this._past = [];\n        this._future = [];\n        this.versionId++;\n    }\n    _setElementValidFlag(element, isValid) {\n        if (element.type === 1 /* UndoRedoElementType.Workspace */) {\n            element.setValid(this.resourceLabel, this.strResource, isValid);\n        }\n        else {\n            element.setValid(isValid);\n        }\n    }\n    setElementsValidFlag(isValid, filter) {\n        for (const element of this._past) {\n            if (filter(element.actual)) {\n                this._setElementValidFlag(element, isValid);\n            }\n        }\n        for (const element of this._future) {\n            if (filter(element.actual)) {\n                this._setElementValidFlag(element, isValid);\n            }\n        }\n    }\n    pushElement(element) {\n        // remove the future\n        for (const futureElement of this._future) {\n            if (futureElement.type === 1 /* UndoRedoElementType.Workspace */) {\n                futureElement.removeResource(this.resourceLabel, this.strResource, 1 /* RemovedResourceReason.NoParallelUniverses */);\n            }\n        }\n        this._future = [];\n        this._past.push(element);\n        this.versionId++;\n    }\n    createSnapshot(resource) {\n        const elements = [];\n        for (let i = 0, len = this._past.length; i < len; i++) {\n            elements.push(this._past[i].id);\n        }\n        for (let i = this._future.length - 1; i >= 0; i--) {\n            elements.push(this._future[i].id);\n        }\n        return new ResourceEditStackSnapshot(resource, elements);\n    }\n    restoreSnapshot(snapshot) {\n        const snapshotLength = snapshot.elements.length;\n        let isOK = true;\n        let snapshotIndex = 0;\n        let removePastAfter = -1;\n        for (let i = 0, len = this._past.length; i < len; i++, snapshotIndex++) {\n            const element = this._past[i];\n            if (isOK && (snapshotIndex >= snapshotLength || element.id !== snapshot.elements[snapshotIndex])) {\n                isOK = false;\n                removePastAfter = 0;\n            }\n            if (!isOK && element.type === 1 /* UndoRedoElementType.Workspace */) {\n                element.removeResource(this.resourceLabel, this.strResource, 0 /* RemovedResourceReason.ExternalRemoval */);\n            }\n        }\n        let removeFutureBefore = -1;\n        for (let i = this._future.length - 1; i >= 0; i--, snapshotIndex++) {\n            const element = this._future[i];\n            if (isOK && (snapshotIndex >= snapshotLength || element.id !== snapshot.elements[snapshotIndex])) {\n                isOK = false;\n                removeFutureBefore = i;\n            }\n            if (!isOK && element.type === 1 /* UndoRedoElementType.Workspace */) {\n                element.removeResource(this.resourceLabel, this.strResource, 0 /* RemovedResourceReason.ExternalRemoval */);\n            }\n        }\n        if (removePastAfter !== -1) {\n            this._past = this._past.slice(0, removePastAfter);\n        }\n        if (removeFutureBefore !== -1) {\n            this._future = this._future.slice(removeFutureBefore + 1);\n        }\n        this.versionId++;\n    }\n    getElements() {\n        const past = [];\n        const future = [];\n        for (const element of this._past) {\n            past.push(element.actual);\n        }\n        for (const element of this._future) {\n            future.push(element.actual);\n        }\n        return { past, future };\n    }\n    getClosestPastElement() {\n        if (this._past.length === 0) {\n            return null;\n        }\n        return this._past[this._past.length - 1];\n    }\n    getSecondClosestPastElement() {\n        if (this._past.length < 2) {\n            return null;\n        }\n        return this._past[this._past.length - 2];\n    }\n    getClosestFutureElement() {\n        if (this._future.length === 0) {\n            return null;\n        }\n        return this._future[this._future.length - 1];\n    }\n    hasPastElements() {\n        return (this._past.length > 0);\n    }\n    hasFutureElements() {\n        return (this._future.length > 0);\n    }\n    splitPastWorkspaceElement(toRemove, individualMap) {\n        for (let j = this._past.length - 1; j >= 0; j--) {\n            if (this._past[j] === toRemove) {\n                if (individualMap.has(this.strResource)) {\n                    // gets replaced\n                    this._past[j] = individualMap.get(this.strResource);\n                }\n                else {\n                    // gets deleted\n                    this._past.splice(j, 1);\n                }\n                break;\n            }\n        }\n        this.versionId++;\n    }\n    splitFutureWorkspaceElement(toRemove, individualMap) {\n        for (let j = this._future.length - 1; j >= 0; j--) {\n            if (this._future[j] === toRemove) {\n                if (individualMap.has(this.strResource)) {\n                    // gets replaced\n                    this._future[j] = individualMap.get(this.strResource);\n                }\n                else {\n                    // gets deleted\n                    this._future.splice(j, 1);\n                }\n                break;\n            }\n        }\n        this.versionId++;\n    }\n    moveBackward(element) {\n        this._past.pop();\n        this._future.push(element);\n        this.versionId++;\n    }\n    moveForward(element) {\n        this._future.pop();\n        this._past.push(element);\n        this.versionId++;\n    }\n}\nclass EditStackSnapshot {\n    constructor(editStacks) {\n        this.editStacks = editStacks;\n        this._versionIds = [];\n        for (let i = 0, len = this.editStacks.length; i < len; i++) {\n            this._versionIds[i] = this.editStacks[i].versionId;\n        }\n    }\n    isValid() {\n        for (let i = 0, len = this.editStacks.length; i < len; i++) {\n            if (this._versionIds[i] !== this.editStacks[i].versionId) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\nconst missingEditStack = new ResourceEditStack('', '');\nmissingEditStack.locked = true;\nlet UndoRedoService = class UndoRedoService {\n    constructor(_dialogService, _notificationService) {\n        this._dialogService = _dialogService;\n        this._notificationService = _notificationService;\n        this._editStacks = new Map();\n        this._uriComparisonKeyComputers = [];\n    }\n    getUriComparisonKey(resource) {\n        for (const uriComparisonKeyComputer of this._uriComparisonKeyComputers) {\n            if (uriComparisonKeyComputer[0] === resource.scheme) {\n                return uriComparisonKeyComputer[1].getComparisonKey(resource);\n            }\n        }\n        return resource.toString();\n    }\n    _print(label) {\n        console.log(`------------------------------------`);\n        console.log(`AFTER ${label}: `);\n        const str = [];\n        for (const element of this._editStacks) {\n            str.push(element[1].toString());\n        }\n        console.log(str.join('\\n'));\n    }\n    pushElement(element, group = UndoRedoGroup.None, source = UndoRedoSource.None) {\n        if (element.type === 0 /* UndoRedoElementType.Resource */) {\n            const resourceLabel = getResourceLabel(element.resource);\n            const strResource = this.getUriComparisonKey(element.resource);\n            this._pushElement(new ResourceStackElement(element, resourceLabel, strResource, group.id, group.nextOrder(), source.id, source.nextOrder()));\n        }\n        else {\n            const seen = new Set();\n            const resourceLabels = [];\n            const strResources = [];\n            for (const resource of element.resources) {\n                const resourceLabel = getResourceLabel(resource);\n                const strResource = this.getUriComparisonKey(resource);\n                if (seen.has(strResource)) {\n                    continue;\n                }\n                seen.add(strResource);\n                resourceLabels.push(resourceLabel);\n                strResources.push(strResource);\n            }\n            if (resourceLabels.length === 1) {\n                this._pushElement(new ResourceStackElement(element, resourceLabels[0], strResources[0], group.id, group.nextOrder(), source.id, source.nextOrder()));\n            }\n            else {\n                this._pushElement(new WorkspaceStackElement(element, resourceLabels, strResources, group.id, group.nextOrder(), source.id, source.nextOrder()));\n            }\n        }\n        if (DEBUG) {\n            this._print('pushElement');\n        }\n    }\n    _pushElement(element) {\n        for (let i = 0, len = element.strResources.length; i < len; i++) {\n            const resourceLabel = element.resourceLabels[i];\n            const strResource = element.strResources[i];\n            let editStack;\n            if (this._editStacks.has(strResource)) {\n                editStack = this._editStacks.get(strResource);\n            }\n            else {\n                editStack = new ResourceEditStack(resourceLabel, strResource);\n                this._editStacks.set(strResource, editStack);\n            }\n            editStack.pushElement(element);\n        }\n    }\n    getLastElement(resource) {\n        const strResource = this.getUriComparisonKey(resource);\n        if (this._editStacks.has(strResource)) {\n            const editStack = this._editStacks.get(strResource);\n            if (editStack.hasFutureElements()) {\n                return null;\n            }\n            const closestPastElement = editStack.getClosestPastElement();\n            return closestPastElement ? closestPastElement.actual : null;\n        }\n        return null;\n    }\n    _splitPastWorkspaceElement(toRemove, ignoreResources) {\n        const individualArr = toRemove.actual.split();\n        const individualMap = new Map();\n        for (const _element of individualArr) {\n            const resourceLabel = getResourceLabel(_element.resource);\n            const strResource = this.getUriComparisonKey(_element.resource);\n            const element = new ResourceStackElement(_element, resourceLabel, strResource, 0, 0, 0, 0);\n            individualMap.set(element.strResource, element);\n        }\n        for (const strResource of toRemove.strResources) {\n            if (ignoreResources && ignoreResources.has(strResource)) {\n                continue;\n            }\n            const editStack = this._editStacks.get(strResource);\n            editStack.splitPastWorkspaceElement(toRemove, individualMap);\n        }\n    }\n    _splitFutureWorkspaceElement(toRemove, ignoreResources) {\n        const individualArr = toRemove.actual.split();\n        const individualMap = new Map();\n        for (const _element of individualArr) {\n            const resourceLabel = getResourceLabel(_element.resource);\n            const strResource = this.getUriComparisonKey(_element.resource);\n            const element = new ResourceStackElement(_element, resourceLabel, strResource, 0, 0, 0, 0);\n            individualMap.set(element.strResource, element);\n        }\n        for (const strResource of toRemove.strResources) {\n            if (ignoreResources && ignoreResources.has(strResource)) {\n                continue;\n            }\n            const editStack = this._editStacks.get(strResource);\n            editStack.splitFutureWorkspaceElement(toRemove, individualMap);\n        }\n    }\n    removeElements(resource) {\n        const strResource = typeof resource === 'string' ? resource : this.getUriComparisonKey(resource);\n        if (this._editStacks.has(strResource)) {\n            const editStack = this._editStacks.get(strResource);\n            editStack.dispose();\n            this._editStacks.delete(strResource);\n        }\n        if (DEBUG) {\n            this._print('removeElements');\n        }\n    }\n    setElementsValidFlag(resource, isValid, filter) {\n        const strResource = this.getUriComparisonKey(resource);\n        if (this._editStacks.has(strResource)) {\n            const editStack = this._editStacks.get(strResource);\n            editStack.setElementsValidFlag(isValid, filter);\n        }\n        if (DEBUG) {\n            this._print('setElementsValidFlag');\n        }\n    }\n    createSnapshot(resource) {\n        const strResource = this.getUriComparisonKey(resource);\n        if (this._editStacks.has(strResource)) {\n            const editStack = this._editStacks.get(strResource);\n            return editStack.createSnapshot(resource);\n        }\n        return new ResourceEditStackSnapshot(resource, []);\n    }\n    restoreSnapshot(snapshot) {\n        const strResource = this.getUriComparisonKey(snapshot.resource);\n        if (this._editStacks.has(strResource)) {\n            const editStack = this._editStacks.get(strResource);\n            editStack.restoreSnapshot(snapshot);\n            if (!editStack.hasPastElements() && !editStack.hasFutureElements()) {\n                // the edit stack is now empty, just remove it entirely\n                editStack.dispose();\n                this._editStacks.delete(strResource);\n            }\n        }\n        if (DEBUG) {\n            this._print('restoreSnapshot');\n        }\n    }\n    getElements(resource) {\n        const strResource = this.getUriComparisonKey(resource);\n        if (this._editStacks.has(strResource)) {\n            const editStack = this._editStacks.get(strResource);\n            return editStack.getElements();\n        }\n        return { past: [], future: [] };\n    }\n    _findClosestUndoElementWithSource(sourceId) {\n        if (!sourceId) {\n            return [null, null];\n        }\n        // find an element with the sourceId and with the highest sourceOrder ready to be undone\n        let matchedElement = null;\n        let matchedStrResource = null;\n        for (const [strResource, editStack] of this._editStacks) {\n            const candidate = editStack.getClosestPastElement();\n            if (!candidate) {\n                continue;\n            }\n            if (candidate.sourceId === sourceId) {\n                if (!matchedElement || candidate.sourceOrder > matchedElement.sourceOrder) {\n                    matchedElement = candidate;\n                    matchedStrResource = strResource;\n                }\n            }\n        }\n        return [matchedElement, matchedStrResource];\n    }\n    canUndo(resourceOrSource) {\n        if (resourceOrSource instanceof UndoRedoSource) {\n            const [, matchedStrResource] = this._findClosestUndoElementWithSource(resourceOrSource.id);\n            return matchedStrResource ? true : false;\n        }\n        const strResource = this.getUriComparisonKey(resourceOrSource);\n        if (this._editStacks.has(strResource)) {\n            const editStack = this._editStacks.get(strResource);\n            return editStack.hasPastElements();\n        }\n        return false;\n    }\n    _onError(err, element) {\n        onUnexpectedError(err);\n        // An error occurred while undoing or redoing => drop the undo/redo stack for all affected resources\n        for (const strResource of element.strResources) {\n            this.removeElements(strResource);\n        }\n        this._notificationService.error(err);\n    }\n    _acquireLocks(editStackSnapshot) {\n        // first, check if all locks can be acquired\n        for (const editStack of editStackSnapshot.editStacks) {\n            if (editStack.locked) {\n                throw new Error('Cannot acquire edit stack lock');\n            }\n        }\n        // can acquire all locks\n        for (const editStack of editStackSnapshot.editStacks) {\n            editStack.locked = true;\n        }\n        return () => {\n            // release all locks\n            for (const editStack of editStackSnapshot.editStacks) {\n                editStack.locked = false;\n            }\n        };\n    }\n    _safeInvokeWithLocks(element, invoke, editStackSnapshot, cleanup, continuation) {\n        const releaseLocks = this._acquireLocks(editStackSnapshot);\n        let result;\n        try {\n            result = invoke();\n        }\n        catch (err) {\n            releaseLocks();\n            cleanup.dispose();\n            return this._onError(err, element);\n        }\n        if (result) {\n            // result is Promise<void>\n            return result.then(() => {\n                releaseLocks();\n                cleanup.dispose();\n                return continuation();\n            }, (err) => {\n                releaseLocks();\n                cleanup.dispose();\n                return this._onError(err, element);\n            });\n        }\n        else {\n            // result is void\n            releaseLocks();\n            cleanup.dispose();\n            return continuation();\n        }\n    }\n    _invokeWorkspacePrepare(element) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (typeof element.actual.prepareUndoRedo === 'undefined') {\n                return Disposable.None;\n            }\n            const result = element.actual.prepareUndoRedo();\n            if (typeof result === 'undefined') {\n                return Disposable.None;\n            }\n            return result;\n        });\n    }\n    _invokeResourcePrepare(element, callback) {\n        if (element.actual.type !== 1 /* UndoRedoElementType.Workspace */ || typeof element.actual.prepareUndoRedo === 'undefined') {\n            // no preparation needed\n            return callback(Disposable.None);\n        }\n        const r = element.actual.prepareUndoRedo();\n        if (!r) {\n            // nothing to clean up\n            return callback(Disposable.None);\n        }\n        if (isDisposable(r)) {\n            return callback(r);\n        }\n        return r.then((disposable) => {\n            return callback(disposable);\n        });\n    }\n    _getAffectedEditStacks(element) {\n        const affectedEditStacks = [];\n        for (const strResource of element.strResources) {\n            affectedEditStacks.push(this._editStacks.get(strResource) || missingEditStack);\n        }\n        return new EditStackSnapshot(affectedEditStacks);\n    }\n    _tryToSplitAndUndo(strResource, element, ignoreResources, message) {\n        if (element.canSplit()) {\n            this._splitPastWorkspaceElement(element, ignoreResources);\n            this._notificationService.warn(message);\n            return new WorkspaceVerificationError(this._undo(strResource, 0, true));\n        }\n        else {\n            // Cannot safely split this workspace element => flush all undo/redo stacks\n            for (const strResource of element.strResources) {\n                this.removeElements(strResource);\n            }\n            this._notificationService.warn(message);\n            return new WorkspaceVerificationError();\n        }\n    }\n    _checkWorkspaceUndo(strResource, element, editStackSnapshot, checkInvalidatedResources) {\n        if (element.removedResources) {\n            return this._tryToSplitAndUndo(strResource, element, element.removedResources, nls.localize({ key: 'cannotWorkspaceUndo', comment: ['{0} is a label for an operation. {1} is another message.'] }, \"Could not undo '{0}' across all files. {1}\", element.label, element.removedResources.createMessage()));\n        }\n        if (checkInvalidatedResources && element.invalidatedResources) {\n            return this._tryToSplitAndUndo(strResource, element, element.invalidatedResources, nls.localize({ key: 'cannotWorkspaceUndo', comment: ['{0} is a label for an operation. {1} is another message.'] }, \"Could not undo '{0}' across all files. {1}\", element.label, element.invalidatedResources.createMessage()));\n        }\n        // this must be the last past element in all the impacted resources!\n        const cannotUndoDueToResources = [];\n        for (const editStack of editStackSnapshot.editStacks) {\n            if (editStack.getClosestPastElement() !== element) {\n                cannotUndoDueToResources.push(editStack.resourceLabel);\n            }\n        }\n        if (cannotUndoDueToResources.length > 0) {\n            return this._tryToSplitAndUndo(strResource, element, null, nls.localize({ key: 'cannotWorkspaceUndoDueToChanges', comment: ['{0} is a label for an operation. {1} is a list of filenames.'] }, \"Could not undo '{0}' across all files because changes were made to {1}\", element.label, cannotUndoDueToResources.join(', ')));\n        }\n        const cannotLockDueToResources = [];\n        for (const editStack of editStackSnapshot.editStacks) {\n            if (editStack.locked) {\n                cannotLockDueToResources.push(editStack.resourceLabel);\n            }\n        }\n        if (cannotLockDueToResources.length > 0) {\n            return this._tryToSplitAndUndo(strResource, element, null, nls.localize({ key: 'cannotWorkspaceUndoDueToInProgressUndoRedo', comment: ['{0} is a label for an operation. {1} is a list of filenames.'] }, \"Could not undo '{0}' across all files because there is already an undo or redo operation running on {1}\", element.label, cannotLockDueToResources.join(', ')));\n        }\n        // check if new stack elements were added in the meantime...\n        if (!editStackSnapshot.isValid()) {\n            return this._tryToSplitAndUndo(strResource, element, null, nls.localize({ key: 'cannotWorkspaceUndoDueToInMeantimeUndoRedo', comment: ['{0} is a label for an operation. {1} is a list of filenames.'] }, \"Could not undo '{0}' across all files because an undo or redo operation occurred in the meantime\", element.label));\n        }\n        return null;\n    }\n    _workspaceUndo(strResource, element, undoConfirmed) {\n        const affectedEditStacks = this._getAffectedEditStacks(element);\n        const verificationError = this._checkWorkspaceUndo(strResource, element, affectedEditStacks, /*invalidated resources will be checked after the prepare call*/ false);\n        if (verificationError) {\n            return verificationError.returnValue;\n        }\n        return this._confirmAndExecuteWorkspaceUndo(strResource, element, affectedEditStacks, undoConfirmed);\n    }\n    _isPartOfUndoGroup(element) {\n        if (!element.groupId) {\n            return false;\n        }\n        // check that there is at least another element with the same groupId ready to be undone\n        for (const [, editStack] of this._editStacks) {\n            const pastElement = editStack.getClosestPastElement();\n            if (!pastElement) {\n                continue;\n            }\n            if (pastElement === element) {\n                const secondPastElement = editStack.getSecondClosestPastElement();\n                if (secondPastElement && secondPastElement.groupId === element.groupId) {\n                    // there is another element with the same group id in the same stack!\n                    return true;\n                }\n            }\n            if (pastElement.groupId === element.groupId) {\n                // there is another element with the same group id in another stack!\n                return true;\n            }\n        }\n        return false;\n    }\n    _confirmAndExecuteWorkspaceUndo(strResource, element, editStackSnapshot, undoConfirmed) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (element.canSplit() && !this._isPartOfUndoGroup(element)) {\n                // this element can be split\n                const result = yield this._dialogService.show(Severity.Info, nls.localize('confirmWorkspace', \"Would you like to undo '{0}' across all files?\", element.label), [\n                    nls.localize({ key: 'ok', comment: ['{0} denotes a number that is > 1'] }, \"Undo in {0} Files\", editStackSnapshot.editStacks.length),\n                    nls.localize('nok', \"Undo this File\"),\n                    nls.localize('cancel', \"Cancel\"),\n                ], {\n                    cancelId: 2\n                });\n                if (result.choice === 2) {\n                    // choice: cancel\n                    return;\n                }\n                if (result.choice === 1) {\n                    // choice: undo this file\n                    this._splitPastWorkspaceElement(element, null);\n                    return this._undo(strResource, 0, true);\n                }\n                // choice: undo in all files\n                // At this point, it is possible that the element has been made invalid in the meantime (due to the confirmation await)\n                const verificationError1 = this._checkWorkspaceUndo(strResource, element, editStackSnapshot, /*invalidated resources will be checked after the prepare call*/ false);\n                if (verificationError1) {\n                    return verificationError1.returnValue;\n                }\n                undoConfirmed = true;\n            }\n            // prepare\n            let cleanup;\n            try {\n                cleanup = yield this._invokeWorkspacePrepare(element);\n            }\n            catch (err) {\n                return this._onError(err, element);\n            }\n            // At this point, it is possible that the element has been made invalid in the meantime (due to the prepare await)\n            const verificationError2 = this._checkWorkspaceUndo(strResource, element, editStackSnapshot, /*now also check that there are no more invalidated resources*/ true);\n            if (verificationError2) {\n                cleanup.dispose();\n                return verificationError2.returnValue;\n            }\n            for (const editStack of editStackSnapshot.editStacks) {\n                editStack.moveBackward(element);\n            }\n            return this._safeInvokeWithLocks(element, () => element.actual.undo(), editStackSnapshot, cleanup, () => this._continueUndoInGroup(element.groupId, undoConfirmed));\n        });\n    }\n    _resourceUndo(editStack, element, undoConfirmed) {\n        if (!element.isValid) {\n            // invalid element => immediately flush edit stack!\n            editStack.flushAllElements();\n            return;\n        }\n        if (editStack.locked) {\n            const message = nls.localize({ key: 'cannotResourceUndoDueToInProgressUndoRedo', comment: ['{0} is a label for an operation.'] }, \"Could not undo '{0}' because there is already an undo or redo operation running.\", element.label);\n            this._notificationService.warn(message);\n            return;\n        }\n        return this._invokeResourcePrepare(element, (cleanup) => {\n            editStack.moveBackward(element);\n            return this._safeInvokeWithLocks(element, () => element.actual.undo(), new EditStackSnapshot([editStack]), cleanup, () => this._continueUndoInGroup(element.groupId, undoConfirmed));\n        });\n    }\n    _findClosestUndoElementInGroup(groupId) {\n        if (!groupId) {\n            return [null, null];\n        }\n        // find another element with the same groupId and with the highest groupOrder ready to be undone\n        let matchedElement = null;\n        let matchedStrResource = null;\n        for (const [strResource, editStack] of this._editStacks) {\n            const candidate = editStack.getClosestPastElement();\n            if (!candidate) {\n                continue;\n            }\n            if (candidate.groupId === groupId) {\n                if (!matchedElement || candidate.groupOrder > matchedElement.groupOrder) {\n                    matchedElement = candidate;\n                    matchedStrResource = strResource;\n                }\n            }\n        }\n        return [matchedElement, matchedStrResource];\n    }\n    _continueUndoInGroup(groupId, undoConfirmed) {\n        if (!groupId) {\n            return;\n        }\n        const [, matchedStrResource] = this._findClosestUndoElementInGroup(groupId);\n        if (matchedStrResource) {\n            return this._undo(matchedStrResource, 0, undoConfirmed);\n        }\n    }\n    undo(resourceOrSource) {\n        if (resourceOrSource instanceof UndoRedoSource) {\n            const [, matchedStrResource] = this._findClosestUndoElementWithSource(resourceOrSource.id);\n            return matchedStrResource ? this._undo(matchedStrResource, resourceOrSource.id, false) : undefined;\n        }\n        if (typeof resourceOrSource === 'string') {\n            return this._undo(resourceOrSource, 0, false);\n        }\n        return this._undo(this.getUriComparisonKey(resourceOrSource), 0, false);\n    }\n    _undo(strResource, sourceId = 0, undoConfirmed) {\n        if (!this._editStacks.has(strResource)) {\n            return;\n        }\n        const editStack = this._editStacks.get(strResource);\n        const element = editStack.getClosestPastElement();\n        if (!element) {\n            return;\n        }\n        if (element.groupId) {\n            // this element is a part of a group, we need to make sure undoing in a group is in order\n            const [matchedElement, matchedStrResource] = this._findClosestUndoElementInGroup(element.groupId);\n            if (element !== matchedElement && matchedStrResource) {\n                // there is an element in the same group that should be undone before this one\n                return this._undo(matchedStrResource, sourceId, undoConfirmed);\n            }\n        }\n        const shouldPromptForConfirmation = (element.sourceId !== sourceId || element.confirmBeforeUndo);\n        if (shouldPromptForConfirmation && !undoConfirmed) {\n            // Hit a different source or the element asks for prompt before undo, prompt for confirmation\n            return this._confirmAndContinueUndo(strResource, sourceId, element);\n        }\n        try {\n            if (element.type === 1 /* UndoRedoElementType.Workspace */) {\n                return this._workspaceUndo(strResource, element, undoConfirmed);\n            }\n            else {\n                return this._resourceUndo(editStack, element, undoConfirmed);\n            }\n        }\n        finally {\n            if (DEBUG) {\n                this._print('undo');\n            }\n        }\n    }\n    _confirmAndContinueUndo(strResource, sourceId, element) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const result = yield this._dialogService.show(Severity.Info, nls.localize('confirmDifferentSource', \"Would you like to undo '{0}'?\", element.label), [\n                nls.localize('confirmDifferentSource.yes', \"Yes\"),\n                nls.localize('confirmDifferentSource.no', \"No\"),\n            ], {\n                cancelId: 1\n            });\n            if (result.choice === 1) {\n                // choice: cancel\n                return;\n            }\n            // choice: undo\n            return this._undo(strResource, sourceId, true);\n        });\n    }\n    _findClosestRedoElementWithSource(sourceId) {\n        if (!sourceId) {\n            return [null, null];\n        }\n        // find an element with sourceId and with the lowest sourceOrder ready to be redone\n        let matchedElement = null;\n        let matchedStrResource = null;\n        for (const [strResource, editStack] of this._editStacks) {\n            const candidate = editStack.getClosestFutureElement();\n            if (!candidate) {\n                continue;\n            }\n            if (candidate.sourceId === sourceId) {\n                if (!matchedElement || candidate.sourceOrder < matchedElement.sourceOrder) {\n                    matchedElement = candidate;\n                    matchedStrResource = strResource;\n                }\n            }\n        }\n        return [matchedElement, matchedStrResource];\n    }\n    canRedo(resourceOrSource) {\n        if (resourceOrSource instanceof UndoRedoSource) {\n            const [, matchedStrResource] = this._findClosestRedoElementWithSource(resourceOrSource.id);\n            return matchedStrResource ? true : false;\n        }\n        const strResource = this.getUriComparisonKey(resourceOrSource);\n        if (this._editStacks.has(strResource)) {\n            const editStack = this._editStacks.get(strResource);\n            return editStack.hasFutureElements();\n        }\n        return false;\n    }\n    _tryToSplitAndRedo(strResource, element, ignoreResources, message) {\n        if (element.canSplit()) {\n            this._splitFutureWorkspaceElement(element, ignoreResources);\n            this._notificationService.warn(message);\n            return new WorkspaceVerificationError(this._redo(strResource));\n        }\n        else {\n            // Cannot safely split this workspace element => flush all undo/redo stacks\n            for (const strResource of element.strResources) {\n                this.removeElements(strResource);\n            }\n            this._notificationService.warn(message);\n            return new WorkspaceVerificationError();\n        }\n    }\n    _checkWorkspaceRedo(strResource, element, editStackSnapshot, checkInvalidatedResources) {\n        if (element.removedResources) {\n            return this._tryToSplitAndRedo(strResource, element, element.removedResources, nls.localize({ key: 'cannotWorkspaceRedo', comment: ['{0} is a label for an operation. {1} is another message.'] }, \"Could not redo '{0}' across all files. {1}\", element.label, element.removedResources.createMessage()));\n        }\n        if (checkInvalidatedResources && element.invalidatedResources) {\n            return this._tryToSplitAndRedo(strResource, element, element.invalidatedResources, nls.localize({ key: 'cannotWorkspaceRedo', comment: ['{0} is a label for an operation. {1} is another message.'] }, \"Could not redo '{0}' across all files. {1}\", element.label, element.invalidatedResources.createMessage()));\n        }\n        // this must be the last future element in all the impacted resources!\n        const cannotRedoDueToResources = [];\n        for (const editStack of editStackSnapshot.editStacks) {\n            if (editStack.getClosestFutureElement() !== element) {\n                cannotRedoDueToResources.push(editStack.resourceLabel);\n            }\n        }\n        if (cannotRedoDueToResources.length > 0) {\n            return this._tryToSplitAndRedo(strResource, element, null, nls.localize({ key: 'cannotWorkspaceRedoDueToChanges', comment: ['{0} is a label for an operation. {1} is a list of filenames.'] }, \"Could not redo '{0}' across all files because changes were made to {1}\", element.label, cannotRedoDueToResources.join(', ')));\n        }\n        const cannotLockDueToResources = [];\n        for (const editStack of editStackSnapshot.editStacks) {\n            if (editStack.locked) {\n                cannotLockDueToResources.push(editStack.resourceLabel);\n            }\n        }\n        if (cannotLockDueToResources.length > 0) {\n            return this._tryToSplitAndRedo(strResource, element, null, nls.localize({ key: 'cannotWorkspaceRedoDueToInProgressUndoRedo', comment: ['{0} is a label for an operation. {1} is a list of filenames.'] }, \"Could not redo '{0}' across all files because there is already an undo or redo operation running on {1}\", element.label, cannotLockDueToResources.join(', ')));\n        }\n        // check if new stack elements were added in the meantime...\n        if (!editStackSnapshot.isValid()) {\n            return this._tryToSplitAndRedo(strResource, element, null, nls.localize({ key: 'cannotWorkspaceRedoDueToInMeantimeUndoRedo', comment: ['{0} is a label for an operation. {1} is a list of filenames.'] }, \"Could not redo '{0}' across all files because an undo or redo operation occurred in the meantime\", element.label));\n        }\n        return null;\n    }\n    _workspaceRedo(strResource, element) {\n        const affectedEditStacks = this._getAffectedEditStacks(element);\n        const verificationError = this._checkWorkspaceRedo(strResource, element, affectedEditStacks, /*invalidated resources will be checked after the prepare call*/ false);\n        if (verificationError) {\n            return verificationError.returnValue;\n        }\n        return this._executeWorkspaceRedo(strResource, element, affectedEditStacks);\n    }\n    _executeWorkspaceRedo(strResource, element, editStackSnapshot) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // prepare\n            let cleanup;\n            try {\n                cleanup = yield this._invokeWorkspacePrepare(element);\n            }\n            catch (err) {\n                return this._onError(err, element);\n            }\n            // At this point, it is possible that the element has been made invalid in the meantime (due to the prepare await)\n            const verificationError = this._checkWorkspaceRedo(strResource, element, editStackSnapshot, /*now also check that there are no more invalidated resources*/ true);\n            if (verificationError) {\n                cleanup.dispose();\n                return verificationError.returnValue;\n            }\n            for (const editStack of editStackSnapshot.editStacks) {\n                editStack.moveForward(element);\n            }\n            return this._safeInvokeWithLocks(element, () => element.actual.redo(), editStackSnapshot, cleanup, () => this._continueRedoInGroup(element.groupId));\n        });\n    }\n    _resourceRedo(editStack, element) {\n        if (!element.isValid) {\n            // invalid element => immediately flush edit stack!\n            editStack.flushAllElements();\n            return;\n        }\n        if (editStack.locked) {\n            const message = nls.localize({ key: 'cannotResourceRedoDueToInProgressUndoRedo', comment: ['{0} is a label for an operation.'] }, \"Could not redo '{0}' because there is already an undo or redo operation running.\", element.label);\n            this._notificationService.warn(message);\n            return;\n        }\n        return this._invokeResourcePrepare(element, (cleanup) => {\n            editStack.moveForward(element);\n            return this._safeInvokeWithLocks(element, () => element.actual.redo(), new EditStackSnapshot([editStack]), cleanup, () => this._continueRedoInGroup(element.groupId));\n        });\n    }\n    _findClosestRedoElementInGroup(groupId) {\n        if (!groupId) {\n            return [null, null];\n        }\n        // find another element with the same groupId and with the lowest groupOrder ready to be redone\n        let matchedElement = null;\n        let matchedStrResource = null;\n        for (const [strResource, editStack] of this._editStacks) {\n            const candidate = editStack.getClosestFutureElement();\n            if (!candidate) {\n                continue;\n            }\n            if (candidate.groupId === groupId) {\n                if (!matchedElement || candidate.groupOrder < matchedElement.groupOrder) {\n                    matchedElement = candidate;\n                    matchedStrResource = strResource;\n                }\n            }\n        }\n        return [matchedElement, matchedStrResource];\n    }\n    _continueRedoInGroup(groupId) {\n        if (!groupId) {\n            return;\n        }\n        const [, matchedStrResource] = this._findClosestRedoElementInGroup(groupId);\n        if (matchedStrResource) {\n            return this._redo(matchedStrResource);\n        }\n    }\n    redo(resourceOrSource) {\n        if (resourceOrSource instanceof UndoRedoSource) {\n            const [, matchedStrResource] = this._findClosestRedoElementWithSource(resourceOrSource.id);\n            return matchedStrResource ? this._redo(matchedStrResource) : undefined;\n        }\n        if (typeof resourceOrSource === 'string') {\n            return this._redo(resourceOrSource);\n        }\n        return this._redo(this.getUriComparisonKey(resourceOrSource));\n    }\n    _redo(strResource) {\n        if (!this._editStacks.has(strResource)) {\n            return;\n        }\n        const editStack = this._editStacks.get(strResource);\n        const element = editStack.getClosestFutureElement();\n        if (!element) {\n            return;\n        }\n        if (element.groupId) {\n            // this element is a part of a group, we need to make sure redoing in a group is in order\n            const [matchedElement, matchedStrResource] = this._findClosestRedoElementInGroup(element.groupId);\n            if (element !== matchedElement && matchedStrResource) {\n                // there is an element in the same group that should be redone before this one\n                return this._redo(matchedStrResource);\n            }\n        }\n        try {\n            if (element.type === 1 /* UndoRedoElementType.Workspace */) {\n                return this._workspaceRedo(strResource, element);\n            }\n            else {\n                return this._resourceRedo(editStack, element);\n            }\n        }\n        finally {\n            if (DEBUG) {\n                this._print('redo');\n            }\n        }\n    }\n};\nUndoRedoService = __decorate([\n    __param(0, IDialogService),\n    __param(1, INotificationService)\n], UndoRedoService);\nexport { UndoRedoService };\nclass WorkspaceVerificationError {\n    constructor(returnValue) {\n        this.returnValue = returnValue;\n    }\n}\nregisterSingleton(IUndoRedoService, UndoRedoService);\n"],"mappings":"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"}]}