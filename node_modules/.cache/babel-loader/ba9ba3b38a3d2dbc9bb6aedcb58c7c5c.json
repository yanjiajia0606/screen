{"remainingRequest":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/thread-loader/dist/cjs.js!/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js!/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/base/common/iterator.js","dependencies":[{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/base/common/iterator.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/babel.config.js","mtime":1668271197000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js","mtime":456789000000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["Iterable","single","filter","map","concat","concatNested","is","thing","Symbol","iterator","_empty","Object","freeze","empty","element","from","iterable","isEmpty","next","done","first","value","some","predicate","find","undefined","fn","index","iterables","reduce","reducer","initialValue","forEach","slice","arr","to","length","consume","atMost","Number","POSITIVE_INFINITY","consumed","i","push","collect","equals","a","b","comparator","at","bt","ai","bi","an","bn"],"sources":["/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/base/common/iterator.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport var Iterable;\n(function (Iterable) {\n    function is(thing) {\n        return thing && typeof thing === 'object' && typeof thing[Symbol.iterator] === 'function';\n    }\n    Iterable.is = is;\n    const _empty = Object.freeze([]);\n    function empty() {\n        return _empty;\n    }\n    Iterable.empty = empty;\n    function* single(element) {\n        yield element;\n    }\n    Iterable.single = single;\n    function from(iterable) {\n        return iterable || _empty;\n    }\n    Iterable.from = from;\n    function isEmpty(iterable) {\n        return !iterable || iterable[Symbol.iterator]().next().done === true;\n    }\n    Iterable.isEmpty = isEmpty;\n    function first(iterable) {\n        return iterable[Symbol.iterator]().next().value;\n    }\n    Iterable.first = first;\n    function some(iterable, predicate) {\n        for (const element of iterable) {\n            if (predicate(element)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    Iterable.some = some;\n    function find(iterable, predicate) {\n        for (const element of iterable) {\n            if (predicate(element)) {\n                return element;\n            }\n        }\n        return undefined;\n    }\n    Iterable.find = find;\n    function* filter(iterable, predicate) {\n        for (const element of iterable) {\n            if (predicate(element)) {\n                yield element;\n            }\n        }\n    }\n    Iterable.filter = filter;\n    function* map(iterable, fn) {\n        let index = 0;\n        for (const element of iterable) {\n            yield fn(element, index++);\n        }\n    }\n    Iterable.map = map;\n    function* concat(...iterables) {\n        for (const iterable of iterables) {\n            for (const element of iterable) {\n                yield element;\n            }\n        }\n    }\n    Iterable.concat = concat;\n    function* concatNested(iterables) {\n        for (const iterable of iterables) {\n            for (const element of iterable) {\n                yield element;\n            }\n        }\n    }\n    Iterable.concatNested = concatNested;\n    function reduce(iterable, reducer, initialValue) {\n        let value = initialValue;\n        for (const element of iterable) {\n            value = reducer(value, element);\n        }\n        return value;\n    }\n    Iterable.reduce = reduce;\n    function forEach(iterable, fn) {\n        let index = 0;\n        for (const element of iterable) {\n            fn(element, index++);\n        }\n    }\n    Iterable.forEach = forEach;\n    /**\n     * Returns an iterable slice of the array, with the same semantics as `array.slice()`.\n     */\n    function* slice(arr, from, to = arr.length) {\n        if (from < 0) {\n            from += arr.length;\n        }\n        if (to < 0) {\n            to += arr.length;\n        }\n        else if (to > arr.length) {\n            to = arr.length;\n        }\n        for (; from < to; from++) {\n            yield arr[from];\n        }\n    }\n    Iterable.slice = slice;\n    /**\n     * Consumes `atMost` elements from iterable and returns the consumed elements,\n     * and an iterable for the rest of the elements.\n     */\n    function consume(iterable, atMost = Number.POSITIVE_INFINITY) {\n        const consumed = [];\n        if (atMost === 0) {\n            return [consumed, iterable];\n        }\n        const iterator = iterable[Symbol.iterator]();\n        for (let i = 0; i < atMost; i++) {\n            const next = iterator.next();\n            if (next.done) {\n                return [consumed, Iterable.empty()];\n            }\n            consumed.push(next.value);\n        }\n        return [consumed, { [Symbol.iterator]() { return iterator; } }];\n    }\n    Iterable.consume = consume;\n    /**\n     * Consumes `atMost` elements from iterable and returns the consumed elements,\n     * and an iterable for the rest of the elements.\n     */\n    function collect(iterable) {\n        return consume(iterable)[0];\n    }\n    Iterable.collect = collect;\n    /**\n     * Returns whether the iterables are the same length and all items are\n     * equal using the comparator function.\n     */\n    function equals(a, b, comparator = (at, bt) => at === bt) {\n        const ai = a[Symbol.iterator]();\n        const bi = b[Symbol.iterator]();\n        while (true) {\n            const an = ai.next();\n            const bn = bi.next();\n            if (an.done !== bn.done) {\n                return false;\n            }\n            else if (an.done) {\n                return true;\n            }\n            else if (!comparator(an.value, bn.value)) {\n                return false;\n            }\n        }\n    }\n    Iterable.equals = equals;\n})(Iterable || (Iterable = {}));\n"],"mappings":"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"}]}