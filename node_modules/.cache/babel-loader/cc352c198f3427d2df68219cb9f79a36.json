{"remainingRequest":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/thread-loader/dist/cjs.js!/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js!/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/base/browser/ui/splitview/splitview.js","dependencies":[{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/base/browser/ui/splitview/splitview.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/babel.config.js","mtime":1668271197000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js","mtime":456789000000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["$","addDisposableListener","append","scheduleAtNextAnimationFrame","Sash","SmoothScrollableElement","pushToEnd","pushToStart","range","Color","Emitter","Event","combinedDisposable","Disposable","dispose","toDisposable","clamp","Scrollable","types","defaultStyles","separatorBorder","transparent","ViewItem","container","view","size","disposable","_cachedVisibleSize","undefined","_size","classList","add","cachedVisibleSize","visible","_a","_b","viewMinimumSize","viewMaximumSize","toggle","setVisible","call","minimumSize","maximumSize","priority","snap","enabled","style","pointerEvents","offset","layoutContext","layoutContainer","layout","VerticalViewItem","top","height","HorizontalViewItem","left","width","State","Sizing","Distribute","type","Split","index","Invisible","SplitView","options","_c","_d","_e","contentSize","proportions","viewItems","sashItems","state","Idle","_onDidSashChange","_register","_onDidSashReset","_startSnappingEnabled","_endSnappingEnabled","onDidSashChange","event","onDidSashReset","orientation","inverseAltBehavior","proportionalLayout","getSashOrthogonalSize","el","document","createElement","appendChild","sashContainer","viewContainer","scrollable","forceIntegerValues","smoothScrollDuration","scrollableElement","vertical","scrollbarVisibility","horizontal","onDidScroll","onScroll","e","scrollTop","scrollLeft","getDomNode","styles","descriptor","views","forEach","viewDescriptor","sizing","isUndefined","doAddView","reduce","r","i","saveProportions","_orthogonalStartSash","sash","sashItem","orthogonalStartSash","_orthogonalEndSash","orthogonalEndSash","startSnappingEnabled","updateSashEnablement","endSnappingEnabled","isTransparent","remove","removeProperty","setProperty","toString","length","skipLayout","previousSize","Math","max","indexes","lowPriorityIndexes","filter","highPriorityIndexes","resize","item","round","distributeEmptySpace","layoutViews","map","start","alt","findIndex","body","resetSashDragState","sashDragState","current","altKey","sizes","minDelta","Number","NEGATIVE_INFINITY","maxDelta","POSITIVE_INFINITY","isLastSash","viewItem","snapBefore","snapAfter","upIndexes","downIndexes","minDeltaUp","maxDeltaUp","maxDeltaDown","minDeltaDown","min","snapBeforeIndex","findFirstSnapIndex","snapAfterIndex","halfSize","floor","limitDelta","delta","newDelta","newSizes","viewItemIndex","newMinDelta","newMaxDelta","resizeIndex","fire","indexOf","relayout","Error","Busy","flexibleViewItems","flexibleSize","push","insertBefore","children","onChangeDisposable","onDidChange","onViewChange","containerDisposable","removeChild","viewSize","getViewSize","splice","opts","getHorizontalSashTop","s","getSashPosition","getHorizontalSashWidth","Object","assign","getVerticalSashLeft","getVerticalSashHeight","sashEventMapper","startY","currentY","startX","currentX","onStart","onDidStart","onStartDisposable","onSashStart","onChange","onSashChange","onEnd","onDidEnd","onEndDisposable","onSashEnd","onDidResetDisposable","onDidReset","element","distributeViewSizes","overloadMinDelta","overloadMaxDelta","upItems","upSizes","downItems","downSizes","snapped","snapView","deltaUp","viewDelta","deltaDown","lowPriorityIndex","emptyDelta","updateScrollableElement","setScrollDimensions","scrollHeight","scrollWidth","previous","collapsesDown","expandsDown","reverseViews","reverse","collapsesUp","expandsUp","position","snappedBefore","snappedAfter"],"sources":["/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/base/browser/ui/splitview/splitview.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { $, addDisposableListener, append, scheduleAtNextAnimationFrame } from '../../dom.js';\nimport { Sash } from '../sash/sash.js';\nimport { SmoothScrollableElement } from '../scrollbar/scrollableElement.js';\nimport { pushToEnd, pushToStart, range } from '../../../common/arrays.js';\nimport { Color } from '../../../common/color.js';\nimport { Emitter, Event } from '../../../common/event.js';\nimport { combinedDisposable, Disposable, dispose, toDisposable } from '../../../common/lifecycle.js';\nimport { clamp } from '../../../common/numbers.js';\nimport { Scrollable } from '../../../common/scrollable.js';\nimport * as types from '../../../common/types.js';\nimport './splitview.css';\nconst defaultStyles = {\n    separatorBorder: Color.transparent\n};\nclass ViewItem {\n    constructor(container, view, size, disposable) {\n        this.container = container;\n        this.view = view;\n        this.disposable = disposable;\n        this._cachedVisibleSize = undefined;\n        if (typeof size === 'number') {\n            this._size = size;\n            this._cachedVisibleSize = undefined;\n            container.classList.add('visible');\n        }\n        else {\n            this._size = 0;\n            this._cachedVisibleSize = size.cachedVisibleSize;\n        }\n    }\n    set size(size) {\n        this._size = size;\n    }\n    get size() {\n        return this._size;\n    }\n    get visible() {\n        return typeof this._cachedVisibleSize === 'undefined';\n    }\n    setVisible(visible, size) {\n        var _a, _b;\n        if (visible === this.visible) {\n            return;\n        }\n        if (visible) {\n            this.size = clamp(this._cachedVisibleSize, this.viewMinimumSize, this.viewMaximumSize);\n            this._cachedVisibleSize = undefined;\n        }\n        else {\n            this._cachedVisibleSize = typeof size === 'number' ? size : this.size;\n            this.size = 0;\n        }\n        this.container.classList.toggle('visible', visible);\n        (_b = (_a = this.view).setVisible) === null || _b === void 0 ? void 0 : _b.call(_a, visible);\n    }\n    get minimumSize() { return this.visible ? this.view.minimumSize : 0; }\n    get viewMinimumSize() { return this.view.minimumSize; }\n    get maximumSize() { return this.visible ? this.view.maximumSize : 0; }\n    get viewMaximumSize() { return this.view.maximumSize; }\n    get priority() { return this.view.priority; }\n    get snap() { return !!this.view.snap; }\n    set enabled(enabled) {\n        this.container.style.pointerEvents = enabled ? '' : 'none';\n    }\n    layout(offset, layoutContext) {\n        this.layoutContainer(offset);\n        this.view.layout(this.size, offset, layoutContext);\n    }\n    dispose() {\n        this.disposable.dispose();\n        return this.view;\n    }\n}\nclass VerticalViewItem extends ViewItem {\n    layoutContainer(offset) {\n        this.container.style.top = `${offset}px`;\n        this.container.style.height = `${this.size}px`;\n    }\n}\nclass HorizontalViewItem extends ViewItem {\n    layoutContainer(offset) {\n        this.container.style.left = `${offset}px`;\n        this.container.style.width = `${this.size}px`;\n    }\n}\nvar State;\n(function (State) {\n    State[State[\"Idle\"] = 0] = \"Idle\";\n    State[State[\"Busy\"] = 1] = \"Busy\";\n})(State || (State = {}));\nexport var Sizing;\n(function (Sizing) {\n    /**\n     * When adding or removing views, distribute the delta space among\n     * all other views.\n     */\n    Sizing.Distribute = { type: 'distribute' };\n    /**\n     * When adding or removing views, split the delta space with another\n     * specific view, indexed by the provided `index`.\n     */\n    function Split(index) { return { type: 'split', index }; }\n    Sizing.Split = Split;\n    /**\n     * When adding or removing views, assume the view is invisible.\n     */\n    function Invisible(cachedVisibleSize) { return { type: 'invisible', cachedVisibleSize }; }\n    Sizing.Invisible = Invisible;\n})(Sizing || (Sizing = {}));\n/**\n * The {@link SplitView} is the UI component which implements a one dimensional\n * flex-like layout algorithm for a collection of {@link IView} instances, which\n * are essentially HTMLElement instances with the following size constraints:\n *\n * - {@link IView.minimumSize}\n * - {@link IView.maximumSize}\n * - {@link IView.priority}\n * - {@link IView.snap}\n *\n * In case the SplitView doesn't have enough size to fit all views, it will overflow\n * its content with a scrollbar.\n *\n * In between each pair of views there will be a {@link Sash} allowing the user\n * to resize the views, making sure the constraints are respected.\n *\n * An optional {@link TLayoutContext layout context type} may be used in order to\n * pass along layout contextual data from the {@link SplitView.layout} method down\n * to each view's {@link IView.layout} calls.\n *\n * Features:\n * - Flex-like layout algorithm\n * - Snap support\n * - Orthogonal sash support, for corner sashes\n * - View hide/show support\n * - View swap/move support\n * - Alt key modifier behavior, macOS style\n */\nexport class SplitView extends Disposable {\n    /**\n     * Create a new {@link SplitView} instance.\n     */\n    constructor(container, options = {}) {\n        var _a, _b, _c, _d, _e;\n        super();\n        this.size = 0;\n        this.contentSize = 0;\n        this.proportions = undefined;\n        this.viewItems = [];\n        this.sashItems = [];\n        this.state = State.Idle;\n        this._onDidSashChange = this._register(new Emitter());\n        this._onDidSashReset = this._register(new Emitter());\n        this._startSnappingEnabled = true;\n        this._endSnappingEnabled = true;\n        /**\n         * Fires whenever the user resizes a {@link Sash sash}.\n         */\n        this.onDidSashChange = this._onDidSashChange.event;\n        /**\n         * Fires whenever the user double clicks a {@link Sash sash}.\n         */\n        this.onDidSashReset = this._onDidSashReset.event;\n        this.orientation = (_a = options.orientation) !== null && _a !== void 0 ? _a : 0 /* Orientation.VERTICAL */;\n        this.inverseAltBehavior = (_b = options.inverseAltBehavior) !== null && _b !== void 0 ? _b : false;\n        this.proportionalLayout = (_c = options.proportionalLayout) !== null && _c !== void 0 ? _c : true;\n        this.getSashOrthogonalSize = options.getSashOrthogonalSize;\n        this.el = document.createElement('div');\n        this.el.classList.add('monaco-split-view2');\n        this.el.classList.add(this.orientation === 0 /* Orientation.VERTICAL */ ? 'vertical' : 'horizontal');\n        container.appendChild(this.el);\n        this.sashContainer = append(this.el, $('.sash-container'));\n        this.viewContainer = $('.split-view-container');\n        this.scrollable = new Scrollable({\n            forceIntegerValues: true,\n            smoothScrollDuration: 125,\n            scheduleAtNextAnimationFrame\n        });\n        this.scrollableElement = this._register(new SmoothScrollableElement(this.viewContainer, {\n            vertical: this.orientation === 0 /* Orientation.VERTICAL */ ? ((_d = options.scrollbarVisibility) !== null && _d !== void 0 ? _d : 1 /* ScrollbarVisibility.Auto */) : 2 /* ScrollbarVisibility.Hidden */,\n            horizontal: this.orientation === 1 /* Orientation.HORIZONTAL */ ? ((_e = options.scrollbarVisibility) !== null && _e !== void 0 ? _e : 1 /* ScrollbarVisibility.Auto */) : 2 /* ScrollbarVisibility.Hidden */\n        }, this.scrollable));\n        this.onDidScroll = this.scrollableElement.onScroll;\n        this._register(this.onDidScroll(e => {\n            this.viewContainer.scrollTop = e.scrollTop;\n            this.viewContainer.scrollLeft = e.scrollLeft;\n        }));\n        append(this.el, this.scrollableElement.getDomNode());\n        this.style(options.styles || defaultStyles);\n        // We have an existing set of view, add them now\n        if (options.descriptor) {\n            this.size = options.descriptor.size;\n            options.descriptor.views.forEach((viewDescriptor, index) => {\n                const sizing = types.isUndefined(viewDescriptor.visible) || viewDescriptor.visible ? viewDescriptor.size : { type: 'invisible', cachedVisibleSize: viewDescriptor.size };\n                const view = viewDescriptor.view;\n                this.doAddView(view, sizing, index, true);\n            });\n            // Initialize content size and proportions for first layout\n            this.contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n            this.saveProportions();\n        }\n    }\n    get orthogonalStartSash() { return this._orthogonalStartSash; }\n    get orthogonalEndSash() { return this._orthogonalEndSash; }\n    get startSnappingEnabled() { return this._startSnappingEnabled; }\n    get endSnappingEnabled() { return this._endSnappingEnabled; }\n    /**\n     * A reference to a sash, perpendicular to all sashes in this {@link SplitView},\n     * located at the left- or top-most side of the SplitView.\n     * Corner sashes will be created automatically at the intersections.\n     */\n    set orthogonalStartSash(sash) {\n        for (const sashItem of this.sashItems) {\n            sashItem.sash.orthogonalStartSash = sash;\n        }\n        this._orthogonalStartSash = sash;\n    }\n    /**\n     * A reference to a sash, perpendicular to all sashes in this {@link SplitView},\n     * located at the right- or bottom-most side of the SplitView.\n     * Corner sashes will be created automatically at the intersections.\n     */\n    set orthogonalEndSash(sash) {\n        for (const sashItem of this.sashItems) {\n            sashItem.sash.orthogonalEndSash = sash;\n        }\n        this._orthogonalEndSash = sash;\n    }\n    /**\n     * Enable/disable snapping at the beginning of this {@link SplitView}.\n     */\n    set startSnappingEnabled(startSnappingEnabled) {\n        if (this._startSnappingEnabled === startSnappingEnabled) {\n            return;\n        }\n        this._startSnappingEnabled = startSnappingEnabled;\n        this.updateSashEnablement();\n    }\n    /**\n     * Enable/disable snapping at the end of this {@link SplitView}.\n     */\n    set endSnappingEnabled(endSnappingEnabled) {\n        if (this._endSnappingEnabled === endSnappingEnabled) {\n            return;\n        }\n        this._endSnappingEnabled = endSnappingEnabled;\n        this.updateSashEnablement();\n    }\n    style(styles) {\n        if (styles.separatorBorder.isTransparent()) {\n            this.el.classList.remove('separator-border');\n            this.el.style.removeProperty('--separator-border');\n        }\n        else {\n            this.el.classList.add('separator-border');\n            this.el.style.setProperty('--separator-border', styles.separatorBorder.toString());\n        }\n    }\n    /**\n     * Add a {@link IView view} to this {@link SplitView}.\n     *\n     * @param view The view to add.\n     * @param size Either a fixed size, or a dynamic {@link Sizing} strategy.\n     * @param index The index to insert the view on.\n     * @param skipLayout Whether layout should be skipped.\n     */\n    addView(view, size, index = this.viewItems.length, skipLayout) {\n        this.doAddView(view, size, index, skipLayout);\n    }\n    /**\n     * Layout the {@link SplitView}.\n     *\n     * @param size The entire size of the {@link SplitView}.\n     * @param layoutContext An optional layout context to pass along to {@link IView views}.\n     */\n    layout(size, layoutContext) {\n        const previousSize = Math.max(this.size, this.contentSize);\n        this.size = size;\n        this.layoutContext = layoutContext;\n        if (!this.proportions) {\n            const indexes = range(this.viewItems.length);\n            const lowPriorityIndexes = indexes.filter(i => this.viewItems[i].priority === 1 /* LayoutPriority.Low */);\n            const highPriorityIndexes = indexes.filter(i => this.viewItems[i].priority === 2 /* LayoutPriority.High */);\n            this.resize(this.viewItems.length - 1, size - previousSize, undefined, lowPriorityIndexes, highPriorityIndexes);\n        }\n        else {\n            for (let i = 0; i < this.viewItems.length; i++) {\n                const item = this.viewItems[i];\n                item.size = clamp(Math.round(this.proportions[i] * size), item.minimumSize, item.maximumSize);\n            }\n        }\n        this.distributeEmptySpace();\n        this.layoutViews();\n    }\n    saveProportions() {\n        if (this.proportionalLayout && this.contentSize > 0) {\n            this.proportions = this.viewItems.map(i => i.size / this.contentSize);\n        }\n    }\n    onSashStart({ sash, start, alt }) {\n        for (const item of this.viewItems) {\n            item.enabled = false;\n        }\n        const index = this.sashItems.findIndex(item => item.sash === sash);\n        // This way, we can press Alt while we resize a sash, macOS style!\n        const disposable = combinedDisposable(addDisposableListener(document.body, 'keydown', e => resetSashDragState(this.sashDragState.current, e.altKey)), addDisposableListener(document.body, 'keyup', () => resetSashDragState(this.sashDragState.current, false)));\n        const resetSashDragState = (start, alt) => {\n            const sizes = this.viewItems.map(i => i.size);\n            let minDelta = Number.NEGATIVE_INFINITY;\n            let maxDelta = Number.POSITIVE_INFINITY;\n            if (this.inverseAltBehavior) {\n                alt = !alt;\n            }\n            if (alt) {\n                // When we're using the last sash with Alt, we're resizing\n                // the view to the left/up, instead of right/down as usual\n                // Thus, we must do the inverse of the usual\n                const isLastSash = index === this.sashItems.length - 1;\n                if (isLastSash) {\n                    const viewItem = this.viewItems[index];\n                    minDelta = (viewItem.minimumSize - viewItem.size) / 2;\n                    maxDelta = (viewItem.maximumSize - viewItem.size) / 2;\n                }\n                else {\n                    const viewItem = this.viewItems[index + 1];\n                    minDelta = (viewItem.size - viewItem.maximumSize) / 2;\n                    maxDelta = (viewItem.size - viewItem.minimumSize) / 2;\n                }\n            }\n            let snapBefore;\n            let snapAfter;\n            if (!alt) {\n                const upIndexes = range(index, -1);\n                const downIndexes = range(index + 1, this.viewItems.length);\n                const minDeltaUp = upIndexes.reduce((r, i) => r + (this.viewItems[i].minimumSize - sizes[i]), 0);\n                const maxDeltaUp = upIndexes.reduce((r, i) => r + (this.viewItems[i].viewMaximumSize - sizes[i]), 0);\n                const maxDeltaDown = downIndexes.length === 0 ? Number.POSITIVE_INFINITY : downIndexes.reduce((r, i) => r + (sizes[i] - this.viewItems[i].minimumSize), 0);\n                const minDeltaDown = downIndexes.length === 0 ? Number.NEGATIVE_INFINITY : downIndexes.reduce((r, i) => r + (sizes[i] - this.viewItems[i].viewMaximumSize), 0);\n                const minDelta = Math.max(minDeltaUp, minDeltaDown);\n                const maxDelta = Math.min(maxDeltaDown, maxDeltaUp);\n                const snapBeforeIndex = this.findFirstSnapIndex(upIndexes);\n                const snapAfterIndex = this.findFirstSnapIndex(downIndexes);\n                if (typeof snapBeforeIndex === 'number') {\n                    const viewItem = this.viewItems[snapBeforeIndex];\n                    const halfSize = Math.floor(viewItem.viewMinimumSize / 2);\n                    snapBefore = {\n                        index: snapBeforeIndex,\n                        limitDelta: viewItem.visible ? minDelta - halfSize : minDelta + halfSize,\n                        size: viewItem.size\n                    };\n                }\n                if (typeof snapAfterIndex === 'number') {\n                    const viewItem = this.viewItems[snapAfterIndex];\n                    const halfSize = Math.floor(viewItem.viewMinimumSize / 2);\n                    snapAfter = {\n                        index: snapAfterIndex,\n                        limitDelta: viewItem.visible ? maxDelta + halfSize : maxDelta - halfSize,\n                        size: viewItem.size\n                    };\n                }\n            }\n            this.sashDragState = { start, current: start, index, sizes, minDelta, maxDelta, alt, snapBefore, snapAfter, disposable };\n        };\n        resetSashDragState(start, alt);\n    }\n    onSashChange({ current }) {\n        const { index, start, sizes, alt, minDelta, maxDelta, snapBefore, snapAfter } = this.sashDragState;\n        this.sashDragState.current = current;\n        const delta = current - start;\n        const newDelta = this.resize(index, delta, sizes, undefined, undefined, minDelta, maxDelta, snapBefore, snapAfter);\n        if (alt) {\n            const isLastSash = index === this.sashItems.length - 1;\n            const newSizes = this.viewItems.map(i => i.size);\n            const viewItemIndex = isLastSash ? index : index + 1;\n            const viewItem = this.viewItems[viewItemIndex];\n            const newMinDelta = viewItem.size - viewItem.maximumSize;\n            const newMaxDelta = viewItem.size - viewItem.minimumSize;\n            const resizeIndex = isLastSash ? index - 1 : index + 1;\n            this.resize(resizeIndex, -newDelta, newSizes, undefined, undefined, newMinDelta, newMaxDelta);\n        }\n        this.distributeEmptySpace();\n        this.layoutViews();\n    }\n    onSashEnd(index) {\n        this._onDidSashChange.fire(index);\n        this.sashDragState.disposable.dispose();\n        this.saveProportions();\n        for (const item of this.viewItems) {\n            item.enabled = true;\n        }\n    }\n    onViewChange(item, size) {\n        const index = this.viewItems.indexOf(item);\n        if (index < 0 || index >= this.viewItems.length) {\n            return;\n        }\n        size = typeof size === 'number' ? size : item.size;\n        size = clamp(size, item.minimumSize, item.maximumSize);\n        if (this.inverseAltBehavior && index > 0) {\n            // In this case, we want the view to grow or shrink both sides equally\n            // so we just resize the \"left\" side by half and let `resize` do the clamping magic\n            this.resize(index - 1, Math.floor((item.size - size) / 2));\n            this.distributeEmptySpace();\n            this.layoutViews();\n        }\n        else {\n            item.size = size;\n            this.relayout([index], undefined);\n        }\n    }\n    /**\n     * Resize a {@link IView view} within the {@link SplitView}.\n     *\n     * @param index The {@link IView view} index.\n     * @param size The {@link IView view} size.\n     */\n    resizeView(index, size) {\n        if (this.state !== State.Idle) {\n            throw new Error('Cant modify splitview');\n        }\n        this.state = State.Busy;\n        if (index < 0 || index >= this.viewItems.length) {\n            return;\n        }\n        const indexes = range(this.viewItems.length).filter(i => i !== index);\n        const lowPriorityIndexes = [...indexes.filter(i => this.viewItems[i].priority === 1 /* LayoutPriority.Low */), index];\n        const highPriorityIndexes = indexes.filter(i => this.viewItems[i].priority === 2 /* LayoutPriority.High */);\n        const item = this.viewItems[index];\n        size = Math.round(size);\n        size = clamp(size, item.minimumSize, Math.min(item.maximumSize, this.size));\n        item.size = size;\n        this.relayout(lowPriorityIndexes, highPriorityIndexes);\n        this.state = State.Idle;\n    }\n    /**\n     * Distribute the entire {@link SplitView} size among all {@link IView views}.\n     */\n    distributeViewSizes() {\n        const flexibleViewItems = [];\n        let flexibleSize = 0;\n        for (const item of this.viewItems) {\n            if (item.maximumSize - item.minimumSize > 0) {\n                flexibleViewItems.push(item);\n                flexibleSize += item.size;\n            }\n        }\n        const size = Math.floor(flexibleSize / flexibleViewItems.length);\n        for (const item of flexibleViewItems) {\n            item.size = clamp(size, item.minimumSize, item.maximumSize);\n        }\n        const indexes = range(this.viewItems.length);\n        const lowPriorityIndexes = indexes.filter(i => this.viewItems[i].priority === 1 /* LayoutPriority.Low */);\n        const highPriorityIndexes = indexes.filter(i => this.viewItems[i].priority === 2 /* LayoutPriority.High */);\n        this.relayout(lowPriorityIndexes, highPriorityIndexes);\n    }\n    /**\n     * Returns the size of a {@link IView view}.\n     */\n    getViewSize(index) {\n        if (index < 0 || index >= this.viewItems.length) {\n            return -1;\n        }\n        return this.viewItems[index].size;\n    }\n    doAddView(view, size, index = this.viewItems.length, skipLayout) {\n        if (this.state !== State.Idle) {\n            throw new Error('Cant modify splitview');\n        }\n        this.state = State.Busy;\n        // Add view\n        const container = $('.split-view-view');\n        if (index === this.viewItems.length) {\n            this.viewContainer.appendChild(container);\n        }\n        else {\n            this.viewContainer.insertBefore(container, this.viewContainer.children.item(index));\n        }\n        const onChangeDisposable = view.onDidChange(size => this.onViewChange(item, size));\n        const containerDisposable = toDisposable(() => this.viewContainer.removeChild(container));\n        const disposable = combinedDisposable(onChangeDisposable, containerDisposable);\n        let viewSize;\n        if (typeof size === 'number') {\n            viewSize = size;\n        }\n        else if (size.type === 'split') {\n            viewSize = this.getViewSize(size.index) / 2;\n        }\n        else if (size.type === 'invisible') {\n            viewSize = { cachedVisibleSize: size.cachedVisibleSize };\n        }\n        else {\n            viewSize = view.minimumSize;\n        }\n        const item = this.orientation === 0 /* Orientation.VERTICAL */\n            ? new VerticalViewItem(container, view, viewSize, disposable)\n            : new HorizontalViewItem(container, view, viewSize, disposable);\n        this.viewItems.splice(index, 0, item);\n        // Add sash\n        if (this.viewItems.length > 1) {\n            const opts = { orthogonalStartSash: this.orthogonalStartSash, orthogonalEndSash: this.orthogonalEndSash };\n            const sash = this.orientation === 0 /* Orientation.VERTICAL */\n                ? new Sash(this.sashContainer, { getHorizontalSashTop: s => this.getSashPosition(s), getHorizontalSashWidth: this.getSashOrthogonalSize }, Object.assign(Object.assign({}, opts), { orientation: 1 /* Orientation.HORIZONTAL */ }))\n                : new Sash(this.sashContainer, { getVerticalSashLeft: s => this.getSashPosition(s), getVerticalSashHeight: this.getSashOrthogonalSize }, Object.assign(Object.assign({}, opts), { orientation: 0 /* Orientation.VERTICAL */ }));\n            const sashEventMapper = this.orientation === 0 /* Orientation.VERTICAL */\n                ? (e) => ({ sash, start: e.startY, current: e.currentY, alt: e.altKey })\n                : (e) => ({ sash, start: e.startX, current: e.currentX, alt: e.altKey });\n            const onStart = Event.map(sash.onDidStart, sashEventMapper);\n            const onStartDisposable = onStart(this.onSashStart, this);\n            const onChange = Event.map(sash.onDidChange, sashEventMapper);\n            const onChangeDisposable = onChange(this.onSashChange, this);\n            const onEnd = Event.map(sash.onDidEnd, () => this.sashItems.findIndex(item => item.sash === sash));\n            const onEndDisposable = onEnd(this.onSashEnd, this);\n            const onDidResetDisposable = sash.onDidReset(() => {\n                const index = this.sashItems.findIndex(item => item.sash === sash);\n                const upIndexes = range(index, -1);\n                const downIndexes = range(index + 1, this.viewItems.length);\n                const snapBeforeIndex = this.findFirstSnapIndex(upIndexes);\n                const snapAfterIndex = this.findFirstSnapIndex(downIndexes);\n                if (typeof snapBeforeIndex === 'number' && !this.viewItems[snapBeforeIndex].visible) {\n                    return;\n                }\n                if (typeof snapAfterIndex === 'number' && !this.viewItems[snapAfterIndex].visible) {\n                    return;\n                }\n                this._onDidSashReset.fire(index);\n            });\n            const disposable = combinedDisposable(onStartDisposable, onChangeDisposable, onEndDisposable, onDidResetDisposable, sash);\n            const sashItem = { sash, disposable };\n            this.sashItems.splice(index - 1, 0, sashItem);\n        }\n        container.appendChild(view.element);\n        let highPriorityIndexes;\n        if (typeof size !== 'number' && size.type === 'split') {\n            highPriorityIndexes = [size.index];\n        }\n        if (!skipLayout) {\n            this.relayout([index], highPriorityIndexes);\n        }\n        this.state = State.Idle;\n        if (!skipLayout && typeof size !== 'number' && size.type === 'distribute') {\n            this.distributeViewSizes();\n        }\n    }\n    relayout(lowPriorityIndexes, highPriorityIndexes) {\n        const contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n        this.resize(this.viewItems.length - 1, this.size - contentSize, undefined, lowPriorityIndexes, highPriorityIndexes);\n        this.distributeEmptySpace();\n        this.layoutViews();\n        this.saveProportions();\n    }\n    resize(index, delta, sizes = this.viewItems.map(i => i.size), lowPriorityIndexes, highPriorityIndexes, overloadMinDelta = Number.NEGATIVE_INFINITY, overloadMaxDelta = Number.POSITIVE_INFINITY, snapBefore, snapAfter) {\n        if (index < 0 || index >= this.viewItems.length) {\n            return 0;\n        }\n        const upIndexes = range(index, -1);\n        const downIndexes = range(index + 1, this.viewItems.length);\n        if (highPriorityIndexes) {\n            for (const index of highPriorityIndexes) {\n                pushToStart(upIndexes, index);\n                pushToStart(downIndexes, index);\n            }\n        }\n        if (lowPriorityIndexes) {\n            for (const index of lowPriorityIndexes) {\n                pushToEnd(upIndexes, index);\n                pushToEnd(downIndexes, index);\n            }\n        }\n        const upItems = upIndexes.map(i => this.viewItems[i]);\n        const upSizes = upIndexes.map(i => sizes[i]);\n        const downItems = downIndexes.map(i => this.viewItems[i]);\n        const downSizes = downIndexes.map(i => sizes[i]);\n        const minDeltaUp = upIndexes.reduce((r, i) => r + (this.viewItems[i].minimumSize - sizes[i]), 0);\n        const maxDeltaUp = upIndexes.reduce((r, i) => r + (this.viewItems[i].maximumSize - sizes[i]), 0);\n        const maxDeltaDown = downIndexes.length === 0 ? Number.POSITIVE_INFINITY : downIndexes.reduce((r, i) => r + (sizes[i] - this.viewItems[i].minimumSize), 0);\n        const minDeltaDown = downIndexes.length === 0 ? Number.NEGATIVE_INFINITY : downIndexes.reduce((r, i) => r + (sizes[i] - this.viewItems[i].maximumSize), 0);\n        const minDelta = Math.max(minDeltaUp, minDeltaDown, overloadMinDelta);\n        const maxDelta = Math.min(maxDeltaDown, maxDeltaUp, overloadMaxDelta);\n        let snapped = false;\n        if (snapBefore) {\n            const snapView = this.viewItems[snapBefore.index];\n            const visible = delta >= snapBefore.limitDelta;\n            snapped = visible !== snapView.visible;\n            snapView.setVisible(visible, snapBefore.size);\n        }\n        if (!snapped && snapAfter) {\n            const snapView = this.viewItems[snapAfter.index];\n            const visible = delta < snapAfter.limitDelta;\n            snapped = visible !== snapView.visible;\n            snapView.setVisible(visible, snapAfter.size);\n        }\n        if (snapped) {\n            return this.resize(index, delta, sizes, lowPriorityIndexes, highPriorityIndexes, overloadMinDelta, overloadMaxDelta);\n        }\n        delta = clamp(delta, minDelta, maxDelta);\n        for (let i = 0, deltaUp = delta; i < upItems.length; i++) {\n            const item = upItems[i];\n            const size = clamp(upSizes[i] + deltaUp, item.minimumSize, item.maximumSize);\n            const viewDelta = size - upSizes[i];\n            deltaUp -= viewDelta;\n            item.size = size;\n        }\n        for (let i = 0, deltaDown = delta; i < downItems.length; i++) {\n            const item = downItems[i];\n            const size = clamp(downSizes[i] - deltaDown, item.minimumSize, item.maximumSize);\n            const viewDelta = size - downSizes[i];\n            deltaDown += viewDelta;\n            item.size = size;\n        }\n        return delta;\n    }\n    distributeEmptySpace(lowPriorityIndex) {\n        const contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n        let emptyDelta = this.size - contentSize;\n        const indexes = range(this.viewItems.length - 1, -1);\n        const lowPriorityIndexes = indexes.filter(i => this.viewItems[i].priority === 1 /* LayoutPriority.Low */);\n        const highPriorityIndexes = indexes.filter(i => this.viewItems[i].priority === 2 /* LayoutPriority.High */);\n        for (const index of highPriorityIndexes) {\n            pushToStart(indexes, index);\n        }\n        for (const index of lowPriorityIndexes) {\n            pushToEnd(indexes, index);\n        }\n        if (typeof lowPriorityIndex === 'number') {\n            pushToEnd(indexes, lowPriorityIndex);\n        }\n        for (let i = 0; emptyDelta !== 0 && i < indexes.length; i++) {\n            const item = this.viewItems[indexes[i]];\n            const size = clamp(item.size + emptyDelta, item.minimumSize, item.maximumSize);\n            const viewDelta = size - item.size;\n            emptyDelta -= viewDelta;\n            item.size = size;\n        }\n    }\n    layoutViews() {\n        // Save new content size\n        this.contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n        // Layout views\n        let offset = 0;\n        for (const viewItem of this.viewItems) {\n            viewItem.layout(offset, this.layoutContext);\n            offset += viewItem.size;\n        }\n        // Layout sashes\n        this.sashItems.forEach(item => item.sash.layout());\n        this.updateSashEnablement();\n        this.updateScrollableElement();\n    }\n    updateScrollableElement() {\n        if (this.orientation === 0 /* Orientation.VERTICAL */) {\n            this.scrollableElement.setScrollDimensions({\n                height: this.size,\n                scrollHeight: this.contentSize\n            });\n        }\n        else {\n            this.scrollableElement.setScrollDimensions({\n                width: this.size,\n                scrollWidth: this.contentSize\n            });\n        }\n    }\n    updateSashEnablement() {\n        let previous = false;\n        const collapsesDown = this.viewItems.map(i => previous = (i.size - i.minimumSize > 0) || previous);\n        previous = false;\n        const expandsDown = this.viewItems.map(i => previous = (i.maximumSize - i.size > 0) || previous);\n        const reverseViews = [...this.viewItems].reverse();\n        previous = false;\n        const collapsesUp = reverseViews.map(i => previous = (i.size - i.minimumSize > 0) || previous).reverse();\n        previous = false;\n        const expandsUp = reverseViews.map(i => previous = (i.maximumSize - i.size > 0) || previous).reverse();\n        let position = 0;\n        for (let index = 0; index < this.sashItems.length; index++) {\n            const { sash } = this.sashItems[index];\n            const viewItem = this.viewItems[index];\n            position += viewItem.size;\n            const min = !(collapsesDown[index] && expandsUp[index + 1]);\n            const max = !(expandsDown[index] && collapsesUp[index + 1]);\n            if (min && max) {\n                const upIndexes = range(index, -1);\n                const downIndexes = range(index + 1, this.viewItems.length);\n                const snapBeforeIndex = this.findFirstSnapIndex(upIndexes);\n                const snapAfterIndex = this.findFirstSnapIndex(downIndexes);\n                const snappedBefore = typeof snapBeforeIndex === 'number' && !this.viewItems[snapBeforeIndex].visible;\n                const snappedAfter = typeof snapAfterIndex === 'number' && !this.viewItems[snapAfterIndex].visible;\n                if (snappedBefore && collapsesUp[index] && (position > 0 || this.startSnappingEnabled)) {\n                    sash.state = 1 /* SashState.AtMinimum */;\n                }\n                else if (snappedAfter && collapsesDown[index] && (position < this.contentSize || this.endSnappingEnabled)) {\n                    sash.state = 2 /* SashState.AtMaximum */;\n                }\n                else {\n                    sash.state = 0 /* SashState.Disabled */;\n                }\n            }\n            else if (min && !max) {\n                sash.state = 1 /* SashState.AtMinimum */;\n            }\n            else if (!min && max) {\n                sash.state = 2 /* SashState.AtMaximum */;\n            }\n            else {\n                sash.state = 3 /* SashState.Enabled */;\n            }\n        }\n    }\n    getSashPosition(sash) {\n        let position = 0;\n        for (let i = 0; i < this.sashItems.length; i++) {\n            position += this.viewItems[i].size;\n            if (this.sashItems[i].sash === sash) {\n                return position;\n            }\n        }\n        return 0;\n    }\n    findFirstSnapIndex(indexes) {\n        // visible views first\n        for (const index of indexes) {\n            const viewItem = this.viewItems[index];\n            if (!viewItem.visible) {\n                continue;\n            }\n            if (viewItem.snap) {\n                return index;\n            }\n        }\n        // then, hidden views\n        for (const index of indexes) {\n            const viewItem = this.viewItems[index];\n            if (viewItem.visible && viewItem.maximumSize - viewItem.minimumSize > 0) {\n                return undefined;\n            }\n            if (!viewItem.visible && viewItem.snap) {\n                return index;\n            }\n        }\n        return undefined;\n    }\n    dispose() {\n        super.dispose();\n        dispose(this.viewItems);\n        this.viewItems = [];\n        this.sashItems.forEach(i => i.disposable.dispose());\n        this.sashItems = [];\n    }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA,SAASA,CAAC,EAAEC,qBAAqB,EAAEC,MAAM,EAAEC,4BAA4B,QAAQ,cAAc;AAC7F,SAASC,IAAI,QAAQ,iBAAiB;AACtC,SAASC,uBAAuB,QAAQ,mCAAmC;AAC3E,SAASC,SAAS,EAAEC,WAAW,EAAEC,KAAK,QAAQ,2BAA2B;AACzE,SAASC,KAAK,QAAQ,0BAA0B;AAChD,SAASC,OAAO,EAAEC,KAAK,QAAQ,0BAA0B;AACzD,SAASC,kBAAkB,EAAEC,UAAU,EAAEC,OAAO,IAAPA,QAAO,EAAEC,YAAY,QAAQ,8BAA8B;AACpG,SAASC,KAAK,QAAQ,4BAA4B;AAClD,SAASC,UAAU,QAAQ,+BAA+B;AAC1D,OAAO,KAAKC,KAAK,MAAM,0BAA0B;AACjD,OAAO,iBAAiB;AACxB,IAAMC,aAAa,GAAG;EAClBC,eAAe,EAAEX,KAAK,CAACY;AAC3B,CAAC;AAAC,IACIC,QAAQ;EACV,kBAAYC,SAAS,EAAEC,IAAI,EAAEC,IAAI,EAAEC,UAAU,EAAE;IAAA;IAC3C,IAAI,CAACH,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACC,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACE,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACC,kBAAkB,GAAGC,SAAS;IACnC,IAAI,OAAOH,IAAI,KAAK,QAAQ,EAAE;MAC1B,IAAI,CAACI,KAAK,GAAGJ,IAAI;MACjB,IAAI,CAACE,kBAAkB,GAAGC,SAAS;MACnCL,SAAS,CAACO,SAAS,CAACC,GAAG,CAAC,SAAS,CAAC;IACtC,CAAC,MACI;MACD,IAAI,CAACF,KAAK,GAAG,CAAC;MACd,IAAI,CAACF,kBAAkB,GAAGF,IAAI,CAACO,iBAAiB;IACpD;EACJ;EAAC;IAAA;IAAA,KAID,eAAW;MACP,OAAO,IAAI,CAACH,KAAK;IACrB,CAAC;IAAA,KALD,aAASJ,IAAI,EAAE;MACX,IAAI,CAACI,KAAK,GAAGJ,IAAI;IACrB;EAAC;IAAA;IAAA,KAID,eAAc;MACV,OAAO,OAAO,IAAI,CAACE,kBAAkB,KAAK,WAAW;IACzD;EAAC;IAAA;IAAA,OACD,oBAAWM,OAAO,EAAER,IAAI,EAAE;MACtB,IAAIS,EAAE,EAAEC,EAAE;MACV,IAAIF,OAAO,KAAK,IAAI,CAACA,OAAO,EAAE;QAC1B;MACJ;MACA,IAAIA,OAAO,EAAE;QACT,IAAI,CAACR,IAAI,GAAGT,KAAK,CAAC,IAAI,CAACW,kBAAkB,EAAE,IAAI,CAACS,eAAe,EAAE,IAAI,CAACC,eAAe,CAAC;QACtF,IAAI,CAACV,kBAAkB,GAAGC,SAAS;MACvC,CAAC,MACI;QACD,IAAI,CAACD,kBAAkB,GAAG,OAAOF,IAAI,KAAK,QAAQ,GAAGA,IAAI,GAAG,IAAI,CAACA,IAAI;QACrE,IAAI,CAACA,IAAI,GAAG,CAAC;MACjB;MACA,IAAI,CAACF,SAAS,CAACO,SAAS,CAACQ,MAAM,CAAC,SAAS,EAAEL,OAAO,CAAC;MACnD,CAACE,EAAE,GAAG,CAACD,EAAE,GAAG,IAAI,CAACV,IAAI,EAAEe,UAAU,MAAM,IAAI,IAAIJ,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACK,IAAI,CAACN,EAAE,EAAED,OAAO,CAAC;IAChG;EAAC;IAAA;IAAA,KACD,eAAkB;MAAE,OAAO,IAAI,CAACA,OAAO,GAAG,IAAI,CAACT,IAAI,CAACiB,WAAW,GAAG,CAAC;IAAE;EAAC;IAAA;IAAA,KACtE,eAAsB;MAAE,OAAO,IAAI,CAACjB,IAAI,CAACiB,WAAW;IAAE;EAAC;IAAA;IAAA,KACvD,eAAkB;MAAE,OAAO,IAAI,CAACR,OAAO,GAAG,IAAI,CAACT,IAAI,CAACkB,WAAW,GAAG,CAAC;IAAE;EAAC;IAAA;IAAA,KACtE,eAAsB;MAAE,OAAO,IAAI,CAAClB,IAAI,CAACkB,WAAW;IAAE;EAAC;IAAA;IAAA,KACvD,eAAe;MAAE,OAAO,IAAI,CAAClB,IAAI,CAACmB,QAAQ;IAAE;EAAC;IAAA;IAAA,KAC7C,eAAW;MAAE,OAAO,CAAC,CAAC,IAAI,CAACnB,IAAI,CAACoB,IAAI;IAAE;EAAC;IAAA;IAAA,KACvC,aAAYC,OAAO,EAAE;MACjB,IAAI,CAACtB,SAAS,CAACuB,KAAK,CAACC,aAAa,GAAGF,OAAO,GAAG,EAAE,GAAG,MAAM;IAC9D;EAAC;IAAA;IAAA,OACD,gBAAOG,MAAM,EAAEC,aAAa,EAAE;MAC1B,IAAI,CAACC,eAAe,CAACF,MAAM,CAAC;MAC5B,IAAI,CAACxB,IAAI,CAAC2B,MAAM,CAAC,IAAI,CAAC1B,IAAI,EAAEuB,MAAM,EAAEC,aAAa,CAAC;IACtD;EAAC;IAAA;IAAA,OACD,mBAAU;MACN,IAAI,CAACvB,UAAU,CAACZ,OAAO,EAAE;MACzB,OAAO,IAAI,CAACU,IAAI;IACpB;EAAC;EAAA;AAAA;AAAA,IAEC4B,gBAAgB;EAAA;EAAA;EAAA;IAAA;IAAA;EAAA;EAAA;IAAA;IAAA,OAClB,yBAAgBJ,MAAM,EAAE;MACpB,IAAI,CAACzB,SAAS,CAACuB,KAAK,CAACO,GAAG,aAAML,MAAM,OAAI;MACxC,IAAI,CAACzB,SAAS,CAACuB,KAAK,CAACQ,MAAM,aAAM,IAAI,CAAC7B,IAAI,OAAI;IAClD;EAAC;EAAA;AAAA,EAJ0BH,QAAQ;AAAA,IAMjCiC,kBAAkB;EAAA;EAAA;EAAA;IAAA;IAAA;EAAA;EAAA;IAAA;IAAA,OACpB,yBAAgBP,MAAM,EAAE;MACpB,IAAI,CAACzB,SAAS,CAACuB,KAAK,CAACU,IAAI,aAAMR,MAAM,OAAI;MACzC,IAAI,CAACzB,SAAS,CAACuB,KAAK,CAACW,KAAK,aAAM,IAAI,CAAChC,IAAI,OAAI;IACjD;EAAC;EAAA;AAAA,EAJ4BH,QAAQ;AAMzC,IAAIoC,KAAK;AACT,CAAC,UAAUA,KAAK,EAAE;EACdA,KAAK,CAACA,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM;EACjCA,KAAK,CAACA,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM;AACrC,CAAC,EAAEA,KAAK,KAAKA,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC;AACzB,OAAO,IAAIC,MAAM;AACjB,CAAC,UAAUA,MAAM,EAAE;EACf;AACJ;AACA;AACA;EACIA,MAAM,CAACC,UAAU,GAAG;IAAEC,IAAI,EAAE;EAAa,CAAC;EAC1C;AACJ;AACA;AACA;EACI,SAASC,KAAK,CAACC,KAAK,EAAE;IAAE,OAAO;MAAEF,IAAI,EAAE,OAAO;MAAEE,KAAK,EAALA;IAAM,CAAC;EAAE;EACzDJ,MAAM,CAACG,KAAK,GAAGA,KAAK;EACpB;AACJ;AACA;EACI,SAASE,SAAS,CAAChC,iBAAiB,EAAE;IAAE,OAAO;MAAE6B,IAAI,EAAE,WAAW;MAAE7B,iBAAiB,EAAjBA;IAAkB,CAAC;EAAE;EACzF2B,MAAM,CAACK,SAAS,GAAGA,SAAS;AAChC,CAAC,EAAEL,MAAM,KAAKA,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAaM,SAAS;EAAA;EAAA;EAClB;AACJ;AACA;EACI,mBAAY1C,SAAS,EAAgB;IAAA;IAAA,IAAd2C,OAAO,uEAAG,CAAC,CAAC;IAAA;IAC/B,IAAIhC,EAAE,EAAEC,EAAE,EAAEgC,EAAE,EAAEC,EAAE,EAAEC,EAAE;IACtB;IACA,MAAK5C,IAAI,GAAG,CAAC;IACb,MAAK6C,WAAW,GAAG,CAAC;IACpB,MAAKC,WAAW,GAAG3C,SAAS;IAC5B,MAAK4C,SAAS,GAAG,EAAE;IACnB,MAAKC,SAAS,GAAG,EAAE;IACnB,MAAKC,KAAK,GAAGhB,KAAK,CAACiB,IAAI;IACvB,MAAKC,gBAAgB,GAAG,MAAKC,SAAS,CAAC,IAAInE,OAAO,EAAE,CAAC;IACrD,MAAKoE,eAAe,GAAG,MAAKD,SAAS,CAAC,IAAInE,OAAO,EAAE,CAAC;IACpD,MAAKqE,qBAAqB,GAAG,IAAI;IACjC,MAAKC,mBAAmB,GAAG,IAAI;IAC/B;AACR;AACA;IACQ,MAAKC,eAAe,GAAG,MAAKL,gBAAgB,CAACM,KAAK;IAClD;AACR;AACA;IACQ,MAAKC,cAAc,GAAG,MAAKL,eAAe,CAACI,KAAK;IAChD,MAAKE,WAAW,GAAG,CAAClD,EAAE,GAAGgC,OAAO,CAACkB,WAAW,MAAM,IAAI,IAAIlD,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,CAAC,CAAC;IACjF,MAAKmD,kBAAkB,GAAG,CAAClD,EAAE,GAAG+B,OAAO,CAACmB,kBAAkB,MAAM,IAAI,IAAIlD,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,KAAK;IAClG,MAAKmD,kBAAkB,GAAG,CAACnB,EAAE,GAAGD,OAAO,CAACoB,kBAAkB,MAAM,IAAI,IAAInB,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,IAAI;IACjG,MAAKoB,qBAAqB,GAAGrB,OAAO,CAACqB,qBAAqB;IAC1D,MAAKC,EAAE,GAAGC,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;IACvC,MAAKF,EAAE,CAAC1D,SAAS,CAACC,GAAG,CAAC,oBAAoB,CAAC;IAC3C,MAAKyD,EAAE,CAAC1D,SAAS,CAACC,GAAG,CAAC,MAAKqD,WAAW,KAAK,CAAC,CAAC,6BAA6B,UAAU,GAAG,YAAY,CAAC;IACpG7D,SAAS,CAACoE,WAAW,CAAC,MAAKH,EAAE,CAAC;IAC9B,MAAKI,aAAa,GAAG1F,MAAM,CAAC,MAAKsF,EAAE,EAAExF,CAAC,CAAC,iBAAiB,CAAC,CAAC;IAC1D,MAAK6F,aAAa,GAAG7F,CAAC,CAAC,uBAAuB,CAAC;IAC/C,MAAK8F,UAAU,GAAG,IAAI7E,UAAU,CAAC;MAC7B8E,kBAAkB,EAAE,IAAI;MACxBC,oBAAoB,EAAE,GAAG;MACzB7F,4BAA4B,EAA5BA;IACJ,CAAC,CAAC;IACF,MAAK8F,iBAAiB,GAAG,MAAKpB,SAAS,CAAC,IAAIxE,uBAAuB,CAAC,MAAKwF,aAAa,EAAE;MACpFK,QAAQ,EAAE,MAAKd,WAAW,KAAK,CAAC,CAAC,6BAA8B,CAAChB,EAAE,GAAGF,OAAO,CAACiC,mBAAmB,MAAM,IAAI,IAAI/B,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,CAAC,CAAC,iCAAkC,CAAC,CAAC;MACzKgC,UAAU,EAAE,MAAKhB,WAAW,KAAK,CAAC,CAAC,+BAAgC,CAACf,EAAE,GAAGH,OAAO,CAACiC,mBAAmB,MAAM,IAAI,IAAI9B,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,CAAC,CAAC,iCAAkC,CAAC,CAAC;IACjL,CAAC,EAAE,MAAKyB,UAAU,CAAC,CAAC;IACpB,MAAKO,WAAW,GAAG,MAAKJ,iBAAiB,CAACK,QAAQ;IAClD,MAAKzB,SAAS,CAAC,MAAKwB,WAAW,CAAC,UAAAE,CAAC,EAAI;MACjC,MAAKV,aAAa,CAACW,SAAS,GAAGD,CAAC,CAACC,SAAS;MAC1C,MAAKX,aAAa,CAACY,UAAU,GAAGF,CAAC,CAACE,UAAU;IAChD,CAAC,CAAC,CAAC;IACHvG,MAAM,CAAC,MAAKsF,EAAE,EAAE,MAAKS,iBAAiB,CAACS,UAAU,EAAE,CAAC;IACpD,MAAK5D,KAAK,CAACoB,OAAO,CAACyC,MAAM,IAAIxF,aAAa,CAAC;IAC3C;IACA,IAAI+C,OAAO,CAAC0C,UAAU,EAAE;MACpB,MAAKnF,IAAI,GAAGyC,OAAO,CAAC0C,UAAU,CAACnF,IAAI;MACnCyC,OAAO,CAAC0C,UAAU,CAACC,KAAK,CAACC,OAAO,CAAC,UAACC,cAAc,EAAEhD,KAAK,EAAK;QACxD,IAAMiD,MAAM,GAAG9F,KAAK,CAAC+F,WAAW,CAACF,cAAc,CAAC9E,OAAO,CAAC,IAAI8E,cAAc,CAAC9E,OAAO,GAAG8E,cAAc,CAACtF,IAAI,GAAG;UAAEoC,IAAI,EAAE,WAAW;UAAE7B,iBAAiB,EAAE+E,cAAc,CAACtF;QAAK,CAAC;QACxK,IAAMD,IAAI,GAAGuF,cAAc,CAACvF,IAAI;QAChC,MAAK0F,SAAS,CAAC1F,IAAI,EAAEwF,MAAM,EAAEjD,KAAK,EAAE,IAAI,CAAC;MAC7C,CAAC,CAAC;MACF;MACA,MAAKO,WAAW,GAAG,MAAKE,SAAS,CAAC2C,MAAM,CAAC,UAACC,CAAC,EAAEC,CAAC;QAAA,OAAKD,CAAC,GAAGC,CAAC,CAAC5F,IAAI;MAAA,GAAE,CAAC,CAAC;MACjE,MAAK6F,eAAe,EAAE;IAC1B;IAAC;EACL;EAAC;IAAA;IAAA,KACD,eAA0B;MAAE,OAAO,IAAI,CAACC,oBAAoB;IAAE,CAAC;IAAA;IAI/D;AACJ;AACA;AACA;AACA;IACI,aAAwBC,IAAI,EAAE;MAAA,2CACH,IAAI,CAAC/C,SAAS;QAAA;MAAA;QAArC,oDAAuC;UAAA,IAA5BgD,QAAQ;UACfA,QAAQ,CAACD,IAAI,CAACE,mBAAmB,GAAGF,IAAI;QAC5C;MAAC;QAAA;MAAA;QAAA;MAAA;MACD,IAAI,CAACD,oBAAoB,GAAGC,IAAI;IACpC;IACA;AACJ;AACA;AACA;AACA;EAJI;IAAA;IAAA,KAdA,eAAwB;MAAE,OAAO,IAAI,CAACG,kBAAkB;IAAE,CAAC;IAAA,KAmB3D,aAAsBH,IAAI,EAAE;MAAA,4CACD,IAAI,CAAC/C,SAAS;QAAA;MAAA;QAArC,uDAAuC;UAAA,IAA5BgD,QAAQ;UACfA,QAAQ,CAACD,IAAI,CAACI,iBAAiB,GAAGJ,IAAI;QAC1C;MAAC;QAAA;MAAA;QAAA;MAAA;MACD,IAAI,CAACG,kBAAkB,GAAGH,IAAI;IAClC;IACA;AACJ;AACA;EAFI;IAAA;IAAA,KAxBA,eAA2B;MAAE,OAAO,IAAI,CAACzC,qBAAqB;IAAE,CAAC;IAAA,KA2BjE,aAAyB8C,oBAAoB,EAAE;MAC3C,IAAI,IAAI,CAAC9C,qBAAqB,KAAK8C,oBAAoB,EAAE;QACrD;MACJ;MACA,IAAI,CAAC9C,qBAAqB,GAAG8C,oBAAoB;MACjD,IAAI,CAACC,oBAAoB,EAAE;IAC/B;IACA;AACJ;AACA;EAFI;IAAA;IAAA,KAjCA,eAAyB;MAAE,OAAO,IAAI,CAAC9C,mBAAmB;IAAE,CAAC;IAAA,KAoC7D,aAAuB+C,kBAAkB,EAAE;MACvC,IAAI,IAAI,CAAC/C,mBAAmB,KAAK+C,kBAAkB,EAAE;QACjD;MACJ;MACA,IAAI,CAAC/C,mBAAmB,GAAG+C,kBAAkB;MAC7C,IAAI,CAACD,oBAAoB,EAAE;IAC/B;EAAC;IAAA;IAAA,OACD,eAAMnB,MAAM,EAAE;MACV,IAAIA,MAAM,CAACvF,eAAe,CAAC4G,aAAa,EAAE,EAAE;QACxC,IAAI,CAACxC,EAAE,CAAC1D,SAAS,CAACmG,MAAM,CAAC,kBAAkB,CAAC;QAC5C,IAAI,CAACzC,EAAE,CAAC1C,KAAK,CAACoF,cAAc,CAAC,oBAAoB,CAAC;MACtD,CAAC,MACI;QACD,IAAI,CAAC1C,EAAE,CAAC1D,SAAS,CAACC,GAAG,CAAC,kBAAkB,CAAC;QACzC,IAAI,CAACyD,EAAE,CAAC1C,KAAK,CAACqF,WAAW,CAAC,oBAAoB,EAAExB,MAAM,CAACvF,eAAe,CAACgH,QAAQ,EAAE,CAAC;MACtF;IACJ;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EAPI;IAAA;IAAA,OAQA,iBAAQ5G,IAAI,EAAEC,IAAI,EAA6C;MAAA,IAA3CsC,KAAK,uEAAG,IAAI,CAACS,SAAS,CAAC6D,MAAM;MAAA,IAAEC,UAAU;MACzD,IAAI,CAACpB,SAAS,CAAC1F,IAAI,EAAEC,IAAI,EAAEsC,KAAK,EAAEuE,UAAU,CAAC;IACjD;IACA;AACJ;AACA;AACA;AACA;AACA;EALI;IAAA;IAAA,OAMA,gBAAO7G,IAAI,EAAEwB,aAAa,EAAE;MAAA;MACxB,IAAMsF,YAAY,GAAGC,IAAI,CAACC,GAAG,CAAC,IAAI,CAAChH,IAAI,EAAE,IAAI,CAAC6C,WAAW,CAAC;MAC1D,IAAI,CAAC7C,IAAI,GAAGA,IAAI;MAChB,IAAI,CAACwB,aAAa,GAAGA,aAAa;MAClC,IAAI,CAAC,IAAI,CAACsB,WAAW,EAAE;QACnB,IAAMmE,OAAO,GAAGlI,KAAK,CAAC,IAAI,CAACgE,SAAS,CAAC6D,MAAM,CAAC;QAC5C,IAAMM,kBAAkB,GAAGD,OAAO,CAACE,MAAM,CAAC,UAAAvB,CAAC;UAAA,OAAI,MAAI,CAAC7C,SAAS,CAAC6C,CAAC,CAAC,CAAC1E,QAAQ,KAAK,CAAC;QAAA,EAAC,yBAAyB;QACzG,IAAMkG,mBAAmB,GAAGH,OAAO,CAACE,MAAM,CAAC,UAAAvB,CAAC;UAAA,OAAI,MAAI,CAAC7C,SAAS,CAAC6C,CAAC,CAAC,CAAC1E,QAAQ,KAAK,CAAC;QAAA,EAAC,0BAA0B;QAC3G,IAAI,CAACmG,MAAM,CAAC,IAAI,CAACtE,SAAS,CAAC6D,MAAM,GAAG,CAAC,EAAE5G,IAAI,GAAG8G,YAAY,EAAE3G,SAAS,EAAE+G,kBAAkB,EAAEE,mBAAmB,CAAC;MACnH,CAAC,MACI;QACD,KAAK,IAAIxB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAAC7C,SAAS,CAAC6D,MAAM,EAAEhB,CAAC,EAAE,EAAE;UAC5C,IAAM0B,IAAI,GAAG,IAAI,CAACvE,SAAS,CAAC6C,CAAC,CAAC;UAC9B0B,IAAI,CAACtH,IAAI,GAAGT,KAAK,CAACwH,IAAI,CAACQ,KAAK,CAAC,IAAI,CAACzE,WAAW,CAAC8C,CAAC,CAAC,GAAG5F,IAAI,CAAC,EAAEsH,IAAI,CAACtG,WAAW,EAAEsG,IAAI,CAACrG,WAAW,CAAC;QACjG;MACJ;MACA,IAAI,CAACuG,oBAAoB,EAAE;MAC3B,IAAI,CAACC,WAAW,EAAE;IACtB;EAAC;IAAA;IAAA,OACD,2BAAkB;MAAA;MACd,IAAI,IAAI,CAAC5D,kBAAkB,IAAI,IAAI,CAAChB,WAAW,GAAG,CAAC,EAAE;QACjD,IAAI,CAACC,WAAW,GAAG,IAAI,CAACC,SAAS,CAAC2E,GAAG,CAAC,UAAA9B,CAAC;UAAA,OAAIA,CAAC,CAAC5F,IAAI,GAAG,MAAI,CAAC6C,WAAW;QAAA,EAAC;MACzE;IACJ;EAAC;IAAA;IAAA,OACD,2BAAkC;MAAA;MAAA,IAApBkD,IAAI,QAAJA,IAAI;QAAE4B,KAAK,QAALA,KAAK;QAAEC,GAAG,QAAHA,GAAG;MAAA,4CACP,IAAI,CAAC7E,SAAS;QAAA;MAAA;QAAjC,uDAAmC;UAAA,IAAxBuE,IAAI;UACXA,IAAI,CAAClG,OAAO,GAAG,KAAK;QACxB;MAAC;QAAA;MAAA;QAAA;MAAA;MACD,IAAMkB,KAAK,GAAG,IAAI,CAACU,SAAS,CAAC6E,SAAS,CAAC,UAAAP,IAAI;QAAA,OAAIA,IAAI,CAACvB,IAAI,KAAKA,IAAI;MAAA,EAAC;MAClE;MACA,IAAM9F,UAAU,GAAGd,kBAAkB,CAACX,qBAAqB,CAACwF,QAAQ,CAAC8D,IAAI,EAAE,SAAS,EAAE,UAAAhD,CAAC;QAAA,OAAIiD,kBAAkB,CAAC,MAAI,CAACC,aAAa,CAACC,OAAO,EAAEnD,CAAC,CAACoD,MAAM,CAAC;MAAA,EAAC,EAAE1J,qBAAqB,CAACwF,QAAQ,CAAC8D,IAAI,EAAE,OAAO,EAAE;QAAA,OAAMC,kBAAkB,CAAC,MAAI,CAACC,aAAa,CAACC,OAAO,EAAE,KAAK,CAAC;MAAA,EAAC,CAAC;MACjQ,IAAMF,kBAAkB,GAAG,SAArBA,kBAAkB,CAAIJ,KAAK,EAAEC,GAAG,EAAK;QACvC,IAAMO,KAAK,GAAG,MAAI,CAACpF,SAAS,CAAC2E,GAAG,CAAC,UAAA9B,CAAC;UAAA,OAAIA,CAAC,CAAC5F,IAAI;QAAA,EAAC;QAC7C,IAAIoI,QAAQ,GAAGC,MAAM,CAACC,iBAAiB;QACvC,IAAIC,QAAQ,GAAGF,MAAM,CAACG,iBAAiB;QACvC,IAAI,MAAI,CAAC5E,kBAAkB,EAAE;UACzBgE,GAAG,GAAG,CAACA,GAAG;QACd;QACA,IAAIA,GAAG,EAAE;UACL;UACA;UACA;UACA,IAAMa,UAAU,GAAGnG,KAAK,KAAK,MAAI,CAACU,SAAS,CAAC4D,MAAM,GAAG,CAAC;UACtD,IAAI6B,UAAU,EAAE;YACZ,IAAMC,QAAQ,GAAG,MAAI,CAAC3F,SAAS,CAACT,KAAK,CAAC;YACtC8F,QAAQ,GAAG,CAACM,QAAQ,CAAC1H,WAAW,GAAG0H,QAAQ,CAAC1I,IAAI,IAAI,CAAC;YACrDuI,QAAQ,GAAG,CAACG,QAAQ,CAACzH,WAAW,GAAGyH,QAAQ,CAAC1I,IAAI,IAAI,CAAC;UACzD,CAAC,MACI;YACD,IAAM0I,SAAQ,GAAG,MAAI,CAAC3F,SAAS,CAACT,KAAK,GAAG,CAAC,CAAC;YAC1C8F,QAAQ,GAAG,CAACM,SAAQ,CAAC1I,IAAI,GAAG0I,SAAQ,CAACzH,WAAW,IAAI,CAAC;YACrDsH,QAAQ,GAAG,CAACG,SAAQ,CAAC1I,IAAI,GAAG0I,SAAQ,CAAC1H,WAAW,IAAI,CAAC;UACzD;QACJ;QACA,IAAI2H,UAAU;QACd,IAAIC,SAAS;QACb,IAAI,CAAChB,GAAG,EAAE;UACN,IAAMiB,SAAS,GAAG9J,KAAK,CAACuD,KAAK,EAAE,CAAC,CAAC,CAAC;UAClC,IAAMwG,WAAW,GAAG/J,KAAK,CAACuD,KAAK,GAAG,CAAC,EAAE,MAAI,CAACS,SAAS,CAAC6D,MAAM,CAAC;UAC3D,IAAMmC,UAAU,GAAGF,SAAS,CAACnD,MAAM,CAAC,UAACC,CAAC,EAAEC,CAAC;YAAA,OAAKD,CAAC,IAAI,MAAI,CAAC5C,SAAS,CAAC6C,CAAC,CAAC,CAAC5E,WAAW,GAAGmH,KAAK,CAACvC,CAAC,CAAC,CAAC;UAAA,GAAE,CAAC,CAAC;UAChG,IAAMoD,UAAU,GAAGH,SAAS,CAACnD,MAAM,CAAC,UAACC,CAAC,EAAEC,CAAC;YAAA,OAAKD,CAAC,IAAI,MAAI,CAAC5C,SAAS,CAAC6C,CAAC,CAAC,CAAChF,eAAe,GAAGuH,KAAK,CAACvC,CAAC,CAAC,CAAC;UAAA,GAAE,CAAC,CAAC;UACpG,IAAMqD,YAAY,GAAGH,WAAW,CAAClC,MAAM,KAAK,CAAC,GAAGyB,MAAM,CAACG,iBAAiB,GAAGM,WAAW,CAACpD,MAAM,CAAC,UAACC,CAAC,EAAEC,CAAC;YAAA,OAAKD,CAAC,IAAIwC,KAAK,CAACvC,CAAC,CAAC,GAAG,MAAI,CAAC7C,SAAS,CAAC6C,CAAC,CAAC,CAAC5E,WAAW,CAAC;UAAA,GAAE,CAAC,CAAC;UAC1J,IAAMkI,YAAY,GAAGJ,WAAW,CAAClC,MAAM,KAAK,CAAC,GAAGyB,MAAM,CAACC,iBAAiB,GAAGQ,WAAW,CAACpD,MAAM,CAAC,UAACC,CAAC,EAAEC,CAAC;YAAA,OAAKD,CAAC,IAAIwC,KAAK,CAACvC,CAAC,CAAC,GAAG,MAAI,CAAC7C,SAAS,CAAC6C,CAAC,CAAC,CAAChF,eAAe,CAAC;UAAA,GAAE,CAAC,CAAC;UAC9J,IAAMwH,SAAQ,GAAGrB,IAAI,CAACC,GAAG,CAAC+B,UAAU,EAAEG,YAAY,CAAC;UACnD,IAAMX,SAAQ,GAAGxB,IAAI,CAACoC,GAAG,CAACF,YAAY,EAAED,UAAU,CAAC;UACnD,IAAMI,eAAe,GAAG,MAAI,CAACC,kBAAkB,CAACR,SAAS,CAAC;UAC1D,IAAMS,cAAc,GAAG,MAAI,CAACD,kBAAkB,CAACP,WAAW,CAAC;UAC3D,IAAI,OAAOM,eAAe,KAAK,QAAQ,EAAE;YACrC,IAAMV,UAAQ,GAAG,MAAI,CAAC3F,SAAS,CAACqG,eAAe,CAAC;YAChD,IAAMG,QAAQ,GAAGxC,IAAI,CAACyC,KAAK,CAACd,UAAQ,CAAC/H,eAAe,GAAG,CAAC,CAAC;YACzDgI,UAAU,GAAG;cACTrG,KAAK,EAAE8G,eAAe;cACtBK,UAAU,EAAEf,UAAQ,CAAClI,OAAO,GAAG4H,SAAQ,GAAGmB,QAAQ,GAAGnB,SAAQ,GAAGmB,QAAQ;cACxEvJ,IAAI,EAAE0I,UAAQ,CAAC1I;YACnB,CAAC;UACL;UACA,IAAI,OAAOsJ,cAAc,KAAK,QAAQ,EAAE;YACpC,IAAMZ,UAAQ,GAAG,MAAI,CAAC3F,SAAS,CAACuG,cAAc,CAAC;YAC/C,IAAMC,SAAQ,GAAGxC,IAAI,CAACyC,KAAK,CAACd,UAAQ,CAAC/H,eAAe,GAAG,CAAC,CAAC;YACzDiI,SAAS,GAAG;cACRtG,KAAK,EAAEgH,cAAc;cACrBG,UAAU,EAAEf,UAAQ,CAAClI,OAAO,GAAG+H,SAAQ,GAAGgB,SAAQ,GAAGhB,SAAQ,GAAGgB,SAAQ;cACxEvJ,IAAI,EAAE0I,UAAQ,CAAC1I;YACnB,CAAC;UACL;QACJ;QACA,MAAI,CAACgI,aAAa,GAAG;UAAEL,KAAK,EAALA,KAAK;UAAEM,OAAO,EAAEN,KAAK;UAAErF,KAAK,EAALA,KAAK;UAAE6F,KAAK,EAALA,KAAK;UAAEC,QAAQ,EAARA,QAAQ;UAAEG,QAAQ,EAARA,QAAQ;UAAEX,GAAG,EAAHA,GAAG;UAAEe,UAAU,EAAVA,UAAU;UAAEC,SAAS,EAATA,SAAS;UAAE3I,UAAU,EAAVA;QAAW,CAAC;MAC5H,CAAC;MACD8H,kBAAkB,CAACJ,KAAK,EAAEC,GAAG,CAAC;IAClC;EAAC;IAAA;IAAA,OACD,6BAA0B;MAAA,IAAXK,OAAO,SAAPA,OAAO;MAClB,0BAAgF,IAAI,CAACD,aAAa;QAA1F1F,KAAK,uBAALA,KAAK;QAAEqF,KAAK,uBAALA,KAAK;QAAEQ,KAAK,uBAALA,KAAK;QAAEP,GAAG,uBAAHA,GAAG;QAAEQ,QAAQ,uBAARA,QAAQ;QAAEG,QAAQ,uBAARA,QAAQ;QAAEI,UAAU,uBAAVA,UAAU;QAAEC,SAAS,uBAATA,SAAS;MAC3E,IAAI,CAACZ,aAAa,CAACC,OAAO,GAAGA,OAAO;MACpC,IAAMyB,KAAK,GAAGzB,OAAO,GAAGN,KAAK;MAC7B,IAAMgC,QAAQ,GAAG,IAAI,CAACtC,MAAM,CAAC/E,KAAK,EAAEoH,KAAK,EAAEvB,KAAK,EAAEhI,SAAS,EAAEA,SAAS,EAAEiI,QAAQ,EAAEG,QAAQ,EAAEI,UAAU,EAAEC,SAAS,CAAC;MAClH,IAAIhB,GAAG,EAAE;QACL,IAAMa,UAAU,GAAGnG,KAAK,KAAK,IAAI,CAACU,SAAS,CAAC4D,MAAM,GAAG,CAAC;QACtD,IAAMgD,QAAQ,GAAG,IAAI,CAAC7G,SAAS,CAAC2E,GAAG,CAAC,UAAA9B,CAAC;UAAA,OAAIA,CAAC,CAAC5F,IAAI;QAAA,EAAC;QAChD,IAAM6J,aAAa,GAAGpB,UAAU,GAAGnG,KAAK,GAAGA,KAAK,GAAG,CAAC;QACpD,IAAMoG,QAAQ,GAAG,IAAI,CAAC3F,SAAS,CAAC8G,aAAa,CAAC;QAC9C,IAAMC,WAAW,GAAGpB,QAAQ,CAAC1I,IAAI,GAAG0I,QAAQ,CAACzH,WAAW;QACxD,IAAM8I,WAAW,GAAGrB,QAAQ,CAAC1I,IAAI,GAAG0I,QAAQ,CAAC1H,WAAW;QACxD,IAAMgJ,WAAW,GAAGvB,UAAU,GAAGnG,KAAK,GAAG,CAAC,GAAGA,KAAK,GAAG,CAAC;QACtD,IAAI,CAAC+E,MAAM,CAAC2C,WAAW,EAAE,CAACL,QAAQ,EAAEC,QAAQ,EAAEzJ,SAAS,EAAEA,SAAS,EAAE2J,WAAW,EAAEC,WAAW,CAAC;MACjG;MACA,IAAI,CAACvC,oBAAoB,EAAE;MAC3B,IAAI,CAACC,WAAW,EAAE;IACtB;EAAC;IAAA;IAAA,OACD,mBAAUnF,KAAK,EAAE;MACb,IAAI,CAACa,gBAAgB,CAAC8G,IAAI,CAAC3H,KAAK,CAAC;MACjC,IAAI,CAAC0F,aAAa,CAAC/H,UAAU,CAACZ,OAAO,EAAE;MACvC,IAAI,CAACwG,eAAe,EAAE;MAAC,4CACJ,IAAI,CAAC9C,SAAS;QAAA;MAAA;QAAjC,uDAAmC;UAAA,IAAxBuE,IAAI;UACXA,IAAI,CAAClG,OAAO,GAAG,IAAI;QACvB;MAAC;QAAA;MAAA;QAAA;MAAA;IACL;EAAC;IAAA;IAAA,OACD,sBAAakG,IAAI,EAAEtH,IAAI,EAAE;MACrB,IAAMsC,KAAK,GAAG,IAAI,CAACS,SAAS,CAACmH,OAAO,CAAC5C,IAAI,CAAC;MAC1C,IAAIhF,KAAK,GAAG,CAAC,IAAIA,KAAK,IAAI,IAAI,CAACS,SAAS,CAAC6D,MAAM,EAAE;QAC7C;MACJ;MACA5G,IAAI,GAAG,OAAOA,IAAI,KAAK,QAAQ,GAAGA,IAAI,GAAGsH,IAAI,CAACtH,IAAI;MAClDA,IAAI,GAAGT,KAAK,CAACS,IAAI,EAAEsH,IAAI,CAACtG,WAAW,EAAEsG,IAAI,CAACrG,WAAW,CAAC;MACtD,IAAI,IAAI,CAAC2C,kBAAkB,IAAItB,KAAK,GAAG,CAAC,EAAE;QACtC;QACA;QACA,IAAI,CAAC+E,MAAM,CAAC/E,KAAK,GAAG,CAAC,EAAEyE,IAAI,CAACyC,KAAK,CAAC,CAAClC,IAAI,CAACtH,IAAI,GAAGA,IAAI,IAAI,CAAC,CAAC,CAAC;QAC1D,IAAI,CAACwH,oBAAoB,EAAE;QAC3B,IAAI,CAACC,WAAW,EAAE;MACtB,CAAC,MACI;QACDH,IAAI,CAACtH,IAAI,GAAGA,IAAI;QAChB,IAAI,CAACmK,QAAQ,CAAC,CAAC7H,KAAK,CAAC,EAAEnC,SAAS,CAAC;MACrC;IACJ;IACA;AACJ;AACA;AACA;AACA;AACA;EALI;IAAA;IAAA,OAMA,oBAAWmC,KAAK,EAAEtC,IAAI,EAAE;MAAA;MACpB,IAAI,IAAI,CAACiD,KAAK,KAAKhB,KAAK,CAACiB,IAAI,EAAE;QAC3B,MAAM,IAAIkH,KAAK,CAAC,uBAAuB,CAAC;MAC5C;MACA,IAAI,CAACnH,KAAK,GAAGhB,KAAK,CAACoI,IAAI;MACvB,IAAI/H,KAAK,GAAG,CAAC,IAAIA,KAAK,IAAI,IAAI,CAACS,SAAS,CAAC6D,MAAM,EAAE;QAC7C;MACJ;MACA,IAAMK,OAAO,GAAGlI,KAAK,CAAC,IAAI,CAACgE,SAAS,CAAC6D,MAAM,CAAC,CAACO,MAAM,CAAC,UAAAvB,CAAC;QAAA,OAAIA,CAAC,KAAKtD,KAAK;MAAA,EAAC;MACrE,IAAM4E,kBAAkB,gCAAOD,OAAO,CAACE,MAAM,CAAC,UAAAvB,CAAC;QAAA,OAAI,MAAI,CAAC7C,SAAS,CAAC6C,CAAC,CAAC,CAAC1E,QAAQ,KAAK,CAAC;MAAA,EAAC,yBAAyB,IAAEoB,KAAK,EAAC;MACrH,IAAM8E,mBAAmB,GAAGH,OAAO,CAACE,MAAM,CAAC,UAAAvB,CAAC;QAAA,OAAI,MAAI,CAAC7C,SAAS,CAAC6C,CAAC,CAAC,CAAC1E,QAAQ,KAAK,CAAC;MAAA,EAAC,0BAA0B;MAC3G,IAAMoG,IAAI,GAAG,IAAI,CAACvE,SAAS,CAACT,KAAK,CAAC;MAClCtC,IAAI,GAAG+G,IAAI,CAACQ,KAAK,CAACvH,IAAI,CAAC;MACvBA,IAAI,GAAGT,KAAK,CAACS,IAAI,EAAEsH,IAAI,CAACtG,WAAW,EAAE+F,IAAI,CAACoC,GAAG,CAAC7B,IAAI,CAACrG,WAAW,EAAE,IAAI,CAACjB,IAAI,CAAC,CAAC;MAC3EsH,IAAI,CAACtH,IAAI,GAAGA,IAAI;MAChB,IAAI,CAACmK,QAAQ,CAACjD,kBAAkB,EAAEE,mBAAmB,CAAC;MACtD,IAAI,CAACnE,KAAK,GAAGhB,KAAK,CAACiB,IAAI;IAC3B;IACA;AACJ;AACA;EAFI;IAAA;IAAA,OAGA,+BAAsB;MAAA;MAClB,IAAMoH,iBAAiB,GAAG,EAAE;MAC5B,IAAIC,YAAY,GAAG,CAAC;MAAC,4CACF,IAAI,CAACxH,SAAS;QAAA;MAAA;QAAjC,uDAAmC;UAAA,IAAxBuE,KAAI;UACX,IAAIA,KAAI,CAACrG,WAAW,GAAGqG,KAAI,CAACtG,WAAW,GAAG,CAAC,EAAE;YACzCsJ,iBAAiB,CAACE,IAAI,CAAClD,KAAI,CAAC;YAC5BiD,YAAY,IAAIjD,KAAI,CAACtH,IAAI;UAC7B;QACJ;MAAC;QAAA;MAAA;QAAA;MAAA;MACD,IAAMA,IAAI,GAAG+G,IAAI,CAACyC,KAAK,CAACe,YAAY,GAAGD,iBAAiB,CAAC1D,MAAM,CAAC;MAChE,sCAAmB0D,iBAAiB,wCAAE;QAAjC,IAAMhD,IAAI;QACXA,IAAI,CAACtH,IAAI,GAAGT,KAAK,CAACS,IAAI,EAAEsH,IAAI,CAACtG,WAAW,EAAEsG,IAAI,CAACrG,WAAW,CAAC;MAC/D;MACA,IAAMgG,OAAO,GAAGlI,KAAK,CAAC,IAAI,CAACgE,SAAS,CAAC6D,MAAM,CAAC;MAC5C,IAAMM,kBAAkB,GAAGD,OAAO,CAACE,MAAM,CAAC,UAAAvB,CAAC;QAAA,OAAI,MAAI,CAAC7C,SAAS,CAAC6C,CAAC,CAAC,CAAC1E,QAAQ,KAAK,CAAC;MAAA,EAAC,yBAAyB;MACzG,IAAMkG,mBAAmB,GAAGH,OAAO,CAACE,MAAM,CAAC,UAAAvB,CAAC;QAAA,OAAI,MAAI,CAAC7C,SAAS,CAAC6C,CAAC,CAAC,CAAC1E,QAAQ,KAAK,CAAC;MAAA,EAAC,0BAA0B;MAC3G,IAAI,CAACiJ,QAAQ,CAACjD,kBAAkB,EAAEE,mBAAmB,CAAC;IAC1D;IACA;AACJ;AACA;EAFI;IAAA;IAAA,OAGA,qBAAY9E,KAAK,EAAE;MACf,IAAIA,KAAK,GAAG,CAAC,IAAIA,KAAK,IAAI,IAAI,CAACS,SAAS,CAAC6D,MAAM,EAAE;QAC7C,OAAO,CAAC,CAAC;MACb;MACA,OAAO,IAAI,CAAC7D,SAAS,CAACT,KAAK,CAAC,CAACtC,IAAI;IACrC;EAAC;IAAA;IAAA,OACD,mBAAUD,IAAI,EAAEC,IAAI,EAA6C;MAAA;MAAA,IAA3CsC,KAAK,uEAAG,IAAI,CAACS,SAAS,CAAC6D,MAAM;MAAA,IAAEC,UAAU;MAC3D,IAAI,IAAI,CAAC5D,KAAK,KAAKhB,KAAK,CAACiB,IAAI,EAAE;QAC3B,MAAM,IAAIkH,KAAK,CAAC,uBAAuB,CAAC;MAC5C;MACA,IAAI,CAACnH,KAAK,GAAGhB,KAAK,CAACoI,IAAI;MACvB;MACA,IAAMvK,SAAS,GAAGvB,CAAC,CAAC,kBAAkB,CAAC;MACvC,IAAI+D,KAAK,KAAK,IAAI,CAACS,SAAS,CAAC6D,MAAM,EAAE;QACjC,IAAI,CAACxC,aAAa,CAACF,WAAW,CAACpE,SAAS,CAAC;MAC7C,CAAC,MACI;QACD,IAAI,CAACsE,aAAa,CAACqG,YAAY,CAAC3K,SAAS,EAAE,IAAI,CAACsE,aAAa,CAACsG,QAAQ,CAACpD,IAAI,CAAChF,KAAK,CAAC,CAAC;MACvF;MACA,IAAMqI,kBAAkB,GAAG5K,IAAI,CAAC6K,WAAW,CAAC,UAAA5K,IAAI;QAAA,OAAI,MAAI,CAAC6K,YAAY,CAACvD,IAAI,EAAEtH,IAAI,CAAC;MAAA,EAAC;MAClF,IAAM8K,mBAAmB,GAAGxL,YAAY,CAAC;QAAA,OAAM,MAAI,CAAC8E,aAAa,CAAC2G,WAAW,CAACjL,SAAS,CAAC;MAAA,EAAC;MACzF,IAAMG,UAAU,GAAGd,kBAAkB,CAACwL,kBAAkB,EAAEG,mBAAmB,CAAC;MAC9E,IAAIE,QAAQ;MACZ,IAAI,OAAOhL,IAAI,KAAK,QAAQ,EAAE;QAC1BgL,QAAQ,GAAGhL,IAAI;MACnB,CAAC,MACI,IAAIA,IAAI,CAACoC,IAAI,KAAK,OAAO,EAAE;QAC5B4I,QAAQ,GAAG,IAAI,CAACC,WAAW,CAACjL,IAAI,CAACsC,KAAK,CAAC,GAAG,CAAC;MAC/C,CAAC,MACI,IAAItC,IAAI,CAACoC,IAAI,KAAK,WAAW,EAAE;QAChC4I,QAAQ,GAAG;UAAEzK,iBAAiB,EAAEP,IAAI,CAACO;QAAkB,CAAC;MAC5D,CAAC,MACI;QACDyK,QAAQ,GAAGjL,IAAI,CAACiB,WAAW;MAC/B;MACA,IAAMsG,IAAI,GAAG,IAAI,CAAC3D,WAAW,KAAK,CAAC,CAAC,6BAC9B,IAAIhC,gBAAgB,CAAC7B,SAAS,EAAEC,IAAI,EAAEiL,QAAQ,EAAE/K,UAAU,CAAC,GAC3D,IAAI6B,kBAAkB,CAAChC,SAAS,EAAEC,IAAI,EAAEiL,QAAQ,EAAE/K,UAAU,CAAC;MACnE,IAAI,CAAC8C,SAAS,CAACmI,MAAM,CAAC5I,KAAK,EAAE,CAAC,EAAEgF,IAAI,CAAC;MACrC;MACA,IAAI,IAAI,CAACvE,SAAS,CAAC6D,MAAM,GAAG,CAAC,EAAE;QAC3B,IAAMuE,IAAI,GAAG;UAAElF,mBAAmB,EAAE,IAAI,CAACA,mBAAmB;UAAEE,iBAAiB,EAAE,IAAI,CAACA;QAAkB,CAAC;QACzG,IAAMJ,IAAI,GAAG,IAAI,CAACpC,WAAW,KAAK,CAAC,CAAC,6BAC9B,IAAIhF,IAAI,CAAC,IAAI,CAACwF,aAAa,EAAE;UAAEiH,oBAAoB,EAAE,8BAAAC,CAAC;YAAA,OAAI,MAAI,CAACC,eAAe,CAACD,CAAC,CAAC;UAAA;UAAEE,sBAAsB,EAAE,IAAI,CAACzH;QAAsB,CAAC,EAAE0H,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEN,IAAI,CAAC,EAAE;UAAExH,WAAW,EAAE,CAAC,CAAC;QAA6B,CAAC,CAAC,CAAC,GACjO,IAAIhF,IAAI,CAAC,IAAI,CAACwF,aAAa,EAAE;UAAEuH,mBAAmB,EAAE,6BAAAL,CAAC;YAAA,OAAI,MAAI,CAACC,eAAe,CAACD,CAAC,CAAC;UAAA;UAAEM,qBAAqB,EAAE,IAAI,CAAC7H;QAAsB,CAAC,EAAE0H,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEN,IAAI,CAAC,EAAE;UAAExH,WAAW,EAAE,CAAC,CAAC;QAA2B,CAAC,CAAC,CAAC;QACnO,IAAMiI,eAAe,GAAG,IAAI,CAACjI,WAAW,KAAK,CAAC,CAAC,6BACzC,UAACmB,CAAC;UAAA,OAAM;YAAEiB,IAAI,EAAJA,IAAI;YAAE4B,KAAK,EAAE7C,CAAC,CAAC+G,MAAM;YAAE5D,OAAO,EAAEnD,CAAC,CAACgH,QAAQ;YAAElE,GAAG,EAAE9C,CAAC,CAACoD;UAAO,CAAC;QAAA,CAAC,GACtE,UAACpD,CAAC;UAAA,OAAM;YAAEiB,IAAI,EAAJA,IAAI;YAAE4B,KAAK,EAAE7C,CAAC,CAACiH,MAAM;YAAE9D,OAAO,EAAEnD,CAAC,CAACkH,QAAQ;YAAEpE,GAAG,EAAE9C,CAAC,CAACoD;UAAO,CAAC;QAAA,CAAC;QAC5E,IAAM+D,OAAO,GAAG/M,KAAK,CAACwI,GAAG,CAAC3B,IAAI,CAACmG,UAAU,EAAEN,eAAe,CAAC;QAC3D,IAAMO,iBAAiB,GAAGF,OAAO,CAAC,IAAI,CAACG,WAAW,EAAE,IAAI,CAAC;QACzD,IAAMC,QAAQ,GAAGnN,KAAK,CAACwI,GAAG,CAAC3B,IAAI,CAAC6E,WAAW,EAAEgB,eAAe,CAAC;QAC7D,IAAMjB,mBAAkB,GAAG0B,QAAQ,CAAC,IAAI,CAACC,YAAY,EAAE,IAAI,CAAC;QAC5D,IAAMC,KAAK,GAAGrN,KAAK,CAACwI,GAAG,CAAC3B,IAAI,CAACyG,QAAQ,EAAE;UAAA,OAAM,MAAI,CAACxJ,SAAS,CAAC6E,SAAS,CAAC,UAAAP,IAAI;YAAA,OAAIA,IAAI,CAACvB,IAAI,KAAKA,IAAI;UAAA,EAAC;QAAA,EAAC;QAClG,IAAM0G,eAAe,GAAGF,KAAK,CAAC,IAAI,CAACG,SAAS,EAAE,IAAI,CAAC;QACnD,IAAMC,oBAAoB,GAAG5G,IAAI,CAAC6G,UAAU,CAAC,YAAM;UAC/C,IAAMtK,KAAK,GAAG,MAAI,CAACU,SAAS,CAAC6E,SAAS,CAAC,UAAAP,IAAI;YAAA,OAAIA,IAAI,CAACvB,IAAI,KAAKA,IAAI;UAAA,EAAC;UAClE,IAAM8C,SAAS,GAAG9J,KAAK,CAACuD,KAAK,EAAE,CAAC,CAAC,CAAC;UAClC,IAAMwG,WAAW,GAAG/J,KAAK,CAACuD,KAAK,GAAG,CAAC,EAAE,MAAI,CAACS,SAAS,CAAC6D,MAAM,CAAC;UAC3D,IAAMwC,eAAe,GAAG,MAAI,CAACC,kBAAkB,CAACR,SAAS,CAAC;UAC1D,IAAMS,cAAc,GAAG,MAAI,CAACD,kBAAkB,CAACP,WAAW,CAAC;UAC3D,IAAI,OAAOM,eAAe,KAAK,QAAQ,IAAI,CAAC,MAAI,CAACrG,SAAS,CAACqG,eAAe,CAAC,CAAC5I,OAAO,EAAE;YACjF;UACJ;UACA,IAAI,OAAO8I,cAAc,KAAK,QAAQ,IAAI,CAAC,MAAI,CAACvG,SAAS,CAACuG,cAAc,CAAC,CAAC9I,OAAO,EAAE;YAC/E;UACJ;UACA,MAAI,CAAC6C,eAAe,CAAC4G,IAAI,CAAC3H,KAAK,CAAC;QACpC,CAAC,CAAC;QACF,IAAMrC,WAAU,GAAGd,kBAAkB,CAACgN,iBAAiB,EAAExB,mBAAkB,EAAE8B,eAAe,EAAEE,oBAAoB,EAAE5G,IAAI,CAAC;QACzH,IAAMC,QAAQ,GAAG;UAAED,IAAI,EAAJA,IAAI;UAAE9F,UAAU,EAAVA;QAAW,CAAC;QACrC,IAAI,CAAC+C,SAAS,CAACkI,MAAM,CAAC5I,KAAK,GAAG,CAAC,EAAE,CAAC,EAAE0D,QAAQ,CAAC;MACjD;MACAlG,SAAS,CAACoE,WAAW,CAACnE,IAAI,CAAC8M,OAAO,CAAC;MACnC,IAAIzF,mBAAmB;MACvB,IAAI,OAAOpH,IAAI,KAAK,QAAQ,IAAIA,IAAI,CAACoC,IAAI,KAAK,OAAO,EAAE;QACnDgF,mBAAmB,GAAG,CAACpH,IAAI,CAACsC,KAAK,CAAC;MACtC;MACA,IAAI,CAACuE,UAAU,EAAE;QACb,IAAI,CAACsD,QAAQ,CAAC,CAAC7H,KAAK,CAAC,EAAE8E,mBAAmB,CAAC;MAC/C;MACA,IAAI,CAACnE,KAAK,GAAGhB,KAAK,CAACiB,IAAI;MACvB,IAAI,CAAC2D,UAAU,IAAI,OAAO7G,IAAI,KAAK,QAAQ,IAAIA,IAAI,CAACoC,IAAI,KAAK,YAAY,EAAE;QACvE,IAAI,CAAC0K,mBAAmB,EAAE;MAC9B;IACJ;EAAC;IAAA;IAAA,OACD,kBAAS5F,kBAAkB,EAAEE,mBAAmB,EAAE;MAC9C,IAAMvE,WAAW,GAAG,IAAI,CAACE,SAAS,CAAC2C,MAAM,CAAC,UAACC,CAAC,EAAEC,CAAC;QAAA,OAAKD,CAAC,GAAGC,CAAC,CAAC5F,IAAI;MAAA,GAAE,CAAC,CAAC;MAClE,IAAI,CAACqH,MAAM,CAAC,IAAI,CAACtE,SAAS,CAAC6D,MAAM,GAAG,CAAC,EAAE,IAAI,CAAC5G,IAAI,GAAG6C,WAAW,EAAE1C,SAAS,EAAE+G,kBAAkB,EAAEE,mBAAmB,CAAC;MACnH,IAAI,CAACI,oBAAoB,EAAE;MAC3B,IAAI,CAACC,WAAW,EAAE;MAClB,IAAI,CAAC5B,eAAe,EAAE;IAC1B;EAAC;IAAA;IAAA,OACD,gBAAOvD,KAAK,EAAEoH,KAAK,EAAqM;MAAA;MAAA,IAAnMvB,KAAK,uEAAG,IAAI,CAACpF,SAAS,CAAC2E,GAAG,CAAC,UAAA9B,CAAC;QAAA,OAAIA,CAAC,CAAC5F,IAAI;MAAA,EAAC;MAAA,IAAEkH,kBAAkB;MAAA,IAAEE,mBAAmB;MAAA,IAAE2F,gBAAgB,uEAAG1E,MAAM,CAACC,iBAAiB;MAAA,IAAE0E,gBAAgB,uEAAG3E,MAAM,CAACG,iBAAiB;MAAA,IAAEG,UAAU;MAAA,IAAEC,SAAS;MAClN,IAAItG,KAAK,GAAG,CAAC,IAAIA,KAAK,IAAI,IAAI,CAACS,SAAS,CAAC6D,MAAM,EAAE;QAC7C,OAAO,CAAC;MACZ;MACA,IAAMiC,SAAS,GAAG9J,KAAK,CAACuD,KAAK,EAAE,CAAC,CAAC,CAAC;MAClC,IAAMwG,WAAW,GAAG/J,KAAK,CAACuD,KAAK,GAAG,CAAC,EAAE,IAAI,CAACS,SAAS,CAAC6D,MAAM,CAAC;MAC3D,IAAIQ,mBAAmB,EAAE;QAAA,4CACDA,mBAAmB;UAAA;QAAA;UAAvC,uDAAyC;YAAA,IAA9B9E,MAAK;YACZxD,WAAW,CAAC+J,SAAS,EAAEvG,MAAK,CAAC;YAC7BxD,WAAW,CAACgK,WAAW,EAAExG,MAAK,CAAC;UACnC;QAAC;UAAA;QAAA;UAAA;QAAA;MACL;MACA,IAAI4E,kBAAkB,EAAE;QAAA,4CACAA,kBAAkB;UAAA;QAAA;UAAtC,uDAAwC;YAAA,IAA7B5E,OAAK;YACZzD,SAAS,CAACgK,SAAS,EAAEvG,OAAK,CAAC;YAC3BzD,SAAS,CAACiK,WAAW,EAAExG,OAAK,CAAC;UACjC;QAAC;UAAA;QAAA;UAAA;QAAA;MACL;MACA,IAAM2K,OAAO,GAAGpE,SAAS,CAACnB,GAAG,CAAC,UAAA9B,CAAC;QAAA,OAAI,MAAI,CAAC7C,SAAS,CAAC6C,CAAC,CAAC;MAAA,EAAC;MACrD,IAAMsH,OAAO,GAAGrE,SAAS,CAACnB,GAAG,CAAC,UAAA9B,CAAC;QAAA,OAAIuC,KAAK,CAACvC,CAAC,CAAC;MAAA,EAAC;MAC5C,IAAMuH,SAAS,GAAGrE,WAAW,CAACpB,GAAG,CAAC,UAAA9B,CAAC;QAAA,OAAI,MAAI,CAAC7C,SAAS,CAAC6C,CAAC,CAAC;MAAA,EAAC;MACzD,IAAMwH,SAAS,GAAGtE,WAAW,CAACpB,GAAG,CAAC,UAAA9B,CAAC;QAAA,OAAIuC,KAAK,CAACvC,CAAC,CAAC;MAAA,EAAC;MAChD,IAAMmD,UAAU,GAAGF,SAAS,CAACnD,MAAM,CAAC,UAACC,CAAC,EAAEC,CAAC;QAAA,OAAKD,CAAC,IAAI,MAAI,CAAC5C,SAAS,CAAC6C,CAAC,CAAC,CAAC5E,WAAW,GAAGmH,KAAK,CAACvC,CAAC,CAAC,CAAC;MAAA,GAAE,CAAC,CAAC;MAChG,IAAMoD,UAAU,GAAGH,SAAS,CAACnD,MAAM,CAAC,UAACC,CAAC,EAAEC,CAAC;QAAA,OAAKD,CAAC,IAAI,MAAI,CAAC5C,SAAS,CAAC6C,CAAC,CAAC,CAAC3E,WAAW,GAAGkH,KAAK,CAACvC,CAAC,CAAC,CAAC;MAAA,GAAE,CAAC,CAAC;MAChG,IAAMqD,YAAY,GAAGH,WAAW,CAAClC,MAAM,KAAK,CAAC,GAAGyB,MAAM,CAACG,iBAAiB,GAAGM,WAAW,CAACpD,MAAM,CAAC,UAACC,CAAC,EAAEC,CAAC;QAAA,OAAKD,CAAC,IAAIwC,KAAK,CAACvC,CAAC,CAAC,GAAG,MAAI,CAAC7C,SAAS,CAAC6C,CAAC,CAAC,CAAC5E,WAAW,CAAC;MAAA,GAAE,CAAC,CAAC;MAC1J,IAAMkI,YAAY,GAAGJ,WAAW,CAAClC,MAAM,KAAK,CAAC,GAAGyB,MAAM,CAACC,iBAAiB,GAAGQ,WAAW,CAACpD,MAAM,CAAC,UAACC,CAAC,EAAEC,CAAC;QAAA,OAAKD,CAAC,IAAIwC,KAAK,CAACvC,CAAC,CAAC,GAAG,MAAI,CAAC7C,SAAS,CAAC6C,CAAC,CAAC,CAAC3E,WAAW,CAAC;MAAA,GAAE,CAAC,CAAC;MAC1J,IAAMmH,QAAQ,GAAGrB,IAAI,CAACC,GAAG,CAAC+B,UAAU,EAAEG,YAAY,EAAE6D,gBAAgB,CAAC;MACrE,IAAMxE,QAAQ,GAAGxB,IAAI,CAACoC,GAAG,CAACF,YAAY,EAAED,UAAU,EAAEgE,gBAAgB,CAAC;MACrE,IAAIK,OAAO,GAAG,KAAK;MACnB,IAAI1E,UAAU,EAAE;QACZ,IAAM2E,QAAQ,GAAG,IAAI,CAACvK,SAAS,CAAC4F,UAAU,CAACrG,KAAK,CAAC;QACjD,IAAM9B,OAAO,GAAGkJ,KAAK,IAAIf,UAAU,CAACc,UAAU;QAC9C4D,OAAO,GAAG7M,OAAO,KAAK8M,QAAQ,CAAC9M,OAAO;QACtC8M,QAAQ,CAACxM,UAAU,CAACN,OAAO,EAAEmI,UAAU,CAAC3I,IAAI,CAAC;MACjD;MACA,IAAI,CAACqN,OAAO,IAAIzE,SAAS,EAAE;QACvB,IAAM0E,SAAQ,GAAG,IAAI,CAACvK,SAAS,CAAC6F,SAAS,CAACtG,KAAK,CAAC;QAChD,IAAM9B,QAAO,GAAGkJ,KAAK,GAAGd,SAAS,CAACa,UAAU;QAC5C4D,OAAO,GAAG7M,QAAO,KAAK8M,SAAQ,CAAC9M,OAAO;QACtC8M,SAAQ,CAACxM,UAAU,CAACN,QAAO,EAAEoI,SAAS,CAAC5I,IAAI,CAAC;MAChD;MACA,IAAIqN,OAAO,EAAE;QACT,OAAO,IAAI,CAAChG,MAAM,CAAC/E,KAAK,EAAEoH,KAAK,EAAEvB,KAAK,EAAEjB,kBAAkB,EAAEE,mBAAmB,EAAE2F,gBAAgB,EAAEC,gBAAgB,CAAC;MACxH;MACAtD,KAAK,GAAGnK,KAAK,CAACmK,KAAK,EAAEtB,QAAQ,EAAEG,QAAQ,CAAC;MACxC,KAAK,IAAI3C,CAAC,GAAG,CAAC,EAAE2H,OAAO,GAAG7D,KAAK,EAAE9D,CAAC,GAAGqH,OAAO,CAACrG,MAAM,EAAEhB,CAAC,EAAE,EAAE;QACtD,IAAM0B,IAAI,GAAG2F,OAAO,CAACrH,CAAC,CAAC;QACvB,IAAM5F,IAAI,GAAGT,KAAK,CAAC2N,OAAO,CAACtH,CAAC,CAAC,GAAG2H,OAAO,EAAEjG,IAAI,CAACtG,WAAW,EAAEsG,IAAI,CAACrG,WAAW,CAAC;QAC5E,IAAMuM,SAAS,GAAGxN,IAAI,GAAGkN,OAAO,CAACtH,CAAC,CAAC;QACnC2H,OAAO,IAAIC,SAAS;QACpBlG,IAAI,CAACtH,IAAI,GAAGA,IAAI;MACpB;MACA,KAAK,IAAI4F,GAAC,GAAG,CAAC,EAAE6H,SAAS,GAAG/D,KAAK,EAAE9D,GAAC,GAAGuH,SAAS,CAACvG,MAAM,EAAEhB,GAAC,EAAE,EAAE;QAC1D,IAAM0B,MAAI,GAAG6F,SAAS,CAACvH,GAAC,CAAC;QACzB,IAAM5F,KAAI,GAAGT,KAAK,CAAC6N,SAAS,CAACxH,GAAC,CAAC,GAAG6H,SAAS,EAAEnG,MAAI,CAACtG,WAAW,EAAEsG,MAAI,CAACrG,WAAW,CAAC;QAChF,IAAMuM,UAAS,GAAGxN,KAAI,GAAGoN,SAAS,CAACxH,GAAC,CAAC;QACrC6H,SAAS,IAAID,UAAS;QACtBlG,MAAI,CAACtH,IAAI,GAAGA,KAAI;MACpB;MACA,OAAO0J,KAAK;IAChB;EAAC;IAAA;IAAA,OACD,8BAAqBgE,gBAAgB,EAAE;MAAA;MACnC,IAAM7K,WAAW,GAAG,IAAI,CAACE,SAAS,CAAC2C,MAAM,CAAC,UAACC,CAAC,EAAEC,CAAC;QAAA,OAAKD,CAAC,GAAGC,CAAC,CAAC5F,IAAI;MAAA,GAAE,CAAC,CAAC;MAClE,IAAI2N,UAAU,GAAG,IAAI,CAAC3N,IAAI,GAAG6C,WAAW;MACxC,IAAMoE,OAAO,GAAGlI,KAAK,CAAC,IAAI,CAACgE,SAAS,CAAC6D,MAAM,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;MACpD,IAAMM,kBAAkB,GAAGD,OAAO,CAACE,MAAM,CAAC,UAAAvB,CAAC;QAAA,OAAI,MAAI,CAAC7C,SAAS,CAAC6C,CAAC,CAAC,CAAC1E,QAAQ,KAAK,CAAC;MAAA,EAAC,yBAAyB;MACzG,IAAMkG,mBAAmB,GAAGH,OAAO,CAACE,MAAM,CAAC,UAAAvB,CAAC;QAAA,OAAI,MAAI,CAAC7C,SAAS,CAAC6C,CAAC,CAAC,CAAC1E,QAAQ,KAAK,CAAC;MAAA,EAAC,0BAA0B;MAAC,4CACxFkG,mBAAmB;QAAA;MAAA;QAAvC,uDAAyC;UAAA,IAA9B9E,KAAK;UACZxD,WAAW,CAACmI,OAAO,EAAE3E,KAAK,CAAC;QAC/B;MAAC;QAAA;MAAA;QAAA;MAAA;MAAA,4CACmB4E,kBAAkB;QAAA;MAAA;QAAtC,uDAAwC;UAAA,IAA7B5E,OAAK;UACZzD,SAAS,CAACoI,OAAO,EAAE3E,OAAK,CAAC;QAC7B;MAAC;QAAA;MAAA;QAAA;MAAA;MACD,IAAI,OAAOoL,gBAAgB,KAAK,QAAQ,EAAE;QACtC7O,SAAS,CAACoI,OAAO,EAAEyG,gBAAgB,CAAC;MACxC;MACA,KAAK,IAAI9H,CAAC,GAAG,CAAC,EAAE+H,UAAU,KAAK,CAAC,IAAI/H,CAAC,GAAGqB,OAAO,CAACL,MAAM,EAAEhB,CAAC,EAAE,EAAE;QACzD,IAAM0B,IAAI,GAAG,IAAI,CAACvE,SAAS,CAACkE,OAAO,CAACrB,CAAC,CAAC,CAAC;QACvC,IAAM5F,IAAI,GAAGT,KAAK,CAAC+H,IAAI,CAACtH,IAAI,GAAG2N,UAAU,EAAErG,IAAI,CAACtG,WAAW,EAAEsG,IAAI,CAACrG,WAAW,CAAC;QAC9E,IAAMuM,SAAS,GAAGxN,IAAI,GAAGsH,IAAI,CAACtH,IAAI;QAClC2N,UAAU,IAAIH,SAAS;QACvBlG,IAAI,CAACtH,IAAI,GAAGA,IAAI;MACpB;IACJ;EAAC;IAAA;IAAA,OACD,uBAAc;MACV;MACA,IAAI,CAAC6C,WAAW,GAAG,IAAI,CAACE,SAAS,CAAC2C,MAAM,CAAC,UAACC,CAAC,EAAEC,CAAC;QAAA,OAAKD,CAAC,GAAGC,CAAC,CAAC5F,IAAI;MAAA,GAAE,CAAC,CAAC;MACjE;MACA,IAAIuB,MAAM,GAAG,CAAC;MAAC,6CACQ,IAAI,CAACwB,SAAS;QAAA;MAAA;QAArC,0DAAuC;UAAA,IAA5B2F,QAAQ;UACfA,QAAQ,CAAChH,MAAM,CAACH,MAAM,EAAE,IAAI,CAACC,aAAa,CAAC;UAC3CD,MAAM,IAAImH,QAAQ,CAAC1I,IAAI;QAC3B;QACA;MAAA;QAAA;MAAA;QAAA;MAAA;MACA,IAAI,CAACgD,SAAS,CAACqC,OAAO,CAAC,UAAAiC,IAAI;QAAA,OAAIA,IAAI,CAACvB,IAAI,CAACrE,MAAM,EAAE;MAAA,EAAC;MAClD,IAAI,CAAC2E,oBAAoB,EAAE;MAC3B,IAAI,CAACuH,uBAAuB,EAAE;IAClC;EAAC;IAAA;IAAA,OACD,mCAA0B;MACtB,IAAI,IAAI,CAACjK,WAAW,KAAK,CAAC,CAAC,4BAA4B;QACnD,IAAI,CAACa,iBAAiB,CAACqJ,mBAAmB,CAAC;UACvChM,MAAM,EAAE,IAAI,CAAC7B,IAAI;UACjB8N,YAAY,EAAE,IAAI,CAACjL;QACvB,CAAC,CAAC;MACN,CAAC,MACI;QACD,IAAI,CAAC2B,iBAAiB,CAACqJ,mBAAmB,CAAC;UACvC7L,KAAK,EAAE,IAAI,CAAChC,IAAI;UAChB+N,WAAW,EAAE,IAAI,CAAClL;QACtB,CAAC,CAAC;MACN;IACJ;EAAC;IAAA;IAAA,OACD,gCAAuB;MACnB,IAAImL,QAAQ,GAAG,KAAK;MACpB,IAAMC,aAAa,GAAG,IAAI,CAAClL,SAAS,CAAC2E,GAAG,CAAC,UAAA9B,CAAC;QAAA,OAAIoI,QAAQ,GAAIpI,CAAC,CAAC5F,IAAI,GAAG4F,CAAC,CAAC5E,WAAW,GAAG,CAAC,IAAKgN,QAAQ;MAAA,EAAC;MAClGA,QAAQ,GAAG,KAAK;MAChB,IAAME,WAAW,GAAG,IAAI,CAACnL,SAAS,CAAC2E,GAAG,CAAC,UAAA9B,CAAC;QAAA,OAAIoI,QAAQ,GAAIpI,CAAC,CAAC3E,WAAW,GAAG2E,CAAC,CAAC5F,IAAI,GAAG,CAAC,IAAKgO,QAAQ;MAAA,EAAC;MAChG,IAAMG,YAAY,GAAG,mBAAI,IAAI,CAACpL,SAAS,EAAEqL,OAAO,EAAE;MAClDJ,QAAQ,GAAG,KAAK;MAChB,IAAMK,WAAW,GAAGF,YAAY,CAACzG,GAAG,CAAC,UAAA9B,CAAC;QAAA,OAAIoI,QAAQ,GAAIpI,CAAC,CAAC5F,IAAI,GAAG4F,CAAC,CAAC5E,WAAW,GAAG,CAAC,IAAKgN,QAAQ;MAAA,EAAC,CAACI,OAAO,EAAE;MACxGJ,QAAQ,GAAG,KAAK;MAChB,IAAMM,SAAS,GAAGH,YAAY,CAACzG,GAAG,CAAC,UAAA9B,CAAC;QAAA,OAAIoI,QAAQ,GAAIpI,CAAC,CAAC3E,WAAW,GAAG2E,CAAC,CAAC5F,IAAI,GAAG,CAAC,IAAKgO,QAAQ;MAAA,EAAC,CAACI,OAAO,EAAE;MACtG,IAAIG,QAAQ,GAAG,CAAC;MAChB,KAAK,IAAIjM,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAG,IAAI,CAACU,SAAS,CAAC4D,MAAM,EAAEtE,KAAK,EAAE,EAAE;QACxD,IAAQyD,IAAI,GAAK,IAAI,CAAC/C,SAAS,CAACV,KAAK,CAAC,CAA9ByD,IAAI;QACZ,IAAM2C,QAAQ,GAAG,IAAI,CAAC3F,SAAS,CAACT,KAAK,CAAC;QACtCiM,QAAQ,IAAI7F,QAAQ,CAAC1I,IAAI;QACzB,IAAMmJ,GAAG,GAAG,EAAE8E,aAAa,CAAC3L,KAAK,CAAC,IAAIgM,SAAS,CAAChM,KAAK,GAAG,CAAC,CAAC,CAAC;QAC3D,IAAM0E,GAAG,GAAG,EAAEkH,WAAW,CAAC5L,KAAK,CAAC,IAAI+L,WAAW,CAAC/L,KAAK,GAAG,CAAC,CAAC,CAAC;QAC3D,IAAI6G,GAAG,IAAInC,GAAG,EAAE;UACZ,IAAM6B,SAAS,GAAG9J,KAAK,CAACuD,KAAK,EAAE,CAAC,CAAC,CAAC;UAClC,IAAMwG,WAAW,GAAG/J,KAAK,CAACuD,KAAK,GAAG,CAAC,EAAE,IAAI,CAACS,SAAS,CAAC6D,MAAM,CAAC;UAC3D,IAAMwC,eAAe,GAAG,IAAI,CAACC,kBAAkB,CAACR,SAAS,CAAC;UAC1D,IAAMS,cAAc,GAAG,IAAI,CAACD,kBAAkB,CAACP,WAAW,CAAC;UAC3D,IAAM0F,aAAa,GAAG,OAAOpF,eAAe,KAAK,QAAQ,IAAI,CAAC,IAAI,CAACrG,SAAS,CAACqG,eAAe,CAAC,CAAC5I,OAAO;UACrG,IAAMiO,YAAY,GAAG,OAAOnF,cAAc,KAAK,QAAQ,IAAI,CAAC,IAAI,CAACvG,SAAS,CAACuG,cAAc,CAAC,CAAC9I,OAAO;UAClG,IAAIgO,aAAa,IAAIH,WAAW,CAAC/L,KAAK,CAAC,KAAKiM,QAAQ,GAAG,CAAC,IAAI,IAAI,CAACnI,oBAAoB,CAAC,EAAE;YACpFL,IAAI,CAAC9C,KAAK,GAAG,CAAC,CAAC;UACnB,CAAC,MACI,IAAIwL,YAAY,IAAIR,aAAa,CAAC3L,KAAK,CAAC,KAAKiM,QAAQ,GAAG,IAAI,CAAC1L,WAAW,IAAI,IAAI,CAACyD,kBAAkB,CAAC,EAAE;YACvGP,IAAI,CAAC9C,KAAK,GAAG,CAAC,CAAC;UACnB,CAAC,MACI;YACD8C,IAAI,CAAC9C,KAAK,GAAG,CAAC,CAAC;UACnB;QACJ,CAAC,MACI,IAAIkG,GAAG,IAAI,CAACnC,GAAG,EAAE;UAClBjB,IAAI,CAAC9C,KAAK,GAAG,CAAC,CAAC;QACnB,CAAC,MACI,IAAI,CAACkG,GAAG,IAAInC,GAAG,EAAE;UAClBjB,IAAI,CAAC9C,KAAK,GAAG,CAAC,CAAC;QACnB,CAAC,MACI;UACD8C,IAAI,CAAC9C,KAAK,GAAG,CAAC,CAAC;QACnB;MACJ;IACJ;EAAC;IAAA;IAAA,OACD,yBAAgB8C,IAAI,EAAE;MAClB,IAAIwI,QAAQ,GAAG,CAAC;MAChB,KAAK,IAAI3I,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAAC5C,SAAS,CAAC4D,MAAM,EAAEhB,CAAC,EAAE,EAAE;QAC5C2I,QAAQ,IAAI,IAAI,CAACxL,SAAS,CAAC6C,CAAC,CAAC,CAAC5F,IAAI;QAClC,IAAI,IAAI,CAACgD,SAAS,CAAC4C,CAAC,CAAC,CAACG,IAAI,KAAKA,IAAI,EAAE;UACjC,OAAOwI,QAAQ;QACnB;MACJ;MACA,OAAO,CAAC;IACZ;EAAC;IAAA;IAAA,OACD,4BAAmBtH,OAAO,EAAE;MACxB;MAAA,6CACoBA,OAAO;QAAA;MAAA;QAA3B,0DAA6B;UAAA,IAAlB3E,KAAK;UACZ,IAAMoG,QAAQ,GAAG,IAAI,CAAC3F,SAAS,CAACT,KAAK,CAAC;UACtC,IAAI,CAACoG,QAAQ,CAAClI,OAAO,EAAE;YACnB;UACJ;UACA,IAAIkI,QAAQ,CAACvH,IAAI,EAAE;YACf,OAAOmB,KAAK;UAChB;QACJ;QACA;MAAA;QAAA;MAAA;QAAA;MAAA;MAAA,6CACoB2E,OAAO;QAAA;MAAA;QAA3B,0DAA6B;UAAA,IAAlB3E,OAAK;UACZ,IAAMoG,UAAQ,GAAG,IAAI,CAAC3F,SAAS,CAACT,OAAK,CAAC;UACtC,IAAIoG,UAAQ,CAAClI,OAAO,IAAIkI,UAAQ,CAACzH,WAAW,GAAGyH,UAAQ,CAAC1H,WAAW,GAAG,CAAC,EAAE;YACrE,OAAOb,SAAS;UACpB;UACA,IAAI,CAACuI,UAAQ,CAAClI,OAAO,IAAIkI,UAAQ,CAACvH,IAAI,EAAE;YACpC,OAAOmB,OAAK;UAChB;QACJ;MAAC;QAAA;MAAA;QAAA;MAAA;MACD,OAAOnC,SAAS;IACpB;EAAC;IAAA;IAAA,OACD,mBAAU;MACN;MACAd,QAAO,CAAC,IAAI,CAAC0D,SAAS,CAAC;MACvB,IAAI,CAACA,SAAS,GAAG,EAAE;MACnB,IAAI,CAACC,SAAS,CAACqC,OAAO,CAAC,UAAAO,CAAC;QAAA,OAAIA,CAAC,CAAC3F,UAAU,CAACZ,OAAO,EAAE;MAAA,EAAC;MACnD,IAAI,CAAC2D,SAAS,GAAG,EAAE;IACvB;EAAC;EAAA;AAAA,EAhmB0B5D,UAAU"}]}