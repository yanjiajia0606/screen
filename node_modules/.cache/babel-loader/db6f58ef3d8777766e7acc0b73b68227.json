{"remainingRequest":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js!/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/common/viewLayout/lineDecorations.js","dependencies":[{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/common/viewLayout/lineDecorations.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/babel.config.js","mtime":1668271197000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js","mtime":456789000000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["strings","LineDecoration","startColumn","endColumn","className","type","_lineDecorationBrand","undefined","a","b","aLen","length","bLen","i","_equals","arr","startOffset","endOffset","lineLength","r","rLength","dec","Math","max","min","lineDecorations","lineNumber","minLineColumn","maxLineColumn","result","resultLen","len","d","range","endLineNumber","startLineNumber","isEmpty","inlineClassName","ORDER","typeCmp","_typeCompare","DecorationSegment","metadata","Stack","stopOffsets","classNames","count","maxStopOffset","nextStartOffset","push","join","_metadata","splice","stopOffset","LineDecorationsNormalizer","lineContent","stack","charCodeBefore","charCodeAt","isHighSurrogate","currentStartOffset","currentEndOffset","consumeLowerThan","insert"],"sources":["/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/common/viewLayout/lineDecorations.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../base/common/strings.js';\nexport class LineDecoration {\n    constructor(startColumn, endColumn, className, type) {\n        this.startColumn = startColumn;\n        this.endColumn = endColumn;\n        this.className = className;\n        this.type = type;\n        this._lineDecorationBrand = undefined;\n    }\n    static _equals(a, b) {\n        return (a.startColumn === b.startColumn\n            && a.endColumn === b.endColumn\n            && a.className === b.className\n            && a.type === b.type);\n    }\n    static equalsArr(a, b) {\n        const aLen = a.length;\n        const bLen = b.length;\n        if (aLen !== bLen) {\n            return false;\n        }\n        for (let i = 0; i < aLen; i++) {\n            if (!LineDecoration._equals(a[i], b[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n    static extractWrapped(arr, startOffset, endOffset) {\n        if (arr.length === 0) {\n            return arr;\n        }\n        const startColumn = startOffset + 1;\n        const endColumn = endOffset + 1;\n        const lineLength = endOffset - startOffset;\n        const r = [];\n        let rLength = 0;\n        for (const dec of arr) {\n            if (dec.endColumn <= startColumn || dec.startColumn >= endColumn) {\n                continue;\n            }\n            r[rLength++] = new LineDecoration(Math.max(1, dec.startColumn - startColumn + 1), Math.min(lineLength + 1, dec.endColumn - startColumn + 1), dec.className, dec.type);\n        }\n        return r;\n    }\n    static filter(lineDecorations, lineNumber, minLineColumn, maxLineColumn) {\n        if (lineDecorations.length === 0) {\n            return [];\n        }\n        const result = [];\n        let resultLen = 0;\n        for (let i = 0, len = lineDecorations.length; i < len; i++) {\n            const d = lineDecorations[i];\n            const range = d.range;\n            if (range.endLineNumber < lineNumber || range.startLineNumber > lineNumber) {\n                // Ignore decorations that sit outside this line\n                continue;\n            }\n            if (range.isEmpty() && (d.type === 0 /* InlineDecorationType.Regular */ || d.type === 3 /* InlineDecorationType.RegularAffectingLetterSpacing */)) {\n                // Ignore empty range decorations\n                continue;\n            }\n            const startColumn = (range.startLineNumber === lineNumber ? range.startColumn : minLineColumn);\n            const endColumn = (range.endLineNumber === lineNumber ? range.endColumn : maxLineColumn);\n            result[resultLen++] = new LineDecoration(startColumn, endColumn, d.inlineClassName, d.type);\n        }\n        return result;\n    }\n    static _typeCompare(a, b) {\n        const ORDER = [2, 0, 1, 3];\n        return ORDER[a] - ORDER[b];\n    }\n    static compare(a, b) {\n        if (a.startColumn !== b.startColumn) {\n            return a.startColumn - b.startColumn;\n        }\n        if (a.endColumn !== b.endColumn) {\n            return a.endColumn - b.endColumn;\n        }\n        const typeCmp = LineDecoration._typeCompare(a.type, b.type);\n        if (typeCmp !== 0) {\n            return typeCmp;\n        }\n        if (a.className !== b.className) {\n            return a.className < b.className ? -1 : 1;\n        }\n        return 0;\n    }\n}\nexport class DecorationSegment {\n    constructor(startOffset, endOffset, className, metadata) {\n        this.startOffset = startOffset;\n        this.endOffset = endOffset;\n        this.className = className;\n        this.metadata = metadata;\n    }\n}\nclass Stack {\n    constructor() {\n        this.stopOffsets = [];\n        this.classNames = [];\n        this.metadata = [];\n        this.count = 0;\n    }\n    static _metadata(metadata) {\n        let result = 0;\n        for (let i = 0, len = metadata.length; i < len; i++) {\n            result |= metadata[i];\n        }\n        return result;\n    }\n    consumeLowerThan(maxStopOffset, nextStartOffset, result) {\n        while (this.count > 0 && this.stopOffsets[0] < maxStopOffset) {\n            let i = 0;\n            // Take all equal stopping offsets\n            while (i + 1 < this.count && this.stopOffsets[i] === this.stopOffsets[i + 1]) {\n                i++;\n            }\n            // Basically we are consuming the first i + 1 elements of the stack\n            result.push(new DecorationSegment(nextStartOffset, this.stopOffsets[i], this.classNames.join(' '), Stack._metadata(this.metadata)));\n            nextStartOffset = this.stopOffsets[i] + 1;\n            // Consume them\n            this.stopOffsets.splice(0, i + 1);\n            this.classNames.splice(0, i + 1);\n            this.metadata.splice(0, i + 1);\n            this.count -= (i + 1);\n        }\n        if (this.count > 0 && nextStartOffset < maxStopOffset) {\n            result.push(new DecorationSegment(nextStartOffset, maxStopOffset - 1, this.classNames.join(' '), Stack._metadata(this.metadata)));\n            nextStartOffset = maxStopOffset;\n        }\n        return nextStartOffset;\n    }\n    insert(stopOffset, className, metadata) {\n        if (this.count === 0 || this.stopOffsets[this.count - 1] <= stopOffset) {\n            // Insert at the end\n            this.stopOffsets.push(stopOffset);\n            this.classNames.push(className);\n            this.metadata.push(metadata);\n        }\n        else {\n            // Find the insertion position for `stopOffset`\n            for (let i = 0; i < this.count; i++) {\n                if (this.stopOffsets[i] >= stopOffset) {\n                    this.stopOffsets.splice(i, 0, stopOffset);\n                    this.classNames.splice(i, 0, className);\n                    this.metadata.splice(i, 0, metadata);\n                    break;\n                }\n            }\n        }\n        this.count++;\n        return;\n    }\n}\nexport class LineDecorationsNormalizer {\n    /**\n     * Normalize line decorations. Overlapping decorations will generate multiple segments\n     */\n    static normalize(lineContent, lineDecorations) {\n        if (lineDecorations.length === 0) {\n            return [];\n        }\n        const result = [];\n        const stack = new Stack();\n        let nextStartOffset = 0;\n        for (let i = 0, len = lineDecorations.length; i < len; i++) {\n            const d = lineDecorations[i];\n            let startColumn = d.startColumn;\n            let endColumn = d.endColumn;\n            const className = d.className;\n            const metadata = (d.type === 1 /* InlineDecorationType.Before */\n                ? 2 /* LinePartMetadata.PSEUDO_BEFORE */\n                : d.type === 2 /* InlineDecorationType.After */\n                    ? 4 /* LinePartMetadata.PSEUDO_AFTER */\n                    : 0);\n            // If the position would end up in the middle of a high-low surrogate pair, we move it to before the pair\n            if (startColumn > 1) {\n                const charCodeBefore = lineContent.charCodeAt(startColumn - 2);\n                if (strings.isHighSurrogate(charCodeBefore)) {\n                    startColumn--;\n                }\n            }\n            if (endColumn > 1) {\n                const charCodeBefore = lineContent.charCodeAt(endColumn - 2);\n                if (strings.isHighSurrogate(charCodeBefore)) {\n                    endColumn--;\n                }\n            }\n            const currentStartOffset = startColumn - 1;\n            const currentEndOffset = endColumn - 2;\n            nextStartOffset = stack.consumeLowerThan(currentStartOffset, nextStartOffset, result);\n            if (stack.count === 0) {\n                nextStartOffset = currentStartOffset;\n            }\n            stack.insert(currentEndOffset, className, metadata);\n        }\n        stack.consumeLowerThan(1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */, nextStartOffset, result);\n        return result;\n    }\n}\n"],"mappings":"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"}]}