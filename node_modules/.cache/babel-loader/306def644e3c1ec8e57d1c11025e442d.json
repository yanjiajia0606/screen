{"remainingRequest":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/thread-loader/dist/cjs.js!/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js!/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/common/services/editorSimpleWorker.js","dependencies":[{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/common/services/editorSimpleWorker.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/babel.config.js","mtime":1668271197000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js","mtime":456789000000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","stringDiff","globals","URI","Position","Range","DiffComputer","MirrorTextModel","BaseMirrorModel","ensureValidWordDefinition","getWordAtText","computeLinks","BasicInplaceReplace","createMonacoBaseAPI","types","StopWatch","UnicodeTextModelHighlighter","MirrorModel","_uri","_eol","getText","_lines","slice","length","lineNumber","position","wordDefinition","wordAtText","column","startColumn","endColumn","lines","wordenize","_wordenize","bind","lineText","wordRangesIdx","wordRanges","Symbol","iterator","substring","start","end","content","ranges","words","range","push","word","match","lastIndex","exec","index","_validateRange","startLineNumber","endLineNumber","lineEnding","startLineIndex","endLineIndex","resultLines","i","join","_validatePosition","_ensureLineStarts","_lineStarts","getPrefixSum","offset","Math","floor","max","out","getIndexOf","lineLength","min","remainder","isIPosition","Error","hasChanged","maxCharacter","EditorSimpleWorker","host","foreignModuleFactory","_host","_models","Object","create","_foreignModuleFactory","_foreignModule","uri","all","keys","forEach","key","data","url","parse","EOL","versionId","strURL","model","onEvents","options","_getModel","hasMore","ambiguousCharacterCount","invisibleCharacterCount","nonBasicAsciiCharacterCount","computeUnicodeHighlights","originalUrl","modifiedUrl","ignoreTrimWhitespace","maxComputationTime","original","modified","computeDiff","modelUrl","edits","lastEol","undefined","sort","a","b","compareRangesUsingStarts","aRng","bRng","text","eol","isEmpty","getValueInRange","replace","_diffLimit","changes","editOffset","offsetAt","lift","getStartPosition","change","positionAt","originalStart","originalLength","newEdit","substr","modifiedStart","modifiedLength","modelUrls","leadingWord","wordDef","wordDefFlags","sw","wordDefRegExp","RegExp","seen","Set","isNaN","Number","add","size","_suggestionsLimit","Array","from","duration","elapsed","line","getLineWords","array","up","selectionText","wordRange","getWordAtPosition","INSTANCE","navigateValueSet","moduleId","createData","foreignHostMethods","proxyMethodRequest","method","args","fhr","foreignHost","createProxyObject","ctx","getMirrorModels","_getModels","getAllMethodNames","originalTextModel","modifiedTextModel","originalLines","getLinesContent","modifiedLines","diffComputer","shouldComputeCharChanges","shouldPostProcessCharChanges","shouldIgnoreTrimWhitespace","shouldMakePrettyDiff","diffResult","identical","_modelsAreIdentical","quitEarly","originalLineCount","getLineCount","modifiedLineCount","originalLine","getLineContent","modifiedLine","importScripts","monaco"],"sources":["/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/monaco-editor/esm/vs/editor/common/services/editorSimpleWorker.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { stringDiff } from '../../../base/common/diff/diff.js';\nimport { globals } from '../../../base/common/platform.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { DiffComputer } from '../diff/diffComputer.js';\nimport { MirrorTextModel as BaseMirrorModel } from '../model/mirrorTextModel.js';\nimport { ensureValidWordDefinition, getWordAtText } from '../core/wordHelper.js';\nimport { computeLinks } from '../languages/linkComputer.js';\nimport { BasicInplaceReplace } from '../languages/supports/inplaceReplaceSupport.js';\nimport { createMonacoBaseAPI } from './editorBaseApi.js';\nimport * as types from '../../../base/common/types.js';\nimport { StopWatch } from '../../../base/common/stopwatch.js';\nimport { UnicodeTextModelHighlighter } from './unicodeTextModelHighlighter.js';\n/**\n * @internal\n */\nexport class MirrorModel extends BaseMirrorModel {\n    get uri() {\n        return this._uri;\n    }\n    get eol() {\n        return this._eol;\n    }\n    getValue() {\n        return this.getText();\n    }\n    getLinesContent() {\n        return this._lines.slice(0);\n    }\n    getLineCount() {\n        return this._lines.length;\n    }\n    getLineContent(lineNumber) {\n        return this._lines[lineNumber - 1];\n    }\n    getWordAtPosition(position, wordDefinition) {\n        const wordAtText = getWordAtText(position.column, ensureValidWordDefinition(wordDefinition), this._lines[position.lineNumber - 1], 0);\n        if (wordAtText) {\n            return new Range(position.lineNumber, wordAtText.startColumn, position.lineNumber, wordAtText.endColumn);\n        }\n        return null;\n    }\n    words(wordDefinition) {\n        const lines = this._lines;\n        const wordenize = this._wordenize.bind(this);\n        let lineNumber = 0;\n        let lineText = '';\n        let wordRangesIdx = 0;\n        let wordRanges = [];\n        return {\n            *[Symbol.iterator]() {\n                while (true) {\n                    if (wordRangesIdx < wordRanges.length) {\n                        const value = lineText.substring(wordRanges[wordRangesIdx].start, wordRanges[wordRangesIdx].end);\n                        wordRangesIdx += 1;\n                        yield value;\n                    }\n                    else {\n                        if (lineNumber < lines.length) {\n                            lineText = lines[lineNumber];\n                            wordRanges = wordenize(lineText, wordDefinition);\n                            wordRangesIdx = 0;\n                            lineNumber += 1;\n                        }\n                        else {\n                            break;\n                        }\n                    }\n                }\n            }\n        };\n    }\n    getLineWords(lineNumber, wordDefinition) {\n        const content = this._lines[lineNumber - 1];\n        const ranges = this._wordenize(content, wordDefinition);\n        const words = [];\n        for (const range of ranges) {\n            words.push({\n                word: content.substring(range.start, range.end),\n                startColumn: range.start + 1,\n                endColumn: range.end + 1\n            });\n        }\n        return words;\n    }\n    _wordenize(content, wordDefinition) {\n        const result = [];\n        let match;\n        wordDefinition.lastIndex = 0; // reset lastIndex just to be sure\n        while (match = wordDefinition.exec(content)) {\n            if (match[0].length === 0) {\n                // it did match the empty string\n                break;\n            }\n            result.push({ start: match.index, end: match.index + match[0].length });\n        }\n        return result;\n    }\n    getValueInRange(range) {\n        range = this._validateRange(range);\n        if (range.startLineNumber === range.endLineNumber) {\n            return this._lines[range.startLineNumber - 1].substring(range.startColumn - 1, range.endColumn - 1);\n        }\n        const lineEnding = this._eol;\n        const startLineIndex = range.startLineNumber - 1;\n        const endLineIndex = range.endLineNumber - 1;\n        const resultLines = [];\n        resultLines.push(this._lines[startLineIndex].substring(range.startColumn - 1));\n        for (let i = startLineIndex + 1; i < endLineIndex; i++) {\n            resultLines.push(this._lines[i]);\n        }\n        resultLines.push(this._lines[endLineIndex].substring(0, range.endColumn - 1));\n        return resultLines.join(lineEnding);\n    }\n    offsetAt(position) {\n        position = this._validatePosition(position);\n        this._ensureLineStarts();\n        return this._lineStarts.getPrefixSum(position.lineNumber - 2) + (position.column - 1);\n    }\n    positionAt(offset) {\n        offset = Math.floor(offset);\n        offset = Math.max(0, offset);\n        this._ensureLineStarts();\n        const out = this._lineStarts.getIndexOf(offset);\n        const lineLength = this._lines[out.index].length;\n        // Ensure we return a valid position\n        return {\n            lineNumber: 1 + out.index,\n            column: 1 + Math.min(out.remainder, lineLength)\n        };\n    }\n    _validateRange(range) {\n        const start = this._validatePosition({ lineNumber: range.startLineNumber, column: range.startColumn });\n        const end = this._validatePosition({ lineNumber: range.endLineNumber, column: range.endColumn });\n        if (start.lineNumber !== range.startLineNumber\n            || start.column !== range.startColumn\n            || end.lineNumber !== range.endLineNumber\n            || end.column !== range.endColumn) {\n            return {\n                startLineNumber: start.lineNumber,\n                startColumn: start.column,\n                endLineNumber: end.lineNumber,\n                endColumn: end.column\n            };\n        }\n        return range;\n    }\n    _validatePosition(position) {\n        if (!Position.isIPosition(position)) {\n            throw new Error('bad position');\n        }\n        let { lineNumber, column } = position;\n        let hasChanged = false;\n        if (lineNumber < 1) {\n            lineNumber = 1;\n            column = 1;\n            hasChanged = true;\n        }\n        else if (lineNumber > this._lines.length) {\n            lineNumber = this._lines.length;\n            column = this._lines[lineNumber - 1].length + 1;\n            hasChanged = true;\n        }\n        else {\n            const maxCharacter = this._lines[lineNumber - 1].length + 1;\n            if (column < 1) {\n                column = 1;\n                hasChanged = true;\n            }\n            else if (column > maxCharacter) {\n                column = maxCharacter;\n                hasChanged = true;\n            }\n        }\n        if (!hasChanged) {\n            return position;\n        }\n        else {\n            return { lineNumber, column };\n        }\n    }\n}\n/**\n * @internal\n */\nexport class EditorSimpleWorker {\n    constructor(host, foreignModuleFactory) {\n        this._host = host;\n        this._models = Object.create(null);\n        this._foreignModuleFactory = foreignModuleFactory;\n        this._foreignModule = null;\n    }\n    dispose() {\n        this._models = Object.create(null);\n    }\n    _getModel(uri) {\n        return this._models[uri];\n    }\n    _getModels() {\n        const all = [];\n        Object.keys(this._models).forEach((key) => all.push(this._models[key]));\n        return all;\n    }\n    acceptNewModel(data) {\n        this._models[data.url] = new MirrorModel(URI.parse(data.url), data.lines, data.EOL, data.versionId);\n    }\n    acceptModelChanged(strURL, e) {\n        if (!this._models[strURL]) {\n            return;\n        }\n        const model = this._models[strURL];\n        model.onEvents(e);\n    }\n    acceptRemovedModel(strURL) {\n        if (!this._models[strURL]) {\n            return;\n        }\n        delete this._models[strURL];\n    }\n    computeUnicodeHighlights(url, options, range) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const model = this._getModel(url);\n            if (!model) {\n                return { ranges: [], hasMore: false, ambiguousCharacterCount: 0, invisibleCharacterCount: 0, nonBasicAsciiCharacterCount: 0 };\n            }\n            return UnicodeTextModelHighlighter.computeUnicodeHighlights(model, options, range);\n        });\n    }\n    // ---- BEGIN diff --------------------------------------------------------------------------\n    computeDiff(originalUrl, modifiedUrl, ignoreTrimWhitespace, maxComputationTime) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const original = this._getModel(originalUrl);\n            const modified = this._getModel(modifiedUrl);\n            if (!original || !modified) {\n                return null;\n            }\n            return EditorSimpleWorker.computeDiff(original, modified, ignoreTrimWhitespace, maxComputationTime);\n        });\n    }\n    static computeDiff(originalTextModel, modifiedTextModel, ignoreTrimWhitespace, maxComputationTime) {\n        const originalLines = originalTextModel.getLinesContent();\n        const modifiedLines = modifiedTextModel.getLinesContent();\n        const diffComputer = new DiffComputer(originalLines, modifiedLines, {\n            shouldComputeCharChanges: true,\n            shouldPostProcessCharChanges: true,\n            shouldIgnoreTrimWhitespace: ignoreTrimWhitespace,\n            shouldMakePrettyDiff: true,\n            maxComputationTime: maxComputationTime\n        });\n        const diffResult = diffComputer.computeDiff();\n        const identical = (diffResult.changes.length > 0 ? false : this._modelsAreIdentical(originalTextModel, modifiedTextModel));\n        return {\n            quitEarly: diffResult.quitEarly,\n            identical: identical,\n            changes: diffResult.changes\n        };\n    }\n    static _modelsAreIdentical(original, modified) {\n        const originalLineCount = original.getLineCount();\n        const modifiedLineCount = modified.getLineCount();\n        if (originalLineCount !== modifiedLineCount) {\n            return false;\n        }\n        for (let line = 1; line <= originalLineCount; line++) {\n            const originalLine = original.getLineContent(line);\n            const modifiedLine = modified.getLineContent(line);\n            if (originalLine !== modifiedLine) {\n                return false;\n            }\n        }\n        return true;\n    }\n    computeMoreMinimalEdits(modelUrl, edits) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const model = this._getModel(modelUrl);\n            if (!model) {\n                return edits;\n            }\n            const result = [];\n            let lastEol = undefined;\n            edits = edits.slice(0).sort((a, b) => {\n                if (a.range && b.range) {\n                    return Range.compareRangesUsingStarts(a.range, b.range);\n                }\n                // eol only changes should go to the end\n                const aRng = a.range ? 0 : 1;\n                const bRng = b.range ? 0 : 1;\n                return aRng - bRng;\n            });\n            for (let { range, text, eol } of edits) {\n                if (typeof eol === 'number') {\n                    lastEol = eol;\n                }\n                if (Range.isEmpty(range) && !text) {\n                    // empty change\n                    continue;\n                }\n                const original = model.getValueInRange(range);\n                text = text.replace(/\\r\\n|\\n|\\r/g, model.eol);\n                if (original === text) {\n                    // noop\n                    continue;\n                }\n                // make sure diff won't take too long\n                if (Math.max(text.length, original.length) > EditorSimpleWorker._diffLimit) {\n                    result.push({ range, text });\n                    continue;\n                }\n                // compute diff between original and edit.text\n                const changes = stringDiff(original, text, false);\n                const editOffset = model.offsetAt(Range.lift(range).getStartPosition());\n                for (const change of changes) {\n                    const start = model.positionAt(editOffset + change.originalStart);\n                    const end = model.positionAt(editOffset + change.originalStart + change.originalLength);\n                    const newEdit = {\n                        text: text.substr(change.modifiedStart, change.modifiedLength),\n                        range: { startLineNumber: start.lineNumber, startColumn: start.column, endLineNumber: end.lineNumber, endColumn: end.column }\n                    };\n                    if (model.getValueInRange(newEdit.range) !== newEdit.text) {\n                        result.push(newEdit);\n                    }\n                }\n            }\n            if (typeof lastEol === 'number') {\n                result.push({ eol: lastEol, text: '', range: { startLineNumber: 0, startColumn: 0, endLineNumber: 0, endColumn: 0 } });\n            }\n            return result;\n        });\n    }\n    // ---- END minimal edits ---------------------------------------------------------------\n    computeLinks(modelUrl) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const model = this._getModel(modelUrl);\n            if (!model) {\n                return null;\n            }\n            return computeLinks(model);\n        });\n    }\n    textualSuggest(modelUrls, leadingWord, wordDef, wordDefFlags) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const sw = new StopWatch(true);\n            const wordDefRegExp = new RegExp(wordDef, wordDefFlags);\n            const seen = new Set();\n            outer: for (const url of modelUrls) {\n                const model = this._getModel(url);\n                if (!model) {\n                    continue;\n                }\n                for (const word of model.words(wordDefRegExp)) {\n                    if (word === leadingWord || !isNaN(Number(word))) {\n                        continue;\n                    }\n                    seen.add(word);\n                    if (seen.size > EditorSimpleWorker._suggestionsLimit) {\n                        break outer;\n                    }\n                }\n            }\n            return { words: Array.from(seen), duration: sw.elapsed() };\n        });\n    }\n    // ---- END suggest --------------------------------------------------------------------------\n    //#region -- word ranges --\n    computeWordRanges(modelUrl, range, wordDef, wordDefFlags) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const model = this._getModel(modelUrl);\n            if (!model) {\n                return Object.create(null);\n            }\n            const wordDefRegExp = new RegExp(wordDef, wordDefFlags);\n            const result = Object.create(null);\n            for (let line = range.startLineNumber; line < range.endLineNumber; line++) {\n                const words = model.getLineWords(line, wordDefRegExp);\n                for (const word of words) {\n                    if (!isNaN(Number(word.word))) {\n                        continue;\n                    }\n                    let array = result[word.word];\n                    if (!array) {\n                        array = [];\n                        result[word.word] = array;\n                    }\n                    array.push({\n                        startLineNumber: line,\n                        startColumn: word.startColumn,\n                        endLineNumber: line,\n                        endColumn: word.endColumn\n                    });\n                }\n            }\n            return result;\n        });\n    }\n    //#endregion\n    navigateValueSet(modelUrl, range, up, wordDef, wordDefFlags) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const model = this._getModel(modelUrl);\n            if (!model) {\n                return null;\n            }\n            const wordDefRegExp = new RegExp(wordDef, wordDefFlags);\n            if (range.startColumn === range.endColumn) {\n                range = {\n                    startLineNumber: range.startLineNumber,\n                    startColumn: range.startColumn,\n                    endLineNumber: range.endLineNumber,\n                    endColumn: range.endColumn + 1\n                };\n            }\n            const selectionText = model.getValueInRange(range);\n            const wordRange = model.getWordAtPosition({ lineNumber: range.startLineNumber, column: range.startColumn }, wordDefRegExp);\n            if (!wordRange) {\n                return null;\n            }\n            const word = model.getValueInRange(wordRange);\n            const result = BasicInplaceReplace.INSTANCE.navigateValueSet(range, selectionText, wordRange, word, up);\n            return result;\n        });\n    }\n    // ---- BEGIN foreign module support --------------------------------------------------------------------------\n    loadForeignModule(moduleId, createData, foreignHostMethods) {\n        const proxyMethodRequest = (method, args) => {\n            return this._host.fhr(method, args);\n        };\n        const foreignHost = types.createProxyObject(foreignHostMethods, proxyMethodRequest);\n        const ctx = {\n            host: foreignHost,\n            getMirrorModels: () => {\n                return this._getModels();\n            }\n        };\n        if (this._foreignModuleFactory) {\n            this._foreignModule = this._foreignModuleFactory(ctx, createData);\n            // static foreing module\n            return Promise.resolve(types.getAllMethodNames(this._foreignModule));\n        }\n        // ESM-comment-begin\n        // \t\treturn new Promise<any>((resolve, reject) => {\n        // \t\t\trequire([moduleId], (foreignModule: { create: IForeignModuleFactory }) => {\n        // \t\t\t\tthis._foreignModule = foreignModule.create(ctx, createData);\n        // \n        // \t\t\t\tresolve(types.getAllMethodNames(this._foreignModule));\n        // \n        // \t\t\t}, reject);\n        // \t\t});\n        // ESM-comment-end\n        // ESM-uncomment-begin\n        return Promise.reject(new Error(`Unexpected usage`));\n        // ESM-uncomment-end\n    }\n    // foreign method request\n    fmr(method, args) {\n        if (!this._foreignModule || typeof this._foreignModule[method] !== 'function') {\n            return Promise.reject(new Error('Missing requestHandler or method: ' + method));\n        }\n        try {\n            return Promise.resolve(this._foreignModule[method].apply(this._foreignModule, args));\n        }\n        catch (e) {\n            return Promise.reject(e);\n        }\n    }\n}\n// ---- END diff --------------------------------------------------------------------------\n// ---- BEGIN minimal edits ---------------------------------------------------------------\nEditorSimpleWorker._diffLimit = 100000;\n// ---- BEGIN suggest --------------------------------------------------------------------------\nEditorSimpleWorker._suggestionsLimit = 10000;\n/**\n * Called on the worker side\n * @internal\n */\nexport function create(host) {\n    return new EditorSimpleWorker(host, null);\n}\nif (typeof importScripts === 'function') {\n    // Running in a web worker\n    globals.monaco = createMonacoBaseAPI();\n}\n"],"mappings":"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"}]}