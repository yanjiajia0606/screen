{"remainingRequest":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yanjiajia/Desktop/workspace/avue-data-new/src/page/list/db.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/src/page/list/db.vue","mtime":1668271197000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CmltcG9ydCB7IGdldExpc3QsIGdldERldGFpbCwgYWRkLCB1cGRhdGUsIHJlbW92ZSwgZGJUZXN0IH0gZnJvbSAiQC9hcGkvZGIiOwpleHBvcnQgZGVmYXVsdCB7CiAgZGF0YSAoKSB7CiAgICByZXR1cm4gewogICAgICBmb3JtOiB7fSwKICAgICAgcXVlcnk6IHt9LAogICAgICBwYWdlOiB7CiAgICAgICAgcGFnZVNpemU6IDEwLAogICAgICAgIGN1cnJlbnRQYWdlOiAxLAogICAgICAgIHRvdGFsOiAwCiAgICAgIH0sCiAgICAgIG9wdGlvbjogewogICAgICAgIGluZGV4OiB0cnVlLAogICAgICAgIGNvcHlCdG46IHRydWUsCiAgICAgICAgbGFiZWxXaWR0aDogMTEwLAogICAgICAgIGNvbHVtbjogWwogICAgICAgICAgewogICAgICAgICAgICBsYWJlbDogIuWQjeensCIsCiAgICAgICAgICAgIHByb3A6ICJuYW1lIiwKICAgICAgICAgICAgd2lkdGg6IDEyMCwKICAgICAgICAgICAgcnVsZXM6IFt7CiAgICAgICAgICAgICAgcmVxdWlyZWQ6IHRydWUsCiAgICAgICAgICAgICAgbWVzc2FnZTogIuivt+i+k+WFpeaVsOaNrua6kOWQjeensCIsCiAgICAgICAgICAgICAgdHJpZ2dlcjogImJsdXIiCiAgICAgICAgICAgIH1dCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICBsYWJlbDogIumpseWKqOexuyIsCiAgICAgICAgICAgIHByb3A6ICJkcml2ZXJDbGFzcyIsCiAgICAgICAgICAgIHR5cGU6ICdzZWxlY3QnLAogICAgICAgICAgICBkaWNEYXRhOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgbGFiZWw6ICdjb20ubXlzcWwuY2ouamRiYy5Ecml2ZXInLAogICAgICAgICAgICAgICAgdmFsdWU6ICdjb20ubXlzcWwuY2ouamRiYy5Ecml2ZXInLAogICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgIGxhYmVsOiAnb3JnLnBvc3RncmVzcWwuRHJpdmVyJywKICAgICAgICAgICAgICAgIHZhbHVlOiAnb3JnLnBvc3RncmVzcWwuRHJpdmVyJywKICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICBsYWJlbDogJ29yYWNsZS5qZGJjLk9yYWNsZURyaXZlcicsCiAgICAgICAgICAgICAgICB2YWx1ZTogJ29yYWNsZS5qZGJjLk9yYWNsZURyaXZlcicsCiAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgbGFiZWw6ICdjb20ubWljcm9zb2Z0LnNxbHNlcnZlci5qZGJjLlNRTFNlcnZlckRyaXZlcicsCiAgICAgICAgICAgICAgICB2YWx1ZTogJ2NvbS5taWNyb3NvZnQuc3Fsc2VydmVyLmpkYmMuU1FMU2VydmVyRHJpdmVyJwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXSwKICAgICAgICAgICAgd2lkdGg6IDIwMCwKICAgICAgICAgICAgcnVsZXM6IFt7CiAgICAgICAgICAgICAgcmVxdWlyZWQ6IHRydWUsCiAgICAgICAgICAgICAgbWVzc2FnZTogIuivt+i+k+WFpempseWKqOexuyIsCiAgICAgICAgICAgICAgdHJpZ2dlcjogImJsdXIiCiAgICAgICAgICAgIH1dCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICBsYWJlbDogIueUqOaIt+WQjSIsCiAgICAgICAgICAgIHByb3A6ICJ1c2VybmFtZSIsCiAgICAgICAgICAgIHdpZHRoOiAxMjAsCiAgICAgICAgICAgIHJ1bGVzOiBbewogICAgICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLAogICAgICAgICAgICAgIG1lc3NhZ2U6ICLor7fovpPlhaXnlKjmiLflkI0iLAogICAgICAgICAgICAgIHRyaWdnZXI6ICJibHVyIgogICAgICAgICAgICB9XQogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgbGFiZWw6ICLlr4bnoIEiLAogICAgICAgICAgICBwcm9wOiAicGFzc3dvcmQiLAogICAgICAgICAgICB0eXBlOiAncGFzc3dvcmQnLAogICAgICAgICAgICBoaWRlOiB0cnVlLAogICAgICAgICAgICBydWxlczogW3sKICAgICAgICAgICAgICByZXF1aXJlZDogdHJ1ZSwKICAgICAgICAgICAgICBtZXNzYWdlOiAi6K+36L6T5YWl5a+G56CBIiwKICAgICAgICAgICAgICB0cmlnZ2VyOiAiYmx1ciIKICAgICAgICAgICAgfV0KICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgIGxhYmVsOiAi6L+e5o6l5Zyw5Z2AIiwKICAgICAgICAgICAgcHJvcDogInVybCIsCiAgICAgICAgICAgIHR5cGU6ICd0ZXh0YXJlYScsCiAgICAgICAgICAgIHNwYW46IDI0LAogICAgICAgICAgICBydWxlczogW3sKICAgICAgICAgICAgICByZXF1aXJlZDogdHJ1ZSwKICAgICAgICAgICAgICBtZXNzYWdlOiAi6K+36L6T5YWl6L+e5o6l5Zyw5Z2AIiwKICAgICAgICAgICAgICB0cmlnZ2VyOiAiYmx1ciIKICAgICAgICAgICAgfV0KICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgIGxhYmVsOiAi5aSH5rOoIiwKICAgICAgICAgICAgcHJvcDogInJlbWFyayIsCiAgICAgICAgICAgIHNwYW46IDI0LAogICAgICAgICAgICBtaW5Sb3dzOiAzLAogICAgICAgICAgICBoaWRlOiB0cnVlLAogICAgICAgICAgICB0eXBlOiAidGV4dGFyZWEiCiAgICAgICAgICB9LAogICAgICAgIF0KICAgICAgfSwKICAgICAgZGF0YTogW10KICAgIH07CiAgfSwKICBtZXRob2RzOiB7CiAgICB2YWlsZERhdGEgKGlkKSB7CiAgICAgIHJldHVybiBbMCwgMSwgMiwgM10uaW5jbHVkZXMoaWQpCiAgICB9LAogICAgcm93U2F2ZSAocm93LCBkb25lLCBsb2FkaW5nKSB7CiAgICAgIGFkZChyb3cpLnRoZW4oKCkgPT4gewogICAgICAgIHRoaXMub25Mb2FkKCk7CiAgICAgICAgdGhpcy4kbWVzc2FnZSh7CiAgICAgICAgICB0eXBlOiAic3VjY2VzcyIsCiAgICAgICAgICBtZXNzYWdlOiAi5pON5L2c5oiQ5YqfISIKICAgICAgICB9KTsKICAgICAgICBkb25lKCk7CiAgICAgIH0sIGVycm9yID0+IHsKICAgICAgICB3aW5kb3cuY29uc29sZS5sb2coZXJyb3IpOwogICAgICAgIGxvYWRpbmcoKTsKICAgICAgfSk7CiAgICB9LAogICAgcm93VXBkYXRlIChyb3csIGluZGV4LCBkb25lLCBsb2FkaW5nKSB7CiAgICAgIGlmICh0aGlzLnZhaWxkRGF0YShpbmRleCkgJiYgdGhpcy4kd2Vic2l0ZS5pc0RlbW8pIHsKICAgICAgICB0aGlzLiRtZXNzYWdlLmVycm9yKHRoaXMuJHdlYnNpdGUuaXNEZW1vVGlwKQogICAgICAgIGRvbmUoKTsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KICAgICAgdXBkYXRlKHJvdykudGhlbigoKSA9PiB7CiAgICAgICAgZG9uZSgpOwogICAgICAgIHRoaXMub25Mb2FkKCk7CiAgICAgICAgdGhpcy4kbWVzc2FnZSh7CiAgICAgICAgICB0eXBlOiAic3VjY2VzcyIsCiAgICAgICAgICBtZXNzYWdlOiAi5pON5L2c5oiQ5YqfISIKICAgICAgICB9KTsKICAgICAgfSwgZXJyb3IgPT4gewogICAgICAgIHdpbmRvdy5jb25zb2xlLmxvZyhlcnJvcik7CiAgICAgICAgbG9hZGluZygpOwogICAgICB9KTsKICAgIH0sCiAgICByb3dEZWwgKHJvdywgaW5kZXgpIHsKICAgICAgaWYgKHRoaXMudmFpbGREYXRhKGluZGV4KSAmJiB0aGlzLiR3ZWJzaXRlLmlzRGVtbykgewogICAgICAgIHRoaXMuJG1lc3NhZ2UuZXJyb3IodGhpcy4kd2Vic2l0ZS5pc0RlbW9UaXApCiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CiAgICAgIHRoaXMuJGNvbmZpcm0oIuehruWumuWwhumAieaLqeaVsOaNruWIoOmZpD8iLCB7CiAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6ICLnoa7lrpoiLAogICAgICAgIGNhbmNlbEJ1dHRvblRleHQ6ICLlj5bmtogiLAogICAgICAgIHR5cGU6ICJ3YXJuaW5nIgogICAgICB9KQogICAgICAgIC50aGVuKCgpID0+IHsKICAgICAgICAgIHJldHVybiByZW1vdmUocm93LmlkKTsKICAgICAgICB9KQogICAgICAgIC50aGVuKCgpID0+IHsKICAgICAgICAgIHRoaXMub25Mb2FkKCk7CiAgICAgICAgICB0aGlzLiRtZXNzYWdlKHsKICAgICAgICAgICAgdHlwZTogInN1Y2Nlc3MiLAogICAgICAgICAgICBtZXNzYWdlOiAi5pON5L2c5oiQ5YqfISIKICAgICAgICAgIH0pOwogICAgICAgIH0pOwoKICAgIH0sCiAgICBiZWZvcmVPcGVuIChkb25lLCB0eXBlKSB7CiAgICAgIGlmIChbImVkaXQiLCAidmlldyJdLmluY2x1ZGVzKHR5cGUpKSB7CiAgICAgICAgZ2V0RGV0YWlsKHRoaXMuZm9ybS5pZCkudGhlbihyZXMgPT4gewogICAgICAgICAgdGhpcy5mb3JtID0gcmVzLmRhdGEuZGF0YTsKICAgICAgICB9KTsKICAgICAgfQogICAgICBkb25lKCk7CiAgICB9LAogICAgcmVmcmVzaENoYW5nZSAoKSB7CiAgICAgIHRoaXMub25Mb2FkKCk7CiAgICB9LAogICAgaGFuZGxlVGVzdCAoZm9ybSkgewogICAgICBmb3JtID0gZm9ybSB8fCB0aGlzLmZvcm0KICAgICAgZGJUZXN0KHsKICAgICAgICBkcml2ZXJDbGFzczogZm9ybS5kcml2ZXJDbGFzcywKICAgICAgICB1cmw6IGZvcm0udXJsLAogICAgICAgIHVzZXJuYW1lOiBmb3JtLnVzZXJuYW1lLAogICAgICAgIHBhc3N3b3JkOiBmb3JtLnBhc3N3b3JkCiAgICAgIH0pLnRoZW4ocmVzID0+IHsKICAgICAgICBjb25zdCBkYXRhID0gcmVzLmRhdGE7CiAgICAgICAgaWYgKGRhdGEuc3VjY2VzcykgewogICAgICAgICAgdGhpcy4kbWVzc2FnZS5zdWNjZXNzKCfov57mjqXmiJDlip8nKQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB0aGlzLiRtZXNzYWdlLmVycm9yKCfov57mjqXlpLHotKXvvIzor7fmo4Dmn6Xnm7jlhbPphY3nva7lj4LmlbAnKQogICAgICAgIH0KICAgICAgfSkKICAgIH0sCiAgICBvbkxvYWQgKCkgewogICAgICBnZXRMaXN0KHsKICAgICAgICBjdXJyZW50OiB0aGlzLnBhZ2UuY3VycmVudFBhZ2UsCiAgICAgICAgc2l6ZTogdGhpcy5wYWdlLnBhZ2VTaXplLAogICAgICB9KS50aGVuKHJlcyA9PiB7CiAgICAgICAgY29uc3QgZGF0YSA9IHJlcy5kYXRhLmRhdGE7CiAgICAgICAgdGhpcy5wYWdlLnRvdGFsID0gZGF0YS50b3RhbDsKICAgICAgICB0aGlzLmRhdGEgPSBkYXRhLnJlY29yZHM7CiAgICAgIH0pOwogICAgfQogIH0KfTsK"},{"version":3,"sources":["db.vue"],"names":[],"mappingsfile":"db.vue","sourceRoot":"src/page/list","sourcesContent":["<template>\n  <avue-crud :option=\"option\"\n             :data=\"data\"\n             :page.sync=\"page\"\n             :before-open=\"beforeOpen\"\n             v-model=\"form\"\n             ref=\"crud\"\n             @row-update=\"rowUpdate\"\n             @row-save=\"rowSave\"\n             @row-del=\"rowDel\"\n             @refresh-change=\"refreshChange\"\n             @on-load=\"onLoad\">\n    <template slot=\"menuForm\">\n      <el-button type=\"primary\"\n                 size=\"small\"\n                 @click=\"handleTest()\">测试连接</el-button>\n    </template>\n    <template slot=\"menu\"\n              slot-scope=\"{row,size,type}\">\n      <el-button icon=\"el-icon-check\"\n                 :size=\"size\"\n                 :type=\"type\"\n                 @click=\"handleTest(row)\">测试连接</el-button>\n    </template>\n  </avue-crud>\n</template>\n\n<script>\nimport { getList, getDetail, add, update, remove, dbTest } from \"@/api/db\";\nexport default {\n  data () {\n    return {\n      form: {},\n      query: {},\n      page: {\n        pageSize: 10,\n        currentPage: 1,\n        total: 0\n      },\n      option: {\n        index: true,\n        copyBtn: true,\n        labelWidth: 110,\n        column: [\n          {\n            label: \"名称\",\n            prop: \"name\",\n            width: 120,\n            rules: [{\n              required: true,\n              message: \"请输入数据源名称\",\n              trigger: \"blur\"\n            }]\n          },\n          {\n            label: \"驱动类\",\n            prop: \"driverClass\",\n            type: 'select',\n            dicData: [\n              {\n                label: 'com.mysql.cj.jdbc.Driver',\n                value: 'com.mysql.cj.jdbc.Driver',\n              }, {\n                label: 'org.postgresql.Driver',\n                value: 'org.postgresql.Driver',\n              }, {\n                label: 'oracle.jdbc.OracleDriver',\n                value: 'oracle.jdbc.OracleDriver',\n              }, {\n                label: 'com.microsoft.sqlserver.jdbc.SQLServerDriver',\n                value: 'com.microsoft.sqlserver.jdbc.SQLServerDriver'\n              }\n            ],\n            width: 200,\n            rules: [{\n              required: true,\n              message: \"请输入驱动类\",\n              trigger: \"blur\"\n            }]\n          },\n          {\n            label: \"用户名\",\n            prop: \"username\",\n            width: 120,\n            rules: [{\n              required: true,\n              message: \"请输入用户名\",\n              trigger: \"blur\"\n            }]\n          },\n          {\n            label: \"密码\",\n            prop: \"password\",\n            type: 'password',\n            hide: true,\n            rules: [{\n              required: true,\n              message: \"请输入密码\",\n              trigger: \"blur\"\n            }]\n          },\n          {\n            label: \"连接地址\",\n            prop: \"url\",\n            type: 'textarea',\n            span: 24,\n            rules: [{\n              required: true,\n              message: \"请输入连接地址\",\n              trigger: \"blur\"\n            }]\n          },\n          {\n            label: \"备注\",\n            prop: \"remark\",\n            span: 24,\n            minRows: 3,\n            hide: true,\n            type: \"textarea\"\n          },\n        ]\n      },\n      data: []\n    };\n  },\n  methods: {\n    vaildData (id) {\n      return [0, 1, 2, 3].includes(id)\n    },\n    rowSave (row, done, loading) {\n      add(row).then(() => {\n        this.onLoad();\n        this.$message({\n          type: \"success\",\n          message: \"操作成功!\"\n        });\n        done();\n      }, error => {\n        window.console.log(error);\n        loading();\n      });\n    },\n    rowUpdate (row, index, done, loading) {\n      if (this.vaildData(index) && this.$website.isDemo) {\n        this.$message.error(this.$website.isDemoTip)\n        done();\n        return false;\n      }\n      update(row).then(() => {\n        done();\n        this.onLoad();\n        this.$message({\n          type: \"success\",\n          message: \"操作成功!\"\n        });\n      }, error => {\n        window.console.log(error);\n        loading();\n      });\n    },\n    rowDel (row, index) {\n      if (this.vaildData(index) && this.$website.isDemo) {\n        this.$message.error(this.$website.isDemoTip)\n        return false;\n      }\n      this.$confirm(\"确定将选择数据删除?\", {\n        confirmButtonText: \"确定\",\n        cancelButtonText: \"取消\",\n        type: \"warning\"\n      })\n        .then(() => {\n          return remove(row.id);\n        })\n        .then(() => {\n          this.onLoad();\n          this.$message({\n            type: \"success\",\n            message: \"操作成功!\"\n          });\n        });\n\n    },\n    beforeOpen (done, type) {\n      if ([\"edit\", \"view\"].includes(type)) {\n        getDetail(this.form.id).then(res => {\n          this.form = res.data.data;\n        });\n      }\n      done();\n    },\n    refreshChange () {\n      this.onLoad();\n    },\n    handleTest (form) {\n      form = form || this.form\n      dbTest({\n        driverClass: form.driverClass,\n        url: form.url,\n        username: form.username,\n        password: form.password\n      }).then(res => {\n        const data = res.data;\n        if (data.success) {\n          this.$message.success('连接成功')\n        } else {\n          this.$message.error('连接失败，请检查相关配置参数')\n        }\n      })\n    },\n    onLoad () {\n      getList({\n        current: this.page.currentPage,\n        size: this.page.pageSize,\n      }).then(res => {\n        const data = res.data.data;\n        this.page.total = data.total;\n        this.data = data.records;\n      });\n    }\n  }\n};\n</script>\n\n<style>\n</style>"]}]}