{"remainingRequest":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yanjiajia/Desktop/workspace/avue-data-new/src/page/group/contentmenu.vue?vue&type=style&index=0&id=75427d3e&lang=css&","dependencies":[{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/src/page/group/contentmenu.vue","mtime":1668271197000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yanjiajia/Desktop/workspace/avue-data-new/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5jb250ZW50bWVudSB7CiAgd2lkdGg6IDE4MHB4OwogIGRpc3BsYXk6IG5vbmU7CiAgei1pbmRleDogOTk5OTk7CiAgbGlzdC1zdHlsZTogbm9uZTsKICBib3gtc2hhZG93OiAwIDJweCA2cHggcmdiYSgwLCAwLCAwLCAwLjEpOwogIHBhZGRpbmc6IDA7CiAgYmFja2dyb3VuZDogIzIzMjMyNDsKICBvdmVyZmxvdzogaGlkZGVuOwogIGNvbG9yOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuODIpOwogIGJvcmRlci1yYWRpdXM6IDEwcHg7Cn0KLmNvbnRlbnRtZW51X19pdGVtIHsKICB6LWluZGV4OiAxMDAwMDsKICBsaXN0LXN0eWxlOiBub25lOwogIHBhZGRpbmc6IDZweCAxMnB4OwogIGN1cnNvcjogcG9pbnRlcjsKICBwb3NpdGlvbjogcmVsYXRpdmU7CiAgZm9udC1zaXplOiAxNHB4Owp9Ci5jb250ZW50bWVudV9faXRlbTpob3ZlciB7CiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAxOTIsIDIyMiwgMC4xKTsKfQouY29udGVudG1lbnVfX2l0ZW0gaSB7CiAgbWFyZ2luLXJpZ2h0OiA1cHg7Cn0KLmNvbnRlbnRtZW51X19pdGVtIDpmaXJzdC1jaGlsZCB7CiAgcGFkZGluZy10b3A6IDVweDsKfQo="},{"version":3,"sources":["contentmenu.vue"],"names":[],"mappings":";AAgJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"contentmenu.vue","sourceRoot":"src/page/group","sourcesContent":["<template>\n  <div class=\"contentmenu\"\n       id=\"avue-data-menu\">\n    <div class=\"contentmenu__item\"\n         @click=\"handleLock()\"> <i class=\"el-icon-lock\"></i>\n      {{contain.activeObj.lock?'解锁':'锁定'}}\n    </div>\n    <div class=\"contentmenu__item\"\n         @click=\"contain.isFolder?handleLogout():handleCompose()\"> <i class=\"el-icon-document-copy\"></i>\n      {{contain.isFolder?'解散':'组合'}}\n    </div>\n    <div class=\"contentmenu__item\"\n         @click=\"handleDel()\"> <i class=\"el-icon-delete\"></i>\n      删除\n    </div>\n    <div class=\"contentmenu__item\"\n         @click=\"handleCopy()\"><i class=\"el-icon-money\"></i>\n      复制\n    </div>\n    <div class=\"contentmenu__item\"\n         @click=\"handleTop()\"><i class=\"el-icon-arrow-up\"></i>置顶\n    </div>\n    <div class=\"contentmenu__item\"\n         @click=\"handleBottom()\"><i class=\"el-icon-arrow-down\"></i>置底\n    </div>\n    <div class=\"contentmenu__item\"\n         @click=\"handleStepTop()\"><i class=\"el-icon-arrow-up\"></i>上移\n    </div>\n    <div class=\"contentmenu__item\"\n         @click=\"handleStepBottom()\"><i class=\"el-icon-arrow-down\"></i>下移\n    </div>\n  </div>\n</template>\n\n<script>\nimport { createFile, uuid } from '@/utils/utils'\nexport default {\n  name: 'contentmenu',\n  inject: [\"contain\"],\n  methods: {\n    handleStepBottom () {\n      this.handleCommon(false, true);\n    },\n    handleStepTop () {\n      this.handleCommon(true, true);\n    },\n    //文件夹成组逻辑\n    handleCompose () {\n      this.$confirm(`是否组合所选择的图层?`, '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        let folder = createFile()\n        this.contain.active.forEach(ele => {\n          let { itemList, itemIndex } = this.contain.findnav(ele);\n          let obj = itemList.splice(itemIndex, 1)[0];\n          folder.children.push(obj);\n        });\n        this.contain.nav.unshift(folder);\n        this.contain.handleInitActive();\n      }).catch(() => { })\n    },\n    //文件夹解散逻辑\n    handleLogout () {\n      let ele = this.contain.activeObj\n      this.$confirm(`是否解散${ele.name}图层?`, '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        let { itemList, itemIndex } = this.contain.findnav(ele.index);\n        const list = this.deepClone(ele.children)\n        itemList.splice(itemIndex, 1);\n        list.forEach(item => itemList.push(item));\n        this.contain.handleInitActive();\n      }).catch(() => { })\n    },\n    //删除组件的方法\n    handleDel () {\n      this.$confirm(`是否删除所选图层?`, '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        this.contain.active.forEach(ele => {\n          const { itemList, itemIndex } = this.contain.findnav(ele);\n          itemList.splice(itemIndex, 1);\n        });\n        this.contain.handleInitActive();\n      }).catch(() => { })\n    },\n    //复制组件的方法\n    handleCopy () {\n      //寻找父类\n      this.contain.active.forEach(ele => {\n        const { item, itemList } = this.contain.findnav(ele);\n        let obj = this.deepClone(item);\n        let index = uuid();\n        obj.name = obj.name + '（复制）'\n        obj.index = index;\n        if (obj.children) {\n          obj.menu = false\n          obj.children.forEach(ele => ele.index = uuid())\n        }\n        itemList.unshift(obj)\n      });\n      this.contain.handleInitActive();\n    },\n    // 图层的上下移动方法 \n    handleCommon (top = false, step = false) {\n      this.contain.active.forEach(ele => {\n        let { itemList, itemIndex } = this.contain.findnav(ele);\n        let obj = itemList.splice(itemIndex, 1)[0];\n        if (step) {\n          itemList.splice(top ? (itemIndex - 1) : (itemIndex + 1), 0, obj)\n        } else {\n          itemList[top ? 'unshift' : 'push'](obj)\n        }\n      })\n    },\n    handleTop () {\n      this.handleCommon(true);\n    },\n    handleBottom () {\n      this.handleCommon();\n    },\n    handleLock () {\n      this.contain.active.forEach(ele => {\n        let { item } = this.contain.findnav(ele)\n        item.lock = !item.lock;\n        if (item.children) {\n          item.children.forEach(e => {\n            e.lock = item.lock\n          })\n        }\n      })\n      this.contain.active = []\n    }\n  }\n}\n</script>\n\n<style>\n.contentmenu {\n  width: 180px;\n  display: none;\n  z-index: 99999;\n  list-style: none;\n  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);\n  padding: 0;\n  background: #232324;\n  overflow: hidden;\n  color: rgba(255, 255, 255, 0.82);\n  border-radius: 10px;\n}\n.contentmenu__item {\n  z-index: 10000;\n  list-style: none;\n  padding: 6px 12px;\n  cursor: pointer;\n  position: relative;\n  font-size: 14px;\n}\n.contentmenu__item:hover {\n  background-color: rgba(0, 192, 222, 0.1);\n}\n.contentmenu__item i {\n  margin-right: 5px;\n}\n.contentmenu__item :first-child {\n  padding-top: 5px;\n}\n</style>"]}]}